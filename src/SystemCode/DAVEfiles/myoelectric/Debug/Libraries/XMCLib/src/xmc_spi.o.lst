   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_spi.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_USIC_CH_GetTransmitBufferStatus,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_USIC_CH_GetTransmitBufferStatus:
  23              	.LFB90:
  24              	 .file 1 "N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc/xmc_usic.h"
   1:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
   2:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @date 2017-09-08
   4:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
   5:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @cond
   6:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
   7:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
   9:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * All rights reserved.                        
  11:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *                                             
  12:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * following conditions are met:   
  14:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  15:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer.                        
  17:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  18:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  21:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  24:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  32:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
  35:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
  36:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Change History
  37:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * --------------
  38:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
  39:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  40:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  41:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
  43:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  44:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *      
  46:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  47:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  49:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  50:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
  52:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  53:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
  56:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  57:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
  61:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  62:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
  66:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  67:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
  70:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  71:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  72:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
  73:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  74:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
  76:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  77:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  78:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  79:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
  80:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-09-08:
  81:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  82:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
  83:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @endcond
  84:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
  85:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
  86:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
  87:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
  88:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
  89:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
  90:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
  91:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
  92:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
  93:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
  94:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
  95:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
  96:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
  97:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
  98:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
  99:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
 102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  friendly format.
 116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * MACROS
 126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * ENUMS
 166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
 453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma push
 467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma anon_unions
 468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning 586
 470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   };
 504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   };
 514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma pop
 541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning restore
 543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** extern "C" {
 551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 634:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 635:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 636:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 637:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 638:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 639:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 640:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 641:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 642:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 643:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 644:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 645:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 646:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 647:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 648:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 649:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 650:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 651:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 652:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 653:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 654:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 655:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 656:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 657:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 658:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 659:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 660:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 661:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 662:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 663:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 664:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 665:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 666:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 667:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 668:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 669:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 670:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 671:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 672:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 673:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 674:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 675:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 676:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 677:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 678:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 679:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 680:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 681:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 682:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 683:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 684:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 685:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 												 const uint32_t oversampling,
 686:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 687:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 688:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 689:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 690:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 691:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 692:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 693:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 694:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 695:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 696:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 697:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 698:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 699:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 700:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 701:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *  
 704:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 705:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 706:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 707:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 708:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 709:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 710:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 711:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 712:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 713:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 714:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 715:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 716:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 717:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 718:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 719:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 720:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 721:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 722:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 723:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 724:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 725:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 726:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 727:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 728:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 729:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 730:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 731:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 732:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 733:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 734:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 735:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 736:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 737:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 738:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 739:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 740:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 741:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 742:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 743:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * This setting is used
 744:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 745:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 746:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 747:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 748:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 749:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 750:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 751:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 752:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 753:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 754:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 755:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 756:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 757:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 758:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 759:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 760:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 761:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 762:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 763:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 764:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 765:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 766:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 767:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 768:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 769:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 770:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 771:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 772:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 773:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 774:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 775:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 776:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 777:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 778:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 779:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 780:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 781:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 782:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 783:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 784:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 785:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 786:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 787:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 788:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 789:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 790:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 791:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 792:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 793:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 794:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 795:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 796:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 797:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 798:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 799:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 800:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 801:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 802:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 803:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 804:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 805:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 806:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 807:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 808:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 809:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 810:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 811:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 812:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 813:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 814:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 815:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 816:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 817:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 818:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 819:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 820:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 821:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 822:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 823:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 824:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 825:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 826:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 827:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 828:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 829:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 830:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 831:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 832:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 833:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 834:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 835:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 836:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 837:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 838:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 839:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 840:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 841:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 842:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 843:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 844:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 845:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 846:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 847:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 848:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 849:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 850:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 851:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 852:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 853:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 854:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 855:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 856:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 857:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 858:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 859:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 860:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 861:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 862:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 863:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 864:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 865:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 866:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 867:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 868:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 869:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 870:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 871:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 872:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 873:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 874:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 875:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 876:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 877:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 878:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 879:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 880:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 881:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 882:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 883:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 884:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 885:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 886:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 887:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 888:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 889:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 890:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 891:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 893:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 894:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 895:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 896:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 897:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 898:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 899:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 900:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 901:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 902:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 903:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 904:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 905:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 906:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 907:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 908:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 909:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 910:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 911:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 912:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 913:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 914:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 915:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 916:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 917:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 918:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 919:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 920:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 921:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 922:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 923:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 924:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 925:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
 926:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 927:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 928:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 929:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
 930:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 931:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 932:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 933:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 934:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
 935:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
 936:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
 937:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 938:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 939:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
 940:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 941:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 942:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 943:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 944:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 945:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
 946:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 947:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 948:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 949:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
 950:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 951:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 952:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 953:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 954:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
 955:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 956:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 957:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 958:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 959:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 960:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 961:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 962:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
 963:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
 964:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 965:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 966:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 967:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
 968:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
 969:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 970:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 971:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 972:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
 973:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 974:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
 975:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 976:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
 977:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
 978:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
 979:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
 980:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 981:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 982:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
 983:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
 984:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
 985:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 986:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 987:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 988:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
 989:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
 990:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 991:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
 992:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 993:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
 994:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
 995:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
 996:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                              const uint16_t data,
 997:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                              const uint32_t transmit_control_information)
 998:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
 999:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1000:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1001:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1002:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1003:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1004:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1005:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1006:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1007:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1008:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1009:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1010:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1011:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1012:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1013:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1014:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1015:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1016:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1017:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1018:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1019:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1020:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1021:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1022:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1023:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1024:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1025:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1026:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1027:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1028:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1029:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1030:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1031:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1032:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1033:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1034:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1035:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1036:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1037:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1038:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1039:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1040:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1041:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1042:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1043:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1044:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1045:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1046:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1047:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value 
1048:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1049:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1050:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1051:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1052:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1053:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1054:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1055:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1056:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1057:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1058:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1059:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1060:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1061:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1062:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1063:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1064:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1065:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1066:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1067:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1068:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1069:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1070:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1071:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1072:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1073:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1074:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1075:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1076:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1077:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1078:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1079:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1080:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1081:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1082:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1083:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1084:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1085:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1086:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1087:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1088:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1089:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly. 
1090:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1091:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1092:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1093:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1094:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1095:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1096:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1097:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1098:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1099:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
1120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
1138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                          const uint32_t service_request);
1165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
  25              	 .loc 1 1183 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
1184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
  39              	 .loc 1 1184 0
  40 0008 7B68     	 ldr r3,[r7,#4]
  41 000a 9B6B     	 ldr r3,[r3,#56]
  42 000c DBB2     	 uxtb r3,r3
  43 000e 7F22     	 mov r2,#127
  44 0010 9343     	 bic r3,r2
  45 0012 DBB2     	 uxtb r3,r3
1185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
  46              	 .loc 1 1185 0
  47 0014 181C     	 mov r0,r3
  48 0016 BD46     	 mov sp,r7
  49 0018 02B0     	 add sp,sp,#8
  50              	 
  51 001a 80BD     	 pop {r7,pc}
  52              	 .cfi_endproc
  53              	.LFE90:
  55              	 .section .text.XMC_USIC_CH_SetMode,"ax",%progbits
  56              	 .align 2
  57              	 .code 16
  58              	 .thumb_func
  60              	XMC_USIC_CH_SetMode:
  61              	.LFB125:
1186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *                              
1220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * generated if enabled. 
1344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
1465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1634:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1635:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1636:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1637:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1638:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1639:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1640:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1641:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1642:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1643:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1644:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1645:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1646:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1647:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1648:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1649:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1650:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1651:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1652:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1653:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1654:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1655:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1656:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1657:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1658:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1659:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1660:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1661:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1662:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1663:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1664:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1665:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1666:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1667:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1668:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1669:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1670:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1671:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1672:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1673:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1674:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1675:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1676:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1677:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1678:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1679:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1680:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1681:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1682:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1683:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1684:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1685:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1686:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1687:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1688:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1689:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1690:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1691:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1692:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1693:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1694:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1695:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1696:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1697:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1698:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1699:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1700:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1701:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
1703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1704:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1705:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1706:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1707:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1708:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1710:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1711:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1712:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1713:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1714:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1715:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1716:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1717:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1718:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1719:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1720:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1721:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1722:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1723:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1724:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1725:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1726:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1727:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1728:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** */
1729:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1730:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1731:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1732:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1733:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1734:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1735:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1736:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1737:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1738:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1739:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1740:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1741:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1742:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1743:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1744:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1745:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1746:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1747:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1748:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1749:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1750:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1751:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1752:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1753:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1754:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1755:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1756:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1757:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1758:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1759:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1760:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1761:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1762:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1763:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1764:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1765:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1766:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1767:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1768:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1769:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1770:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1771:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1772:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1773:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1774:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1775:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
1776:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1777:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1778:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1779:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1780:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1781:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1782:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
1783:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1784:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1785:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1786:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1787:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1788:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1789:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1790:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1791:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1792:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1793:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1794:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1795:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1796:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1797:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1798:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1799:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1800:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1801:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1802:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1803:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1804:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1805:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1806:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1807:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1808:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1809:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
1810:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1811:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1812:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1813:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1814:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1815:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1816:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1817:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1818:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1819:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1820:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1821:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1822:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1823:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1824:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1825:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1826:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1827:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1828:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1829:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1830:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1831:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1832:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1833:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1834:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1835:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1836:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1837:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1838:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1839:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1840:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1841:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
1842:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1843:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1844:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1845:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1846:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1847:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1848:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1849:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1850:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1851:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1852:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1853:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1854:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1855:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1856:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1857:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1858:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1859:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1860:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1861:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1862:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1863:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1864:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1865:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1866:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1867:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1868:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1869:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1870:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1871:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1872:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
1873:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1874:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1875:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1876:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1877:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1878:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1879:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1880:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1881:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1882:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1883:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1884:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1885:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1886:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1887:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1888:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1889:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1890:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1891:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
1892:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1893:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1894:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1895:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1896:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1897:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1898:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1899:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1900:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1901:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1902:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1903:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1904:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1905:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1906:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1907:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1908:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1909:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1910:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
1911:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
1912:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1913:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1914:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
1915:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
1916:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the 
1917:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * receive FIFO.
1918:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1919:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1920:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1921:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1922:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1923:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1924:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
1925:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1926:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1927:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1928:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1929:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1930:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
1931:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1932:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1933:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1934:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1935:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
1936:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
1937:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
1938:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
1939:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1940:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1941:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1942:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1943:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1944:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
1945:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1946:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1947:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1948:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
1949:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_RBERI_Msk |
1950:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_ARBI_Msk));
1951:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1952:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1953:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1954:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1955:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1956:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
1957:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1958:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1959:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1960:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1961:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1962:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
1963:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1964:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1965:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
1966:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1967:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1968:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1969:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1970:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
1971:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1972:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1973:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
1974:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1975:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1976:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1977:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1978:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1979:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1980:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1981:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1982:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1983:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1984:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
1985:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
1986:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
1987:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1988:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
1989:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
1990:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
1991:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
1992:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
1993:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
1994:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
1995:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
1996:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1997:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1998:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1999:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
2000:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2001:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
2002:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
2003:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
2004:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2005:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
2006:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
2007:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
2008:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
2009:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
2010:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
2011:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
2012:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
2013:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2014:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2015:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
2016:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
2017:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2018:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
2019:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2020:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
2021:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
2022:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
2023:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSI
2024:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
2025:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
2026:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
2027:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
2028:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2029:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2030:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
2031:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
2032:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
2033:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
2034:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
2035:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
2036:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
2037:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
2038:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2039:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
2040:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2041:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
2042:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
2043:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
2044:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
2045:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * This value should be configured based on the slave device requirement.
2046:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
2047:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 
2048:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
2049:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
2050:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIV
2051:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
2052:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
2053:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
2054:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
2055:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                  (uint32_t)passive_level |
2056:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****                  (uint32_t)clock_output;
2057:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
2058:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** 
2059:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** /**
2060:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2061:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2062:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @param mode USIC channel operation mode. \n
2063:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
2064:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
2065:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
2066:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2067:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
2068:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2069:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
2070:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
2071:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
2072:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  *
2073:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2074:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
2075:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****  */
2076:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
2077:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** {
  62              	 .loc 1 2077 0
  63              	 .cfi_startproc
  64 0000 80B5     	 push {r7,lr}
  65              	.LCFI3:
  66              	 .cfi_def_cfa_offset 8
  67              	 .cfi_offset 7,-8
  68              	 .cfi_offset 14,-4
  69 0002 82B0     	 sub sp,sp,#8
  70              	.LCFI4:
  71              	 .cfi_def_cfa_offset 16
  72 0004 00AF     	 add r7,sp,#0
  73              	.LCFI5:
  74              	 .cfi_def_cfa_register 7
  75 0006 7860     	 str r0,[r7,#4]
  76 0008 0A1C     	 mov r2,r1
  77 000a FB1C     	 add r3,r7,#3
  78 000c 1A70     	 strb r2,[r3]
2078:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
  79              	 .loc 1 2078 0
  80 000e 7B68     	 ldr r3,[r7,#4]
  81 0010 1B6C     	 ldr r3,[r3,#64]
  82 0012 0F22     	 mov r2,#15
  83 0014 9343     	 bic r3,r2
  84 0016 1A1C     	 mov r2,r3
  85 0018 FB1C     	 add r3,r7,#3
  86 001a 1B78     	 ldrb r3,[r3]
  87 001c 1A43     	 orr r2,r3
  88 001e 7B68     	 ldr r3,[r7,#4]
  89 0020 1A64     	 str r2,[r3,#64]
2079:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_usic.h **** }
  90              	 .loc 1 2079 0
  91 0022 BD46     	 mov sp,r7
  92 0024 02B0     	 add sp,sp,#8
  93              	 
  94 0026 80BD     	 pop {r7,pc}
  95              	 .cfi_endproc
  96              	.LFE125:
  98              	 .section .text.XMC_SPI_CH_ClearStatusFlag,"ax",%progbits
  99              	 .align 2
 100              	 .code 16
 101              	 .thumb_func
 103              	XMC_SPI_CH_ClearStatusFlag:
 104              	.LFB132:
 105              	 .file 2 "N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc/xmc_spi.h"
   1:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
   2:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @file xmc_spi.h
   3:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @date 2016-05-20
   4:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
   5:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @cond
   6:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
   7:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
   9:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * All rights reserved.                        
  11:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *                                             
  12:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * following conditions are met:   
  14:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *                                                                              
  15:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * disclaimer.                        
  17:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 
  18:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 
  21:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * products derived from this software without specific prior written permission.                  
  23:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *                                                                              
  24:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *                                                                              
  32:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
  35:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
  36:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Change History
  37:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * --------------
  38:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
  39:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-02-20:
  40:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Initial
  41:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *   
  42:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-05-20:
  43:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Documentation improved <br>
  44:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetSlaveSelectDelay(), XMC_SPI_CH_TriggerServiceRequest() and 
  45:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *       XMC_SPI_CH_SelectInterruptNodePointer() <br>
  46:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetInterwordDelaySCLK() <br>
  47:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
  48:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-06-20:
  49:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  50:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
  51:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-08-24:
  52:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_SPI_CH_DisableDelayCompensation()
  53:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *       XMC_SPI_CH_EnableDelayCompensation() <br>
  54:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
  55:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-08-27:
  56:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added APIs for external input for BRG configuration:XMC_SPI_CH_ConfigExternalInputSignalTo
  57:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
  58:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-09-01:
  59:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Modified XMC_SPI_CH_SetInputSource() for avoiding complete DXCR register overwriting. <br>
  60:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Modified XMC_SPI_CH_EVENT_t enum for supporting XMC_SPI_CH_EnableEvent() and XMC_SPI_CH_Di
  61:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *       for supporting multiple events configuration <br>
  62:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
  63:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-09-08:
  64:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Adding API for configuring the receiving clock phase in the slave:XMC_SPI_CH_DataLatchedIn
  65:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
  66:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 2016-04-10:
  67:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added an API for configuring the transmit mode:XMC_SPI_CH_SetTransmitMode() <br>
  68:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
  69:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 2016-05-20:
  70:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_EnableDataTransmission() and XMC_SPI_CH_DisableDataTransmission()
  71:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 
  72:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @endcond 
  73:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
  74:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
  75:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
  76:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #ifndef XMC_SPI_H
  77:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI_H
  78:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
  79:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
  80:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * HEADER FILES
  81:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
  82:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #include "xmc_usic.h"
  83:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
  84:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
  85:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @addtogroup XMClib XMC Peripheral Library
  86:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @{
  87:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
  88:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
  89:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
  90:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @addtogroup SPI
  91:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @brief Synchronous serial channel driver for SPI-like communication.
  92:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 
  93:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * The SPI driver uses Universal Serial Interface Channel(USIC) module. 
  94:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * The USIC module supports multiple data lines for SPI communication. \n
  95:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Full duplex communication with 2 separate lines for transmission and reception.
  96:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Half duplex communication with 1 common line shared for transmission and reception.
  97:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Dual mode communication with 2 common lines shared for transmission and reception.
  98:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Quad mode communication with 4 common lines shared for transmission and reception.<br><br>
  99:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI driver provides structures, enumerations and APIs for configuring the USIC channel for SPI c
 101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * and also for data transaction.<br>
 102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI driver features:
 103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Configuration structure XMC_SPI_CH_CONFIG_t and SPI initialization function XMC_SPI_CH_Init()
 104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Allows configuration of protocol word and frame length using XMC_SPI_CH_SetWordLength(), XMC_
 105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Allows manipulation of data frame at runtime using XMC_SPI_CH_EnableSOF(), XMC_SPI_CH_EnableE
 106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  XMC_SPI_CH_EnableSlaveSelect(), XMC_SPI_CH_DisableSlaveSelect()
 107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Provides APIs for transmitting data and receiving data using XMC_SPI_CH_Transmit(), XMC_SPI_C
 108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Allows configuration of shift clock using XMC_SPI_CH_ConfigureShiftClockOutput()
 109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Provides enumeration of SPI protocol events using @ref XMC_SPI_CH_STATUS_FLAG_t
 110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @{
 111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * MACROS
 115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #if defined(USIC0)
 118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI0_CH0 XMC_USIC0_CH0 /**< SPI0 channel 0 base address */
 119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI0_CH1 XMC_USIC0_CH1 /**< SPI0 channel 1 base address */
 120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #if defined(USIC1)
 123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI1_CH0 XMC_USIC1_CH0 /**< SPI1 channel 0 base address */
 124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI1_CH1 XMC_USIC1_CH1 /**< SPI1 channel 1 base address */
 125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #if defined(USIC2)
 128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI2_CH0 XMC_USIC2_CH0 /**< SPI2 channel 0 base address */
 129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI2_CH1 XMC_USIC2_CH1 /**< SPI2 channel 1 base address */
 130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * ENUMS
 134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines return status of SPI driver APIs
 138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS
 140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_OK,    /**< Status of the Module: OK */
 142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_ERROR, /**< Status of the Module: ERROR */
 143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_BUSY   /**< The Module is busy */
 144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_STATUS_t;
 145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines the SPI bus mode
 147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BUS_MODE
 149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_MASTER, /**< SPI Master */
 151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_SLAVE   /**< SPI Slave */
 152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BUS_MODE_t;
 153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines the Polarity of the slave select signals SELO[7:0] in relation to the master slave selec
 156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SEL_MSLS_INV
 158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_SAME_AS_MSLS = 0x0UL, /**< The SELO outputs have the same polarity as the MS
 160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                                                   (active high) */
 161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_INV_TO_MSLS = 0x1UL << USIC_CH_PCR_SSCMode_SELINV_Pos /**< The SELO outputs 
 162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                   polarity to the M
 163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                   (active low)*/
 164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t;
 165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines the Polarity of the data inputs.
 168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_DATA_POLARITY
 170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_DIRECT = 0x0UL, /**< The polarity of the data line is not inverted */
 172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_INVERT = 0x1UL << USIC_CH_DX2CR_DPOL_Pos /**< The polarity of the data l
 173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_DATA_POLARITY_t;
 174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines Slave Select lines
 177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SELECT
 179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_0 = 1UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 0 */
 181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_1 = 2UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 1 */
 182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_2 = 4UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 2 */
 183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_3 = 8UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 3 */
 184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_4 = 16UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 4 */
 185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_5 = 32UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 5 */
 186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_6 = 64UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 6 */
 187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_7 = 128UL << USIC_CH_PCR_SSCMode_SELO_Pos /**< Slave Select line 7 */
 188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_SLAVE_SELECT_t;
 189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines SPI specific events
 192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_EVENT
 194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_PARITY_ERROR = USIC_CH_PCR_SSCMode_PARIEN_Msk >> 13U,       /**< Parity error ev
 204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_MSLS_CHANGE =  USIC_CH_PCR_SSCMode_MSLSIEN_Msk >> 13U,      /**< Master slave se
 205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_DX2TIEN_ACTIVATED = USIC_CH_PCR_SSCMode_DX2TIEN_Msk >> 13U  /**< Slave select in
 206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_EVENT_t;
 207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines SPI event status
 210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS_FLAG
 212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS = USIC_CH_PSR_SSCMode_MSLS_Msk,                          /**< Status 
 214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             select(
 215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2S = USIC_CH_PSR_SSCMode_DX2S_Msk,                          /**< Status 
 216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             input(D
 217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS_EVENT_DETECTED = USIC_CH_PSR_SSCMode_MSLSEV_Msk,         /**< Status 
 218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             output 
 219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2T_EVENT_DETECTED = USIC_CH_PSR_SSCMode_DX2TEV_Msk,         /**< Status 
 220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             input s
 221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_PARITY_ERROR_EVENT_DETECTED = USIC_CH_PSR_SSCMode_PARERR_Msk, /**< Indicat
 222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             parity 
 223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_SSCMode_RSIF_Msk,     /**< Status 
 224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_SSCMode_DLIF_Msk,          /**< Status 
 226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_SSCMode_TSIF_Msk,      /**< Status
 227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_SSCMode_TBIF_Msk,    /**< Status 
 229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_RIF_Msk,             /**< Status 
 231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_AIF_Msk, /**< Status 
 232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             receive
 233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_SSCMode_BRGIF_Msk/**< Status 
 234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             generat
 235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_STATUS_FLAG_t;
 236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines input frequency sources for slave select signal delay configuration.
 239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY
 241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPDIV = 0x0UL, /**< Output of PDIV divider: FPDIV */
 243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPPP  = 0x1UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< P
 244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FSCLK = 0x2UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< S
 245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FMCLK = 0x3UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos  /**< M
 246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_t;
 247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Define data and clock input stages
 250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT
 252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN0 = 0UL,         /**< Data input stage 0 */ 
 254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SCLKIN = 1UL, /**< Clock input stage */
 255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SELIN = 2UL,  /**< Slave select input stage */
 256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN1 = 3UL,         /**< Data input stage 1 */
 257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN2 = 4UL,         /**< Data input stage 2 */
 258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN3 = 5UL          /**< Data input stage 3 */
 259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INPUT_t;
 260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Define SPI data transfer mode
 263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_MODE
 265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD = 0UL,            /**< SPI standard full duplex mode */ 
 267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX = 4UL, /**< SPI standard half duplex mode */ 
 268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_DUAL= 6UL,                 /**< SPI half duplex mode with dual data lines */ 
 269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_QUAD= 7UL                  /**< SPI half duplex mode with quad data lines */
 270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_MODE_t;
 271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI Baudrate Generator shift clock passive level
 275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 0, delay disabled */
 279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 1, delay disabled */
 281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 0, delay enabled */
 283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 1, delay enabled */
 285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI Baudrate Generator shift clock output
 290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** */
 291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT
 292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,  /**< Baudrate 
 294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1  = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1   /**< Clock obta
 295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI channel interrupt node pointers
 299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INTERRUPT_NODE_POINTER
 301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INTERRUPT_NODE_POINTER_t;
 308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * DATA STRUCTURES
 311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** ***************************************************************************************************
 312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Structure for initializing SPI channel.
 315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** typedef struct XMC_SPI_CH_CONFIG
 317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   uint32_t baudrate;							  /**< Module baud rate for communication */
 319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_t bus_mode;                 /**< Bus mode: Master/Slave */
 320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t selo_inversion; /**< Enable inversion of Slave select signal rela
 321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                                                        MSLS signal  */
 322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_PARITY_MODE_t parity_mode;          /**< Enable parity check for transmit and receive
 323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_CONFIG_t;
 324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * API PROTOTYPES
 327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #ifdef __cplusplus
 330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** extern "C" {
 331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param config pointer to constant SPI channel configuration data structure.\n
 336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *               Refer data structure @ref XMC_SPI_CH_CONFIG_t for detail.
 337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Initializes the selected SPI \a channel with the \a config structure.\n\n
 342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Enable SPI channel by calling XMC_USIC_CH_Enable() and then configures
 343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <ul>
 344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Baudrate,</li>
 345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Passive data level as active high,</li>
 346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Shift control signal as active high,</li>
 347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Frame length as 64U,</li>
 348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Word length as 8U,</li>
 349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable Hardware port control mode,</li>
 350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable transmission of data TDV(Transmit data valid) bit is set to 1,</li>
 351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable invalidation of data in TBUF once loaded into shift register,</li>
 352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Parity mode settings</li>
 353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * </ul>
 354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * And if master mode is selected,
 355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <ul>
 356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enables MSLS signal generation,</li>
 357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>configures slave selection as normal mode,</li>
 358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Set polarity for the Slave signal,</li>
 359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * </ul>
 361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config);
 363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the selected USIC channel to operate in SPI mode, by setting CCR.MODE bits.\n\n
 371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * It should be executed after XMC_SPI_CH_Init() during initialization. By invoking XMC_SPI_CH_Stop
 372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * to IDLE state. Call XMC_SPI_CH_Start() to set the SPI mode again, as needed later in the program
 373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
 378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   /* USIC channel in SPI mode */
 380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** }
 382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for stopping is processed
 387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the USIC channel is successfully put to IDLE mode. \n
 388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_BUSY- If the USIC channel is busy transmitting data.
 389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the selected SPI channel to IDLE mode, by clearing CCR.MODE bits.\n\n
 392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * After calling XMC_SPI_CH_Stop, channel is IDLE mode. So no communication is supported. XMC_SPI_C
 393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * invoked to start the communication again.
 394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Start()
 397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel);
 399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param rate Bus speed in bits per second
 403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for setting baudrate is p
 405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the baudrate is successfully changed. \n
 406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_ERROR- If the new baudrate value is out of range.
 407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Sets the bus speed in bits per second
 410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param slave Slave select signal.\n
 419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ref XMC_SPI_CH_SLAVE_SELECT_t for valid values.
 420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Enable the selected slave signal by setting PCR.SELO bits.\n\n
 425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Each slave is connected with one slave select signal. This is not configured in XMC_SPI_CH_Init(
 426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() with required \a slave to to start the communication. After finis
 427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * communication XMC_SPI_CH_DisableSlaveSelect() can be invoked to disable the slaves.
 428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableSlaveSelect()
 431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t sla
 433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant ponter to XMC_USIC_CH_t, pointing to the USIC channel base address.
 436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Disable all the slave signals by clearing PCR.SELO bits.\n\n
 441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() has to be invoked to start the communication with the desired sla
 442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect()
 445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel);
 447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. \n\n
 457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * By enabling this the direction of the data pin is updated by hardware itself. Before transmittin
 458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * mode to ensure the proper communication.
 459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Transmit()
 462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE
 464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** }
 468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param data Data to be transmitted
 472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Puts the data into FIFO, if FIFO mode is enabled or else into standard buffer, by setting the pr
 479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. By enabling this the 
 480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * pin is updated by hardware itself. TCI(Transmit Control Information) allows dynamic control of b
 481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * and pin direction during data transfers by writing to SCTR.DSM and SCTR.HPCDIR bit fields. To su
 482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * update, TCSR.HPCMD(Hardware Port control) will be enabled during the initialization using XMC_SP
 483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive()
 487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t
 489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.      
 494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Transmits a dummy data(FFFFH) to provide clock for slave and receives the data from the slave.\n
 499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive() receives the data and places it into buffer based on the FIFO selection. Af
 500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be invoked to read the data from the buffers.
 501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedDaa()
 504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Receive(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
 506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   /* Transmit dummy data */
 508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_Transmit(channel, (uint16_t)0xffffU, (XMC_SPI_CH_MODE_t)((uint16_t)mode & 0xfffbU));
 509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** }
 510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return uint16_t Data read from the receive buffer.
 515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Reads data from the receive buffer based on the FIFO selection.\n\n
 518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Invocation of XMC_SPI_CH_Receive() receives the data and place it into receive buffer. After rec
 519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be used to read the data from the buffer.
 520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive()
 523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel);
 525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the order of data transfer from LSB to MSB, by clearing SCTR.SDIR bit.\n\n
 533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * This is typically based on the slave settings. Invoke XMC_SPI_CH_SetBitOrderLsbFirst() to set di
 534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * the program.
 535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderMsbFirst()
 538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderLsbFirst(XMC_USIC_CH_t *const channel)
 540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   channel->SCTR &= (uint32_t)~USIC_CH_SCTR_SDIR_Msk;
 542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** }
 543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the order of data transfer from MSB to LSB, by setting SCTR.SDIR bit.\n\n
 551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * This is typically based on the slave settings. This is not set during XMC_SPI_CH_Init(). 
 552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Invoke XMC_SPI_CH_SetBitOrderMsbFirst() to set direction as needed in the program.
 553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderLsbFirst()
 556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
 558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** }
 561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param event Protocol events which have to be enabled.
 565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *              as input.
 567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Enables the SPI protocol specific events, by configuring PCR register.\n\n
 572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Events can be enabled as needed using XMC_SPI_CH_EnableEvent(). 
 573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEvent() can be used to disable the events.
 574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEvent()
 577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param event Protocol events which have to be disabled.
 583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *              as input.
 585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Disables the SPI protocol specific events, by configuring PCR register.\n\n
 590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * After disabling the events, XMC_SPI_CH_EnableEvent() has to be invoked to re-enable the events.
 591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableEvent()
 594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return uint32_t Status of SPI protocol events.
 601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Returns the status of the events, by reading PSR register.\n\n
 604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * This indicates the status of the all the events, for SPI communication. 
 605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_ClearStatusFlag()
 608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   return channel->PSR_SSCMode;
 612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** }
 613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** 
 614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** /**
 615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @param flag Protocol event status to be cleared for detection of next occurence.
 617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_STATUS_FLAG_t for valid values. <b>OR</b> combinations of these 
 618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *              as input.
 619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * Clears the events specified, by setting PSCR register.\n\n
 623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * During communication the events occurred have to be cleared to detect their next occurence.\n
 624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * e.g: During transmission Transmit buffer event occurs to indicating data word transfer has start
 625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *       event has to be cleared after transmission of each data word. Otherwise next event cannot 
 626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  *
 627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetStatusFlag()
 629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****  */
 630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
 631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** {
 106              	 .loc 2 631 0
 107              	 .cfi_startproc
 108 0000 80B5     	 push {r7,lr}
 109              	.LCFI6:
 110              	 .cfi_def_cfa_offset 8
 111              	 .cfi_offset 7,-8
 112              	 .cfi_offset 14,-4
 113 0002 82B0     	 sub sp,sp,#8
 114              	.LCFI7:
 115              	 .cfi_def_cfa_offset 16
 116 0004 00AF     	 add r7,sp,#0
 117              	.LCFI8:
 118              	 .cfi_def_cfa_register 7
 119 0006 7860     	 str r0,[r7,#4]
 120 0008 3960     	 str r1,[r7]
 632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PSCR |= flag;
 121              	 .loc 2 632 0
 122 000a 7B68     	 ldr r3,[r7,#4]
 123 000c DA6C     	 ldr r2,[r3,#76]
 124 000e 3B68     	 ldr r3,[r7]
 125 0010 1A43     	 orr r2,r3
 126 0012 7B68     	 ldr r3,[r7,#4]
 127 0014 DA64     	 str r2,[r3,#76]
 633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_spi.h **** }
 128              	 .loc 2 633 0
 129 0016 BD46     	 mov sp,r7
 130 0018 02B0     	 add sp,sp,#8
 131              	 
 132 001a 80BD     	 pop {r7,pc}
 133              	 .cfi_endproc
 134              	.LFE132:
 136              	 .section .text.XMC_SPI_CH_Init,"ax",%progbits
 137              	 .align 2
 138              	 .global XMC_SPI_CH_Init
 139              	 .code 16
 140              	 .thumb_func
 142              	XMC_SPI_CH_Init:
 143              	.LFB164:
 144              	 .file 3 "../Libraries/XMCLib/src/xmc_spi.c"
   1:../Libraries/XMCLib/src/xmc_spi.c **** /**
   2:../Libraries/XMCLib/src/xmc_spi.c ****  * @file xmc_spi.c
   3:../Libraries/XMCLib/src/xmc_spi.c ****  * @date 2015-11-04
   4:../Libraries/XMCLib/src/xmc_spi.c ****  *
   5:../Libraries/XMCLib/src/xmc_spi.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_spi.c ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_spi.c ****  *
   9:../Libraries/XMCLib/src/xmc_spi.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_spi.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_spi.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_spi.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_spi.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_spi.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_spi.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_spi.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_spi.c ****  * 
  18:../Libraries/XMCLib/src/xmc_spi.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_spi.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_spi.c ****  * 
  21:../Libraries/XMCLib/src/xmc_spi.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_spi.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_spi.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_spi.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_spi.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_spi.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_spi.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_spi.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_spi.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_spi.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_spi.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_spi.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_spi.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_spi.c ****  *
  36:../Libraries/XMCLib/src/xmc_spi.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_spi.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_spi.c ****  *
  39:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_spi.c ****  *      
  42:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Modified XMC_SPI_CH_Stop() API for not setting to IDLE the channel if it is busy
  44:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Modified XMC_SPI_CH_SetInterwordDelay() implementation in order to gain accuracy <br>
  45:../Libraries/XMCLib/src/xmc_spi.c ****  *     
  46:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Removed GetDriverVersion API <br>
  48:../Libraries/XMCLib/src/xmc_spi.c ****  *
  49:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-09-01:
  50:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Modified XMC_SPI_CH_EnableEvent() and XMC_SPI_CH_DisableEvent() for supporting multiple ev
  51:../Libraries/XMCLib/src/xmc_spi.c ****  *
  52:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-11-04: 
  53:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Modified the check of XMC_USIC_CH_GetTransmitBufferStatus() in the XMC_SPI_CH_Transmit() f
  54:../Libraries/XMCLib/src/xmc_spi.c ****  * @endcond 
  55:../Libraries/XMCLib/src/xmc_spi.c ****  *
  56:../Libraries/XMCLib/src/xmc_spi.c ****  */
  57:../Libraries/XMCLib/src/xmc_spi.c **** /**
  58:../Libraries/XMCLib/src/xmc_spi.c ****  *
  59:../Libraries/XMCLib/src/xmc_spi.c ****  * @brief SPI driver for XMC microcontroller family
  60:../Libraries/XMCLib/src/xmc_spi.c ****  *
  61:../Libraries/XMCLib/src/xmc_spi.c ****  */
  62:../Libraries/XMCLib/src/xmc_spi.c **** /**************************************************************************************************
  63:../Libraries/XMCLib/src/xmc_spi.c ****  * HEADER FILES
  64:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
  65:../Libraries/XMCLib/src/xmc_spi.c **** 
  66:../Libraries/XMCLib/src/xmc_spi.c **** #include <xmc_scu.h>
  67:../Libraries/XMCLib/src/xmc_spi.c **** #include <xmc_spi.h>
  68:../Libraries/XMCLib/src/xmc_spi.c **** 
  69:../Libraries/XMCLib/src/xmc_spi.c **** /**************************************************************************************************
  70:../Libraries/XMCLib/src/xmc_spi.c ****  * MACROS
  71:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
  72:../Libraries/XMCLib/src/xmc_spi.c **** #define XMC_SPI_CH_OVERSAMPLING (2UL)
  73:../Libraries/XMCLib/src/xmc_spi.c **** 
  74:../Libraries/XMCLib/src/xmc_spi.c **** /**************************************************************************************************
  75:../Libraries/XMCLib/src/xmc_spi.c ****  * API IMPLEMENTATION
  76:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
  77:../Libraries/XMCLib/src/xmc_spi.c ****  
  78:../Libraries/XMCLib/src/xmc_spi.c **** /* Initializes the selected SPI channel with the config structure. */
  79:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
  80:../Libraries/XMCLib/src/xmc_spi.c **** {
 145              	 .loc 3 80 0
 146              	 .cfi_startproc
 147 0000 80B5     	 push {r7,lr}
 148              	.LCFI9:
 149              	 .cfi_def_cfa_offset 8
 150              	 .cfi_offset 7,-8
 151              	 .cfi_offset 14,-4
 152 0002 82B0     	 sub sp,sp,#8
 153              	.LCFI10:
 154              	 .cfi_def_cfa_offset 16
 155 0004 00AF     	 add r7,sp,#0
 156              	.LCFI11:
 157              	 .cfi_def_cfa_register 7
 158 0006 7860     	 str r0,[r7,#4]
 159 0008 3960     	 str r1,[r7]
  81:../Libraries/XMCLib/src/xmc_spi.c ****   XMC_USIC_CH_Enable(channel);
 160              	 .loc 3 81 0
 161 000a 7B68     	 ldr r3,[r7,#4]
 162 000c 181C     	 mov r0,r3
 163 000e FFF7FEFF 	 bl XMC_USIC_CH_Enable
  82:../Libraries/XMCLib/src/xmc_spi.c ****   
  83:../Libraries/XMCLib/src/xmc_spi.c ****   if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 164              	 .loc 3 83 0
 165 0012 3B68     	 ldr r3,[r7]
 166 0014 1B79     	 ldrb r3,[r3,#4]
 167 0016 002B     	 cmp r3,#0
 168 0018 07D1     	 bne .L6
  84:../Libraries/XMCLib/src/xmc_spi.c ****   {
  85:../Libraries/XMCLib/src/xmc_spi.c ****     /* Configure baud rate */
  86:../Libraries/XMCLib/src/xmc_spi.c ****     (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 169              	 .loc 3 86 0
 170 001a 3B68     	 ldr r3,[r7]
 171 001c 1B68     	 ldr r3,[r3]
 172 001e 7A68     	 ldr r2,[r7,#4]
 173 0020 101C     	 mov r0,r2
 174 0022 191C     	 mov r1,r3
 175 0024 0222     	 mov r2,#2
 176 0026 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 177              	.L6:
  87:../Libraries/XMCLib/src/xmc_spi.c ****   }
  88:../Libraries/XMCLib/src/xmc_spi.c ****   
  89:../Libraries/XMCLib/src/xmc_spi.c ****   /* Configuration of USIC Shift Control */
  90:../Libraries/XMCLib/src/xmc_spi.c ****   /* Transmission Mode (TRM) = 1  */
  91:../Libraries/XMCLib/src/xmc_spi.c ****   /* Passive Data Level (PDL) = 1 */
  92:../Libraries/XMCLib/src/xmc_spi.c ****   channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 178              	 .loc 3 92 0
 179 002a 7B68     	 ldr r3,[r7,#4]
 180 002c 0E4A     	 ldr r2,.L8
 181 002e 5A63     	 str r2,[r3,#52]
  93:../Libraries/XMCLib/src/xmc_spi.c ****                   (0x1UL << USIC_CH_SCTR_TRM_Pos) |
  94:../Libraries/XMCLib/src/xmc_spi.c ****                   (0x3fUL << USIC_CH_SCTR_FLE_Pos)|
  95:../Libraries/XMCLib/src/xmc_spi.c ****                   (0x7UL << USIC_CH_SCTR_WLE_Pos);
  96:../Libraries/XMCLib/src/xmc_spi.c **** 
  97:../Libraries/XMCLib/src/xmc_spi.c ****   /* Configuration of USIC Transmit Control/Status Register */
  98:../Libraries/XMCLib/src/xmc_spi.c ****   /* TBUF Data Enable (TDEN) = 1 */
  99:../Libraries/XMCLib/src/xmc_spi.c ****   /* TBUF Data Single Shot Mode (TDSSM) = 1 */
 100:../Libraries/XMCLib/src/xmc_spi.c ****   channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 182              	 .loc 3 100 0
 183 0030 7B68     	 ldr r3,[r7,#4]
 184 0032 A222     	 mov r2,#162
 185 0034 D200     	 lsl r2,r2,#3
 186 0036 9A63     	 str r2,[r3,#56]
 101:../Libraries/XMCLib/src/xmc_spi.c ****                   (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
 102:../Libraries/XMCLib/src/xmc_spi.c ****                   USIC_CH_TCSR_TDSSM_Msk);
 103:../Libraries/XMCLib/src/xmc_spi.c **** 
 104:../Libraries/XMCLib/src/xmc_spi.c ****   if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 187              	 .loc 3 104 0
 188 0038 3B68     	 ldr r3,[r7]
 189 003a 1B79     	 ldrb r3,[r3,#4]
 190 003c 002B     	 cmp r3,#0
 191 003e 07D1     	 bne .L7
 105:../Libraries/XMCLib/src/xmc_spi.c ****   {
 106:../Libraries/XMCLib/src/xmc_spi.c ****     /* Configuration of Protocol Control Register */
 107:../Libraries/XMCLib/src/xmc_spi.c ****     channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 108:../Libraries/XMCLib/src/xmc_spi.c ****                            USIC_CH_PCR_SSCMode_SELCTR_Msk |
 109:../Libraries/XMCLib/src/xmc_spi.c ****                            (uint32_t)config->selo_inversion |
 192              	 .loc 3 109 0
 193 0040 3B68     	 ldr r3,[r7]
 194 0042 5B79     	 ldrb r3,[r3,#5]
 107:../Libraries/XMCLib/src/xmc_spi.c ****                            USIC_CH_PCR_SSCMode_SELCTR_Msk |
 195              	 .loc 3 107 0
 196 0044 0B22     	 mov r2,#11
 197 0046 1343     	 orr r3,r2
 198 0048 DBB2     	 uxtb r3,r3
 199 004a 1A1C     	 mov r2,r3
 200 004c 7B68     	 ldr r3,[r7,#4]
 201 004e DA63     	 str r2,[r3,#60]
 202              	.L7:
 110:../Libraries/XMCLib/src/xmc_spi.c ****                            USIC_CH_PCR_SSCMode_FEM_Msk);
 111:../Libraries/XMCLib/src/xmc_spi.c ****   }
 112:../Libraries/XMCLib/src/xmc_spi.c **** 
 113:../Libraries/XMCLib/src/xmc_spi.c ****   /* Clear protocol status */
 114:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PSCR = 0xFFFFFFFFUL;
 203              	 .loc 3 114 0
 204 0050 7B68     	 ldr r3,[r7,#4]
 205 0052 0122     	 mov r2,#1
 206 0054 5242     	 neg r2,r2
 207 0056 DA64     	 str r2,[r3,#76]
 115:../Libraries/XMCLib/src/xmc_spi.c **** 
 116:../Libraries/XMCLib/src/xmc_spi.c ****   /* Set parity settings */
 117:../Libraries/XMCLib/src/xmc_spi.c ****   channel->CCR = (uint32_t)config->parity_mode;
 208              	 .loc 3 117 0
 209 0058 3B68     	 ldr r3,[r7]
 210 005a DB88     	 ldrh r3,[r3,#6]
 211 005c 1A1C     	 mov r2,r3
 212 005e 7B68     	 ldr r3,[r7,#4]
 213 0060 1A64     	 str r2,[r3,#64]
 118:../Libraries/XMCLib/src/xmc_spi.c **** }
 214              	 .loc 3 118 0
 215 0062 BD46     	 mov sp,r7
 216 0064 02B0     	 add sp,sp,#8
 217              	 
 218 0066 80BD     	 pop {r7,pc}
 219              	.L9:
 220              	 .align 2
 221              	.L8:
 222 0068 02013F07 	 .word 121569538
 223              	 .cfi_endproc
 224              	.LFE164:
 226              	 .section .text.XMC_SPI_CH_SetBaudrate,"ax",%progbits
 227              	 .align 2
 228              	 .global XMC_SPI_CH_SetBaudrate
 229              	 .code 16
 230              	 .thumb_func
 232              	XMC_SPI_CH_SetBaudrate:
 233              	.LFB165:
 119:../Libraries/XMCLib/src/xmc_spi.c **** 
 120:../Libraries/XMCLib/src/xmc_spi.c **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate)
 121:../Libraries/XMCLib/src/xmc_spi.c **** {
 234              	 .loc 3 121 0
 235              	 .cfi_startproc
 236 0000 80B5     	 push {r7,lr}
 237              	.LCFI12:
 238              	 .cfi_def_cfa_offset 8
 239              	 .cfi_offset 7,-8
 240              	 .cfi_offset 14,-4
 241 0002 84B0     	 sub sp,sp,#16
 242              	.LCFI13:
 243              	 .cfi_def_cfa_offset 24
 244 0004 00AF     	 add r7,sp,#0
 245              	.LCFI14:
 246              	 .cfi_def_cfa_register 7
 247 0006 7860     	 str r0,[r7,#4]
 248 0008 3960     	 str r1,[r7]
 122:../Libraries/XMCLib/src/xmc_spi.c ****   XMC_SPI_CH_STATUS_t status;
 123:../Libraries/XMCLib/src/xmc_spi.c ****   
 124:../Libraries/XMCLib/src/xmc_spi.c ****   status = XMC_SPI_CH_STATUS_ERROR;
 249              	 .loc 3 124 0
 250 000a 0F23     	 mov r3,#15
 251 000c FB18     	 add r3,r7,r3
 252 000e 0122     	 mov r2,#1
 253 0010 1A70     	 strb r2,[r3]
 125:../Libraries/XMCLib/src/xmc_spi.c ****   
 126:../Libraries/XMCLib/src/xmc_spi.c ****   if (rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 1U))
 254              	 .loc 3 126 0
 255 0012 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 256 0016 031C     	 mov r3,r0
 257 0018 5A08     	 lsr r2,r3,#1
 258 001a 3B68     	 ldr r3,[r7]
 259 001c 9A42     	 cmp r2,r3
 260 001e 0CD3     	 bcc .L11
 127:../Libraries/XMCLib/src/xmc_spi.c ****   {
 128:../Libraries/XMCLib/src/xmc_spi.c ****     if (XMC_USIC_CH_SetBaudrate(channel, rate, XMC_SPI_CH_OVERSAMPLING) == XMC_USIC_CH_STATUS_OK)
 261              	 .loc 3 128 0
 262 0020 7A68     	 ldr r2,[r7,#4]
 263 0022 3B68     	 ldr r3,[r7]
 264 0024 101C     	 mov r0,r2
 265 0026 191C     	 mov r1,r3
 266 0028 0222     	 mov r2,#2
 267 002a FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 268 002e 031E     	 sub r3,r0,#0
 269 0030 03D1     	 bne .L11
 129:../Libraries/XMCLib/src/xmc_spi.c ****     {
 130:../Libraries/XMCLib/src/xmc_spi.c ****       status = XMC_SPI_CH_STATUS_OK;
 270              	 .loc 3 130 0
 271 0032 0F23     	 mov r3,#15
 272 0034 FB18     	 add r3,r7,r3
 273 0036 0022     	 mov r2,#0
 274 0038 1A70     	 strb r2,[r3]
 275              	.L11:
 131:../Libraries/XMCLib/src/xmc_spi.c ****     }
 132:../Libraries/XMCLib/src/xmc_spi.c ****   } 
 133:../Libraries/XMCLib/src/xmc_spi.c ****   return status;
 276              	 .loc 3 133 0
 277 003a 0F23     	 mov r3,#15
 278 003c FB18     	 add r3,r7,r3
 279 003e 1B78     	 ldrb r3,[r3]
 134:../Libraries/XMCLib/src/xmc_spi.c **** }
 280              	 .loc 3 134 0
 281 0040 181C     	 mov r0,r3
 282 0042 BD46     	 mov sp,r7
 283 0044 04B0     	 add sp,sp,#16
 284              	 
 285 0046 80BD     	 pop {r7,pc}
 286              	 .cfi_endproc
 287              	.LFE165:
 289              	 .section .text.XMC_SPI_CH_EnableSlaveSelect,"ax",%progbits
 290              	 .align 2
 291              	 .global XMC_SPI_CH_EnableSlaveSelect
 292              	 .code 16
 293              	 .thumb_func
 295              	XMC_SPI_CH_EnableSlaveSelect:
 296              	.LFB166:
 135:../Libraries/XMCLib/src/xmc_spi.c **** 
 136:../Libraries/XMCLib/src/xmc_spi.c **** /* Enable the selected slave signal by setting (SELO) bits in PCR register. */
 137:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t sla
 138:../Libraries/XMCLib/src/xmc_spi.c **** {
 297              	 .loc 3 138 0
 298              	 .cfi_startproc
 299 0000 80B5     	 push {r7,lr}
 300              	.LCFI15:
 301              	 .cfi_def_cfa_offset 8
 302              	 .cfi_offset 7,-8
 303              	 .cfi_offset 14,-4
 304 0002 82B0     	 sub sp,sp,#8
 305              	.LCFI16:
 306              	 .cfi_def_cfa_offset 16
 307 0004 00AF     	 add r7,sp,#0
 308              	.LCFI17:
 309              	 .cfi_def_cfa_register 7
 310 0006 7860     	 str r0,[r7,#4]
 311 0008 3960     	 str r1,[r7]
 139:../Libraries/XMCLib/src/xmc_spi.c ****   /* Configuration of Protocol Control Register */
 140:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 312              	 .loc 3 140 0
 313 000a 7B68     	 ldr r3,[r7,#4]
 314 000c DB6B     	 ldr r3,[r3,#60]
 315 000e 064A     	 ldr r2,.L14
 316 0010 1A40     	 and r2,r3
 317 0012 7B68     	 ldr r3,[r7,#4]
 318 0014 DA63     	 str r2,[r3,#60]
 141:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode |= (uint32_t)slave;
 319              	 .loc 3 141 0
 320 0016 7B68     	 ldr r3,[r7,#4]
 321 0018 DA6B     	 ldr r2,[r3,#60]
 322 001a 3B68     	 ldr r3,[r7]
 323 001c 1A43     	 orr r2,r3
 324 001e 7B68     	 ldr r3,[r7,#4]
 325 0020 DA63     	 str r2,[r3,#60]
 142:../Libraries/XMCLib/src/xmc_spi.c **** }
 326              	 .loc 3 142 0
 327 0022 BD46     	 mov sp,r7
 328 0024 02B0     	 add sp,sp,#8
 329              	 
 330 0026 80BD     	 pop {r7,pc}
 331              	.L15:
 332              	 .align 2
 333              	.L14:
 334 0028 FFFF00FF 	 .word -16711681
 335              	 .cfi_endproc
 336              	.LFE166:
 338              	 .section .text.XMC_SPI_CH_DisableSlaveSelect,"ax",%progbits
 339              	 .align 2
 340              	 .global XMC_SPI_CH_DisableSlaveSelect
 341              	 .code 16
 342              	 .thumb_func
 344              	XMC_SPI_CH_DisableSlaveSelect:
 345              	.LFB167:
 143:../Libraries/XMCLib/src/xmc_spi.c **** 
 144:../Libraries/XMCLib/src/xmc_spi.c **** /* Disable the slave signals by clearing (SELO) bits in PCR register. */
 145:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel)
 146:../Libraries/XMCLib/src/xmc_spi.c **** {
 346              	 .loc 3 146 0
 347              	 .cfi_startproc
 348 0000 80B5     	 push {r7,lr}
 349              	.LCFI18:
 350              	 .cfi_def_cfa_offset 8
 351              	 .cfi_offset 7,-8
 352              	 .cfi_offset 14,-4
 353 0002 82B0     	 sub sp,sp,#8
 354              	.LCFI19:
 355              	 .cfi_def_cfa_offset 16
 356 0004 00AF     	 add r7,sp,#0
 357              	.LCFI20:
 358              	 .cfi_def_cfa_register 7
 359 0006 7860     	 str r0,[r7,#4]
 147:../Libraries/XMCLib/src/xmc_spi.c ****   XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_MSLS);
 360              	 .loc 3 147 0
 361 0008 7B68     	 ldr r3,[r7,#4]
 362 000a 181C     	 mov r0,r3
 363 000c 0121     	 mov r1,#1
 364 000e FFF7FEFF 	 bl XMC_SPI_CH_ClearStatusFlag
 148:../Libraries/XMCLib/src/xmc_spi.c ****   
 149:../Libraries/XMCLib/src/xmc_spi.c ****   /* Configuration of Protocol Control Register */
 150:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 365              	 .loc 3 150 0
 366 0012 7B68     	 ldr r3,[r7,#4]
 367 0014 DB6B     	 ldr r3,[r3,#60]
 368 0016 034A     	 ldr r2,.L17
 369 0018 1A40     	 and r2,r3
 370 001a 7B68     	 ldr r3,[r7,#4]
 371 001c DA63     	 str r2,[r3,#60]
 151:../Libraries/XMCLib/src/xmc_spi.c **** }
 372              	 .loc 3 151 0
 373 001e BD46     	 mov sp,r7
 374 0020 02B0     	 add sp,sp,#8
 375              	 
 376 0022 80BD     	 pop {r7,pc}
 377              	.L18:
 378              	 .align 2
 379              	.L17:
 380 0024 FFFF00FF 	 .word -16711681
 381              	 .cfi_endproc
 382              	.LFE167:
 384              	 .section .text.XMC_SPI_CH_Transmit,"ax",%progbits
 385              	 .align 2
 386              	 .global XMC_SPI_CH_Transmit
 387              	 .code 16
 388              	 .thumb_func
 390              	XMC_SPI_CH_Transmit:
 391              	.LFB168:
 152:../Libraries/XMCLib/src/xmc_spi.c **** 
 153:../Libraries/XMCLib/src/xmc_spi.c **** /* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the pr
 154:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t
 155:../Libraries/XMCLib/src/xmc_spi.c **** {
 392              	 .loc 3 155 0
 393              	 .cfi_startproc
 394 0000 80B5     	 push {r7,lr}
 395              	.LCFI21:
 396              	 .cfi_def_cfa_offset 8
 397              	 .cfi_offset 7,-8
 398              	 .cfi_offset 14,-4
 399 0002 82B0     	 sub sp,sp,#8
 400              	.LCFI22:
 401              	 .cfi_def_cfa_offset 16
 402 0004 00AF     	 add r7,sp,#0
 403              	.LCFI23:
 404              	 .cfi_def_cfa_register 7
 405 0006 7860     	 str r0,[r7,#4]
 406 0008 081C     	 mov r0,r1
 407 000a 111C     	 mov r1,r2
 408 000c BB1C     	 add r3,r7,#2
 409 000e 021C     	 add r2,r0,#0
 410 0010 1A80     	 strh r2,[r3]
 411 0012 7B1C     	 add r3,r7,#1
 412 0014 0A1C     	 add r2,r1,#0
 413 0016 1A70     	 strb r2,[r3]
 156:../Libraries/XMCLib/src/xmc_spi.c **** 
 157:../Libraries/XMCLib/src/xmc_spi.c ****   channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 414              	 .loc 3 157 0
 415 0018 7B68     	 ldr r3,[r7,#4]
 416 001a 1B6C     	 ldr r3,[r3,#64]
 417 001c C022     	 mov r2,#192
 418 001e 9343     	 bic r3,r2
 419 0020 1A1C     	 mov r2,r3
 158:../Libraries/XMCLib/src/xmc_spi.c ****                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 420              	 .loc 3 158 0
 421 0022 7B1C     	 add r3,r7,#1
 422 0024 1B78     	 ldrb r3,[r3]
 423 0026 9B01     	 lsl r3,r3,#6
 424 0028 FF21     	 mov r1,#255
 425 002a 0B40     	 and r3,r1
 157:../Libraries/XMCLib/src/xmc_spi.c ****                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 426              	 .loc 3 157 0
 427 002c 1A43     	 orr r2,r3
 428 002e 7B68     	 ldr r3,[r7,#4]
 429 0030 1A64     	 str r2,[r3,#64]
 159:../Libraries/XMCLib/src/xmc_spi.c **** 
 160:../Libraries/XMCLib/src/xmc_spi.c **** 
 161:../Libraries/XMCLib/src/xmc_spi.c ****   /* Check FIFO size */
 162:../Libraries/XMCLib/src/xmc_spi.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 430              	 .loc 3 162 0
 431 0032 7A68     	 ldr r2,[r7,#4]
 432 0034 8423     	 mov r3,#132
 433 0036 5B00     	 lsl r3,r3,#1
 434 0038 D258     	 ldr r2,[r2,r3]
 435 003a E023     	 mov r3,#224
 436 003c DB04     	 lsl r3,r3,#19
 437 003e 1340     	 and r3,r2
 438 0040 17D1     	 bne .L20
 163:../Libraries/XMCLib/src/xmc_spi.c ****   {
 164:../Libraries/XMCLib/src/xmc_spi.c ****     while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) == (uint32_t)XMC_USIC_CH_TBUF_STAT
 439              	 .loc 3 164 0
 440 0042 C046     	 mov r8,r8
 441              	.L21:
 442              	 .loc 3 164 0 is_stmt 0 discriminator 1
 443 0044 7B68     	 ldr r3,[r7,#4]
 444 0046 181C     	 mov r0,r3
 445 0048 FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 446 004c 031E     	 sub r3,r0,#0
 447 004e 802B     	 cmp r3,#128
 448 0050 F8D0     	 beq .L21
 165:../Libraries/XMCLib/src/xmc_spi.c ****     {
 166:../Libraries/XMCLib/src/xmc_spi.c ****     }
 167:../Libraries/XMCLib/src/xmc_spi.c ****   
 168:../Libraries/XMCLib/src/xmc_spi.c ****     XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 449              	 .loc 3 168 0 is_stmt 1
 450 0052 7A68     	 ldr r2,[r7,#4]
 451 0054 8023     	 mov r3,#128
 452 0056 9B01     	 lsl r3,r3,#6
 453 0058 101C     	 mov r0,r2
 454 005a 191C     	 mov r1,r3
 455 005c FFF7FEFF 	 bl XMC_SPI_CH_ClearStatusFlag
 169:../Libraries/XMCLib/src/xmc_spi.c ****   
 170:../Libraries/XMCLib/src/xmc_spi.c ****     channel->TBUF[mode] = data;
 456              	 .loc 3 170 0
 457 0060 7B1C     	 add r3,r7,#1
 458 0062 1A78     	 ldrb r2,[r3]
 459 0064 BB1C     	 add r3,r7,#2
 460 0066 1988     	 ldrh r1,[r3]
 461 0068 7B68     	 ldr r3,[r7,#4]
 462 006a 2032     	 add r2,r2,#32
 463 006c 9200     	 lsl r2,r2,#2
 464 006e D150     	 str r1,[r2,r3]
 465 0070 07E0     	 b .L19
 466              	.L20:
 171:../Libraries/XMCLib/src/xmc_spi.c ****   }
 172:../Libraries/XMCLib/src/xmc_spi.c ****   else
 173:../Libraries/XMCLib/src/xmc_spi.c ****   {
 174:../Libraries/XMCLib/src/xmc_spi.c ****     channel->IN[mode] = data;
 467              	 .loc 3 174 0
 468 0072 7B1C     	 add r3,r7,#1
 469 0074 1A78     	 ldrb r2,[r3]
 470 0076 BB1C     	 add r3,r7,#2
 471 0078 1988     	 ldrh r1,[r3]
 472 007a 7B68     	 ldr r3,[r7,#4]
 473 007c 6032     	 add r2,r2,#96
 474 007e 9200     	 lsl r2,r2,#2
 475 0080 D150     	 str r1,[r2,r3]
 476              	.L19:
 175:../Libraries/XMCLib/src/xmc_spi.c ****   }
 176:../Libraries/XMCLib/src/xmc_spi.c **** }
 477              	 .loc 3 176 0
 478 0082 BD46     	 mov sp,r7
 479 0084 02B0     	 add sp,sp,#8
 480              	 
 481 0086 80BD     	 pop {r7,pc}
 482              	 .cfi_endproc
 483              	.LFE168:
 485              	 .section .text.XMC_SPI_CH_GetReceivedData,"ax",%progbits
 486              	 .align 2
 487              	 .global XMC_SPI_CH_GetReceivedData
 488              	 .code 16
 489              	 .thumb_func
 491              	XMC_SPI_CH_GetReceivedData:
 492              	.LFB169:
 177:../Libraries/XMCLib/src/xmc_spi.c **** 
 178:../Libraries/XMCLib/src/xmc_spi.c **** /* Reads the data from the buffers based on the FIFO mode selection. */
 179:../Libraries/XMCLib/src/xmc_spi.c **** uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
 180:../Libraries/XMCLib/src/xmc_spi.c **** {
 493              	 .loc 3 180 0
 494              	 .cfi_startproc
 495 0000 80B5     	 push {r7,lr}
 496              	.LCFI24:
 497              	 .cfi_def_cfa_offset 8
 498              	 .cfi_offset 7,-8
 499              	 .cfi_offset 14,-4
 500 0002 84B0     	 sub sp,sp,#16
 501              	.LCFI25:
 502              	 .cfi_def_cfa_offset 24
 503 0004 00AF     	 add r7,sp,#0
 504              	.LCFI26:
 505              	 .cfi_def_cfa_register 7
 506 0006 7860     	 str r0,[r7,#4]
 181:../Libraries/XMCLib/src/xmc_spi.c ****   uint16_t retval;
 182:../Libraries/XMCLib/src/xmc_spi.c **** 
 183:../Libraries/XMCLib/src/xmc_spi.c ****   /* Check FIFO size */
 184:../Libraries/XMCLib/src/xmc_spi.c ****   if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 507              	 .loc 3 184 0
 508 0008 7A68     	 ldr r2,[r7,#4]
 509 000a 8623     	 mov r3,#134
 510 000c 5B00     	 lsl r3,r3,#1
 511 000e D258     	 ldr r2,[r2,r3]
 512 0010 E023     	 mov r3,#224
 513 0012 DB04     	 lsl r3,r3,#19
 514 0014 1340     	 and r3,r2
 515 0016 05D1     	 bne .L24
 185:../Libraries/XMCLib/src/xmc_spi.c ****   {
 186:../Libraries/XMCLib/src/xmc_spi.c ****     retval = (uint16_t)channel->RBUF;
 516              	 .loc 3 186 0
 517 0018 7B68     	 ldr r3,[r7,#4]
 518 001a 5A6D     	 ldr r2,[r3,#84]
 519 001c 0E23     	 mov r3,#14
 520 001e FB18     	 add r3,r7,r3
 521 0020 1A80     	 strh r2,[r3]
 522 0022 06E0     	 b .L25
 523              	.L24:
 187:../Libraries/XMCLib/src/xmc_spi.c ****   }
 188:../Libraries/XMCLib/src/xmc_spi.c ****   else
 189:../Libraries/XMCLib/src/xmc_spi.c ****   {
 190:../Libraries/XMCLib/src/xmc_spi.c ****     retval = (uint16_t)channel->OUTR;
 524              	 .loc 3 190 0
 525 0024 7A68     	 ldr r2,[r7,#4]
 526 0026 8E23     	 mov r3,#142
 527 0028 5B00     	 lsl r3,r3,#1
 528 002a D258     	 ldr r2,[r2,r3]
 529 002c 0E23     	 mov r3,#14
 530 002e FB18     	 add r3,r7,r3
 531 0030 1A80     	 strh r2,[r3]
 532              	.L25:
 191:../Libraries/XMCLib/src/xmc_spi.c ****   }
 192:../Libraries/XMCLib/src/xmc_spi.c **** 
 193:../Libraries/XMCLib/src/xmc_spi.c ****   return retval;
 533              	 .loc 3 193 0
 534 0032 0E23     	 mov r3,#14
 535 0034 FB18     	 add r3,r7,r3
 536 0036 1B88     	 ldrh r3,[r3]
 194:../Libraries/XMCLib/src/xmc_spi.c **** }
 537              	 .loc 3 194 0
 538 0038 181C     	 mov r0,r3
 539 003a BD46     	 mov sp,r7
 540 003c 04B0     	 add sp,sp,#16
 541              	 
 542 003e 80BD     	 pop {r7,pc}
 543              	 .cfi_endproc
 544              	.LFE169:
 546              	 .global __aeabi_uidiv
 547              	 .global __aeabi_uidivmod
 548              	 .section .text.XMC_SPI_CH_SetInterwordDelay,"ax",%progbits
 549              	 .align 2
 550              	 .global XMC_SPI_CH_SetInterwordDelay
 551              	 .code 16
 552              	 .thumb_func
 554              	XMC_SPI_CH_SetInterwordDelay:
 555              	.LFB170:
 195:../Libraries/XMCLib/src/xmc_spi.c **** 
 196:../Libraries/XMCLib/src/xmc_spi.c **** /* Configures the inter word delay by setting PCR.PCTQ1, PCR.DCTQ1 bit fields. */
 197:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_SetInterwordDelay(XMC_USIC_CH_t *const channel,uint32_t tinterword_delay_us)
 198:../Libraries/XMCLib/src/xmc_spi.c **** {
 556              	 .loc 3 198 0
 557              	 .cfi_startproc
 558 0000 80B5     	 push {r7,lr}
 559              	.LCFI27:
 560              	 .cfi_def_cfa_offset 8
 561              	 .cfi_offset 7,-8
 562              	 .cfi_offset 14,-4
 563 0002 8EB0     	 sub sp,sp,#56
 564              	.LCFI28:
 565              	 .cfi_def_cfa_offset 64
 566 0004 00AF     	 add r7,sp,#0
 567              	.LCFI29:
 568              	 .cfi_def_cfa_register 7
 569 0006 7860     	 str r0,[r7,#4]
 570 0008 3960     	 str r1,[r7]
 199:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t peripheral_clock;
 200:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t pdiv;
 201:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t step;
 202:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t fFD;
 203:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t fpdiv;
 204:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1 = 0U;
 571              	 .loc 3 204 0
 572 000a 0023     	 mov r3,#0
 573 000c FB61     	 str r3,[r7,#28]
 205:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor2 = 32U;
 574              	 .loc 3 205 0
 575 000e 2023     	 mov r3,#32
 576 0010 7B63     	 str r3,[r7,#52]
 206:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1_int = 0U;
 577              	 .loc 3 206 0
 578 0012 0023     	 mov r3,#0
 579 0014 3B63     	 str r3,[r7,#48]
 207:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1_int_min = 4U;
 580              	 .loc 3 207 0
 581 0016 0423     	 mov r3,#4
 582 0018 FB62     	 str r3,[r7,#44]
 208:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1_frac_min =100U;
 583              	 .loc 3 208 0
 584 001a 6423     	 mov r3,#100
 585 001c BB62     	 str r3,[r7,#40]
 209:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1_frac = 0U;
 586              	 .loc 3 209 0
 587 001e 0023     	 mov r3,#0
 588 0020 7B62     	 str r3,[r7,#36]
 210:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor2_temp = 0U;
 589              	 .loc 3 210 0
 590 0022 0023     	 mov r3,#0
 591 0024 3B62     	 str r3,[r7,#32]
 211:../Libraries/XMCLib/src/xmc_spi.c ****   peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 592              	 .loc 3 211 0
 593 0026 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 594 002a 031C     	 mov r3,r0
 595 002c BB61     	 str r3,[r7,#24]
 212:../Libraries/XMCLib/src/xmc_spi.c ****   pdiv = (uint32_t)(channel->BRG & USIC_CH_BRG_PDIV_Msk) >> USIC_CH_BRG_PDIV_Pos;
 596              	 .loc 3 212 0
 597 002e 7B68     	 ldr r3,[r7,#4]
 598 0030 5B69     	 ldr r3,[r3,#20]
 599 0032 3D4A     	 ldr r2,.L34
 600 0034 1340     	 and r3,r2
 601 0036 1B0C     	 lsr r3,r3,#16
 602 0038 7B61     	 str r3,[r7,#20]
 213:../Libraries/XMCLib/src/xmc_spi.c ****   step = (uint32_t)(channel->FDR & USIC_CH_FDR_STEP_Msk) >> USIC_CH_FDR_STEP_Pos;
 603              	 .loc 3 213 0
 604 003a 7B68     	 ldr r3,[r7,#4]
 605 003c 1B69     	 ldr r3,[r3,#16]
 606 003e 9B05     	 lsl r3,r3,#22
 607 0040 9B0D     	 lsr r3,r3,#22
 608 0042 3B61     	 str r3,[r7,#16]
 214:../Libraries/XMCLib/src/xmc_spi.c ****   fFD = (uint32_t)((peripheral_clock >> 10U) * step);
 609              	 .loc 3 214 0
 610 0044 BB69     	 ldr r3,[r7,#24]
 611 0046 9B0A     	 lsr r3,r3,#10
 612 0048 3A69     	 ldr r2,[r7,#16]
 613 004a 5343     	 mul r3,r2
 614 004c FB60     	 str r3,[r7,#12]
 215:../Libraries/XMCLib/src/xmc_spi.c ****   fpdiv= fFD/(1U+pdiv);
 615              	 .loc 3 215 0
 616 004e 7B69     	 ldr r3,[r7,#20]
 617 0050 0133     	 add r3,r3,#1
 618 0052 F868     	 ldr r0,[r7,#12]
 619 0054 191C     	 mov r1,r3
 620 0056 FFF7FEFF 	 bl __aeabi_uidiv
 621 005a 031C     	 mov r3,r0
 622 005c BB60     	 str r3,[r7,#8]
 216:../Libraries/XMCLib/src/xmc_spi.c **** 
 217:../Libraries/XMCLib/src/xmc_spi.c ****   if(tinterword_delay_us < (128000000/fpdiv))
 623              	 .loc 3 217 0
 624 005e 3348     	 ldr r0,.L34+4
 625 0060 B968     	 ldr r1,[r7,#8]
 626 0062 FFF7FEFF 	 bl __aeabi_uidiv
 627 0066 031C     	 mov r3,r0
 628 0068 1A1E     	 sub r2,r3,#0
 629 006a 3B68     	 ldr r3,[r7]
 630 006c 9A42     	 cmp r2,r3
 631 006e 45D9     	 bls .L28
 218:../Libraries/XMCLib/src/xmc_spi.c ****   {
 219:../Libraries/XMCLib/src/xmc_spi.c ****     for(divider_factor2_temp = 32U; divider_factor2_temp > 0U; --divider_factor2_temp)
 632              	 .loc 3 219 0
 633 0070 2023     	 mov r3,#32
 634 0072 3B62     	 str r3,[r7,#32]
 635 0074 3FE0     	 b .L29
 636              	.L33:
 220:../Libraries/XMCLib/src/xmc_spi.c ****     {
 221:../Libraries/XMCLib/src/xmc_spi.c **** 
 222:../Libraries/XMCLib/src/xmc_spi.c ****       divider_factor1 = (tinterword_delay_us*fpdiv)/(divider_factor2_temp*10000);
 637              	 .loc 3 222 0
 638 0076 3B68     	 ldr r3,[r7]
 639 0078 BA68     	 ldr r2,[r7,#8]
 640 007a 5A43     	 mul r2,r3
 641 007c 111C     	 mov r1,r2
 642 007e 3B6A     	 ldr r3,[r7,#32]
 643 0080 2B4A     	 ldr r2,.L34+8
 644 0082 5343     	 mul r3,r2
 645 0084 081C     	 mov r0,r1
 646 0086 191C     	 mov r1,r3
 647 0088 FFF7FEFF 	 bl __aeabi_uidiv
 648 008c 031C     	 mov r3,r0
 649 008e FB61     	 str r3,[r7,#28]
 223:../Libraries/XMCLib/src/xmc_spi.c ****       divider_factor1_frac = divider_factor1%100U;
 650              	 .loc 3 223 0
 651 0090 FB69     	 ldr r3,[r7,#28]
 652 0092 181C     	 mov r0,r3
 653 0094 6421     	 mov r1,#100
 654 0096 FFF7FEFF 	 bl __aeabi_uidivmod
 655 009a 0B1C     	 mov r3,r1
 656 009c 7B62     	 str r3,[r7,#36]
 224:../Libraries/XMCLib/src/xmc_spi.c **** 
 225:../Libraries/XMCLib/src/xmc_spi.c ****       if(divider_factor1_frac > 50)
 657              	 .loc 3 225 0
 658 009e 7B6A     	 ldr r3,[r7,#36]
 659 00a0 322B     	 cmp r3,#50
 660 00a2 0ED9     	 bls .L30
 226:../Libraries/XMCLib/src/xmc_spi.c ****       {
 227:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_int =  (divider_factor1/100U)+1;
 661              	 .loc 3 227 0
 662 00a4 FB69     	 ldr r3,[r7,#28]
 663 00a6 181C     	 mov r0,r3
 664 00a8 6421     	 mov r1,#100
 665 00aa FFF7FEFF 	 bl __aeabi_uidiv
 666 00ae 031C     	 mov r3,r0
 667 00b0 0133     	 add r3,r3,#1
 668 00b2 3B63     	 str r3,[r7,#48]
 228:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_frac = (divider_factor1_int*100)-divider_factor1;
 669              	 .loc 3 228 0
 670 00b4 3B6B     	 ldr r3,[r7,#48]
 671 00b6 6422     	 mov r2,#100
 672 00b8 5A43     	 mul r2,r3
 673 00ba FB69     	 ldr r3,[r7,#28]
 674 00bc D31A     	 sub r3,r2,r3
 675 00be 7B62     	 str r3,[r7,#36]
 676 00c0 06E0     	 b .L31
 677              	.L30:
 229:../Libraries/XMCLib/src/xmc_spi.c ****       }
 230:../Libraries/XMCLib/src/xmc_spi.c ****       else
 231:../Libraries/XMCLib/src/xmc_spi.c ****       {
 232:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_int =  (divider_factor1/100U);
 678              	 .loc 3 232 0
 679 00c2 FB69     	 ldr r3,[r7,#28]
 680 00c4 181C     	 mov r0,r3
 681 00c6 6421     	 mov r1,#100
 682 00c8 FFF7FEFF 	 bl __aeabi_uidiv
 683 00cc 031C     	 mov r3,r0
 684 00ce 3B63     	 str r3,[r7,#48]
 685              	.L31:
 233:../Libraries/XMCLib/src/xmc_spi.c ****       }
 234:../Libraries/XMCLib/src/xmc_spi.c **** 
 235:../Libraries/XMCLib/src/xmc_spi.c ****       if ((divider_factor1_int < 5U) && (divider_factor1_int > 0) && (divider_factor1_frac < divide
 686              	 .loc 3 235 0
 687 00d0 3B6B     	 ldr r3,[r7,#48]
 688 00d2 042B     	 cmp r3,#4
 689 00d4 0CD8     	 bhi .L32
 690              	 .loc 3 235 0 is_stmt 0 discriminator 1
 691 00d6 3B6B     	 ldr r3,[r7,#48]
 692 00d8 002B     	 cmp r3,#0
 693 00da 09D0     	 beq .L32
 694              	 .loc 3 235 0 discriminator 2
 695 00dc 7A6A     	 ldr r2,[r7,#36]
 696 00de BB6A     	 ldr r3,[r7,#40]
 697 00e0 9A42     	 cmp r2,r3
 698 00e2 05D2     	 bcs .L32
 236:../Libraries/XMCLib/src/xmc_spi.c ****       {
 237:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_frac_min = divider_factor1_frac;
 699              	 .loc 3 237 0 is_stmt 1
 700 00e4 7B6A     	 ldr r3,[r7,#36]
 701 00e6 BB62     	 str r3,[r7,#40]
 238:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_int_min = divider_factor1_int;
 702              	 .loc 3 238 0
 703 00e8 3B6B     	 ldr r3,[r7,#48]
 704 00ea FB62     	 str r3,[r7,#44]
 239:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor2= divider_factor2_temp;
 705              	 .loc 3 239 0
 706 00ec 3B6A     	 ldr r3,[r7,#32]
 707 00ee 7B63     	 str r3,[r7,#52]
 708              	.L32:
 219:../Libraries/XMCLib/src/xmc_spi.c ****     {
 709              	 .loc 3 219 0 discriminator 2
 710 00f0 3B6A     	 ldr r3,[r7,#32]
 711 00f2 013B     	 sub r3,r3,#1
 712 00f4 3B62     	 str r3,[r7,#32]
 713              	.L29:
 219:../Libraries/XMCLib/src/xmc_spi.c ****     {
 714              	 .loc 3 219 0 is_stmt 0 discriminator 1
 715 00f6 3B6A     	 ldr r3,[r7,#32]
 716 00f8 002B     	 cmp r3,#0
 717 00fa BCD1     	 bne .L33
 718              	.L28:
 240:../Libraries/XMCLib/src/xmc_spi.c ****       }
 241:../Libraries/XMCLib/src/xmc_spi.c ****     }
 242:../Libraries/XMCLib/src/xmc_spi.c ****   }
 243:../Libraries/XMCLib/src/xmc_spi.c **** 
 244:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode = (uint32_t)((channel->PCR_SSCMode) & (~(USIC_CH_PCR_SSCMode_DCTQ1_Msk |
 719              	 .loc 3 244 0 is_stmt 1
 720 00fc 7B68     	 ldr r3,[r7,#4]
 721 00fe DB6B     	 ldr r3,[r3,#60]
 722 0100 0C4A     	 ldr r2,.L34+12
 723 0102 1A40     	 and r2,r3
 245:../Libraries/XMCLib/src/xmc_spi.c ****                                                                 USIC_CH_PCR_SSCMode_PCTQ1_Msk |
 246:../Libraries/XMCLib/src/xmc_spi.c ****                                                                 USIC_CH_PCR_SSCMode_CTQSEL1_Msk))) 
 247:../Libraries/XMCLib/src/xmc_spi.c ****                          (((divider_factor1_int_min - 1) << USIC_CH_PCR_SSCMode_PCTQ1_Pos) & (uint3
 724              	 .loc 3 247 0
 725 0104 FB6A     	 ldr r3,[r7,#44]
 726 0106 013B     	 sub r3,r3,#1
 727 0108 9B01     	 lsl r3,r3,#6
 728 010a FF21     	 mov r1,#255
 729 010c 0B40     	 and r3,r1
 246:../Libraries/XMCLib/src/xmc_spi.c ****                          (((divider_factor1_int_min - 1) << USIC_CH_PCR_SSCMode_PCTQ1_Pos) & (uint3
 730              	 .loc 3 246 0
 731 010e 1A43     	 orr r2,r3
 248:../Libraries/XMCLib/src/xmc_spi.c ****                          (((divider_factor2 - 1 ) << USIC_CH_PCR_SSCMode_DCTQ1_Pos) & (uint32_t)USI
 732              	 .loc 3 248 0
 733 0110 7B6B     	 ldr r3,[r7,#52]
 734 0112 013B     	 sub r3,r3,#1
 735 0114 1902     	 lsl r1,r3,#8
 736 0116 F823     	 mov r3,#248
 737 0118 5B01     	 lsl r3,r3,#5
 738 011a 0B40     	 and r3,r1
 247:../Libraries/XMCLib/src/xmc_spi.c ****                          (((divider_factor2 - 1 ) << USIC_CH_PCR_SSCMode_DCTQ1_Pos) & (uint32_t)USI
 739              	 .loc 3 247 0
 740 011c 1A43     	 orr r2,r3
 244:../Libraries/XMCLib/src/xmc_spi.c ****                                                                 USIC_CH_PCR_SSCMode_PCTQ1_Msk |
 741              	 .loc 3 244 0
 742 011e 7B68     	 ldr r3,[r7,#4]
 743 0120 DA63     	 str r2,[r3,#60]
 249:../Libraries/XMCLib/src/xmc_spi.c **** }
 744              	 .loc 3 249 0
 745 0122 BD46     	 mov sp,r7
 746 0124 0EB0     	 add sp,sp,#56
 747              	 
 748 0126 80BD     	 pop {r7,pc}
 749              	.L35:
 750              	 .align 2
 751              	.L34:
 752 0128 0000FF03 	 .word 67043328
 753 012c 0020A107 	 .word 128000000
 754 0130 10270000 	 .word 10000
 755 0134 0FE0FFFF 	 .word -8177
 756              	 .cfi_endproc
 757              	.LFE170:
 759              	 .section .text.XMC_SPI_CH_Stop,"ax",%progbits
 760              	 .align 2
 761              	 .global XMC_SPI_CH_Stop
 762              	 .code 16
 763              	 .thumb_func
 765              	XMC_SPI_CH_Stop:
 766              	.LFB171:
 250:../Libraries/XMCLib/src/xmc_spi.c **** 
 251:../Libraries/XMCLib/src/xmc_spi.c **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel)
 252:../Libraries/XMCLib/src/xmc_spi.c **** {
 767              	 .loc 3 252 0
 768              	 .cfi_startproc
 769 0000 80B5     	 push {r7,lr}
 770              	.LCFI30:
 771              	 .cfi_def_cfa_offset 8
 772              	 .cfi_offset 7,-8
 773              	 .cfi_offset 14,-4
 774 0002 84B0     	 sub sp,sp,#16
 775              	.LCFI31:
 776              	 .cfi_def_cfa_offset 24
 777 0004 00AF     	 add r7,sp,#0
 778              	.LCFI32:
 779              	 .cfi_def_cfa_register 7
 780 0006 7860     	 str r0,[r7,#4]
 253:../Libraries/XMCLib/src/xmc_spi.c ****   XMC_SPI_CH_STATUS_t status = XMC_SPI_CH_STATUS_OK;
 781              	 .loc 3 253 0
 782 0008 0F23     	 mov r3,#15
 783 000a FB18     	 add r3,r7,r3
 784 000c 0022     	 mov r2,#0
 785 000e 1A70     	 strb r2,[r3]
 254:../Libraries/XMCLib/src/xmc_spi.c **** 
 255:../Libraries/XMCLib/src/xmc_spi.c ****   if (((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_B
 786              	 .loc 3 255 0
 787 0010 7B68     	 ldr r3,[r7,#4]
 788 0012 181C     	 mov r0,r3
 789 0014 FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 790 0018 031C     	 mov r3,r0
 791 001a DBB2     	 uxtb r3,r3
 792 001c 5BB2     	 sxtb r3,r3
 793 001e 002B     	 cmp r3,#0
 794 0020 04DA     	 bge .L37
 256:../Libraries/XMCLib/src/xmc_spi.c ****   {
 257:../Libraries/XMCLib/src/xmc_spi.c ****     status = XMC_SPI_CH_STATUS_BUSY;
 795              	 .loc 3 257 0
 796 0022 0F23     	 mov r3,#15
 797 0024 FB18     	 add r3,r7,r3
 798 0026 0222     	 mov r2,#2
 799 0028 1A70     	 strb r2,[r3]
 800 002a 04E0     	 b .L38
 801              	.L37:
 258:../Libraries/XMCLib/src/xmc_spi.c ****   }
 259:../Libraries/XMCLib/src/xmc_spi.c ****   else
 260:../Libraries/XMCLib/src/xmc_spi.c ****   {
 261:../Libraries/XMCLib/src/xmc_spi.c **** 
 262:../Libraries/XMCLib/src/xmc_spi.c ****     /* USIC channel in IDLE mode */
 263:../Libraries/XMCLib/src/xmc_spi.c ****     XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 802              	 .loc 3 263 0
 803 002c 7B68     	 ldr r3,[r7,#4]
 804 002e 181C     	 mov r0,r3
 805 0030 0021     	 mov r1,#0
 806 0032 FFF7FEFF 	 bl XMC_USIC_CH_SetMode
 807              	.L38:
 264:../Libraries/XMCLib/src/xmc_spi.c ****   }
 265:../Libraries/XMCLib/src/xmc_spi.c **** 
 266:../Libraries/XMCLib/src/xmc_spi.c ****   return status;
 808              	 .loc 3 266 0
 809 0036 0F23     	 mov r3,#15
 810 0038 FB18     	 add r3,r7,r3
 811 003a 1B78     	 ldrb r3,[r3]
 267:../Libraries/XMCLib/src/xmc_spi.c **** }
 812              	 .loc 3 267 0
 813 003c 181C     	 mov r0,r3
 814 003e BD46     	 mov sp,r7
 815 0040 04B0     	 add sp,sp,#16
 816              	 
 817 0042 80BD     	 pop {r7,pc}
 818              	 .cfi_endproc
 819              	.LFE171:
 821              	 .section .text.XMC_SPI_CH_EnableEvent,"ax",%progbits
 822              	 .align 2
 823              	 .global XMC_SPI_CH_EnableEvent
 824              	 .code 16
 825              	 .thumb_func
 827              	XMC_SPI_CH_EnableEvent:
 828              	.LFB172:
 268:../Libraries/XMCLib/src/xmc_spi.c **** 
 269:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 270:../Libraries/XMCLib/src/xmc_spi.c **** {
 829              	 .loc 3 270 0
 830              	 .cfi_startproc
 831 0000 80B5     	 push {r7,lr}
 832              	.LCFI33:
 833              	 .cfi_def_cfa_offset 8
 834              	 .cfi_offset 7,-8
 835              	 .cfi_offset 14,-4
 836 0002 82B0     	 sub sp,sp,#8
 837              	.LCFI34:
 838              	 .cfi_def_cfa_offset 16
 839 0004 00AF     	 add r7,sp,#0
 840              	.LCFI35:
 841              	 .cfi_def_cfa_register 7
 842 0006 7860     	 str r0,[r7,#4]
 843 0008 3960     	 str r1,[r7]
 271:../Libraries/XMCLib/src/xmc_spi.c ****   channel->CCR |= (event&0x1fc00U);
 844              	 .loc 3 271 0
 845 000a 7B68     	 ldr r3,[r7,#4]
 846 000c 1A6C     	 ldr r2,[r3,#64]
 847 000e 3968     	 ldr r1,[r7]
 848 0010 FE23     	 mov r3,#254
 849 0012 5B02     	 lsl r3,r3,#9
 850 0014 0B40     	 and r3,r1
 851 0016 1A43     	 orr r2,r3
 852 0018 7B68     	 ldr r3,[r7,#4]
 853 001a 1A64     	 str r2,[r3,#64]
 272:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 854              	 .loc 3 272 0
 855 001c 7B68     	 ldr r3,[r7,#4]
 856 001e DA6B     	 ldr r2,[r3,#60]
 857 0020 3B68     	 ldr r3,[r7]
 858 0022 5B03     	 lsl r3,r3,#13
 859 0024 1B04     	 lsl r3,r3,#16
 860 0026 1B0C     	 lsr r3,r3,#16
 861 0028 1A43     	 orr r2,r3
 862 002a 7B68     	 ldr r3,[r7,#4]
 863 002c DA63     	 str r2,[r3,#60]
 273:../Libraries/XMCLib/src/xmc_spi.c **** }
 864              	 .loc 3 273 0
 865 002e BD46     	 mov sp,r7
 866 0030 02B0     	 add sp,sp,#8
 867              	 
 868 0032 80BD     	 pop {r7,pc}
 869              	 .cfi_endproc
 870              	.LFE172:
 872              	 .section .text.XMC_SPI_CH_DisableEvent,"ax",%progbits
 873              	 .align 2
 874              	 .global XMC_SPI_CH_DisableEvent
 875              	 .code 16
 876              	 .thumb_func
 878              	XMC_SPI_CH_DisableEvent:
 879              	.LFB173:
 274:../Libraries/XMCLib/src/xmc_spi.c **** 
 275:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 276:../Libraries/XMCLib/src/xmc_spi.c **** {
 880              	 .loc 3 276 0
 881              	 .cfi_startproc
 882 0000 80B5     	 push {r7,lr}
 883              	.LCFI36:
 884              	 .cfi_def_cfa_offset 8
 885              	 .cfi_offset 7,-8
 886              	 .cfi_offset 14,-4
 887 0002 82B0     	 sub sp,sp,#8
 888              	.LCFI37:
 889              	 .cfi_def_cfa_offset 16
 890 0004 00AF     	 add r7,sp,#0
 891              	.LCFI38:
 892              	 .cfi_def_cfa_register 7
 893 0006 7860     	 str r0,[r7,#4]
 894 0008 3960     	 str r1,[r7]
 277:../Libraries/XMCLib/src/xmc_spi.c ****   channel->CCR &= (uint32_t)~(event&0x1fc00U);
 895              	 .loc 3 277 0
 896 000a 7B68     	 ldr r3,[r7,#4]
 897 000c 1B6C     	 ldr r3,[r3,#64]
 898 000e 3968     	 ldr r1,[r7]
 899 0010 FE22     	 mov r2,#254
 900 0012 5202     	 lsl r2,r2,#9
 901 0014 0A40     	 and r2,r1
 902 0016 D243     	 mvn r2,r2
 903 0018 1A40     	 and r2,r3
 904 001a 7B68     	 ldr r3,[r7,#4]
 905 001c 1A64     	 str r2,[r3,#64]
 278:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 906              	 .loc 3 278 0
 907 001e 7B68     	 ldr r3,[r7,#4]
 908 0020 DB6B     	 ldr r3,[r3,#60]
 909 0022 3A68     	 ldr r2,[r7]
 910 0024 5203     	 lsl r2,r2,#13
 911 0026 1204     	 lsl r2,r2,#16
 912 0028 120C     	 lsr r2,r2,#16
 913 002a D243     	 mvn r2,r2
 914 002c 1A40     	 and r2,r3
 915 002e 7B68     	 ldr r3,[r7,#4]
 916 0030 DA63     	 str r2,[r3,#60]
 279:../Libraries/XMCLib/src/xmc_spi.c **** }
 917              	 .loc 3 279 0
 918 0032 BD46     	 mov sp,r7
 919 0034 02B0     	 add sp,sp,#8
 920              	 
 921 0036 80BD     	 pop {r7,pc}
 922              	 .cfi_endproc
 923              	.LFE173:
 925              	 .text
 926              	.Letext0:
 927              	 .file 4 "n:\\eecs 473\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 928              	 .file 5 "n:\\eecs 473\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 929              	 .file 6 "N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_spi.c
    {standard input}:18     .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 $t
    {standard input}:22     .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 XMC_USIC_CH_GetTransmitBufferStatus
    {standard input}:56     .text.XMC_USIC_CH_SetMode:00000000 $t
    {standard input}:60     .text.XMC_USIC_CH_SetMode:00000000 XMC_USIC_CH_SetMode
    {standard input}:99     .text.XMC_SPI_CH_ClearStatusFlag:00000000 $t
    {standard input}:103    .text.XMC_SPI_CH_ClearStatusFlag:00000000 XMC_SPI_CH_ClearStatusFlag
    {standard input}:137    .text.XMC_SPI_CH_Init:00000000 $t
    {standard input}:142    .text.XMC_SPI_CH_Init:00000000 XMC_SPI_CH_Init
    {standard input}:222    .text.XMC_SPI_CH_Init:00000068 $d
    {standard input}:227    .text.XMC_SPI_CH_SetBaudrate:00000000 $t
    {standard input}:232    .text.XMC_SPI_CH_SetBaudrate:00000000 XMC_SPI_CH_SetBaudrate
    {standard input}:290    .text.XMC_SPI_CH_EnableSlaveSelect:00000000 $t
    {standard input}:295    .text.XMC_SPI_CH_EnableSlaveSelect:00000000 XMC_SPI_CH_EnableSlaveSelect
    {standard input}:334    .text.XMC_SPI_CH_EnableSlaveSelect:00000028 $d
    {standard input}:339    .text.XMC_SPI_CH_DisableSlaveSelect:00000000 $t
    {standard input}:344    .text.XMC_SPI_CH_DisableSlaveSelect:00000000 XMC_SPI_CH_DisableSlaveSelect
    {standard input}:380    .text.XMC_SPI_CH_DisableSlaveSelect:00000024 $d
    {standard input}:385    .text.XMC_SPI_CH_Transmit:00000000 $t
    {standard input}:390    .text.XMC_SPI_CH_Transmit:00000000 XMC_SPI_CH_Transmit
    {standard input}:486    .text.XMC_SPI_CH_GetReceivedData:00000000 $t
    {standard input}:491    .text.XMC_SPI_CH_GetReceivedData:00000000 XMC_SPI_CH_GetReceivedData
    {standard input}:549    .text.XMC_SPI_CH_SetInterwordDelay:00000000 $t
    {standard input}:554    .text.XMC_SPI_CH_SetInterwordDelay:00000000 XMC_SPI_CH_SetInterwordDelay
    {standard input}:752    .text.XMC_SPI_CH_SetInterwordDelay:00000128 $d
    {standard input}:760    .text.XMC_SPI_CH_Stop:00000000 $t
    {standard input}:765    .text.XMC_SPI_CH_Stop:00000000 XMC_SPI_CH_Stop
    {standard input}:822    .text.XMC_SPI_CH_EnableEvent:00000000 $t
    {standard input}:827    .text.XMC_SPI_CH_EnableEvent:00000000 XMC_SPI_CH_EnableEvent
    {standard input}:873    .text.XMC_SPI_CH_DisableEvent:00000000 $t
    {standard input}:878    .text.XMC_SPI_CH_DisableEvent:00000000 XMC_SPI_CH_DisableEvent
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_USIC_CH_Enable
XMC_USIC_CH_SetBaudrate
XMC_SCU_CLOCK_GetPeripheralClockFrequency
__aeabi_uidiv
__aeabi_uidivmod
