   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_can.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_CAN_IsPanelControlReady,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_CAN_IsPanelControlReady:
  23              	.LFB65:
  24              	 .file 1 "N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc/xmc_can.h"
   1:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
   2:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @date 2017-11-09
   4:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
   5:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @cond
   6:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
   7:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
   9:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * All rights reserved.                        
  11:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *                                             
  12:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * following conditions are met:   
  14:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  15:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer.                        
  17:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 
  18:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 
  21:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  24:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  32:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
  35:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
  36:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Change History
  37:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * --------------
  38:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
  39:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  40:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  41:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  42:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
  43:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  44:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
  48:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  49:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *      
  52:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  53:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
  55:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  56:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
  58:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  59:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
  61:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  62:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  63:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 
  64:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  65:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  66:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  67:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
  68:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  69:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  70:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * related APIs.
  71:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  72:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  73:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  74:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  75:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
  76:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  77:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @code
  78:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  79:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  80:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  81:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  82:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * //Node configuration
  83:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  84:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  85:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * //disable configuration
  86:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  87:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  88:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  89:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @endcode
  90:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
  91:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
  92:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>  
  93:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @endcond
  94:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
  95:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
  96:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
  97:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
  98:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
  99:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #include <string.h>
 110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * CAN nodes. 
 124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * gateways between 
 126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * node analysis.
 128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 
 129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 
 135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * MACROS
 164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * ENUMS
 175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** */
 179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** */
 191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** */
 207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,       /**< Bus-off status */
 333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #endif
 338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #endif
 356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator 
 450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {  
 453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #else
 457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #endif
 459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #else
 461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #endif
 463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** */
 471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                    the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 
 477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** */
 515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   #pragma push
 520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   #pragma anon_unions
 521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning 586
 523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #endif
 524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** */
 530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   union{
 534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection:3;   /**<   Defines function of the frame counter  */
 537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode:2;      /**<   Determines the operation mode of the frame count
 538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****     };
 540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   };
 543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** */
 548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   union{
 557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message ident
 559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****     };
 562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   };
 564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   union{
 565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****     };
 569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   };
 571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   union{
 574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****       uint8_t can_data_byte[8];                 /**< Each position of the array represents a data b
 576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****       uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bit
 577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_dat
 578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                               of the data */
 579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****       uint64_t can_data_long;                   /** Data of the Message Object*/
 580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****       };
 581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   #pragma pop
 588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning restore
 590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #endif
 591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * API Prototypes
 593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** extern "C" {
 596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #endif
 597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *         for details.
 619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 634:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 635:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 636:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 637:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 638:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 639:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 640:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 641:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 642:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 643:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 644:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 645:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 646:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 647:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 648:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 649:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 650:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 651:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 652:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 653:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 654:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 655:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 656:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 657:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 658:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 659:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 660:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 661:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 662:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 663:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 664:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 665:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 666:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 667:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 668:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 669:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 670:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
  25              	 .loc 1 670 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
 671:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
  39              	 .loc 1 671 0
  40 0008 7A68     	 ldr r2,[r7,#4]
  41 000a E223     	 mov r3,#226
  42 000c 5B00     	 lsl r3,r3,#1
  43 000e D258     	 ldr r2,[r2,r3]
  44 0010 C023     	 mov r3,#192
  45 0012 9B00     	 lsl r3,r3,#2
  46 0014 1340     	 and r3,r2
  47 0016 5A42     	 neg r2,r3
  48 0018 5341     	 adc r3,r3,r2
  49 001a DBB2     	 uxtb r3,r3
 672:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
  50              	 .loc 1 672 0
  51 001c 181C     	 mov r0,r3
  52 001e BD46     	 mov sp,r7
  53 0020 02B0     	 add sp,sp,#8
  54              	 
  55 0022 80BD     	 pop {r7,pc}
  56              	 .cfi_endproc
  57              	.LFE65:
  59              	 .section .text.XMC_CAN_PanelControl,"ax",%progbits
  60              	 .align 2
  61              	 .code 16
  62              	 .thumb_func
  64              	XMC_CAN_PanelControl:
  65              	.LFB66:
 673:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 674:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 675:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 676:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 677:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 678:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 679:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 680:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 681:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 682:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 683:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 684:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 685:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 686:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 687:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 688:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 689:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 690:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  register.
 691:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 692:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 693:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 694:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 695:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 696:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 697:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 698:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 699:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg1,
 700:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg2)
 701:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
  66              	 .loc 1 701 0
  67              	 .cfi_startproc
  68 0000 90B5     	 push {r4,r7,lr}
  69              	.LCFI3:
  70              	 .cfi_def_cfa_offset 12
  71              	 .cfi_offset 4,-12
  72              	 .cfi_offset 7,-8
  73              	 .cfi_offset 14,-4
  74 0002 83B0     	 sub sp,sp,#12
  75              	.LCFI4:
  76              	 .cfi_def_cfa_offset 24
  77 0004 00AF     	 add r7,sp,#0
  78              	.LCFI5:
  79              	 .cfi_def_cfa_register 7
  80 0006 7860     	 str r0,[r7,#4]
  81 0008 0C1C     	 mov r4,r1
  82 000a 101C     	 mov r0,r2
  83 000c 191C     	 mov r1,r3
  84 000e FB1C     	 add r3,r7,#3
  85 0010 221C     	 add r2,r4,#0
  86 0012 1A70     	 strb r2,[r3]
  87 0014 BB1C     	 add r3,r7,#2
  88 0016 021C     	 add r2,r0,#0
  89 0018 1A70     	 strb r2,[r3]
  90 001a 7B1C     	 add r3,r7,#1
  91 001c 0A1C     	 add r2,r1,#0
  92 001e 1A70     	 strb r2,[r3]
 702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
  93              	 .loc 1 702 0
  94 0020 FB1C     	 add r3,r7,#3
  95 0022 1A78     	 ldrb r2,[r3]
 703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
  96              	 .loc 1 703 0
  97 0024 BB1C     	 add r3,r7,#2
  98 0026 1B78     	 ldrb r3,[r3]
  99 0028 1904     	 lsl r1,r3,#16
 100 002a FF23     	 mov r3,#255
 101 002c 1B04     	 lsl r3,r3,#16
 102 002e 0B40     	 and r3,r1
 702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 103              	 .loc 1 702 0
 104 0030 1A43     	 orr r2,r3
 704:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 105              	 .loc 1 704 0
 106 0032 7B1C     	 add r3,r7,#1
 107 0034 1B78     	 ldrb r3,[r3]
 108 0036 1B06     	 lsl r3,r3,#24
 703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 109              	 .loc 1 703 0
 110 0038 1A43     	 orr r2,r3
 111 003a 111C     	 mov r1,r2
 702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 112              	 .loc 1 702 0
 113 003c 7A68     	 ldr r2,[r7,#4]
 114 003e E223     	 mov r3,#226
 115 0040 5B00     	 lsl r3,r3,#1
 116 0042 D150     	 str r1,[r2,r3]
 705:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
 117              	 .loc 1 705 0
 118 0044 BD46     	 mov sp,r7
 119 0046 03B0     	 add sp,sp,#12
 120              	 
 121 0048 90BD     	 pop {r4,r7,pc}
 122              	 .cfi_endproc
 123              	.LFE66:
 125 004a C046     	 .section .text.XMC_CAN_NODE_EnableConfigurationChange,"ax",%progbits
 126              	 .align 2
 127              	 .code 16
 128              	 .thumb_func
 130              	XMC_CAN_NODE_EnableConfigurationChange:
 131              	.LFB82:
 706:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 707:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 708:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 709:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 710:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 711:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 712:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 713:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 714:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 715:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 716:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 717:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 718:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 719:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 720:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 721:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 722:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 723:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 724:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 725:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 726:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 727:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 728:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 729:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 730:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
 731:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 732:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 733:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 734:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 735:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 736:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 737:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 738:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 739:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). 
 740:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 741:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 742:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 743:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 744:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 745:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 746:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 747:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 748:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN. 
 749:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 750:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 751:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 752:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 753:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 754:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 755:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 756:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 757:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 758:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 759:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 760:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 761:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 762:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 763:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 764:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 765:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 766:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 767:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 768:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 769:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 770:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 771:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 772:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 773:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 774:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 775:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 776:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 777:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 778:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 779:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 780:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 781:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * 
 782:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 783:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 784:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 785:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 786:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 787:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 788:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 789:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 790:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 791:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 792:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 793:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 794:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency 
 795:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 796:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 797:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 798:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 799:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 800:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 801:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 802:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 803:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 804:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 805:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 806:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 807:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 808:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 809:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 810:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 811:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 812:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 813:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 814:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 815:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 816:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 817:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 818:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 819:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 820:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 821:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 822:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 823:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 824:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 825:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 826:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 827:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 828:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #else
 829:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 830:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** #endif
 831:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 832:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 833:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 834:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 835:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 836:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 837:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 838:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 839:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 840:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 841:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 842:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 843:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * None
 844:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 845:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 846:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 847:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 848:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 849:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 850:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 851:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 852:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 853:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 854:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 855:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 856:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 857:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 858:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 859:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 860:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 861:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 862:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * None
 863:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 864:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 865:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 866:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 867:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 868:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                                           const uint32_t service_request)
 869:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 870:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 871:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
 872:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 873:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 874:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 875:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 876:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 877:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 878:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 879:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 880:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 881:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 882:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 883:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 884:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 885:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 886:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * None
 887:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 888:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 889:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 890:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_b
 891:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 892:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 893:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 894:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 895:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 896:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 897:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 898:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 899:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 900:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate. 
 901:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 902:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 903:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 904:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 905:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 906:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 907:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 908:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 909:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 910:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 911:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 912:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 913:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 914:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 915:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 916:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 917:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 918:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 919:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 920:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 921:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 922:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 923:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 924:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 925:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 926:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 927:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * None
 928:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 929:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 930:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 931:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 932:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 933:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 934:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 935:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                                               const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 936:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 937:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 938:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 939:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
 940:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 941:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 942:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 943:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 944:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 945:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 946:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 947:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 948:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 949:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 950:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 951:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 952:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 953:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 954:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 955:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 956:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 957:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 958:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 959:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 960:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 961:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 962:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 963:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 964:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 965:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
 966:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 967:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 968:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 969:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 970:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 971:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 972:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 973:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 974:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 975:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 976:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 977:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 978:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 979:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 980:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 981:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 982:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 983:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 984:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 985:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
 986:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 987:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 988:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 989:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 990:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
 991:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 992:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
 993:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
 994:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 995:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 996:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
 997:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
 998:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
 999:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1000:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1001:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1002:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1003:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1004:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1005:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1006:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1007:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
1008:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1009:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1010:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1011:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1012:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
1013:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1014:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1015:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1016:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1017:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1018:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1019:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1020:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1021:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1022:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1023:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1024:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1025:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1026:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
1027:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1028:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1029:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1030:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1031:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
1032:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1033:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1034:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1035:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1036:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1037:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1038:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1039:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1040:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1041:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1042:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1043:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
1044:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1045:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1046:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
1047:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1048:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
1049:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1050:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1051:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
1052:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1053:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1054:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1055:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1056:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1057:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1058:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1059:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1060:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1061:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1062:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1063:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
1064:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1065:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1066:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
1067:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
1068:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
1069:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1070:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1071:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
1072:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1073:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1074:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1075:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1076:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1077:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1078:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1079:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1080:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1081:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1082:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1083:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1084:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1085:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1086:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1087:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1088:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
1089:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1090:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1091:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
1092:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1093:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1094:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
1095:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1096:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1097:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
1098:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1099:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
1115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
1119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
1122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
1125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
1142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
1145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
1148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
1151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
1164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
1168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
1170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
1173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
1190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
1193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
1195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
1198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
1210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
1213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
1215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
1218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
1230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
1233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
1235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
1237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
1250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
1253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
1254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
1255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
1258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
1271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 132              	 .loc 1 1273 0
 133              	 .cfi_startproc
 134 0000 80B5     	 push {r7,lr}
 135              	.LCFI6:
 136              	 .cfi_def_cfa_offset 8
 137              	 .cfi_offset 7,-8
 138              	 .cfi_offset 14,-4
 139 0002 82B0     	 sub sp,sp,#8
 140              	.LCFI7:
 141              	 .cfi_def_cfa_offset 16
 142 0004 00AF     	 add r7,sp,#0
 143              	.LCFI8:
 144              	 .cfi_def_cfa_register 7
 145 0006 7860     	 str r0,[r7,#4]
1274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 146              	 .loc 1 1274 0
 147 0008 7B68     	 ldr r3,[r7,#4]
 148 000a 1B68     	 ldr r3,[r3]
 149 000c 4022     	 mov r2,#64
 150 000e 1A43     	 orr r2,r3
 151 0010 7B68     	 ldr r3,[r7,#4]
 152 0012 1A60     	 str r2,[r3]
1275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
 153              	 .loc 1 1275 0
 154 0014 BD46     	 mov sp,r7
 155 0016 02B0     	 add sp,sp,#8
 156              	 
 157 0018 80BD     	 pop {r7,pc}
 158              	 .cfi_endproc
 159              	.LFE82:
 161 001a C046     	 .section .text.XMC_CAN_NODE_DisableConfigurationChange,"ax",%progbits
 162              	 .align 2
 163              	 .code 16
 164              	 .thumb_func
 166              	XMC_CAN_NODE_DisableConfigurationChange:
 167              	.LFB83:
1276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** /**
1279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  *
1290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****  */
1291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** 
1292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** {
 168              	 .loc 1 1293 0
 169              	 .cfi_startproc
 170 0000 80B5     	 push {r7,lr}
 171              	.LCFI9:
 172              	 .cfi_def_cfa_offset 8
 173              	 .cfi_offset 7,-8
 174              	 .cfi_offset 14,-4
 175 0002 82B0     	 sub sp,sp,#8
 176              	.LCFI10:
 177              	 .cfi_def_cfa_offset 16
 178 0004 00AF     	 add r7,sp,#0
 179              	.LCFI11:
 180              	 .cfi_def_cfa_register 7
 181 0006 7860     	 str r0,[r7,#4]
1294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 182              	 .loc 1 1294 0
 183 0008 7B68     	 ldr r3,[r7,#4]
 184 000a 1B68     	 ldr r3,[r3]
 185 000c 4022     	 mov r2,#64
 186 000e 9343     	 bic r3,r2
 187 0010 1A1C     	 mov r2,r3
 188 0012 7B68     	 ldr r3,[r7,#4]
 189 0014 1A60     	 str r2,[r3]
1295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_can.h **** }
 190              	 .loc 1 1295 0
 191 0016 BD46     	 mov sp,r7
 192 0018 02B0     	 add sp,sp,#8
 193              	 
 194 001a 80BD     	 pop {r7,pc}
 195              	 .cfi_endproc
 196              	.LFE83:
 198              	 .section .text.max,"ax",%progbits
 199              	 .align 2
 200              	 .code 16
 201              	 .thumb_func
 203              	max:
 204              	.LFB118:
 205              	 .file 2 "../Libraries/XMCLib/src/xmc_can.c"
   1:../Libraries/XMCLib/src/xmc_can.c **** /**
   2:../Libraries/XMCLib/src/xmc_can.c ****  * @file xmc_can.c
   3:../Libraries/XMCLib/src/xmc_can.c ****  * @date 2018-06-21
   4:../Libraries/XMCLib/src/xmc_can.c ****  *
   5:../Libraries/XMCLib/src/xmc_can.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_can.c ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_can.c ****  *
   9:../Libraries/XMCLib/src/xmc_can.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_can.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_can.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_can.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_can.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_can.c ****  * 
  18:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_can.c ****  * 
  21:../Libraries/XMCLib/src/xmc_can.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_can.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_can.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_can.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_can.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_can.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_can.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_can.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_can.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_can.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_can.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_can.c ****  *
  36:../Libraries/XMCLib/src/xmc_can.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_can.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_can.c ****  *
  39:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_can.c ****  *     - Initial draft <br>
  41:../Libraries/XMCLib/src/xmc_can.c ****  *
  42:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_can.c ****  *     - New API added: XMC_CAN_MO_ReceiveData() <br>
  44:../Libraries/XMCLib/src/xmc_can.c ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  45:../Libraries/XMCLib/src/xmc_can.c ****  *     - Minor fix in XMC_CAN_TXFIFO_ConfigMOSlaveObject(). <br>
  46:../Libraries/XMCLib/src/xmc_can.c ****  *
  47:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-06-20:
  48:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  49:../Libraries/XMCLib/src/xmc_can.c ****  *
  50:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-01:
  51:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed  fCANB clock support <br>
  52:../Libraries/XMCLib/src/xmc_can.c ****  *
  53:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-08:
  54:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_Init() <br>
  55:../Libraries/XMCLib/src/xmc_can.c ****  *
  56:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-07:
  57:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed XMC_CAN_AllocateMOtoNodeList to wait for ready status of list controller
  58:../Libraries/XMCLib/src/xmc_can.c ****  *
  59:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-20:
  60:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_MO_Config() <br> 
  61:../Libraries/XMCLib/src/xmc_can.c ****  *
  62:../Libraries/XMCLib/src/xmc_can.c ****  * 2017-11-09:
  63:../Libraries/XMCLib/src/xmc_can.c ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  64:../Libraries/XMCLib/src/xmc_can.c ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  65:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed refactoring XMC_CAN_MO_Config() to configure MOCTR depending on transmit or receiv
  66:../Libraries/XMCLib/src/xmc_can.c ****  *
  67:../Libraries/XMCLib/src/xmc_can.c ****  * 2018-06-21:
  68:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_NODE_NominalBitTimeConfigureEx()
  69:../Libraries/XMCLib/src/xmc_can.c ****  *
  70:../Libraries/XMCLib/src/xmc_can.c ****  * @endcond
  71:../Libraries/XMCLib/src/xmc_can.c ****  *
  72:../Libraries/XMCLib/src/xmc_can.c ****  */ 
  73:../Libraries/XMCLib/src/xmc_can.c **** 
  74:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  75:../Libraries/XMCLib/src/xmc_can.c ****  * HEADER FILES
  76:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  77:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_can.h"
  78:../Libraries/XMCLib/src/xmc_can.c **** 
  79:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CAN)
  80:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_scu.h"
  81:../Libraries/XMCLib/src/xmc_can.c **** 
  82:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
  83:../Libraries/XMCLib/src/xmc_can.c **** {
 206              	 .loc 2 83 0
 207              	 .cfi_startproc
 208 0000 80B5     	 push {r7,lr}
 209              	.LCFI12:
 210              	 .cfi_def_cfa_offset 8
 211              	 .cfi_offset 7,-8
 212              	 .cfi_offset 14,-4
 213 0002 82B0     	 sub sp,sp,#8
 214              	.LCFI13:
 215              	 .cfi_def_cfa_offset 16
 216 0004 00AF     	 add r7,sp,#0
 217              	.LCFI14:
 218              	 .cfi_def_cfa_register 7
 219 0006 7860     	 str r0,[r7,#4]
 220 0008 3960     	 str r1,[r7]
  84:../Libraries/XMCLib/src/xmc_can.c ****   return (a > b) ? a : b;
 221              	 .loc 2 84 0
 222 000a 7A68     	 ldr r2,[r7,#4]
 223 000c 3B68     	 ldr r3,[r7]
 224 000e 9342     	 cmp r3,r2
 225 0010 00D2     	 bcs .L8
 226 0012 131C     	 mov r3,r2
 227              	.L8:
  85:../Libraries/XMCLib/src/xmc_can.c **** }
 228              	 .loc 2 85 0 discriminator 1
 229 0014 181C     	 mov r0,r3
 230 0016 BD46     	 mov sp,r7
 231 0018 02B0     	 add sp,sp,#8
 232              	 
 233 001a 80BD     	 pop {r7,pc}
 234              	 .cfi_endproc
 235              	.LFE118:
 237              	 .section .text.min,"ax",%progbits
 238              	 .align 2
 239              	 .code 16
 240              	 .thumb_func
 242              	min:
 243              	.LFB119:
  86:../Libraries/XMCLib/src/xmc_can.c **** 
  87:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
  88:../Libraries/XMCLib/src/xmc_can.c **** {
 244              	 .loc 2 88 0
 245              	 .cfi_startproc
 246 0000 80B5     	 push {r7,lr}
 247              	.LCFI15:
 248              	 .cfi_def_cfa_offset 8
 249              	 .cfi_offset 7,-8
 250              	 .cfi_offset 14,-4
 251 0002 82B0     	 sub sp,sp,#8
 252              	.LCFI16:
 253              	 .cfi_def_cfa_offset 16
 254 0004 00AF     	 add r7,sp,#0
 255              	.LCFI17:
 256              	 .cfi_def_cfa_register 7
 257 0006 7860     	 str r0,[r7,#4]
 258 0008 3960     	 str r1,[r7]
  89:../Libraries/XMCLib/src/xmc_can.c ****   return (a < b) ? a : b;
 259              	 .loc 2 89 0
 260 000a 7A68     	 ldr r2,[r7,#4]
 261 000c 3B68     	 ldr r3,[r7]
 262 000e 9342     	 cmp r3,r2
 263 0010 00D9     	 bls .L11
 264 0012 131C     	 mov r3,r2
 265              	.L11:
  90:../Libraries/XMCLib/src/xmc_can.c **** }
 266              	 .loc 2 90 0 discriminator 1
 267 0014 181C     	 mov r0,r3
 268 0016 BD46     	 mov sp,r7
 269 0018 02B0     	 add sp,sp,#8
 270              	 
 271 001a 80BD     	 pop {r7,pc}
 272              	 .cfi_endproc
 273              	.LFE119:
 275              	 .global __aeabi_uidivmod
 276              	 .global __aeabi_uidiv
 277              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigureEx,"ax",%progbits
 278              	 .align 2
 279              	 .global XMC_CAN_NODE_NominalBitTimeConfigureEx
 280              	 .code 16
 281              	 .thumb_func
 283              	XMC_CAN_NODE_NominalBitTimeConfigureEx:
 284              	.LFB120:
  91:../Libraries/XMCLib/src/xmc_can.c **** 
  92:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  93:../Libraries/XMCLib/src/xmc_can.c ****  * API IMPLEMENTATION
  94:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  95:../Libraries/XMCLib/src/xmc_can.c **** 
  96:../Libraries/XMCLib/src/xmc_can.c **** /* The max prescaler is the equal to max BRP setting (64) multiply by 8 (DIV8) */
  97:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_PRESCALER 512
  98:../Libraries/XMCLib/src/xmc_can.c **** 
  99:../Libraries/XMCLib/src/xmc_can.c **** /* maximum TSEG1 is 16 and maximum TSEG2 is 8, plus one fix sync tq */
 100:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_NTQ 25
 101:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_NTQ 8
 102:../Libraries/XMCLib/src/xmc_can.c **** 
 103:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG1 3
 104:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG2 2
 105:../Libraries/XMCLib/src/xmc_can.c **** 
 106:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG1 15
 107:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG2 7
 108:../Libraries/XMCLib/src/xmc_can.c **** 
 109:../Libraries/XMCLib/src/xmc_can.c **** 
 110:../Libraries/XMCLib/src/xmc_can.c **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 111:../Libraries/XMCLib/src/xmc_can.c ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 112:../Libraries/XMCLib/src/xmc_can.c **** {
 285              	 .loc 2 112 0
 286              	 .cfi_startproc
 287 0000 80B5     	 push {r7,lr}
 288              	.LCFI18:
 289              	 .cfi_def_cfa_offset 8
 290              	 .cfi_offset 7,-8
 291              	 .cfi_offset 14,-4
 292 0002 88B0     	 sub sp,sp,#32
 293              	.LCFI19:
 294              	 .cfi_def_cfa_offset 40
 295 0004 00AF     	 add r7,sp,#0
 296              	.LCFI20:
 297              	 .cfi_def_cfa_register 7
 298 0006 7860     	 str r0,[r7,#4]
 299 0008 3960     	 str r1,[r7]
 113:../Libraries/XMCLib/src/xmc_can.c ****   /* Check that the CAN frequency is a multiple of the required baudrate */
 114:../Libraries/XMCLib/src/xmc_can.c ****   if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 300              	 .loc 2 114 0
 301 000a 3B68     	 ldr r3,[r7]
 302 000c 1A68     	 ldr r2,[r3]
 303 000e 3B68     	 ldr r3,[r7]
 304 0010 5B68     	 ldr r3,[r3,#4]
 305 0012 101C     	 mov r0,r2
 306 0014 191C     	 mov r1,r3
 307 0016 FFF7FEFF 	 bl __aeabi_uidivmod
 308 001a 0B1E     	 sub r3,r1,#0
 309 001c 00D0     	 beq .LCB258
 310 001e 91E0     	 b .L13
 311              	.LCB258:
 312              	.LBB2:
 115:../Libraries/XMCLib/src/xmc_can.c ****   {
 116:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t prescaler;
 117:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t div8 = 0;
 313              	 .loc 2 117 0
 314 0020 0023     	 mov r3,#0
 315 0022 BB61     	 str r3,[r7,#24]
 118:../Libraries/XMCLib/src/xmc_can.c **** 
 119:../Libraries/XMCLib/src/xmc_can.c ****   /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler 
 120:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 316              	 .loc 2 120 0
 317 0024 3B68     	 ldr r3,[r7]
 318 0026 1A68     	 ldr r2,[r3]
 319 0028 3B68     	 ldr r3,[r7]
 320 002a 5B68     	 ldr r3,[r3,#4]
 321 002c 101C     	 mov r0,r2
 322 002e 191C     	 mov r1,r3
 323 0030 FFF7FEFF 	 bl __aeabi_uidiv
 324 0034 031C     	 mov r3,r0
 325 0036 BB60     	 str r3,[r7,#8]
 121:../Libraries/XMCLib/src/xmc_can.c **** 
 122:../Libraries/XMCLib/src/xmc_can.c ****     /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bi
 123:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 326              	 .loc 2 123 0
 327 0038 1923     	 mov r3,#25
 328 003a 7B61     	 str r3,[r7,#20]
 124:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tseg1 = 0;
 329              	 .loc 2 124 0
 330 003c 0023     	 mov r3,#0
 331 003e 3B61     	 str r3,[r7,#16]
 125:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tseg2 = 0;
 332              	 .loc 2 125 0
 333 0040 0023     	 mov r3,#0
 334 0042 FB60     	 str r3,[r7,#12]
 126:../Libraries/XMCLib/src/xmc_can.c ****     while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 335              	 .loc 2 126 0
 336 0044 46E0     	 b .L14
 337              	.L19:
 127:../Libraries/XMCLib/src/xmc_can.c ****     {
 128:../Libraries/XMCLib/src/xmc_can.c ****       /* consider this ntq, only if fcan_div is multiple of ntq */
 129:../Libraries/XMCLib/src/xmc_can.c ****       if ((fcan_div % ntq) == 0)
 338              	 .loc 2 129 0
 339 0046 BB68     	 ldr r3,[r7,#8]
 340 0048 181C     	 mov r0,r3
 341 004a 7969     	 ldr r1,[r7,#20]
 342 004c FFF7FEFF 	 bl __aeabi_uidivmod
 343 0050 0B1E     	 sub r3,r1,#0
 344 0052 3CD1     	 bne .L15
 130:../Libraries/XMCLib/src/xmc_can.c ****       {
 131:../Libraries/XMCLib/src/xmc_can.c ****     	div8 = 0;
 345              	 .loc 2 131 0
 346 0054 0023     	 mov r3,#0
 347 0056 BB61     	 str r3,[r7,#24]
 132:../Libraries/XMCLib/src/xmc_can.c ****         prescaler = fcan_div / ntq;
 348              	 .loc 2 132 0
 349 0058 B868     	 ldr r0,[r7,#8]
 350 005a 7969     	 ldr r1,[r7,#20]
 351 005c FFF7FEFF 	 bl __aeabi_uidiv
 352 0060 031C     	 mov r3,r0
 353 0062 FB61     	 str r3,[r7,#28]
 133:../Libraries/XMCLib/src/xmc_can.c ****         if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 354              	 .loc 2 133 0
 355 0064 FB69     	 ldr r3,[r7,#28]
 356 0066 002B     	 cmp r3,#0
 357 0068 31D0     	 beq .L15
 358              	 .loc 2 133 0 is_stmt 0 discriminator 1
 359 006a FA69     	 ldr r2,[r7,#28]
 360 006c 8023     	 mov r3,#128
 361 006e 9B00     	 lsl r3,r3,#2
 362 0070 9A42     	 cmp r2,r3
 363 0072 2CD8     	 bhi .L15
 134:../Libraries/XMCLib/src/xmc_can.c ****         {
 135:../Libraries/XMCLib/src/xmc_can.c ****           if (prescaler >= 64)
 364              	 .loc 2 135 0 is_stmt 1
 365 0074 FB69     	 ldr r3,[r7,#28]
 366 0076 3F2B     	 cmp r3,#63
 367 0078 06D9     	 bls .L16
 136:../Libraries/XMCLib/src/xmc_can.c ****           {
 137:../Libraries/XMCLib/src/xmc_can.c ****             /* consider prescaler >=64, if it is integer divisible by 8*/
 138:../Libraries/XMCLib/src/xmc_can.c ****             if ((prescaler & 0x7U) != 0)
 368              	 .loc 2 138 0
 369 007a FB69     	 ldr r3,[r7,#28]
 370 007c 0722     	 mov r2,#7
 371 007e 1340     	 and r3,r2
 372 0080 00D0     	 beq .L17
 139:../Libraries/XMCLib/src/xmc_can.c ****             {
 140:../Libraries/XMCLib/src/xmc_can.c ****               continue;
 373              	 .loc 2 140 0
 374 0082 27E0     	 b .L14
 375              	.L17:
 141:../Libraries/XMCLib/src/xmc_can.c ****             }
 142:../Libraries/XMCLib/src/xmc_can.c ****             else
 143:../Libraries/XMCLib/src/xmc_can.c ****             {
 144:../Libraries/XMCLib/src/xmc_can.c ****               div8 = 1;
 376              	 .loc 2 144 0
 377 0084 0123     	 mov r3,#1
 378 0086 BB61     	 str r3,[r7,#24]
 379              	.L16:
 145:../Libraries/XMCLib/src/xmc_can.c ****             }
 146:../Libraries/XMCLib/src/xmc_can.c ****           }
 147:../Libraries/XMCLib/src/xmc_can.c **** 
 148:../Libraries/XMCLib/src/xmc_can.c ****           tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 380              	 .loc 2 148 0
 381 0088 7B69     	 ldr r3,[r7,#20]
 382 008a 013B     	 sub r3,r3,#1
 383 008c 3A68     	 ldr r2,[r7]
 384 008e 1289     	 ldrh r2,[r2,#8]
 385 0090 5343     	 mul r3,r2
 386 0092 181C     	 mov r0,r3
 387 0094 2E49     	 ldr r1,.L21
 388 0096 FFF7FEFF 	 bl __aeabi_uidiv
 389 009a 031C     	 mov r3,r0
 390 009c 3B61     	 str r3,[r7,#16]
 149:../Libraries/XMCLib/src/xmc_can.c ****           tseg2 = ntq - tseg1 - 1;
 391              	 .loc 2 149 0
 392 009e 7A69     	 ldr r2,[r7,#20]
 393 00a0 3B69     	 ldr r3,[r7,#16]
 394 00a2 D31A     	 sub r3,r2,r3
 395 00a4 013B     	 sub r3,r3,#1
 396 00a6 FB60     	 str r3,[r7,#12]
 150:../Libraries/XMCLib/src/xmc_can.c **** 
 151:../Libraries/XMCLib/src/xmc_can.c ****           if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 397              	 .loc 2 151 0
 398 00a8 3B69     	 ldr r3,[r7,#16]
 399 00aa 022B     	 cmp r3,#2
 400 00ac 0FD9     	 bls .L15
 401              	 .loc 2 151 0 is_stmt 0 discriminator 1
 402 00ae 3B69     	 ldr r3,[r7,#16]
 403 00b0 0F2B     	 cmp r3,#15
 404 00b2 0CD8     	 bhi .L15
 405              	 .loc 2 151 0 discriminator 2
 406 00b4 FB68     	 ldr r3,[r7,#12]
 407 00b6 012B     	 cmp r3,#1
 408 00b8 09D9     	 bls .L15
 152:../Libraries/XMCLib/src/xmc_can.c ****         		  (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_
 409              	 .loc 2 152 0 is_stmt 1
 410 00ba FB68     	 ldr r3,[r7,#12]
 411 00bc 062B     	 cmp r3,#6
 412 00be 06D8     	 bhi .L15
 413              	 .loc 2 152 0 is_stmt 0 discriminator 1
 414 00c0 3B68     	 ldr r3,[r7]
 415 00c2 5B89     	 ldrh r3,[r3,#10]
 416 00c4 1A1E     	 sub r2,r3,#0
 417 00c6 FB68     	 ldr r3,[r7,#12]
 418 00c8 9A42     	 cmp r2,r3
 419 00ca 00D8     	 bhi .L15
 153:../Libraries/XMCLib/src/xmc_can.c ****           {
 154:../Libraries/XMCLib/src/xmc_can.c ****             break;
 420              	 .loc 2 154 0 is_stmt 1
 421 00cc 05E0     	 b .L18
 422              	.L15:
 155:../Libraries/XMCLib/src/xmc_can.c ****           }
 156:../Libraries/XMCLib/src/xmc_can.c **** 
 157:../Libraries/XMCLib/src/xmc_can.c **** 
 158:../Libraries/XMCLib/src/xmc_can.c ****         }
 159:../Libraries/XMCLib/src/xmc_can.c ****       }
 160:../Libraries/XMCLib/src/xmc_can.c ****       --ntq;
 423              	 .loc 2 160 0
 424 00ce 7B69     	 ldr r3,[r7,#20]
 425 00d0 013B     	 sub r3,r3,#1
 426 00d2 7B61     	 str r3,[r7,#20]
 427              	.L14:
 126:../Libraries/XMCLib/src/xmc_can.c ****     {
 428              	 .loc 2 126 0
 429 00d4 7B69     	 ldr r3,[r7,#20]
 430 00d6 072B     	 cmp r3,#7
 431 00d8 B5D8     	 bhi .L19
 432              	.L18:
 161:../Libraries/XMCLib/src/xmc_can.c ****     }
 162:../Libraries/XMCLib/src/xmc_can.c **** 
 163:../Libraries/XMCLib/src/xmc_can.c ****     if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 433              	 .loc 2 163 0
 434 00da 7B69     	 ldr r3,[r7,#20]
 435 00dc 072B     	 cmp r3,#7
 436 00de 31D9     	 bls .L13
 164:../Libraries/XMCLib/src/xmc_can.c ****     {
 165:../Libraries/XMCLib/src/xmc_can.c **** 
 166:../Libraries/XMCLib/src/xmc_can.c **** 
 167:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_EnableConfigurationChange(can_node);
 437              	 .loc 2 167 0
 438 00e0 7B68     	 ldr r3,[r7,#4]
 439 00e2 181C     	 mov r0,r3
 440 00e4 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 168:../Libraries/XMCLib/src/xmc_can.c **** 
 169:../Libraries/XMCLib/src/xmc_can.c ****       /* Configure bit timing register */
 170:../Libraries/XMCLib/src/xmc_can.c ****       can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_M
 441              	 .loc 2 170 0
 442 00e8 FB68     	 ldr r3,[r7,#12]
 443 00ea 013B     	 sub r3,r3,#1
 444 00ec 1A03     	 lsl r2,r3,#12
 445 00ee E023     	 mov r3,#224
 446 00f0 DB01     	 lsl r3,r3,#7
 447 00f2 1A40     	 and r2,r3
 171:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 448              	 .loc 2 171 0
 449 00f4 3B68     	 ldr r3,[r7]
 450 00f6 5B89     	 ldrh r3,[r3,#10]
 451 00f8 013B     	 sub r3,r3,#1
 452 00fa 9B01     	 lsl r3,r3,#6
 453 00fc FF21     	 mov r1,#255
 454 00fe 0B40     	 and r3,r1
 170:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 455              	 .loc 2 170 0
 456 0100 1A43     	 orr r2,r3
 172:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 457              	 .loc 2 172 0
 458 0102 3B69     	 ldr r3,[r7,#16]
 459 0104 013B     	 sub r3,r3,#1
 460 0106 1902     	 lsl r1,r3,#8
 461 0108 F023     	 mov r3,#240
 462 010a 1B01     	 lsl r3,r3,#4
 463 010c 0B40     	 and r3,r1
 171:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 464              	 .loc 2 171 0
 465 010e 1A43     	 orr r2,r3
 466 0110 111C     	 mov r1,r2
 173:../Libraries/XMCLib/src/xmc_can.c ****                         ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CA
 467              	 .loc 2 173 0
 468 0112 BA69     	 ldr r2,[r7,#24]
 469 0114 131C     	 mov r3,r2
 470 0116 5B00     	 lsl r3,r3,#1
 471 0118 9B18     	 add r3,r3,r2
 472 011a 1A1C     	 mov r2,r3
 473 011c FB69     	 ldr r3,[r7,#28]
 474 011e D340     	 lsr r3,r3,r2
 475 0120 013B     	 sub r3,r3,#1
 476 0122 3F22     	 mov r2,#63
 477 0124 1340     	 and r3,r2
 172:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 478              	 .loc 2 172 0
 479 0126 0A1C     	 mov r2,r1
 480 0128 1A43     	 orr r2,r3
 174:../Libraries/XMCLib/src/xmc_can.c ****                         ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 481              	 .loc 2 174 0
 482 012a BB69     	 ldr r3,[r7,#24]
 483 012c DB03     	 lsl r3,r3,#15
 484 012e 1B04     	 lsl r3,r3,#16
 485 0130 1B0C     	 lsr r3,r3,#16
 173:../Libraries/XMCLib/src/xmc_can.c ****                         ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CA
 486              	 .loc 2 173 0
 487 0132 1A43     	 orr r2,r3
 170:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 488              	 .loc 2 170 0
 489 0134 7B68     	 ldr r3,[r7,#4]
 490 0136 1A61     	 str r2,[r3,#16]
 175:../Libraries/XMCLib/src/xmc_can.c **** 
 176:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_DisableConfigurationChange(can_node);
 491              	 .loc 2 176 0
 492 0138 7B68     	 ldr r3,[r7,#4]
 493 013a 181C     	 mov r0,r3
 494 013c FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 177:../Libraries/XMCLib/src/xmc_can.c **** 
 178:../Libraries/XMCLib/src/xmc_can.c ****       return XMC_CAN_STATUS_SUCCESS;
 495              	 .loc 2 178 0
 496 0140 0023     	 mov r3,#0
 497 0142 00E0     	 b .L20
 498              	.L13:
 499              	.LBE2:
 179:../Libraries/XMCLib/src/xmc_can.c ****     }
 180:../Libraries/XMCLib/src/xmc_can.c ****   }
 181:../Libraries/XMCLib/src/xmc_can.c **** 
 182:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_STATUS_ERROR;
 500              	 .loc 2 182 0
 501 0144 0123     	 mov r3,#1
 502              	.L20:
 183:../Libraries/XMCLib/src/xmc_can.c **** }
 503              	 .loc 2 183 0
 504 0146 181C     	 mov r0,r3
 505 0148 BD46     	 mov sp,r7
 506 014a 08B0     	 add sp,sp,#32
 507              	 
 508 014c 80BD     	 pop {r7,pc}
 509              	.L22:
 510 014e C046     	 .align 2
 511              	.L21:
 512 0150 10270000 	 .word 10000
 513              	 .cfi_endproc
 514              	.LFE120:
 516              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigure,"ax",%progbits
 517              	 .align 2
 518              	 .global XMC_CAN_NODE_NominalBitTimeConfigure
 519              	 .code 16
 520              	 .thumb_func
 522              	XMC_CAN_NODE_NominalBitTimeConfigure:
 523              	.LFB121:
 184:../Libraries/XMCLib/src/xmc_can.c **** 
 185:../Libraries/XMCLib/src/xmc_can.c **** /* Baudrate Configuration */
 186:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
 187:../Libraries/XMCLib/src/xmc_can.c ****                                            const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_
 188:../Libraries/XMCLib/src/xmc_can.c **** {
 524              	 .loc 2 188 0
 525              	 .cfi_startproc
 526 0000 80B5     	 push {r7,lr}
 527              	.LCFI21:
 528              	 .cfi_def_cfa_offset 8
 529              	 .cfi_offset 7,-8
 530              	 .cfi_offset 14,-4
 531 0002 90B0     	 sub sp,sp,#64
 532              	.LCFI22:
 533              	 .cfi_def_cfa_offset 72
 534 0004 00AF     	 add r7,sp,#0
 535              	.LCFI23:
 536              	 .cfi_def_cfa_register 7
 537 0006 7860     	 str r0,[r7,#4]
 538 0008 3960     	 str r1,[r7]
 189:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_brp = 12U ;
 539              	 .loc 2 189 0
 540 000a 0C23     	 mov r3,#12
 541 000c FB63     	 str r3,[r7,#60]
 190:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_tseg1 = 12U;
 542              	 .loc 2 190 0
 543 000e 0C23     	 mov r3,#12
 544 0010 BB63     	 str r3,[r7,#56]
 191:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_brp = 0U;
 545              	 .loc 2 191 0
 546 0012 0023     	 mov r3,#0
 547 0014 7B63     	 str r3,[r7,#52]
 192:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg1 = 1U;
 548              	 .loc 2 192 0
 549 0016 0123     	 mov r3,#1
 550 0018 3B63     	 str r3,[r7,#48]
 193:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg2 = 0U;
 551              	 .loc 2 193 0
 552 001a 0023     	 mov r3,#0
 553 001c 7B61     	 str r3,[r7,#20]
 194:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tbaud = 0U;
 554              	 .loc 2 194 0
 555 001e 0023     	 mov r3,#0
 556 0020 FB62     	 str r3,[r7,#44]
 195:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_error = 10000U;
 557              	 .loc 2 195 0
 558 0022 6A4B     	 ldr r3,.L41
 559 0024 BB62     	 str r3,[r7,#40]
 196:../Libraries/XMCLib/src/xmc_can.c **** 
 197:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: rate not supported", (can_bit_time->baudrate
 198:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->baudrate >= 100000U));
 199:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 200:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency <= 120000000U);
 201:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 202:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency > 5000000U);
 203:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: sample point not supported",
 204:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->sample_point < 10000U) && ((can_bit_time->sample_point > 0U)));
 205:../Libraries/XMCLib/src/xmc_can.c ****        
 206:../Libraries/XMCLib/src/xmc_can.c ****   /*
 207:../Libraries/XMCLib/src/xmc_can.c ****    * Bit timing & sampling
 208:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = (BRP+1)/Fcan if DIV8 = 0
 209:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = 8*(BRP+1)/Fcan if DIV8 = 1
 210:../Libraries/XMCLib/src/xmc_can.c ****    * TSync = 1.Tq
 211:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 = (TSEG1+1)*Tq                >= 3Tq
 212:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 = (TSEG2+1)*Tq                >= 2Tq
 213:../Libraries/XMCLib/src/xmc_can.c ****    * Bit Time = TSync + TSeg1 + TSeg2    >= 8Tq
 214:../Libraries/XMCLib/src/xmc_can.c ****    *
 215:../Libraries/XMCLib/src/xmc_can.c ****    * Resynchronization:
 216:../Libraries/XMCLib/src/xmc_can.c ****    *
 217:../Libraries/XMCLib/src/xmc_can.c ****    * Tsjw = (SJW + 1)*Tq
 218:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 >= Tsjw + Tprop
 219:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 >= Tsjw
 220:../Libraries/XMCLib/src/xmc_can.c ****    */
 221:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best baudrate */
 222:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 560              	 .loc 2 222 0
 561 0026 0123     	 mov r3,#1
 562 0028 FB63     	 str r3,[r7,#60]
 563 002a 6AE0     	 b .L24
 564              	.L33:
 565              	.LBB3:
 223:../Libraries/XMCLib/src/xmc_can.c ****   {
 224:../Libraries/XMCLib/src/xmc_can.c **** 
 225:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 566              	 .loc 2 225 0
 567 002c 3B68     	 ldr r3,[r7]
 568 002e 1A68     	 ldr r2,[r3]
 569 0030 131C     	 mov r3,r2
 570 0032 9B00     	 lsl r3,r3,#2
 571 0034 9B18     	 add r3,r3,r2
 572 0036 5B00     	 lsl r3,r3,#1
 573 0038 181C     	 mov r0,r3
 574 003a F96B     	 ldr r1,[r7,#60]
 575 003c FFF7FEFF 	 bl __aeabi_uidiv
 576 0040 031C     	 mov r3,r0
 577 0042 3B61     	 str r3,[r7,#16]
 226:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 578              	 .loc 2 226 0
 579 0044 3B68     	 ldr r3,[r7]
 580 0046 5B68     	 ldr r3,[r3,#4]
 581 0048 3869     	 ldr r0,[r7,#16]
 582 004a 191C     	 mov r1,r3
 583 004c FFF7FEFF 	 bl __aeabi_uidiv
 584 0050 031C     	 mov r3,r0
 585 0052 7B62     	 str r3,[r7,#36]
 227:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_baudrate;
 228:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t error;
 229:../Libraries/XMCLib/src/xmc_can.c **** 
 230:../Libraries/XMCLib/src/xmc_can.c ****   if((temp_tbaud % 10U) > 5U)
 586              	 .loc 2 230 0
 587 0054 7B6A     	 ldr r3,[r7,#36]
 588 0056 181C     	 mov r0,r3
 589 0058 0A21     	 mov r1,#10
 590 005a FFF7FEFF 	 bl __aeabi_uidivmod
 591 005e 0B1E     	 sub r3,r1,#0
 592 0060 052B     	 cmp r3,#5
 593 0062 0AD9     	 bls .L25
 231:../Libraries/XMCLib/src/xmc_can.c ****   {
 232:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 594              	 .loc 2 232 0
 595 0064 7B6A     	 ldr r3,[r7,#36]
 596 0066 181C     	 mov r0,r3
 597 0068 0A21     	 mov r1,#10
 598 006a FFF7FEFF 	 bl __aeabi_uidiv
 599 006e 031C     	 mov r3,r0
 600 0070 7B62     	 str r3,[r7,#36]
 233:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud++;
 601              	 .loc 2 233 0
 602 0072 7B6A     	 ldr r3,[r7,#36]
 603 0074 0133     	 add r3,r3,#1
 604 0076 7B62     	 str r3,[r7,#36]
 605 0078 06E0     	 b .L26
 606              	.L25:
 234:../Libraries/XMCLib/src/xmc_can.c ****   }
 235:../Libraries/XMCLib/src/xmc_can.c ****   else
 236:../Libraries/XMCLib/src/xmc_can.c ****   {
 237:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 607              	 .loc 2 237 0
 608 007a 7B6A     	 ldr r3,[r7,#36]
 609 007c 181C     	 mov r0,r3
 610 007e 0A21     	 mov r1,#10
 611 0080 FFF7FEFF 	 bl __aeabi_uidiv
 612 0084 031C     	 mov r3,r0
 613 0086 7B62     	 str r3,[r7,#36]
 614              	.L26:
 238:../Libraries/XMCLib/src/xmc_can.c ****   }
 239:../Libraries/XMCLib/src/xmc_can.c **** 
 240:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_tbaud > 0U)
 615              	 .loc 2 240 0
 616 0088 7B6A     	 ldr r3,[r7,#36]
 617 008a 002B     	 cmp r3,#0
 618 008c 0BD0     	 beq .L27
 241:../Libraries/XMCLib/src/xmc_can.c ****   {
 242:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 619              	 .loc 2 242 0
 620 008e 7A6A     	 ldr r2,[r7,#36]
 621 0090 131C     	 mov r3,r2
 622 0092 9B00     	 lsl r3,r3,#2
 623 0094 9B18     	 add r3,r3,r2
 624 0096 5B00     	 lsl r3,r3,#1
 625 0098 3869     	 ldr r0,[r7,#16]
 626 009a 191C     	 mov r1,r3
 627 009c FFF7FEFF 	 bl __aeabi_uidiv
 628 00a0 031C     	 mov r3,r0
 629 00a2 3B62     	 str r3,[r7,#32]
 630 00a4 08E0     	 b .L28
 631              	.L27:
 243:../Libraries/XMCLib/src/xmc_can.c ****   }
 244:../Libraries/XMCLib/src/xmc_can.c ****   else
 245:../Libraries/XMCLib/src/xmc_can.c ****   {
 246:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = f_quanta / 10U;
 632              	 .loc 2 246 0
 633 00a6 3B69     	 ldr r3,[r7,#16]
 634 00a8 181C     	 mov r0,r3
 635 00aa 0A21     	 mov r1,#10
 636 00ac FFF7FEFF 	 bl __aeabi_uidiv
 637 00b0 031C     	 mov r3,r0
 638 00b2 3B62     	 str r3,[r7,#32]
 247:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = 1;
 639              	 .loc 2 247 0
 640 00b4 0123     	 mov r3,#1
 641 00b6 7B62     	 str r3,[r7,#36]
 642              	.L28:
 248:../Libraries/XMCLib/src/xmc_can.c ****   }
 249:../Libraries/XMCLib/src/xmc_can.c **** 
 250:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_baudrate >= can_bit_time->baudrate)
 643              	 .loc 2 250 0
 644 00b8 3B68     	 ldr r3,[r7]
 645 00ba 5A68     	 ldr r2,[r3,#4]
 646 00bc 3B6A     	 ldr r3,[r7,#32]
 647 00be 9A42     	 cmp r2,r3
 648 00c0 05D8     	 bhi .L29
 251:../Libraries/XMCLib/src/xmc_can.c ****   {
 252:../Libraries/XMCLib/src/xmc_can.c ****   error = temp_baudrate - can_bit_time->baudrate;
 649              	 .loc 2 252 0
 650 00c2 3B68     	 ldr r3,[r7]
 651 00c4 5B68     	 ldr r3,[r3,#4]
 652 00c6 3A6A     	 ldr r2,[r7,#32]
 653 00c8 D31A     	 sub r3,r2,r3
 654 00ca FB61     	 str r3,[r7,#28]
 655 00cc 04E0     	 b .L30
 656              	.L29:
 253:../Libraries/XMCLib/src/xmc_can.c ****   }
 254:../Libraries/XMCLib/src/xmc_can.c ****   else
 255:../Libraries/XMCLib/src/xmc_can.c ****   {
 256:../Libraries/XMCLib/src/xmc_can.c ****   error = can_bit_time->baudrate - temp_baudrate;
 657              	 .loc 2 256 0
 658 00ce 3B68     	 ldr r3,[r7]
 659 00d0 5A68     	 ldr r2,[r3,#4]
 660 00d2 3B6A     	 ldr r3,[r7,#32]
 661 00d4 D31A     	 sub r3,r2,r3
 662 00d6 FB61     	 str r3,[r7,#28]
 663              	.L30:
 257:../Libraries/XMCLib/src/xmc_can.c ****   }
 258:../Libraries/XMCLib/src/xmc_can.c **** 
 259:../Libraries/XMCLib/src/xmc_can.c ****   if ((temp_tbaud <= 20U) && (best_error > error))
 664              	 .loc 2 259 0
 665 00d8 7B6A     	 ldr r3,[r7,#36]
 666 00da 142B     	 cmp r3,#20
 667 00dc 0ED8     	 bhi .L31
 668              	 .loc 2 259 0 is_stmt 0 discriminator 1
 669 00de BA6A     	 ldr r2,[r7,#40]
 670 00e0 FB69     	 ldr r3,[r7,#28]
 671 00e2 9A42     	 cmp r2,r3
 672 00e4 0AD9     	 bls .L31
 260:../Libraries/XMCLib/src/xmc_can.c ****   {
 261:../Libraries/XMCLib/src/xmc_can.c ****     best_brp = temp_brp;
 673              	 .loc 2 261 0 is_stmt 1
 674 00e6 FB6B     	 ldr r3,[r7,#60]
 675 00e8 7B63     	 str r3,[r7,#52]
 262:../Libraries/XMCLib/src/xmc_can.c ****     best_tbaud = temp_tbaud;
 676              	 .loc 2 262 0
 677 00ea 7B6A     	 ldr r3,[r7,#36]
 678 00ec FB62     	 str r3,[r7,#44]
 263:../Libraries/XMCLib/src/xmc_can.c ****     best_error = (error);
 679              	 .loc 2 263 0
 680 00ee FB69     	 ldr r3,[r7,#28]
 681 00f0 BB62     	 str r3,[r7,#40]
 264:../Libraries/XMCLib/src/xmc_can.c **** 
 265:../Libraries/XMCLib/src/xmc_can.c ****     if (error < 1000U)
 682              	 .loc 2 265 0
 683 00f2 FB69     	 ldr r3,[r7,#28]
 684 00f4 364A     	 ldr r2,.L41+4
 685 00f6 9342     	 cmp r3,r2
 686 00f8 00D8     	 bhi .L31
 266:../Libraries/XMCLib/src/xmc_can.c ****     {
 267:../Libraries/XMCLib/src/xmc_can.c ****       break;
 687              	 .loc 2 267 0
 688 00fa 05E0     	 b .L32
 689              	.L31:
 690              	.LBE3:
 222:../Libraries/XMCLib/src/xmc_can.c ****   {
 691              	 .loc 2 222 0 discriminator 2
 692 00fc FB6B     	 ldr r3,[r7,#60]
 693 00fe 0133     	 add r3,r3,#1
 694 0100 FB63     	 str r3,[r7,#60]
 695              	.L24:
 222:../Libraries/XMCLib/src/xmc_can.c ****   {
 696              	 .loc 2 222 0 is_stmt 0 discriminator 1
 697 0102 FB6B     	 ldr r3,[r7,#60]
 698 0104 402B     	 cmp r3,#64
 699 0106 91D9     	 bls .L33
 700              	.L32:
 268:../Libraries/XMCLib/src/xmc_can.c ****     }
 269:../Libraries/XMCLib/src/xmc_can.c ****    }
 270:../Libraries/XMCLib/src/xmc_can.c ****   }
 271:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best sample point */
 272:../Libraries/XMCLib/src/xmc_can.c ****   best_error = 10000U;
 701              	 .loc 2 272 0 is_stmt 1
 702 0108 304B     	 ldr r3,.L41
 703 010a BB62     	 str r3,[r7,#40]
 273:../Libraries/XMCLib/src/xmc_can.c **** 
 274:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 704              	 .loc 2 274 0
 705 010c 4023     	 mov r3,#64
 706 010e BB63     	 str r3,[r7,#56]
 707 0110 2EE0     	 b .L34
 708              	.L40:
 709              	.LBB4:
 275:../Libraries/XMCLib/src/xmc_can.c ****   {
 276:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 710              	 .loc 2 276 0
 711 0112 BB6B     	 ldr r3,[r7,#56]
 712 0114 0133     	 add r3,r3,#1
 713 0116 2D4A     	 ldr r2,.L41
 714 0118 5343     	 mul r3,r2
 715 011a 181C     	 mov r0,r3
 716 011c F96A     	 ldr r1,[r7,#44]
 717 011e FFF7FEFF 	 bl __aeabi_uidiv
 718 0122 031C     	 mov r3,r0
 719 0124 FB60     	 str r3,[r7,#12]
 277:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t error;
 278:../Libraries/XMCLib/src/xmc_can.c ****   if (tempSamplePoint >= can_bit_time->sample_point)
 720              	 .loc 2 278 0
 721 0126 3B68     	 ldr r3,[r7]
 722 0128 1B89     	 ldrh r3,[r3,#8]
 723 012a 1A1E     	 sub r2,r3,#0
 724 012c FB68     	 ldr r3,[r7,#12]
 725 012e 9A42     	 cmp r2,r3
 726 0130 06D8     	 bhi .L35
 279:../Libraries/XMCLib/src/xmc_can.c ****   {
 280:../Libraries/XMCLib/src/xmc_can.c ****       error = tempSamplePoint  - can_bit_time->sample_point;
 727              	 .loc 2 280 0
 728 0132 3B68     	 ldr r3,[r7]
 729 0134 1B89     	 ldrh r3,[r3,#8]
 730 0136 1A1C     	 mov r2,r3
 731 0138 FB68     	 ldr r3,[r7,#12]
 732 013a 9B1A     	 sub r3,r3,r2
 733 013c BB61     	 str r3,[r7,#24]
 734 013e 05E0     	 b .L36
 735              	.L35:
 281:../Libraries/XMCLib/src/xmc_can.c ****   }
 282:../Libraries/XMCLib/src/xmc_can.c ****   else
 283:../Libraries/XMCLib/src/xmc_can.c ****   {
 284:../Libraries/XMCLib/src/xmc_can.c ****     error = can_bit_time->sample_point  - tempSamplePoint;
 736              	 .loc 2 284 0
 737 0140 3B68     	 ldr r3,[r7]
 738 0142 1B89     	 ldrh r3,[r3,#8]
 739 0144 1A1C     	 mov r2,r3
 740 0146 FB68     	 ldr r3,[r7,#12]
 741 0148 D31A     	 sub r3,r2,r3
 742 014a BB61     	 str r3,[r7,#24]
 743              	.L36:
 285:../Libraries/XMCLib/src/xmc_can.c ****   }
 286:../Libraries/XMCLib/src/xmc_can.c ****     if (best_error > error)
 744              	 .loc 2 286 0
 745 014c BA6A     	 ldr r2,[r7,#40]
 746 014e BB69     	 ldr r3,[r7,#24]
 747 0150 9A42     	 cmp r2,r3
 748 0152 03D9     	 bls .L37
 287:../Libraries/XMCLib/src/xmc_can.c ****     {
 288:../Libraries/XMCLib/src/xmc_can.c ****       best_tseg1 = temp_tseg1;
 749              	 .loc 2 288 0
 750 0154 BB6B     	 ldr r3,[r7,#56]
 751 0156 3B63     	 str r3,[r7,#48]
 289:../Libraries/XMCLib/src/xmc_can.c ****       best_error = error;
 752              	 .loc 2 289 0
 753 0158 BB69     	 ldr r3,[r7,#24]
 754 015a BB62     	 str r3,[r7,#40]
 755              	.L37:
 290:../Libraries/XMCLib/src/xmc_can.c ****     }
 291:../Libraries/XMCLib/src/xmc_can.c ****     if (tempSamplePoint < (can_bit_time->sample_point))
 756              	 .loc 2 291 0
 757 015c 3B68     	 ldr r3,[r7]
 758 015e 1B89     	 ldrh r3,[r3,#8]
 759 0160 1A1E     	 sub r2,r3,#0
 760 0162 FB68     	 ldr r3,[r7,#12]
 761 0164 9A42     	 cmp r2,r3
 762 0166 00D9     	 bls .L38
 292:../Libraries/XMCLib/src/xmc_can.c ****     {
 293:../Libraries/XMCLib/src/xmc_can.c ****       break;
 763              	 .loc 2 293 0
 764 0168 05E0     	 b .L39
 765              	.L38:
 766              	.LBE4:
 274:../Libraries/XMCLib/src/xmc_can.c ****   {
 767              	 .loc 2 274 0 discriminator 2
 768 016a BB6B     	 ldr r3,[r7,#56]
 769 016c 013B     	 sub r3,r3,#1
 770 016e BB63     	 str r3,[r7,#56]
 771              	.L34:
 274:../Libraries/XMCLib/src/xmc_can.c ****   {
 772              	 .loc 2 274 0 is_stmt 0 discriminator 1
 773 0170 BB6B     	 ldr r3,[r7,#56]
 774 0172 022B     	 cmp r3,#2
 775 0174 CDD8     	 bhi .L40
 776              	.L39:
 294:../Libraries/XMCLib/src/xmc_can.c ****     }
 295:../Libraries/XMCLib/src/xmc_can.c ****   }
 296:../Libraries/XMCLib/src/xmc_can.c **** 
 297:../Libraries/XMCLib/src/xmc_can.c ****   best_tseg2 = best_tbaud - best_tseg1 - 1U;
 777              	 .loc 2 297 0 is_stmt 1
 778 0176 FA6A     	 ldr r2,[r7,#44]
 779 0178 3B6B     	 ldr r3,[r7,#48]
 780 017a D31A     	 sub r3,r2,r3
 781 017c 013B     	 sub r3,r3,#1
 782 017e 7B61     	 str r3,[r7,#20]
 298:../Libraries/XMCLib/src/xmc_can.c **** 
 299:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_EnableConfigurationChange(can_node);
 783              	 .loc 2 299 0
 784 0180 7B68     	 ldr r3,[r7,#4]
 785 0182 181C     	 mov r0,r3
 786 0184 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 300:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure bit timing register */
 301:../Libraries/XMCLib/src/xmc_can.c ****   can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_N
 787              	 .loc 2 301 0
 788 0188 7B69     	 ldr r3,[r7,#20]
 789 018a 013B     	 sub r3,r3,#1
 790 018c 1A03     	 lsl r2,r3,#12
 791 018e E023     	 mov r3,#224
 792 0190 DB01     	 lsl r3,r3,#7
 793 0192 1A40     	 and r2,r3
 302:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 794              	 .loc 2 302 0
 795 0194 3B68     	 ldr r3,[r7]
 796 0196 5B89     	 ldrh r3,[r3,#10]
 797 0198 013B     	 sub r3,r3,#1
 798 019a 9B01     	 lsl r3,r3,#6
 799 019c FF21     	 mov r1,#255
 800 019e 0B40     	 and r3,r1
 301:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 801              	 .loc 2 301 0
 802 01a0 1A43     	 orr r2,r3
 303:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 803              	 .loc 2 303 0
 804 01a2 3B6B     	 ldr r3,[r7,#48]
 805 01a4 013B     	 sub r3,r3,#1
 806 01a6 1902     	 lsl r1,r3,#8
 807 01a8 F023     	 mov r3,#240
 808 01aa 1B01     	 lsl r3,r3,#4
 809 01ac 0B40     	 and r3,r1
 302:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 810              	 .loc 2 302 0
 811 01ae 1A43     	 orr r2,r3
 304:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_
 812              	 .loc 2 304 0
 813 01b0 7B6B     	 ldr r3,[r7,#52]
 814 01b2 013B     	 sub r3,r3,#1
 815 01b4 3F21     	 mov r1,#63
 816 01b6 0B40     	 and r3,r1
 817 01b8 1A43     	 orr r2,r3
 301:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 818              	 .loc 2 301 0
 819 01ba 7B68     	 ldr r3,[r7,#4]
 820 01bc 1A61     	 str r2,[r3,#16]
 305:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 306:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_DisableConfigurationChange(can_node);
 821              	 .loc 2 306 0
 822 01be 7B68     	 ldr r3,[r7,#4]
 823 01c0 181C     	 mov r0,r3
 824 01c2 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 307:../Libraries/XMCLib/src/xmc_can.c **** }
 825              	 .loc 2 307 0
 826 01c6 BD46     	 mov sp,r7
 827 01c8 10B0     	 add sp,sp,#64
 828              	 
 829 01ca 80BD     	 pop {r7,pc}
 830              	.L42:
 831              	 .align 2
 832              	.L41:
 833 01cc 10270000 	 .word 10000
 834 01d0 E7030000 	 .word 999
 835              	 .cfi_endproc
 836              	.LFE121:
 838              	 .section .text.XMC_CAN_AllocateMOtoNodeList,"ax",%progbits
 839              	 .align 2
 840              	 .global XMC_CAN_AllocateMOtoNodeList
 841              	 .code 16
 842              	 .thumb_func
 844              	XMC_CAN_AllocateMOtoNodeList:
 845              	.LFB122:
 308:../Libraries/XMCLib/src/xmc_can.c **** /* Function to allocate message object from free list to node list */
 309:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 310:../Libraries/XMCLib/src/xmc_can.c **** {
 846              	 .loc 2 310 0
 847              	 .cfi_startproc
 848 0000 90B5     	 push {r4,r7,lr}
 849              	.LCFI24:
 850              	 .cfi_def_cfa_offset 12
 851              	 .cfi_offset 4,-12
 852              	 .cfi_offset 7,-8
 853              	 .cfi_offset 14,-4
 854 0002 83B0     	 sub sp,sp,#12
 855              	.LCFI25:
 856              	 .cfi_def_cfa_offset 24
 857 0004 00AF     	 add r7,sp,#0
 858              	.LCFI26:
 859              	 .cfi_def_cfa_register 7
 860 0006 7860     	 str r0,[r7,#4]
 861 0008 081C     	 mov r0,r1
 862 000a 111C     	 mov r1,r2
 863 000c FB1C     	 add r3,r7,#3
 864 000e 021C     	 add r2,r0,#0
 865 0010 1A70     	 strb r2,[r3]
 866 0012 BB1C     	 add r3,r7,#2
 867 0014 0A1C     	 add r2,r1,#0
 868 0016 1A70     	 strb r2,[r3]
 311:../Libraries/XMCLib/src/xmc_can.c ****   /* wait while panel operation is in progress. */
 312:../Libraries/XMCLib/src/xmc_can.c ****   while (XMC_CAN_IsPanelControlReady(obj) == false)
 869              	 .loc 2 312 0
 870 0018 C046     	 mov r8,r8
 871              	.L44:
 872              	 .loc 2 312 0 is_stmt 0 discriminator 1
 873 001a 7B68     	 ldr r3,[r7,#4]
 874 001c 181C     	 mov r0,r3
 875 001e FFF7FEFF 	 bl XMC_CAN_IsPanelControlReady
 876 0022 031C     	 mov r3,r0
 877 0024 1A1C     	 mov r2,r3
 878 0026 0123     	 mov r3,#1
 879 0028 5340     	 eor r3,r2
 880 002a DBB2     	 uxtb r3,r3
 881 002c 002B     	 cmp r3,#0
 882 002e F4D1     	 bne .L44
 313:../Libraries/XMCLib/src/xmc_can.c ****   {
 314:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 315:../Libraries/XMCLib/src/xmc_can.c ****   };
 316:../Libraries/XMCLib/src/xmc_can.c **** 
 317:../Libraries/XMCLib/src/xmc_can.c ****   /* Panel Command for  allocation of MO to node list */
 318:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 883              	 .loc 2 318 0 is_stmt 1
 884 0030 FB1C     	 add r3,r7,#3
 885 0032 1B78     	 ldrb r3,[r3]
 886 0034 0133     	 add r3,r3,#1
 887 0036 DCB2     	 uxtb r4,r3
 888 0038 7A68     	 ldr r2,[r7,#4]
 889 003a BB1C     	 add r3,r7,#2
 890 003c 1B78     	 ldrb r3,[r3]
 891 003e 101C     	 mov r0,r2
 892 0040 0221     	 mov r1,#2
 893 0042 1A1C     	 mov r2,r3
 894 0044 231C     	 mov r3,r4
 895 0046 FFF7FEFF 	 bl XMC_CAN_PanelControl
 319:../Libraries/XMCLib/src/xmc_can.c **** }
 896              	 .loc 2 319 0
 897 004a BD46     	 mov sp,r7
 898 004c 03B0     	 add sp,sp,#12
 899              	 
 900 004e 90BD     	 pop {r4,r7,pc}
 901              	 .cfi_endproc
 902              	.LFE122:
 904              	 .section .text.XMC_CAN_Disable,"ax",%progbits
 905              	 .align 2
 906              	 .global XMC_CAN_Disable
 907              	 .code 16
 908              	 .thumb_func
 910              	XMC_CAN_Disable:
 911              	.LFB123:
 320:../Libraries/XMCLib/src/xmc_can.c **** 
 321:../Libraries/XMCLib/src/xmc_can.c **** /* Disable XMC_CAN Peripheral */
 322:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Disable(XMC_CAN_t *const obj)
 323:../Libraries/XMCLib/src/xmc_can.c **** {
 912              	 .loc 2 323 0
 913              	 .cfi_startproc
 914 0000 80B5     	 push {r7,lr}
 915              	.LCFI27:
 916              	 .cfi_def_cfa_offset 8
 917              	 .cfi_offset 7,-8
 918              	 .cfi_offset 14,-4
 919 0002 82B0     	 sub sp,sp,#8
 920              	.LCFI28:
 921              	 .cfi_def_cfa_offset 16
 922 0004 00AF     	 add r7,sp,#0
 923              	.LCFI29:
 924              	 .cfi_def_cfa_register 7
 925 0006 7860     	 str r0,[r7,#4]
 324:../Libraries/XMCLib/src/xmc_can.c ****   /* Disable CAN Module */
 325:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC = CAN_CLC_DISR_Msk;
 926              	 .loc 2 325 0
 927 0008 7B68     	 ldr r3,[r7,#4]
 928 000a 0122     	 mov r2,#1
 929 000c 1A60     	 str r2,[r3]
 326:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 327:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 328:../Libraries/XMCLib/src/xmc_can.c **** #endif
 329:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 330:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 930              	 .loc 2 330 0
 931 000e 8023     	 mov r3,#128
 932 0010 9B03     	 lsl r3,r3,#14
 933 0012 181C     	 mov r0,r3
 934 0014 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 331:../Libraries/XMCLib/src/xmc_can.c **** #endif
 332:../Libraries/XMCLib/src/xmc_can.c **** }
 935              	 .loc 2 332 0
 936 0018 BD46     	 mov sp,r7
 937 001a 02B0     	 add sp,sp,#8
 938              	 
 939 001c 80BD     	 pop {r7,pc}
 940              	 .cfi_endproc
 941              	.LFE123:
 943 001e C046     	 .section .text.XMC_CAN_Enable,"ax",%progbits
 944              	 .align 2
 945              	 .global XMC_CAN_Enable
 946              	 .code 16
 947              	 .thumb_func
 949              	XMC_CAN_Enable:
 950              	.LFB124:
 333:../Libraries/XMCLib/src/xmc_can.c **** 
 334:../Libraries/XMCLib/src/xmc_can.c **** /* Enable XMC_CAN Peripheral */
 335:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Enable(XMC_CAN_t *const obj)
 336:../Libraries/XMCLib/src/xmc_can.c **** {
 951              	 .loc 2 336 0
 952              	 .cfi_startproc
 953 0000 80B5     	 push {r7,lr}
 954              	.LCFI30:
 955              	 .cfi_def_cfa_offset 8
 956              	 .cfi_offset 7,-8
 957              	 .cfi_offset 14,-4
 958 0002 82B0     	 sub sp,sp,#8
 959              	.LCFI31:
 960              	 .cfi_def_cfa_offset 16
 961 0004 00AF     	 add r7,sp,#0
 962              	.LCFI32:
 963              	 .cfi_def_cfa_register 7
 964 0006 7860     	 str r0,[r7,#4]
 337:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 338:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 965              	 .loc 2 338 0
 966 0008 8023     	 mov r3,#128
 967 000a 9B03     	 lsl r3,r3,#14
 968 000c 181C     	 mov r0,r3
 969 000e FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 339:../Libraries/XMCLib/src/xmc_can.c **** #endif
 340:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 341:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 342:../Libraries/XMCLib/src/xmc_can.c **** #endif
 343:../Libraries/XMCLib/src/xmc_can.c ****   /* Enable CAN Module */
 344:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 970              	 .loc 2 344 0
 971 0012 7B68     	 ldr r3,[r7,#4]
 972 0014 1B68     	 ldr r3,[r3]
 973 0016 0122     	 mov r2,#1
 974 0018 9343     	 bic r3,r2
 975 001a 1A1C     	 mov r2,r3
 976 001c 7B68     	 ldr r3,[r7,#4]
 977 001e 1A60     	 str r2,[r3]
 345:../Libraries/XMCLib/src/xmc_can.c ****   while (obj->CLC & CAN_CLC_DISS_Msk)
 978              	 .loc 2 345 0
 979 0020 C046     	 mov r8,r8
 980              	.L47:
 981              	 .loc 2 345 0 is_stmt 0 discriminator 1
 982 0022 7B68     	 ldr r3,[r7,#4]
 983 0024 1B68     	 ldr r3,[r3]
 984 0026 0222     	 mov r2,#2
 985 0028 1340     	 and r3,r2
 986 002a FAD1     	 bne .L47
 346:../Libraries/XMCLib/src/xmc_can.c ****   {
 347:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 348:../Libraries/XMCLib/src/xmc_can.c ****   };
 349:../Libraries/XMCLib/src/xmc_can.c **** }
 987              	 .loc 2 349 0 is_stmt 1
 988 002c BD46     	 mov sp,r7
 989 002e 02B0     	 add sp,sp,#8
 990              	 
 991 0030 80BD     	 pop {r7,pc}
 992              	 .cfi_endproc
 993              	.LFE124:
 995 0032 C046     	 .section .text.XMC_CAN_Init,"ax",%progbits
 996              	 .align 2
 997              	 .global XMC_CAN_Init
 998              	 .code 16
 999              	 .thumb_func
 1001              	XMC_CAN_Init:
 1002              	.LFB125:
 350:../Libraries/XMCLib/src/xmc_can.c **** 
 351:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 352:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 353:../Libraries/XMCLib/src/xmc_can.c **** {
 1003              	 .loc 2 353 0
 1004              	 .cfi_startproc
 1005 0000 80B5     	 push {r7,lr}
 1006              	.LCFI33:
 1007              	 .cfi_def_cfa_offset 8
 1008              	 .cfi_offset 7,-8
 1009              	 .cfi_offset 14,-4
 1010 0002 8EB0     	 sub sp,sp,#56
 1011              	.LCFI34:
 1012              	 .cfi_def_cfa_offset 64
 1013 0004 00AF     	 add r7,sp,#0
 1014              	.LCFI35:
 1015              	 .cfi_def_cfa_register 7
 1016 0006 F860     	 str r0,[r7,#12]
 1017 0008 7A60     	 str r2,[r7,#4]
 1018 000a 0B23     	 mov r3,#11
 1019 000c FB18     	 add r3,r7,r3
 1020 000e 0A1C     	 add r2,r1,#0
 1021 0010 1A70     	 strb r2,[r3]
 354:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 355:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 356:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 357:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 358:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 359:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 360:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 361:../Libraries/XMCLib/src/xmc_can.c **** 
 362:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 363:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 364:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1022              	 .loc 2 364 0
 1023 0012 FB68     	 ldr r3,[r7,#12]
 1024 0014 181C     	 mov r0,r3
 1025 0016 FFF7FEFF 	 bl XMC_CAN_Enable
 365:../Libraries/XMCLib/src/xmc_can.c **** 
 366:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1026              	 .loc 2 366 0
 1027 001a FA68     	 ldr r2,[r7,#12]
 1028 001c 0B23     	 mov r3,#11
 1029 001e FB18     	 add r3,r7,r3
 1030 0020 1B78     	 ldrb r3,[r3]
 1031 0022 101C     	 mov r0,r2
 1032 0024 191C     	 mov r1,r3
 1033 0026 FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 367:../Libraries/XMCLib/src/xmc_can.c **** 
 368:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1034              	 .loc 2 368 0
 1035 002a FB68     	 ldr r3,[r7,#12]
 1036 002c 181C     	 mov r0,r3
 1037 002e FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1038 0032 031C     	 mov r3,r0
 1039 0034 7B63     	 str r3,[r7,#52]
 369:../Libraries/XMCLib/src/xmc_can.c **** 
 370:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 371:../Libraries/XMCLib/src/xmc_can.c **** 
 372:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 373:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1040              	 .loc 2 373 0
 1041 0036 786B     	 ldr r0,[r7,#52]
 1042 0038 7968     	 ldr r1,[r7,#4]
 1043 003a FFF7FEFF 	 bl __aeabi_uidiv
 1044 003e 031C     	 mov r3,r0
 1045 0040 1A1C     	 mov r2,r3
 1046 0042 8023     	 mov r3,#128
 1047 0044 DB00     	 lsl r3,r3,#3
 1048 0046 9B1A     	 sub r3,r3,r2
 1049 0048 0020     	 mov r0,#0
 1050 004a 191C     	 mov r1,r3
 1051 004c FFF7FEFF 	 bl max
 1052 0050 021C     	 mov r2,r0
 1053 0052 314B     	 ldr r3,.L53
 1054 0054 101C     	 mov r0,r2
 1055 0056 191C     	 mov r1,r3
 1056 0058 FFF7FEFF 	 bl min
 1057 005c 031C     	 mov r3,r0
 1058 005e 3B63     	 str r3,[r7,#48]
 374:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 1059              	 .loc 2 374 0
 1060 0060 3B6B     	 ldr r3,[r7,#48]
 1061 0062 8022     	 mov r2,#128
 1062 0064 D200     	 lsl r2,r2,#3
 1063 0066 D31A     	 sub r3,r2,r3
 1064 0068 786B     	 ldr r0,[r7,#52]
 1065 006a 191C     	 mov r1,r3
 1066 006c FFF7FEFF 	 bl __aeabi_uidiv
 1067 0070 031C     	 mov r3,r0
 1068 0072 FB62     	 str r3,[r7,#44]
 375:../Libraries/XMCLib/src/xmc_can.c **** 
 376:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 377:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 1069              	 .loc 2 377 0
 1070 0074 7B68     	 ldr r3,[r7,#4]
 1071 0076 9B09     	 lsr r3,r3,#6
 1072 0078 BB62     	 str r3,[r7,#40]
 378:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 1073              	 .loc 2 378 0
 1074 007a 7B6B     	 ldr r3,[r7,#52]
 1075 007c 9B09     	 lsr r3,r3,#6
 1076 007e 7B62     	 str r3,[r7,#36]
 379:../Libraries/XMCLib/src/xmc_can.c **** 
 380:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 1077              	 .loc 2 380 0
 1078 0080 BB6A     	 ldr r3,[r7,#40]
 1079 0082 9B02     	 lsl r3,r3,#10
 1080 0084 181C     	 mov r0,r3
 1081 0086 796A     	 ldr r1,[r7,#36]
 1082 0088 FFF7FEFF 	 bl __aeabi_uidiv
 1083 008c 031C     	 mov r3,r0
 1084 008e 1A1C     	 mov r2,r3
 1085 0090 214B     	 ldr r3,.L53
 1086 0092 101C     	 mov r0,r2
 1087 0094 191C     	 mov r1,r3
 1088 0096 FFF7FEFF 	 bl min
 1089 009a 031C     	 mov r3,r0
 1090 009c 3B62     	 str r3,[r7,#32]
 381:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 1091              	 .loc 2 381 0
 1092 009e 7B6A     	 ldr r3,[r7,#36]
 1093 00a0 3A6A     	 ldr r2,[r7,#32]
 1094 00a2 5343     	 mul r3,r2
 1095 00a4 9B0A     	 lsr r3,r3,#10
 1096 00a6 FB61     	 str r3,[r7,#28]
 382:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 1097              	 .loc 2 382 0
 1098 00a8 FB69     	 ldr r3,[r7,#28]
 1099 00aa 9B01     	 lsl r3,r3,#6
 1100 00ac FB61     	 str r3,[r7,#28]
 383:../Libraries/XMCLib/src/xmc_can.c **** 
 384:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 1101              	 .loc 2 384 0
 1102 00ae 7A68     	 ldr r2,[r7,#4]
 1103 00b0 FB6A     	 ldr r3,[r7,#44]
 1104 00b2 D11A     	 sub r1,r2,r3
 1105 00b4 7A68     	 ldr r2,[r7,#4]
 1106 00b6 FB69     	 ldr r3,[r7,#28]
 1107 00b8 D01A     	 sub r0,r2,r3
 1108 00ba 1B23     	 mov r3,#27
 1109 00bc FA18     	 add r2,r7,r3
 1110 00be 0023     	 mov r3,#0
 1111 00c0 8842     	 cmp r0,r1
 1112 00c2 5B41     	 adc r3,r3,r3
 1113 00c4 1370     	 strb r3,[r2]
 385:../Libraries/XMCLib/src/xmc_can.c **** 
 386:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 1114              	 .loc 2 386 0
 1115 00c6 1B23     	 mov r3,#27
 1116 00c8 FB18     	 add r3,r7,r3
 1117 00ca 1B78     	 ldrb r3,[r3]
 1118 00cc 002B     	 cmp r3,#0
 1119 00ce 01D0     	 beq .L49
 1120              	 .loc 2 386 0 is_stmt 0 discriminator 1
 1121 00d0 3B6B     	 ldr r3,[r7,#48]
 1122 00d2 00E0     	 b .L50
 1123              	.L49:
 1124              	 .loc 2 386 0 discriminator 2
 1125 00d4 3B6A     	 ldr r3,[r7,#32]
 1126              	.L50:
 1127              	 .loc 2 386 0 discriminator 4
 1128 00d6 7B61     	 str r3,[r7,#20]
 387:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 1129              	 .loc 2 387 0 is_stmt 1 discriminator 4
 1130 00d8 1B23     	 mov r3,#27
 1131 00da FB18     	 add r3,r7,r3
 1132 00dc 1B78     	 ldrb r3,[r3]
 1133 00de 002B     	 cmp r3,#0
 1134 00e0 01D0     	 beq .L51
 1135              	 .loc 2 387 0 is_stmt 0 discriminator 1
 1136 00e2 0122     	 mov r2,#1
 1137 00e4 00E0     	 b .L52
 1138              	.L51:
 1139              	 .loc 2 387 0 discriminator 2
 1140 00e6 0222     	 mov r2,#2
 1141              	.L52:
 1142              	 .loc 2 387 0 discriminator 4
 1143 00e8 1323     	 mov r3,#19
 1144 00ea FB18     	 add r3,r7,r3
 1145 00ec 1A70     	 strb r2,[r3]
 388:../Libraries/XMCLib/src/xmc_can.c **** 
 389:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1146              	 .loc 2 389 0 is_stmt 1 discriminator 4
 1147 00ee FB68     	 ldr r3,[r7,#12]
 1148 00f0 DB68     	 ldr r3,[r3,#12]
 1149 00f2 0A4A     	 ldr r2,.L53+4
 1150 00f4 1A40     	 and r2,r3
 1151 00f6 FB68     	 ldr r3,[r7,#12]
 1152 00f8 DA60     	 str r2,[r3,#12]
 390:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 1153              	 .loc 2 390 0 discriminator 4
 1154 00fa FB68     	 ldr r3,[r7,#12]
 1155 00fc DA68     	 ldr r2,[r3,#12]
 1156 00fe 1323     	 mov r3,#19
 1157 0100 FB18     	 add r3,r7,r3
 1158 0102 1B78     	 ldrb r3,[r3]
 1159 0104 9903     	 lsl r1,r3,#14
 1160 0106 7B69     	 ldr r3,[r7,#20]
 1161 0108 0B43     	 orr r3,r1
 1162 010a 1A43     	 orr r2,r3
 1163 010c FB68     	 ldr r3,[r7,#12]
 1164 010e DA60     	 str r2,[r3,#12]
 391:../Libraries/XMCLib/src/xmc_can.c **** 
 392:../Libraries/XMCLib/src/xmc_can.c **** }
 1165              	 .loc 2 392 0 discriminator 4
 1166 0110 BD46     	 mov sp,r7
 1167 0112 0EB0     	 add sp,sp,#56
 1168              	 
 1169 0114 80BD     	 pop {r7,pc}
 1170              	.L54:
 1171 0116 C046     	 .align 2
 1172              	.L53:
 1173 0118 FF030000 	 .word 1023
 1174 011c 003CFFFF 	 .word -50176
 1175              	 .cfi_endproc
 1176              	.LFE125:
 1178              	 .section .text.XMC_CAN_SetBaudrateClockSource,"ax",%progbits
 1179              	 .align 2
 1180              	 .global XMC_CAN_SetBaudrateClockSource
 1181              	 .code 16
 1182              	 .thumb_func
 1184              	XMC_CAN_SetBaudrateClockSource:
 1185              	.LFB126:
 393:../Libraries/XMCLib/src/xmc_can.c **** 
 394:../Libraries/XMCLib/src/xmc_can.c **** #else
 395:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN GLOBAL Object */
 396:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
 397:../Libraries/XMCLib/src/xmc_can.c **** {
 398:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 399:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 400:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 401:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 402:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 403:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 404:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 405:../Libraries/XMCLib/src/xmc_can.c **** 
 406:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 407:../Libraries/XMCLib/src/xmc_can.c **** 
 408:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 409:../Libraries/XMCLib/src/xmc_can.c **** 
 410:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 411:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 412:../Libraries/XMCLib/src/xmc_can.c **** 
 413:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 414:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 415:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 416:../Libraries/XMCLib/src/xmc_can.c **** 
 417:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 418:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 419:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 420:../Libraries/XMCLib/src/xmc_can.c **** 
 421:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 422:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 423:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 424:../Libraries/XMCLib/src/xmc_can.c **** 
 425:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 426:../Libraries/XMCLib/src/xmc_can.c **** 
 427:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 428:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 429:../Libraries/XMCLib/src/xmc_can.c **** 
 430:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 431:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 432:../Libraries/XMCLib/src/xmc_can.c **** }
 433:../Libraries/XMCLib/src/xmc_can.c **** #endif
 434:../Libraries/XMCLib/src/xmc_can.c **** 
 435:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
 436:../Libraries/XMCLib/src/xmc_can.c **** {
 1186              	 .loc 2 436 0
 1187              	 .cfi_startproc
 1188 0000 80B5     	 push {r7,lr}
 1189              	.LCFI36:
 1190              	 .cfi_def_cfa_offset 8
 1191              	 .cfi_offset 7,-8
 1192              	 .cfi_offset 14,-4
 1193 0002 82B0     	 sub sp,sp,#8
 1194              	.LCFI37:
 1195              	 .cfi_def_cfa_offset 16
 1196 0004 00AF     	 add r7,sp,#0
 1197              	.LCFI38:
 1198              	 .cfi_def_cfa_register 7
 1199 0006 7860     	 str r0,[r7,#4]
 1200 0008 0A1C     	 mov r2,r1
 1201 000a FB1C     	 add r3,r7,#3
 1202 000c 1A70     	 strb r2,[r3]
 437:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 438:../Libraries/XMCLib/src/xmc_can.c ****   obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 1203              	 .loc 2 438 0
 1204 000e 7A68     	 ldr r2,[r7,#4]
 1205 0010 E423     	 mov r3,#228
 1206 0012 5B00     	 lsl r3,r3,#1
 1207 0014 D358     	 ldr r3,[r2,r3]
 1208 0016 0F22     	 mov r2,#15
 1209 0018 9343     	 bic r3,r2
 1210 001a 1A1C     	 mov r2,r3
 1211 001c FB1C     	 add r3,r7,#3
 1212 001e 1B78     	 ldrb r3,[r3]
 1213 0020 1A43     	 orr r2,r3
 1214 0022 111C     	 mov r1,r2
 1215 0024 7A68     	 ldr r2,[r7,#4]
 1216 0026 E423     	 mov r3,#228
 1217 0028 5B00     	 lsl r3,r3,#1
 1218 002a D150     	 str r1,[r2,r3]
 439:../Libraries/XMCLib/src/xmc_can.c **** #endif  
 440:../Libraries/XMCLib/src/xmc_can.c **** }
 1219              	 .loc 2 440 0
 1220 002c BD46     	 mov sp,r7
 1221 002e 02B0     	 add sp,sp,#8
 1222              	 
 1223 0030 80BD     	 pop {r7,pc}
 1224              	 .cfi_endproc
 1225              	.LFE126:
 1227 0032 C046     	 .section .text.XMC_CAN_GetBaudrateClockSource,"ax",%progbits
 1228              	 .align 2
 1229              	 .global XMC_CAN_GetBaudrateClockSource
 1230              	 .code 16
 1231              	 .thumb_func
 1233              	XMC_CAN_GetBaudrateClockSource:
 1234              	.LFB127:
 441:../Libraries/XMCLib/src/xmc_can.c **** 
 442:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
 443:../Libraries/XMCLib/src/xmc_can.c **** {
 1235              	 .loc 2 443 0
 1236              	 .cfi_startproc
 1237 0000 80B5     	 push {r7,lr}
 1238              	.LCFI39:
 1239              	 .cfi_def_cfa_offset 8
 1240              	 .cfi_offset 7,-8
 1241              	 .cfi_offset 14,-4
 1242 0002 82B0     	 sub sp,sp,#8
 1243              	.LCFI40:
 1244              	 .cfi_def_cfa_offset 16
 1245 0004 00AF     	 add r7,sp,#0
 1246              	.LCFI41:
 1247              	 .cfi_def_cfa_register 7
 1248 0006 7860     	 str r0,[r7,#4]
 444:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 445:../Libraries/XMCLib/src/xmc_can.c ****   return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 1249              	 .loc 2 445 0
 1250 0008 7A68     	 ldr r2,[r7,#4]
 1251 000a E423     	 mov r3,#228
 1252 000c 5B00     	 lsl r3,r3,#1
 1253 000e D358     	 ldr r3,[r2,r3]
 1254 0010 DBB2     	 uxtb r3,r3
 1255 0012 0F22     	 mov r2,#15
 1256 0014 1340     	 and r3,r2
 1257 0016 DBB2     	 uxtb r3,r3
 446:../Libraries/XMCLib/src/xmc_can.c **** #elif (UC_FAMILY == XMC4) 
 447:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_CANCLKSRC_FPERI;
 448:../Libraries/XMCLib/src/xmc_can.c **** #endif    
 449:../Libraries/XMCLib/src/xmc_can.c **** }
 1258              	 .loc 2 449 0
 1259 0018 181C     	 mov r0,r3
 1260 001a BD46     	 mov sp,r7
 1261 001c 02B0     	 add sp,sp,#8
 1262              	 
 1263 001e 80BD     	 pop {r7,pc}
 1264              	 .cfi_endproc
 1265              	.LFE127:
 1267              	 .section .text.XMC_CAN_GetBaudrateClockFrequency,"ax",%progbits
 1268              	 .align 2
 1269              	 .global XMC_CAN_GetBaudrateClockFrequency
 1270              	 .code 16
 1271              	 .thumb_func
 1273              	XMC_CAN_GetBaudrateClockFrequency:
 1274              	.LFB128:
 450:../Libraries/XMCLib/src/xmc_can.c **** 
 451:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
 452:../Libraries/XMCLib/src/xmc_can.c **** {
 1275              	 .loc 2 452 0
 1276              	 .cfi_startproc
 1277 0000 80B5     	 push {r7,lr}
 1278              	.LCFI42:
 1279              	 .cfi_def_cfa_offset 8
 1280              	 .cfi_offset 7,-8
 1281              	 .cfi_offset 14,-4
 1282 0002 84B0     	 sub sp,sp,#16
 1283              	.LCFI43:
 1284              	 .cfi_def_cfa_offset 24
 1285 0004 00AF     	 add r7,sp,#0
 1286              	.LCFI44:
 1287              	 .cfi_def_cfa_register 7
 1288 0006 7860     	 str r0,[r7,#4]
 453:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t frequency;
 454:../Libraries/XMCLib/src/xmc_can.c **** 
 455:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 456:../Libraries/XMCLib/src/xmc_can.c ****   switch(XMC_CAN_GetBaudrateClockSource(obj))
 1289              	 .loc 2 456 0
 1290 0008 7B68     	 ldr r3,[r7,#4]
 1291 000a 181C     	 mov r0,r3
 1292 000c FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockSource
 1293 0010 031E     	 sub r3,r0,#0
 1294 0012 012B     	 cmp r3,#1
 1295 0014 02D0     	 beq .L60
 1296 0016 022B     	 cmp r3,#2
 1297 0018 05D0     	 beq .L61
 1298 001a 09E0     	 b .L64
 1299              	.L60:
 457:../Libraries/XMCLib/src/xmc_can.c ****   {
 458:../Libraries/XMCLib/src/xmc_can.c **** #if UC_FAMILY == XMC4
 459:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FPERI:
 460:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 461:../Libraries/XMCLib/src/xmc_can.c ****       break;
 462:../Libraries/XMCLib/src/xmc_can.c **** #else
 463:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_MCLK:
 464:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 1300              	 .loc 2 464 0
 1301 001c FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1302 0020 031C     	 mov r3,r0
 1303 0022 FB60     	 str r3,[r7,#12]
 465:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1304              	 .loc 2 465 0
 1305 0024 07E0     	 b .L62
 1306              	.L61:
 466:../Libraries/XMCLib/src/xmc_can.c **** #endif
 467:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FOHP:
 468:../Libraries/XMCLib/src/xmc_can.c ****       frequency = OSCHP_GetFrequency();
 1307              	 .loc 2 468 0
 1308 0026 FFF7FEFF 	 bl OSCHP_GetFrequency
 1309 002a 031C     	 mov r3,r0
 1310 002c FB60     	 str r3,[r7,#12]
 469:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1311              	 .loc 2 469 0
 1312 002e 02E0     	 b .L62
 1313              	.L64:
 470:../Libraries/XMCLib/src/xmc_can.c **** 
 471:../Libraries/XMCLib/src/xmc_can.c ****     default:
 472:../Libraries/XMCLib/src/xmc_can.c ****       frequency = 0;
 1314              	 .loc 2 472 0
 1315 0030 0023     	 mov r3,#0
 1316 0032 FB60     	 str r3,[r7,#12]
 473:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1317              	 .loc 2 473 0
 1318 0034 C046     	 mov r8,r8
 1319              	.L62:
 474:../Libraries/XMCLib/src/xmc_can.c ****   }
 475:../Libraries/XMCLib/src/xmc_can.c **** #else
 476:../Libraries/XMCLib/src/xmc_can.c ****   frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 477:../Libraries/XMCLib/src/xmc_can.c **** #endif  
 478:../Libraries/XMCLib/src/xmc_can.c **** 
 479:../Libraries/XMCLib/src/xmc_can.c ****   return frequency;
 1320              	 .loc 2 479 0
 1321 0036 FB68     	 ldr r3,[r7,#12]
 480:../Libraries/XMCLib/src/xmc_can.c **** }
 1322              	 .loc 2 480 0
 1323 0038 181C     	 mov r0,r3
 1324 003a BD46     	 mov sp,r7
 1325 003c 04B0     	 add sp,sp,#16
 1326              	 
 1327 003e 80BD     	 pop {r7,pc}
 1328              	 .cfi_endproc
 1329              	.LFE128:
 1331              	 .section .text.XMC_CAN_InitEx,"ax",%progbits
 1332              	 .align 2
 1333              	 .global XMC_CAN_InitEx
 1334              	 .code 16
 1335              	 .thumb_func
 1337              	XMC_CAN_InitEx:
 1338              	.LFB129:
 481:../Libraries/XMCLib/src/xmc_can.c **** 
 482:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 483:../Libraries/XMCLib/src/xmc_can.c **** {
 1339              	 .loc 2 483 0
 1340              	 .cfi_startproc
 1341 0000 80B5     	 push {r7,lr}
 1342              	.LCFI45:
 1343              	 .cfi_def_cfa_offset 8
 1344              	 .cfi_offset 7,-8
 1345              	 .cfi_offset 14,-4
 1346 0002 88B0     	 sub sp,sp,#32
 1347              	.LCFI46:
 1348              	 .cfi_def_cfa_offset 40
 1349 0004 00AF     	 add r7,sp,#0
 1350              	.LCFI47:
 1351              	 .cfi_def_cfa_register 7
 1352 0006 F860     	 str r0,[r7,#12]
 1353 0008 7A60     	 str r2,[r7,#4]
 1354 000a 0B23     	 mov r3,#11
 1355 000c FB18     	 add r3,r7,r3
 1356 000e 0A1C     	 add r2,r1,#0
 1357 0010 1A70     	 strb r2,[r3]
 484:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step_n;
 485:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n;
 486:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 487:../Libraries/XMCLib/src/xmc_can.c **** 
 488:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 489:../Libraries/XMCLib/src/xmc_can.c **** 
 490:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 491:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1358              	 .loc 2 491 0
 1359 0012 FB68     	 ldr r3,[r7,#12]
 1360 0014 181C     	 mov r0,r3
 1361 0016 FFF7FEFF 	 bl XMC_CAN_Enable
 492:../Libraries/XMCLib/src/xmc_can.c **** 
 493:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1362              	 .loc 2 493 0
 1363 001a FA68     	 ldr r2,[r7,#12]
 1364 001c 0B23     	 mov r3,#11
 1365 001e FB18     	 add r3,r7,r3
 1366 0020 1B78     	 ldrb r3,[r3]
 1367 0022 101C     	 mov r0,r2
 1368 0024 191C     	 mov r1,r3
 1369 0026 FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 494:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1370              	 .loc 2 494 0
 1371 002a FB68     	 ldr r3,[r7,#12]
 1372 002c 181C     	 mov r0,r3
 1373 002e FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1374 0032 031C     	 mov r3,r0
 1375 0034 FB61     	 str r3,[r7,#28]
 495:../Libraries/XMCLib/src/xmc_can.c **** 
 496:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 497:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1376              	 .loc 2 497 0
 1377 0036 F869     	 ldr r0,[r7,#28]
 1378 0038 7968     	 ldr r1,[r7,#4]
 1379 003a FFF7FEFF 	 bl __aeabi_uidiv
 1380 003e 031C     	 mov r3,r0
 1381 0040 1A1C     	 mov r2,r3
 1382 0042 8023     	 mov r3,#128
 1383 0044 DB00     	 lsl r3,r3,#3
 1384 0046 9B1A     	 sub r3,r3,r2
 1385 0048 0020     	 mov r0,#0
 1386 004a 191C     	 mov r1,r3
 1387 004c FFF7FEFF 	 bl max
 1388 0050 021C     	 mov r2,r0
 1389 0052 124B     	 ldr r3,.L67
 1390 0054 101C     	 mov r0,r2
 1391 0056 191C     	 mov r1,r3
 1392 0058 FFF7FEFF 	 bl min
 1393 005c 031C     	 mov r3,r0
 1394 005e BB61     	 str r3,[r7,#24]
 498:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 1395              	 .loc 2 498 0
 1396 0060 BB69     	 ldr r3,[r7,#24]
 1397 0062 8022     	 mov r2,#128
 1398 0064 D200     	 lsl r2,r2,#3
 1399 0066 D31A     	 sub r3,r2,r3
 1400 0068 F869     	 ldr r0,[r7,#28]
 1401 006a 191C     	 mov r1,r3
 1402 006c FFF7FEFF 	 bl __aeabi_uidiv
 1403 0070 031C     	 mov r3,r0
 1404 0072 7B61     	 str r3,[r7,#20]
 499:../Libraries/XMCLib/src/xmc_can.c **** 
 500:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1405              	 .loc 2 500 0
 1406 0074 FB68     	 ldr r3,[r7,#12]
 1407 0076 DB68     	 ldr r3,[r3,#12]
 1408 0078 094A     	 ldr r2,.L67+4
 1409 007a 1A40     	 and r2,r3
 1410 007c FB68     	 ldr r3,[r7,#12]
 1411 007e DA60     	 str r2,[r3,#12]
 501:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_P
 1412              	 .loc 2 501 0
 1413 0080 FB68     	 ldr r3,[r7,#12]
 1414 0082 DA68     	 ldr r2,[r3,#12]
 1415 0084 BB69     	 ldr r3,[r7,#24]
 1416 0086 1343     	 orr r3,r2
 1417 0088 8022     	 mov r2,#128
 1418 008a D201     	 lsl r2,r2,#7
 1419 008c 1A43     	 orr r2,r3
 1420 008e FB68     	 ldr r3,[r7,#12]
 1421 0090 DA60     	 str r2,[r3,#12]
 502:../Libraries/XMCLib/src/xmc_can.c **** 
 503:../Libraries/XMCLib/src/xmc_can.c ****   return freq_n;
 1422              	 .loc 2 503 0
 1423 0092 7B69     	 ldr r3,[r7,#20]
 504:../Libraries/XMCLib/src/xmc_can.c **** }
 1424              	 .loc 2 504 0
 1425 0094 181C     	 mov r0,r3
 1426 0096 BD46     	 mov sp,r7
 1427 0098 08B0     	 add sp,sp,#32
 1428              	 
 1429 009a 80BD     	 pop {r7,pc}
 1430              	.L68:
 1431              	 .align 2
 1432              	.L67:
 1433 009c FF030000 	 .word 1023
 1434 00a0 003CFFFF 	 .word -50176
 1435              	 .cfi_endproc
 1436              	.LFE129:
 1438              	 .section .text.XMC_CAN_MO_SetIdentifier,"ax",%progbits
 1439              	 .align 2
 1440              	 .global XMC_CAN_MO_SetIdentifier
 1441              	 .code 16
 1442              	 .thumb_func
 1444              	XMC_CAN_MO_SetIdentifier:
 1445              	.LFB130:
 505:../Libraries/XMCLib/src/xmc_can.c **** 
 506:../Libraries/XMCLib/src/xmc_can.c **** /* Sets the Identifier of the MO */
 507:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
 508:../Libraries/XMCLib/src/xmc_can.c **** {
 1446              	 .loc 2 508 0
 1447              	 .cfi_startproc
 1448 0000 80B5     	 push {r7,lr}
 1449              	.LCFI48:
 1450              	 .cfi_def_cfa_offset 8
 1451              	 .cfi_offset 7,-8
 1452              	 .cfi_offset 14,-4
 1453 0002 82B0     	 sub sp,sp,#8
 1454              	.LCFI49:
 1455              	 .cfi_def_cfa_offset 16
 1456 0004 00AF     	 add r7,sp,#0
 1457              	.LCFI50:
 1458              	 .cfi_def_cfa_register 7
 1459 0006 7860     	 str r0,[r7,#4]
 1460 0008 3960     	 str r1,[r7]
 509:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1461              	 .loc 2 509 0
 1462 000a 7B68     	 ldr r3,[r7,#4]
 1463 000c 1B68     	 ldr r3,[r3]
 1464 000e 9A69     	 ldr r2,[r3,#24]
 1465 0010 8023     	 mov r3,#128
 1466 0012 9B05     	 lsl r3,r3,#22
 1467 0014 1340     	 and r3,r2
 1468 0016 0DD1     	 bne .L70
 510:../Libraries/XMCLib/src/xmc_can.c ****   {
 511:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1469              	 .loc 2 511 0
 1470 0018 7B68     	 ldr r3,[r7,#4]
 1471 001a 1B68     	 ldr r3,[r3]
 1472 001c 7A68     	 ldr r2,[r7,#4]
 1473 001e 1268     	 ldr r2,[r2]
 1474 0020 9269     	 ldr r2,[r2,#24]
 1475 0022 520F     	 lsr r2,r2,#29
 1476 0024 5107     	 lsl r1,r2,#29
 512:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 1477              	 .loc 2 512 0
 1478 0026 3A68     	 ldr r2,[r7]
 1479 0028 9204     	 lsl r2,r2,#18
 1480 002a D200     	 lsl r2,r2,#3
 1481 002c D208     	 lsr r2,r2,#3
 511:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 1482              	 .loc 2 511 0
 1483 002e 0A43     	 orr r2,r1
 1484 0030 9A61     	 str r2,[r3,#24]
 1485 0032 0BE0     	 b .L71
 1486              	.L70:
 513:../Libraries/XMCLib/src/xmc_can.c ****   }
 514:../Libraries/XMCLib/src/xmc_can.c ****   else
 515:../Libraries/XMCLib/src/xmc_can.c ****   {
 516:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1487              	 .loc 2 516 0
 1488 0034 7B68     	 ldr r3,[r7,#4]
 1489 0036 1B68     	 ldr r3,[r3]
 1490 0038 7A68     	 ldr r2,[r7,#4]
 1491 003a 1268     	 ldr r2,[r2]
 1492 003c 9269     	 ldr r2,[r2,#24]
 1493 003e 520F     	 lsr r2,r2,#29
 1494 0040 5107     	 lsl r1,r2,#29
 517:../Libraries/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1495              	 .loc 2 517 0
 1496 0042 3A68     	 ldr r2,[r7]
 1497 0044 D200     	 lsl r2,r2,#3
 1498 0046 D208     	 lsr r2,r2,#3
 516:../Libraries/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1499              	 .loc 2 516 0
 1500 0048 0A43     	 orr r2,r1
 1501 004a 9A61     	 str r2,[r3,#24]
 1502              	.L71:
 518:../Libraries/XMCLib/src/xmc_can.c ****   }
 519:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_identifier = can_identifier;
 1503              	 .loc 2 519 0
 1504 004c 3B68     	 ldr r3,[r7]
 1505 004e DB00     	 lsl r3,r3,#3
 1506 0050 DA08     	 lsr r2,r3,#3
 1507 0052 7B68     	 ldr r3,[r7,#4]
 1508 0054 D200     	 lsl r2,r2,#3
 1509 0056 D208     	 lsr r2,r2,#3
 1510 0058 5968     	 ldr r1,[r3,#4]
 1511 005a 490F     	 lsr r1,r1,#29
 1512 005c 4907     	 lsl r1,r1,#29
 1513 005e 0A43     	 orr r2,r1
 1514 0060 5A60     	 str r2,[r3,#4]
 520:../Libraries/XMCLib/src/xmc_can.c **** }
 1515              	 .loc 2 520 0
 1516 0062 BD46     	 mov sp,r7
 1517 0064 02B0     	 add sp,sp,#8
 1518              	 
 1519 0066 80BD     	 pop {r7,pc}
 1520              	 .cfi_endproc
 1521              	.LFE130:
 1523              	 .section .text.XMC_CAN_MO_GetIdentifier,"ax",%progbits
 1524              	 .align 2
 1525              	 .global XMC_CAN_MO_GetIdentifier
 1526              	 .code 16
 1527              	 .thumb_func
 1529              	XMC_CAN_MO_GetIdentifier:
 1530              	.LFB131:
 521:../Libraries/XMCLib/src/xmc_can.c **** 
 522:../Libraries/XMCLib/src/xmc_can.c **** 
 523:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the Identifier of the MO */
 524:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetIdentifier(const XMC_CAN_MO_t *const can_mo)
 525:../Libraries/XMCLib/src/xmc_can.c **** {
 1531              	 .loc 2 525 0
 1532              	 .cfi_startproc
 1533 0000 80B5     	 push {r7,lr}
 1534              	.LCFI51:
 1535              	 .cfi_def_cfa_offset 8
 1536              	 .cfi_offset 7,-8
 1537              	 .cfi_offset 14,-4
 1538 0002 84B0     	 sub sp,sp,#16
 1539              	.LCFI52:
 1540              	 .cfi_def_cfa_offset 24
 1541 0004 00AF     	 add r7,sp,#0
 1542              	.LCFI53:
 1543              	 .cfi_def_cfa_register 7
 1544 0006 7860     	 str r0,[r7,#4]
 526:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier;
 527:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1545              	 .loc 2 527 0
 1546 0008 7B68     	 ldr r3,[r7,#4]
 1547 000a 1B68     	 ldr r3,[r3]
 1548 000c 9A69     	 ldr r2,[r3,#24]
 1549 000e 8023     	 mov r3,#128
 1550 0010 9B05     	 lsl r3,r3,#22
 1551 0012 1340     	 and r3,r2
 1552 0014 07D1     	 bne .L73
 528:../Libraries/XMCLib/src/xmc_can.c ****   {
 529:../Libraries/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk)) >> XMC_CAN_MO_MOAR_STD
 1553              	 .loc 2 529 0
 1554 0016 7B68     	 ldr r3,[r7,#4]
 1555 0018 1B68     	 ldr r3,[r3]
 1556 001a 9B69     	 ldr r3,[r3,#24]
 1557 001c DB00     	 lsl r3,r3,#3
 1558 001e DB08     	 lsr r3,r3,#3
 1559 0020 9B0C     	 lsr r3,r3,#18
 1560 0022 FB60     	 str r3,[r7,#12]
 1561 0024 05E0     	 b .L74
 1562              	.L73:
 530:../Libraries/XMCLib/src/xmc_can.c ****   }
 531:../Libraries/XMCLib/src/xmc_can.c ****   else
 532:../Libraries/XMCLib/src/xmc_can.c ****   {
 533:../Libraries/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk));
 1563              	 .loc 2 533 0
 1564 0026 7B68     	 ldr r3,[r7,#4]
 1565 0028 1B68     	 ldr r3,[r3]
 1566 002a 9B69     	 ldr r3,[r3,#24]
 1567 002c DB00     	 lsl r3,r3,#3
 1568 002e DB08     	 lsr r3,r3,#3
 1569 0030 FB60     	 str r3,[r7,#12]
 1570              	.L74:
 534:../Libraries/XMCLib/src/xmc_can.c ****   }
 535:../Libraries/XMCLib/src/xmc_can.c ****   return identifier;
 1571              	 .loc 2 535 0
 1572 0032 FB68     	 ldr r3,[r7,#12]
 536:../Libraries/XMCLib/src/xmc_can.c **** }
 1573              	 .loc 2 536 0
 1574 0034 181C     	 mov r0,r3
 1575 0036 BD46     	 mov sp,r7
 1576 0038 04B0     	 add sp,sp,#16
 1577              	 
 1578 003a 80BD     	 pop {r7,pc}
 1579              	 .cfi_endproc
 1580              	.LFE131:
 1582              	 .section .text.XMC_CAN_MO_GetAcceptanceMask,"ax",%progbits
 1583              	 .align 2
 1584              	 .global XMC_CAN_MO_GetAcceptanceMask
 1585              	 .code 16
 1586              	 .thumb_func
 1588              	XMC_CAN_MO_GetAcceptanceMask:
 1589              	.LFB132:
 537:../Libraries/XMCLib/src/xmc_can.c **** 
 538:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask for the CAN MO. */
 539:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetAcceptanceMask(const XMC_CAN_MO_t *const can_mo)
 540:../Libraries/XMCLib/src/xmc_can.c **** {
 1590              	 .loc 2 540 0
 1591              	 .cfi_startproc
 1592 0000 80B5     	 push {r7,lr}
 1593              	.LCFI54:
 1594              	 .cfi_def_cfa_offset 8
 1595              	 .cfi_offset 7,-8
 1596              	 .cfi_offset 14,-4
 1597 0002 84B0     	 sub sp,sp,#16
 1598              	.LCFI55:
 1599              	 .cfi_def_cfa_offset 24
 1600 0004 00AF     	 add r7,sp,#0
 1601              	.LCFI56:
 1602              	 .cfi_def_cfa_register 7
 1603 0006 7860     	 str r0,[r7,#4]
 541:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier_mask;
 542:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1604              	 .loc 2 542 0
 1605 0008 7B68     	 ldr r3,[r7,#4]
 1606 000a 1B68     	 ldr r3,[r3]
 1607 000c DA68     	 ldr r2,[r3,#12]
 1608 000e 8023     	 mov r3,#128
 1609 0010 9B05     	 lsl r3,r3,#22
 1610 0012 1340     	 and r3,r2
 1611 0014 0ED1     	 bne .L77
 543:../Libraries/XMCLib/src/xmc_can.c ****             && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1612              	 .loc 2 543 0
 1613 0016 7B68     	 ldr r3,[r7,#4]
 1614 0018 1B68     	 ldr r3,[r3]
 1615 001a 9A69     	 ldr r2,[r3,#24]
 1616 001c 8023     	 mov r3,#128
 1617 001e 9B05     	 lsl r3,r3,#22
 1618 0020 1340     	 and r3,r2
 1619 0022 07D1     	 bne .L77
 544:../Libraries/XMCLib/src/xmc_can.c ****   {
 545:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk)) >> XMC_CAN_MO
 1620              	 .loc 2 545 0
 1621 0024 7B68     	 ldr r3,[r7,#4]
 1622 0026 1B68     	 ldr r3,[r3]
 1623 0028 DB68     	 ldr r3,[r3,#12]
 1624 002a DB00     	 lsl r3,r3,#3
 1625 002c DB08     	 lsr r3,r3,#3
 1626 002e 9B0C     	 lsr r3,r3,#18
 1627 0030 FB60     	 str r3,[r7,#12]
 1628 0032 05E0     	 b .L78
 1629              	.L77:
 546:../Libraries/XMCLib/src/xmc_can.c ****   }
 547:../Libraries/XMCLib/src/xmc_can.c ****   else
 548:../Libraries/XMCLib/src/xmc_can.c ****   {
 549:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk));
 1630              	 .loc 2 549 0
 1631 0034 7B68     	 ldr r3,[r7,#4]
 1632 0036 1B68     	 ldr r3,[r3]
 1633 0038 DB68     	 ldr r3,[r3,#12]
 1634 003a DB00     	 lsl r3,r3,#3
 1635 003c DB08     	 lsr r3,r3,#3
 1636 003e FB60     	 str r3,[r7,#12]
 1637              	.L78:
 550:../Libraries/XMCLib/src/xmc_can.c ****   }
 551:../Libraries/XMCLib/src/xmc_can.c ****   return identifier_mask;
 1638              	 .loc 2 551 0
 1639 0040 FB68     	 ldr r3,[r7,#12]
 552:../Libraries/XMCLib/src/xmc_can.c **** }
 1640              	 .loc 2 552 0
 1641 0042 181C     	 mov r0,r3
 1642 0044 BD46     	 mov sp,r7
 1643 0046 04B0     	 add sp,sp,#16
 1644              	 
 1645 0048 80BD     	 pop {r7,pc}
 1646              	 .cfi_endproc
 1647              	.LFE132:
 1649 004a C046     	 .section .text.XMC_CAN_MO_SetAcceptanceMask,"ax",%progbits
 1650              	 .align 2
 1651              	 .global XMC_CAN_MO_SetAcceptanceMask
 1652              	 .code 16
 1653              	 .thumb_func
 1655              	XMC_CAN_MO_SetAcceptanceMask:
 1656              	.LFB133:
 553:../Libraries/XMCLib/src/xmc_can.c **** 
 554:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask of the MO */
 555:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetAcceptanceMask(XMC_CAN_MO_t *const can_mo,const uint32_t can_id_mask)
 556:../Libraries/XMCLib/src/xmc_can.c **** {
 1657              	 .loc 2 556 0
 1658              	 .cfi_startproc
 1659 0000 80B5     	 push {r7,lr}
 1660              	.LCFI57:
 1661              	 .cfi_def_cfa_offset 8
 1662              	 .cfi_offset 7,-8
 1663              	 .cfi_offset 14,-4
 1664 0002 82B0     	 sub sp,sp,#8
 1665              	.LCFI58:
 1666              	 .cfi_def_cfa_offset 16
 1667 0004 00AF     	 add r7,sp,#0
 1668              	.LCFI59:
 1669              	 .cfi_def_cfa_register 7
 1670 0006 7860     	 str r0,[r7,#4]
 1671 0008 3960     	 str r1,[r7]
 557:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1672              	 .loc 2 557 0
 1673 000a 7B68     	 ldr r3,[r7,#4]
 1674 000c 1B68     	 ldr r3,[r3]
 1675 000e DA68     	 ldr r2,[r3,#12]
 1676 0010 8023     	 mov r3,#128
 1677 0012 9B05     	 lsl r3,r3,#22
 1678 0014 1340     	 and r3,r2
 1679 0016 12D1     	 bne .L81
 558:../Libraries/XMCLib/src/xmc_can.c ****           && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1680              	 .loc 2 558 0
 1681 0018 7B68     	 ldr r3,[r7,#4]
 1682 001a 1B68     	 ldr r3,[r3]
 1683 001c 9A69     	 ldr r2,[r3,#24]
 1684 001e 8023     	 mov r3,#128
 1685 0020 9B05     	 lsl r3,r3,#22
 1686 0022 1340     	 and r3,r2
 1687 0024 0BD1     	 bne .L81
 559:../Libraries/XMCLib/src/xmc_can.c ****   {
 560:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1688              	 .loc 2 560 0
 1689 0026 7B68     	 ldr r3,[r7,#4]
 1690 0028 1B68     	 ldr r3,[r3]
 1691 002a 7A68     	 ldr r2,[r7,#4]
 1692 002c 1268     	 ldr r2,[r2]
 1693 002e D268     	 ldr r2,[r2,#12]
 1694 0030 520F     	 lsr r2,r2,#29
 1695 0032 5107     	 lsl r1,r2,#29
 561:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1696              	 .loc 2 561 0
 1697 0034 3A68     	 ldr r2,[r7]
 1698 0036 9204     	 lsl r2,r2,#18
 560:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1699              	 .loc 2 560 0
 1700 0038 0A43     	 orr r2,r1
 1701 003a DA60     	 str r2,[r3,#12]
 1702 003c 0BE0     	 b .L82
 1703              	.L81:
 562:../Libraries/XMCLib/src/xmc_can.c ****   }
 563:../Libraries/XMCLib/src/xmc_can.c ****   else
 564:../Libraries/XMCLib/src/xmc_can.c ****   {
 565:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1704              	 .loc 2 565 0
 1705 003e 7B68     	 ldr r3,[r7,#4]
 1706 0040 1B68     	 ldr r3,[r3]
 1707 0042 7A68     	 ldr r2,[r7,#4]
 1708 0044 1268     	 ldr r2,[r2]
 1709 0046 D268     	 ldr r2,[r2,#12]
 1710 0048 520F     	 lsr r2,r2,#29
 1711 004a 5107     	 lsl r1,r2,#29
 566:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1712              	 .loc 2 566 0
 1713 004c 3A68     	 ldr r2,[r7]
 1714 004e D200     	 lsl r2,r2,#3
 1715 0050 D208     	 lsr r2,r2,#3
 565:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1716              	 .loc 2 565 0
 1717 0052 0A43     	 orr r2,r1
 1718 0054 DA60     	 str r2,[r3,#12]
 1719              	.L82:
 567:../Libraries/XMCLib/src/xmc_can.c ****   }
 568:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_id_mask = can_id_mask;
 1720              	 .loc 2 568 0
 1721 0056 3B68     	 ldr r3,[r7]
 1722 0058 DB00     	 lsl r3,r3,#3
 1723 005a DA08     	 lsr r2,r3,#3
 1724 005c 7B68     	 ldr r3,[r7,#4]
 1725 005e D200     	 lsl r2,r2,#3
 1726 0060 D208     	 lsr r2,r2,#3
 1727 0062 9968     	 ldr r1,[r3,#8]
 1728 0064 490F     	 lsr r1,r1,#29
 1729 0066 4907     	 lsl r1,r1,#29
 1730 0068 0A43     	 orr r2,r1
 1731 006a 9A60     	 str r2,[r3,#8]
 569:../Libraries/XMCLib/src/xmc_can.c **** }
 1732              	 .loc 2 569 0
 1733 006c BD46     	 mov sp,r7
 1734 006e 02B0     	 add sp,sp,#8
 1735              	 
 1736 0070 80BD     	 pop {r7,pc}
 1737              	 .cfi_endproc
 1738              	.LFE133:
 1740 0072 C046     	 .section .text.XMC_CAN_MO_Config,"ax",%progbits
 1741              	 .align 2
 1742              	 .global XMC_CAN_MO_Config
 1743              	 .code 16
 1744              	 .thumb_func
 1746              	XMC_CAN_MO_Config:
 1747              	.LFB134:
 570:../Libraries/XMCLib/src/xmc_can.c **** 
 571:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN MO Object */
 572:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
 573:../Libraries/XMCLib/src/xmc_can.c **** {
 1748              	 .loc 2 573 0
 1749              	 .cfi_startproc
 1750 0000 80B5     	 push {r7,lr}
 1751              	.LCFI60:
 1752              	 .cfi_def_cfa_offset 8
 1753              	 .cfi_offset 7,-8
 1754              	 .cfi_offset 14,-4
 1755 0002 86B0     	 sub sp,sp,#24
 1756              	.LCFI61:
 1757              	 .cfi_def_cfa_offset 32
 1758 0004 00AF     	 add r7,sp,#0
 1759              	.LCFI62:
 1760              	 .cfi_def_cfa_register 7
 1761 0006 7860     	 str r0,[r7,#4]
 574:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t reg;
 575:../Libraries/XMCLib/src/xmc_can.c ****   
 576:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure MPN */
 577:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 1762              	 .loc 2 577 0
 1763 0008 7B68     	 ldr r3,[r7,#4]
 1764 000a 1B68     	 ldr r3,[r3]
 1765 000c 484A     	 ldr r2,.L90
 1766 000e 9446     	 mov ip,r2
 1767 0010 6344     	 add r3,r3,ip
 1768 0012 5B09     	 lsr r3,r3,#5
 1769 0014 7B61     	 str r3,[r7,#20]
 578:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_
 1770              	 .loc 2 578 0
 1771 0016 7B69     	 ldr r3,[r7,#20]
 1772 0018 5B09     	 lsr r3,r3,#5
 1773 001a 5A03     	 lsl r2,r3,#13
 1774 001c 7B69     	 ldr r3,[r7,#20]
 1775 001e 1F21     	 mov r1,#31
 1776 0020 0B40     	 and r3,r1
 1777 0022 1B02     	 lsl r3,r3,#8
 1778 0024 1343     	 orr r3,r2
 1779 0026 3B61     	 str r3,[r7,#16]
 579:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 1780              	 .loc 2 579 0
 1781 0028 7B68     	 ldr r3,[r7,#4]
 1782 002a 1B68     	 ldr r3,[r3]
 1783 002c 7A68     	 ldr r2,[r7,#4]
 1784 002e 1268     	 ldr r2,[r2]
 1785 0030 9268     	 ldr r2,[r2,#8]
 1786 0032 4049     	 ldr r1,.L90+4
 1787 0034 0A40     	 and r2,r1
 1788 0036 9A60     	 str r2,[r3,#8]
 580:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 1789              	 .loc 2 580 0
 1790 0038 7B68     	 ldr r3,[r7,#4]
 1791 003a 1B68     	 ldr r3,[r3]
 1792 003c 7A68     	 ldr r2,[r7,#4]
 1793 003e 1268     	 ldr r2,[r2]
 1794 0040 9168     	 ldr r1,[r2,#8]
 1795 0042 3A69     	 ldr r2,[r7,#16]
 1796 0044 0A43     	 orr r2,r1
 1797 0046 9A60     	 str r2,[r3,#8]
 581:../Libraries/XMCLib/src/xmc_can.c ****   
 582:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 1798              	 .loc 2 582 0
 1799 0048 7B68     	 ldr r3,[r7,#4]
 1800 004a DB79     	 ldrb r3,[r3,#7]
 1801 004c 2022     	 mov r2,#32
 1802 004e 1340     	 and r3,r2
 1803 0050 DBB2     	 uxtb r3,r3
 1804 0052 002B     	 cmp r3,#0
 1805 0054 07D0     	 beq .L84
 583:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1806              	 .loc 2 583 0 discriminator 1
 1807 0056 7B68     	 ldr r3,[r7,#4]
 1808 0058 DB79     	 ldrb r3,[r3,#7]
 1809 005a 2022     	 mov r2,#32
 1810 005c 1340     	 and r3,r2
 1811 005e DBB2     	 uxtb r3,r3
 582:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1812              	 .loc 2 582 0 discriminator 1
 1813 0060 002B     	 cmp r3,#0
 1814 0062 00D1     	 bne .L84
 582:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1815              	 .loc 2 582 0 is_stmt 0
 1816 0064 61E0     	 b .L83
 1817              	.L84:
 584:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1818              	 .loc 2 584 0 is_stmt 1
 1819 0066 7B68     	 ldr r3,[r7,#4]
 1820 0068 1B7E     	 ldrb r3,[r3,#24]
 583:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1821              	 .loc 2 583 0
 1822 006a 002B     	 cmp r3,#0
 1823 006c 04D0     	 beq .L86
 585:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 1824              	 .loc 2 585 0
 1825 006e 7B68     	 ldr r3,[r7,#4]
 1826 0070 1B7E     	 ldrb r3,[r3,#24]
 584:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1827              	 .loc 2 584 0
 1828 0072 012B     	 cmp r3,#1
 1829 0074 00D0     	 beq .L86
 1830 0076 58E0     	 b .L83
 1831              	.L86:
 586:../Libraries/XMCLib/src/xmc_can.c ****   {
 587:../Libraries/XMCLib/src/xmc_can.c ****     ; /*Do nothing*/
 588:../Libraries/XMCLib/src/xmc_can.c ****   }
 589:../Libraries/XMCLib/src/xmc_can.c ****   else
 590:../Libraries/XMCLib/src/xmc_can.c ****   {
 591:../Libraries/XMCLib/src/xmc_can.c **** 
 592:../Libraries/XMCLib/src/xmc_can.c ****     /* Disable Message object */
 593:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1832              	 .loc 2 593 0
 1833 0078 7B68     	 ldr r3,[r7,#4]
 1834 007a 1B68     	 ldr r3,[r3]
 1835 007c 2022     	 mov r2,#32
 1836 007e DA61     	 str r2,[r3,#28]
 594:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 1837              	 .loc 2 594 0
 1838 0080 7B68     	 ldr r3,[r7,#4]
 1839 0082 DB79     	 ldrb r3,[r3,#7]
 1840 0084 2022     	 mov r2,#32
 1841 0086 1340     	 and r3,r2
 1842 0088 DBB2     	 uxtb r3,r3
 1843 008a 002B     	 cmp r3,#0
 1844 008c 28D1     	 bne .L87
 595:../Libraries/XMCLib/src/xmc_can.c ****     {
 596:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_ar;
 1845              	 .loc 2 596 0
 1846 008e 7B68     	 ldr r3,[r7,#4]
 1847 0090 5B68     	 ldr r3,[r3,#4]
 1848 0092 FB60     	 str r3,[r7,#12]
 597:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 1849              	 .loc 2 597 0
 1850 0094 FB68     	 ldr r3,[r7,#12]
 1851 0096 5B0F     	 lsr r3,r3,#29
 1852 0098 5B07     	 lsl r3,r3,#29
 1853 009a FB60     	 str r3,[r7,#12]
 598:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 1854              	 .loc 2 598 0
 1855 009c 7B68     	 ldr r3,[r7,#4]
 1856 009e 5B68     	 ldr r3,[r3,#4]
 1857 00a0 DB00     	 lsl r3,r3,#3
 1858 00a2 DB08     	 lsr r3,r3,#3
 1859 00a4 9B04     	 lsl r3,r3,#18
 1860 00a6 1A1C     	 mov r2,r3
 1861 00a8 FB68     	 ldr r3,[r7,#12]
 1862 00aa 1343     	 orr r3,r2
 1863 00ac FB60     	 str r3,[r7,#12]
 599:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 1864              	 .loc 2 599 0
 1865 00ae 7B68     	 ldr r3,[r7,#4]
 1866 00b0 1B68     	 ldr r3,[r3]
 1867 00b2 FA68     	 ldr r2,[r7,#12]
 1868 00b4 9A61     	 str r2,[r3,#24]
 600:../Libraries/XMCLib/src/xmc_can.c **** 
 601:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_amr;
 1869              	 .loc 2 601 0
 1870 00b6 7B68     	 ldr r3,[r7,#4]
 1871 00b8 9B68     	 ldr r3,[r3,#8]
 1872 00ba FB60     	 str r3,[r7,#12]
 602:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 1873              	 .loc 2 602 0
 1874 00bc FB68     	 ldr r3,[r7,#12]
 1875 00be 5B0F     	 lsr r3,r3,#29
 1876 00c0 5B07     	 lsl r3,r3,#29
 1877 00c2 FB60     	 str r3,[r7,#12]
 603:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1878              	 .loc 2 603 0
 1879 00c4 7B68     	 ldr r3,[r7,#4]
 1880 00c6 9B68     	 ldr r3,[r3,#8]
 1881 00c8 DB00     	 lsl r3,r3,#3
 1882 00ca DB08     	 lsr r3,r3,#3
 1883 00cc 9B04     	 lsl r3,r3,#18
 1884 00ce 1A1C     	 mov r2,r3
 1885 00d0 FB68     	 ldr r3,[r7,#12]
 1886 00d2 1343     	 orr r3,r2
 1887 00d4 FB60     	 str r3,[r7,#12]
 604:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 1888              	 .loc 2 604 0
 1889 00d6 7B68     	 ldr r3,[r7,#4]
 1890 00d8 1B68     	 ldr r3,[r3]
 1891 00da FA68     	 ldr r2,[r7,#12]
 1892 00dc DA60     	 str r2,[r3,#12]
 1893 00de 09E0     	 b .L88
 1894              	.L87:
 605:../Libraries/XMCLib/src/xmc_can.c ****     }
 606:../Libraries/XMCLib/src/xmc_can.c ****     else
 607:../Libraries/XMCLib/src/xmc_can.c ****     {
 608:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 1895              	 .loc 2 608 0
 1896 00e0 7B68     	 ldr r3,[r7,#4]
 1897 00e2 1B68     	 ldr r3,[r3]
 1898 00e4 7A68     	 ldr r2,[r7,#4]
 1899 00e6 5268     	 ldr r2,[r2,#4]
 1900 00e8 9A61     	 str r2,[r3,#24]
 609:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 1901              	 .loc 2 609 0
 1902 00ea 7B68     	 ldr r3,[r7,#4]
 1903 00ec 1B68     	 ldr r3,[r3]
 1904 00ee 7A68     	 ldr r2,[r7,#4]
 1905 00f0 9268     	 ldr r2,[r2,#8]
 1906 00f2 DA60     	 str r2,[r3,#12]
 1907              	.L88:
 610:../Libraries/XMCLib/src/xmc_can.c ****     }
 611:../Libraries/XMCLib/src/xmc_can.c ****     /* Check whether message object is transmit message object */
 612:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1908              	 .loc 2 612 0
 1909 00f4 7B68     	 ldr r3,[r7,#4]
 1910 00f6 1B7E     	 ldrb r3,[r3,#24]
 1911 00f8 012B     	 cmp r3,#1
 1912 00fa 0DD1     	 bne .L89
 613:../Libraries/XMCLib/src/xmc_can.c ****     {
 614:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Transmit message object  */
 615:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_MO_UpdateData(can_mo);
 1913              	 .loc 2 615 0
 1914 00fc 7B68     	 ldr r3,[r7,#4]
 1915 00fe 181C     	 mov r0,r3
 1916 0100 FFF7FEFF 	 bl XMC_CAN_MO_UpdateData
 616:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 1917              	 .loc 2 616 0
 1918 0104 7B68     	 ldr r3,[r7,#4]
 1919 0106 1B68     	 ldr r3,[r3]
 1920 0108 8022     	 mov r2,#128
 1921 010a 1205     	 lsl r2,r2,#20
 1922 010c DA61     	 str r2,[r3,#28]
 617:../Libraries/XMCLib/src/xmc_can.c **** 
 618:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
 619:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_M
 1923              	 .loc 2 619 0
 1924 010e 7B68     	 ldr r3,[r7,#4]
 1925 0110 1B68     	 ldr r3,[r3]
 1926 0112 094A     	 ldr r2,.L90+8
 1927 0114 DA61     	 str r2,[r3,#28]
 1928 0116 08E0     	 b .L83
 1929              	.L89:
 620:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
 621:../Libraries/XMCLib/src/xmc_can.c ****     }
 622:../Libraries/XMCLib/src/xmc_can.c ****     else
 623:../Libraries/XMCLib/src/xmc_can.c ****     {
 624:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Receive message object and set RXEN bit */
 625:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 1930              	 .loc 2 625 0
 1931 0118 7B68     	 ldr r3,[r7,#4]
 1932 011a 1B68     	 ldr r3,[r3]
 1933 011c 8022     	 mov r2,#128
 1934 011e 1201     	 lsl r2,r2,#4
 1935 0120 DA61     	 str r2,[r3,#28]
 626:../Libraries/XMCLib/src/xmc_can.c **** 
 627:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
 628:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_M
 1936              	 .loc 2 628 0
 1937 0122 7B68     	 ldr r3,[r7,#4]
 1938 0124 1B68     	 ldr r3,[r3]
 1939 0126 054A     	 ldr r2,.L90+12
 1940 0128 DA61     	 str r2,[r3,#28]
 1941              	.L83:
 629:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 630:../Libraries/XMCLib/src/xmc_can.c ****     }
 631:../Libraries/XMCLib/src/xmc_can.c **** 
 632:../Libraries/XMCLib/src/xmc_can.c ****   }
 633:../Libraries/XMCLib/src/xmc_can.c **** }
 1942              	 .loc 2 633 0
 1943 012a BD46     	 mov sp,r7
 1944 012c 06B0     	 add sp,sp,#24
 1945              	 
 1946 012e 80BD     	 pop {r7,pc}
 1947              	.L91:
 1948              	 .align 2
 1949              	.L90:
 1950 0130 00F0FBAF 	 .word -1342443520
 1951 0134 FF00FFFF 	 .word -65281
 1952 0138 C0002006 	 .word 102760640
 1953 013c 4006A000 	 .word 10487360
 1954              	 .cfi_endproc
 1955              	.LFE134:
 1957              	 .section .text.XMC_CAN_MO_UpdateData,"ax",%progbits
 1958              	 .align 2
 1959              	 .global XMC_CAN_MO_UpdateData
 1960              	 .code 16
 1961              	 .thumb_func
 1963              	XMC_CAN_MO_UpdateData:
 1964              	.LFB135:
 634:../Libraries/XMCLib/src/xmc_can.c **** 
 635:../Libraries/XMCLib/src/xmc_can.c **** /* Update of XMC_CAN Object */
 636:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
 637:../Libraries/XMCLib/src/xmc_can.c **** {
 1965              	 .loc 2 637 0
 1966              	 .cfi_startproc
 1967 0000 80B5     	 push {r7,lr}
 1968              	.LCFI63:
 1969              	 .cfi_def_cfa_offset 8
 1970              	 .cfi_offset 7,-8
 1971              	 .cfi_offset 14,-4
 1972 0002 84B0     	 sub sp,sp,#16
 1973              	.LCFI64:
 1974              	 .cfi_def_cfa_offset 24
 1975 0004 00AF     	 add r7,sp,#0
 1976              	.LCFI65:
 1977              	 .cfi_def_cfa_register 7
 1978 0006 7860     	 str r0,[r7,#4]
 638:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 1979              	 .loc 2 638 0
 1980 0008 0F23     	 mov r3,#15
 1981 000a FB18     	 add r3,r7,r3
 1982 000c 0322     	 mov r2,#3
 1983 000e 1A70     	 strb r2,[r3]
 639:../Libraries/XMCLib/src/xmc_can.c ****   /* Check whether message object is transmit message object */
 640:../Libraries/XMCLib/src/xmc_can.c ****   if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1984              	 .loc 2 640 0
 1985 0010 7B68     	 ldr r3,[r7,#4]
 1986 0012 1B7E     	 ldrb r3,[r3,#24]
 1987 0014 012B     	 cmp r3,#1
 1988 0016 25D1     	 bne .L93
 641:../Libraries/XMCLib/src/xmc_can.c ****   {
 642:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1989              	 .loc 2 642 0
 1990 0018 7B68     	 ldr r3,[r7,#4]
 1991 001a 1B68     	 ldr r3,[r3]
 1992 001c 2022     	 mov r2,#32
 1993 001e DA61     	 str r2,[r3,#28]
 643:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure data length */
 644:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 1994              	 .loc 2 644 0
 1995 0020 7B68     	 ldr r3,[r7,#4]
 1996 0022 1B68     	 ldr r3,[r3]
 1997 0024 7A68     	 ldr r2,[r7,#4]
 1998 0026 1268     	 ldr r2,[r2]
 1999 0028 1268     	 ldr r2,[r2]
 2000 002a 1449     	 ldr r1,.L96
 2001 002c 1140     	 and r1,r2
 645:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 2002              	 .loc 2 645 0
 2003 002e 7A68     	 ldr r2,[r7,#4]
 2004 0030 127B     	 ldrb r2,[r2,#12]
 2005 0032 1006     	 lsl r0,r2,#24
 2006 0034 F022     	 mov r2,#240
 2007 0036 1205     	 lsl r2,r2,#20
 2008 0038 0240     	 and r2,r0
 644:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 2009              	 .loc 2 644 0
 2010 003a 0A43     	 orr r2,r1
 2011 003c 1A60     	 str r2,[r3]
 646:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure Data registers*/
 647:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 2012              	 .loc 2 647 0
 2013 003e 7B68     	 ldr r3,[r7,#4]
 2014 0040 1B68     	 ldr r3,[r3]
 2015 0042 7A68     	 ldr r2,[r7,#4]
 2016 0044 1269     	 ldr r2,[r2,#16]
 2017 0046 1A61     	 str r2,[r3,#16]
 648:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 2018              	 .loc 2 648 0
 2019 0048 7B68     	 ldr r3,[r7,#4]
 2020 004a 1B68     	 ldr r3,[r3]
 2021 004c 7A68     	 ldr r2,[r7,#4]
 2022 004e 5269     	 ldr r2,[r2,#20]
 2023 0050 5A61     	 str r2,[r3,#20]
 649:../Libraries/XMCLib/src/xmc_can.c ****     /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
 650:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOC
 2024              	 .loc 2 650 0
 2025 0052 7B68     	 ldr r3,[r7,#4]
 2026 0054 1B68     	 ldr r3,[r3]
 2027 0056 0A4A     	 ldr r2,.L96+4
 2028 0058 DA61     	 str r2,[r3,#28]
 651:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2029              	 .loc 2 651 0
 2030 005a 0F23     	 mov r3,#15
 2031 005c FB18     	 add r3,r7,r3
 2032 005e 0022     	 mov r2,#0
 2033 0060 1A70     	 strb r2,[r3]
 2034 0062 03E0     	 b .L94
 2035              	.L93:
 652:../Libraries/XMCLib/src/xmc_can.c ****   }
 653:../Libraries/XMCLib/src/xmc_can.c ****   else
 654:../Libraries/XMCLib/src/xmc_can.c ****   {
 655:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2036              	 .loc 2 655 0
 2037 0064 0F23     	 mov r3,#15
 2038 0066 FB18     	 add r3,r7,r3
 2039 0068 0322     	 mov r2,#3
 2040 006a 1A70     	 strb r2,[r3]
 2041              	.L94:
 656:../Libraries/XMCLib/src/xmc_can.c ****   }
 657:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2042              	 .loc 2 657 0
 2043 006c 0F23     	 mov r3,#15
 2044 006e FB18     	 add r3,r7,r3
 2045 0070 1B78     	 ldrb r3,[r3]
 658:../Libraries/XMCLib/src/xmc_can.c **** }
 2046              	 .loc 2 658 0
 2047 0072 181C     	 mov r0,r3
 2048 0074 BD46     	 mov sp,r7
 2049 0076 04B0     	 add sp,sp,#16
 2050              	 
 2051 0078 80BD     	 pop {r7,pc}
 2052              	.L97:
 2053 007a C046     	 .align 2
 2054              	.L96:
 2055 007c FFFFFFF0 	 .word -251658241
 2056 0080 40002800 	 .word 2621504
 2057              	 .cfi_endproc
 2058              	.LFE135:
 2060              	 .section .text.XMC_CAN_MO_Transmit,"ax",%progbits
 2061              	 .align 2
 2062              	 .global XMC_CAN_MO_Transmit
 2063              	 .code 16
 2064              	 .thumb_func
 2066              	XMC_CAN_MO_Transmit:
 2067              	.LFB136:
 659:../Libraries/XMCLib/src/xmc_can.c **** 
 660:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will put a transmit request to transmit message object */
 661:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
 662:../Libraries/XMCLib/src/xmc_can.c **** {
 2068              	 .loc 2 662 0
 2069              	 .cfi_startproc
 2070 0000 80B5     	 push {r7,lr}
 2071              	.LCFI66:
 2072              	 .cfi_def_cfa_offset 8
 2073              	 .cfi_offset 7,-8
 2074              	 .cfi_offset 14,-4
 2075 0002 86B0     	 sub sp,sp,#24
 2076              	.LCFI67:
 2077              	 .cfi_def_cfa_offset 32
 2078 0004 00AF     	 add r7,sp,#0
 2079              	.LCFI68:
 2080              	 .cfi_def_cfa_register 7
 2081 0006 7860     	 str r0,[r7,#4]
 663:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2082              	 .loc 2 663 0
 2083 0008 1723     	 mov r3,#23
 2084 000a FB18     	 add r3,r7,r3
 2085 000c 0122     	 mov r2,#1
 2086 000e 1A70     	 strb r2,[r3]
 664:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2087              	 .loc 2 664 0
 2088 0010 7B68     	 ldr r3,[r7,#4]
 2089 0012 1B68     	 ldr r3,[r3]
 2090 0014 DB69     	 ldr r3,[r3,#28]
 2091 0016 2022     	 mov r2,#32
 2092 0018 1340     	 and r3,r2
 2093 001a 5B09     	 lsr r3,r3,#5
 2094 001c 3B61     	 str r3,[r7,#16]
 665:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_
 2095              	 .loc 2 665 0
 2096 001e 7B68     	 ldr r3,[r7,#4]
 2097 0020 1B68     	 ldr r3,[r3]
 2098 0022 DA69     	 ldr r2,[r3,#28]
 2099 0024 8023     	 mov r3,#128
 2100 0026 5B00     	 lsl r3,r3,#1
 2101 0028 1340     	 and r3,r2
 2102 002a 1B0A     	 lsr r3,r3,#8
 2103 002c FB60     	 str r3,[r7,#12]
 666:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 667:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2104              	 .loc 2 667 0
 2105 002e 3B69     	 ldr r3,[r7,#16]
 2106 0030 002B     	 cmp r3,#0
 2107 0032 04D1     	 bne .L99
 668:../Libraries/XMCLib/src/xmc_can.c ****   {
 669:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2108              	 .loc 2 669 0
 2109 0034 1723     	 mov r3,#23
 2110 0036 FB18     	 add r3,r7,r3
 2111 0038 0422     	 mov r2,#4
 2112 003a 1A70     	 strb r2,[r3]
 2113 003c 10E0     	 b .L100
 2114              	.L99:
 670:../Libraries/XMCLib/src/xmc_can.c ****   }
 671:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 672:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2115              	 .loc 2 672 0
 2116 003e FB68     	 ldr r3,[r7,#12]
 2117 0040 012B     	 cmp r3,#1
 2118 0042 04D1     	 bne .L101
 673:../Libraries/XMCLib/src/xmc_can.c ****   {
 674:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2119              	 .loc 2 674 0
 2120 0044 1723     	 mov r3,#23
 2121 0046 FB18     	 add r3,r7,r3
 2122 0048 0222     	 mov r2,#2
 2123 004a 1A70     	 strb r2,[r3]
 2124 004c 08E0     	 b .L100
 2125              	.L101:
 675:../Libraries/XMCLib/src/xmc_can.c ****   }
 676:../Libraries/XMCLib/src/xmc_can.c ****   else
 677:../Libraries/XMCLib/src/xmc_can.c ****   {
 678:../Libraries/XMCLib/src/xmc_can.c ****     /* set TXRQ bit */
 679:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCT
 2126              	 .loc 2 679 0
 2127 004e 7B68     	 ldr r3,[r7,#4]
 2128 0050 1B68     	 ldr r3,[r3]
 2129 0052 E022     	 mov r2,#224
 2130 0054 D204     	 lsl r2,r2,#19
 2131 0056 DA61     	 str r2,[r3,#28]
 680:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2132              	 .loc 2 680 0
 2133 0058 1723     	 mov r3,#23
 2134 005a FB18     	 add r3,r7,r3
 2135 005c 0022     	 mov r2,#0
 2136 005e 1A70     	 strb r2,[r3]
 2137              	.L100:
 681:../Libraries/XMCLib/src/xmc_can.c ****   }
 682:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2138              	 .loc 2 682 0
 2139 0060 1723     	 mov r3,#23
 2140 0062 FB18     	 add r3,r7,r3
 2141 0064 1B78     	 ldrb r3,[r3]
 683:../Libraries/XMCLib/src/xmc_can.c **** }
 2142              	 .loc 2 683 0
 2143 0066 181C     	 mov r0,r3
 2144 0068 BD46     	 mov sp,r7
 2145 006a 06B0     	 add sp,sp,#24
 2146              	 
 2147 006c 80BD     	 pop {r7,pc}
 2148              	 .cfi_endproc
 2149              	.LFE136:
 2151 006e C046     	 .section .text.XMC_CAN_MO_ReceiveData,"ax",%progbits
 2152              	 .align 2
 2153              	 .global XMC_CAN_MO_ReceiveData
 2154              	 .code 16
 2155              	 .thumb_func
 2157              	XMC_CAN_MO_ReceiveData:
 2158              	.LFB137:
 684:../Libraries/XMCLib/src/xmc_can.c **** 
 685:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 686:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo)
 687:../Libraries/XMCLib/src/xmc_can.c **** {
 2159              	 .loc 2 687 0
 2160              	 .cfi_startproc
 2161 0000 80B5     	 push {r7,lr}
 2162              	.LCFI69:
 2163              	 .cfi_def_cfa_offset 8
 2164              	 .cfi_offset 7,-8
 2165              	 .cfi_offset 14,-4
 2166 0002 86B0     	 sub sp,sp,#24
 2167              	.LCFI70:
 2168              	 .cfi_def_cfa_offset 32
 2169 0004 00AF     	 add r7,sp,#0
 2170              	.LCFI71:
 2171              	 .cfi_def_cfa_register 7
 2172 0006 7860     	 str r0,[r7,#4]
 688:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2173              	 .loc 2 688 0
 2174 0008 1723     	 mov r3,#23
 2175 000a FB18     	 add r3,r7,r3
 2176 000c 0122     	 mov r2,#1
 2177 000e 1A70     	 strb r2,[r3]
 689:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2178              	 .loc 2 689 0
 2179 0010 1623     	 mov r3,#22
 2180 0012 FB18     	 add r3,r7,r3
 2181 0014 0022     	 mov r2,#0
 2182 0016 1A70     	 strb r2,[r3]
 690:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2183              	 .loc 2 690 0
 2184 0018 1523     	 mov r3,#21
 2185 001a FB18     	 add r3,r7,r3
 2186 001c 0022     	 mov r2,#0
 2187 001e 1A70     	 strb r2,[r3]
 691:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2188              	 .loc 2 691 0
 2189 0020 7B68     	 ldr r3,[r7,#4]
 2190 0022 1B68     	 ldr r3,[r3]
 2191 0024 DA69     	 ldr r2,[r3,#28]
 2192 0026 8023     	 mov r3,#128
 2193 0028 1B01     	 lsl r3,r3,#4
 2194 002a 1340     	 and r3,r2
 2195 002c DB0A     	 lsr r3,r3,#11
 2196 002e 3B61     	 str r3,[r7,#16]
 692:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2197              	 .loc 2 692 0
 2198 0030 7B68     	 ldr r3,[r7,#4]
 2199 0032 1B68     	 ldr r3,[r3]
 2200 0034 DB69     	 ldr r3,[r3,#28]
 2201 0036 0422     	 mov r2,#4
 2202 0038 1340     	 and r3,r2
 2203 003a 9B08     	 lsr r3,r3,#2
 2204 003c FB60     	 str r3,[r7,#12]
 693:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 694:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2205              	 .loc 2 694 0
 2206 003e 3B69     	 ldr r3,[r7,#16]
 2207 0040 002B     	 cmp r3,#0
 2208 0042 04D0     	 beq .L104
 695:../Libraries/XMCLib/src/xmc_can.c ****   {
 696:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2209              	 .loc 2 696 0
 2210 0044 1723     	 mov r3,#23
 2211 0046 FB18     	 add r3,r7,r3
 2212 0048 0322     	 mov r2,#3
 2213 004a 1A70     	 strb r2,[r3]
 2214 004c 31E0     	 b .L105
 2215              	.L104:
 697:../Libraries/XMCLib/src/xmc_can.c ****   }
 698:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 699:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2216              	 .loc 2 699 0
 2217 004e FB68     	 ldr r3,[r7,#12]
 2218 0050 012B     	 cmp r3,#1
 2219 0052 04D1     	 bne .L106
 700:../Libraries/XMCLib/src/xmc_can.c ****   {
 701:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2220              	 .loc 2 701 0
 2221 0054 1723     	 mov r3,#23
 2222 0056 FB18     	 add r3,r7,r3
 2223 0058 0222     	 mov r2,#2
 2224 005a 1A70     	 strb r2,[r3]
 2225 005c 29E0     	 b .L105
 2226              	.L106:
 702:../Libraries/XMCLib/src/xmc_can.c ****   }
 703:../Libraries/XMCLib/src/xmc_can.c ****   else
 704:../Libraries/XMCLib/src/xmc_can.c ****   {
 705:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 706:../Libraries/XMCLib/src/xmc_can.c ****     do
 707:../Libraries/XMCLib/src/xmc_can.c ****     {
 708:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2227              	 .loc 2 708 0 discriminator 2
 2228 005e 7B68     	 ldr r3,[r7,#4]
 2229 0060 1B68     	 ldr r3,[r3]
 2230 0062 1A69     	 ldr r2,[r3,#16]
 2231 0064 7B68     	 ldr r3,[r7,#4]
 2232 0066 1A61     	 str r2,[r3,#16]
 709:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2233              	 .loc 2 709 0 discriminator 2
 2234 0068 7B68     	 ldr r3,[r7,#4]
 2235 006a 1B68     	 ldr r3,[r3]
 2236 006c 5A69     	 ldr r2,[r3,#20]
 2237 006e 7B68     	 ldr r3,[r7,#4]
 2238 0070 5A61     	 str r2,[r3,#20]
 710:../Libraries/XMCLib/src/xmc_can.c **** 
 711:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2239              	 .loc 2 711 0 discriminator 2
 2240 0072 7B68     	 ldr r3,[r7,#4]
 2241 0074 1B68     	 ldr r3,[r3]
 2242 0076 DB69     	 ldr r3,[r3,#28]
 2243 0078 0422     	 mov r2,#4
 2244 007a 1340     	 and r3,r2
 2245 007c 9A08     	 lsr r2,r3,#2
 2246 007e 1623     	 mov r3,#22
 2247 0080 FB18     	 add r3,r7,r3
 2248 0082 1A70     	 strb r2,[r3]
 712:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2249              	 .loc 2 712 0 discriminator 2
 2250 0084 7B68     	 ldr r3,[r7,#4]
 2251 0086 1B68     	 ldr r3,[r3]
 2252 0088 DB69     	 ldr r3,[r3,#28]
 2253 008a 0822     	 mov r2,#8
 2254 008c 1340     	 and r3,r2
 2255 008e DA08     	 lsr r2,r3,#3
 2256 0090 1523     	 mov r3,#21
 2257 0092 FB18     	 add r3,r7,r3
 2258 0094 1A70     	 strb r2,[r3]
 713:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 2259              	 .loc 2 713 0 discriminator 2
 2260 0096 1623     	 mov r3,#22
 2261 0098 FB18     	 add r3,r7,r3
 2262 009a 1B78     	 ldrb r3,[r3]
 2263 009c 002B     	 cmp r3,#0
 2264 009e 04D0     	 beq .L107
 2265              	 .loc 2 713 0 is_stmt 0 discriminator 1
 2266 00a0 1523     	 mov r3,#21
 2267 00a2 FB18     	 add r3,r7,r3
 2268 00a4 1B78     	 ldrb r3,[r3]
 2269 00a6 002B     	 cmp r3,#0
 2270 00a8 D9D1     	 bne .L106
 2271              	.L107:
 714:../Libraries/XMCLib/src/xmc_can.c **** 
 715:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2272              	 .loc 2 715 0 is_stmt 1
 2273 00aa 1723     	 mov r3,#23
 2274 00ac FB18     	 add r3,r7,r3
 2275 00ae 0022     	 mov r2,#0
 2276 00b0 1A70     	 strb r2,[r3]
 2277              	.L105:
 716:../Libraries/XMCLib/src/xmc_can.c ****   }
 717:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2278              	 .loc 2 717 0
 2279 00b2 1723     	 mov r3,#23
 2280 00b4 FB18     	 add r3,r7,r3
 2281 00b6 1B78     	 ldrb r3,[r3]
 718:../Libraries/XMCLib/src/xmc_can.c **** }
 2282              	 .loc 2 718 0
 2283 00b8 181C     	 mov r0,r3
 2284 00ba BD46     	 mov sp,r7
 2285 00bc 06B0     	 add sp,sp,#24
 2286              	 
 2287 00be 80BD     	 pop {r7,pc}
 2288              	 .cfi_endproc
 2289              	.LFE137:
 2291              	 .section .text.XMC_CAN_MO_Receive,"ax",%progbits
 2292              	 .align 2
 2293              	 .global XMC_CAN_MO_Receive
 2294              	 .code 16
 2295              	 .thumb_func
 2297              	XMC_CAN_MO_Receive:
 2298              	.LFB138:
 719:../Libraries/XMCLib/src/xmc_can.c **** 
 720:../Libraries/XMCLib/src/xmc_can.c **** 
 721:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 722:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
 723:../Libraries/XMCLib/src/xmc_can.c **** {
 2299              	 .loc 2 723 0
 2300              	 .cfi_startproc
 2301 0000 80B5     	 push {r7,lr}
 2302              	.LCFI72:
 2303              	 .cfi_def_cfa_offset 8
 2304              	 .cfi_offset 7,-8
 2305              	 .cfi_offset 14,-4
 2306 0002 86B0     	 sub sp,sp,#24
 2307              	.LCFI73:
 2308              	 .cfi_def_cfa_offset 32
 2309 0004 00AF     	 add r7,sp,#0
 2310              	.LCFI74:
 2311              	 .cfi_def_cfa_register 7
 2312 0006 7860     	 str r0,[r7,#4]
 724:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2313              	 .loc 2 724 0
 2314 0008 1723     	 mov r3,#23
 2315 000a FB18     	 add r3,r7,r3
 2316 000c 0122     	 mov r2,#1
 2317 000e 1A70     	 strb r2,[r3]
 725:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2318              	 .loc 2 725 0
 2319 0010 1623     	 mov r3,#22
 2320 0012 FB18     	 add r3,r7,r3
 2321 0014 0022     	 mov r2,#0
 2322 0016 1A70     	 strb r2,[r3]
 726:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2323              	 .loc 2 726 0
 2324 0018 1523     	 mov r3,#21
 2325 001a FB18     	 add r3,r7,r3
 2326 001c 0022     	 mov r2,#0
 2327 001e 1A70     	 strb r2,[r3]
 727:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2328              	 .loc 2 727 0
 2329 0020 7B68     	 ldr r3,[r7,#4]
 2330 0022 1B68     	 ldr r3,[r3]
 2331 0024 DA69     	 ldr r2,[r3,#28]
 2332 0026 8023     	 mov r3,#128
 2333 0028 1B01     	 lsl r3,r3,#4
 2334 002a 1340     	 and r3,r2
 2335 002c DB0A     	 lsr r3,r3,#11
 2336 002e 3B61     	 str r3,[r7,#16]
 728:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2337              	 .loc 2 728 0
 2338 0030 7B68     	 ldr r3,[r7,#4]
 2339 0032 1B68     	 ldr r3,[r3]
 2340 0034 DB69     	 ldr r3,[r3,#28]
 2341 0036 0422     	 mov r2,#4
 2342 0038 1340     	 and r3,r2
 2343 003a 9B08     	 lsr r3,r3,#2
 2344 003c FB60     	 str r3,[r7,#12]
 729:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 730:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2345              	 .loc 2 730 0
 2346 003e 3B69     	 ldr r3,[r7,#16]
 2347 0040 002B     	 cmp r3,#0
 2348 0042 04D0     	 beq .L110
 731:../Libraries/XMCLib/src/xmc_can.c ****   {
 732:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2349              	 .loc 2 732 0
 2350 0044 1723     	 mov r3,#23
 2351 0046 FB18     	 add r3,r7,r3
 2352 0048 0322     	 mov r2,#3
 2353 004a 1A70     	 strb r2,[r3]
 2354 004c D3E0     	 b .L111
 2355              	.L110:
 733:../Libraries/XMCLib/src/xmc_can.c ****   }
 734:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 735:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2356              	 .loc 2 735 0
 2357 004e FB68     	 ldr r3,[r7,#12]
 2358 0050 012B     	 cmp r3,#1
 2359 0052 04D1     	 bne .L112
 736:../Libraries/XMCLib/src/xmc_can.c ****   {
 737:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2360              	 .loc 2 737 0
 2361 0054 1723     	 mov r3,#23
 2362 0056 FB18     	 add r3,r7,r3
 2363 0058 0222     	 mov r2,#2
 2364 005a 1A70     	 strb r2,[r3]
 2365 005c CBE0     	 b .L111
 2366              	.L112:
 738:../Libraries/XMCLib/src/xmc_can.c ****   }
 739:../Libraries/XMCLib/src/xmc_can.c ****   else
 740:../Libraries/XMCLib/src/xmc_can.c ****   {
 741:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 742:../Libraries/XMCLib/src/xmc_can.c ****     do
 743:../Libraries/XMCLib/src/xmc_can.c ****     {
 744:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 2367              	 .loc 2 744 0
 2368 005e 7B68     	 ldr r3,[r7,#4]
 2369 0060 1B68     	 ldr r3,[r3]
 2370 0062 0822     	 mov r2,#8
 2371 0064 DA61     	 str r2,[r3,#28]
 745:../Libraries/XMCLib/src/xmc_can.c ****       if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 2372              	 .loc 2 745 0
 2373 0066 7B68     	 ldr r3,[r7,#4]
 2374 0068 1B68     	 ldr r3,[r3]
 2375 006a 9A69     	 ldr r2,[r3,#24]
 2376 006c 8023     	 mov r3,#128
 2377 006e 9B05     	 lsl r3,r3,#22
 2378 0070 1340     	 and r3,r2
 2379 0072 5B0F     	 lsr r3,r3,#29
 2380 0074 51D1     	 bne .L113
 746:../Libraries/XMCLib/src/xmc_can.c ****       {
 747:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 2381              	 .loc 2 747 0
 2382 0076 7B68     	 ldr r3,[r7,#4]
 2383 0078 DA79     	 ldrb r2,[r3,#7]
 2384 007a 2021     	 mov r1,#32
 2385 007c 8A43     	 bic r2,r1
 2386 007e DA71     	 strb r2,[r3,#7]
 748:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_
 2387              	 .loc 2 748 0
 2388 0080 7B68     	 ldr r3,[r7,#4]
 2389 0082 1B68     	 ldr r3,[r3]
 2390 0084 9B69     	 ldr r3,[r3,#24]
 2391 0086 5F4A     	 ldr r2,.L119
 2392 0088 1340     	 and r3,r2
 2393 008a 9B0C     	 lsr r3,r3,#18
 2394 008c DB00     	 lsl r3,r3,#3
 2395 008e DA08     	 lsr r2,r3,#3
 2396 0090 7B68     	 ldr r3,[r7,#4]
 2397 0092 D200     	 lsl r2,r2,#3
 2398 0094 D208     	 lsr r2,r2,#3
 2399 0096 5968     	 ldr r1,[r3,#4]
 2400 0098 490F     	 lsr r1,r1,#29
 2401 009a 4907     	 lsl r1,r1,#29
 2402 009c 0A43     	 orr r2,r1
 2403 009e 5A60     	 str r2,[r3,#4]
 749:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2404              	 .loc 2 749 0
 2405 00a0 7B68     	 ldr r3,[r7,#4]
 2406 00a2 1B68     	 ldr r3,[r3]
 2407 00a4 DA68     	 ldr r2,[r3,#12]
 2408 00a6 8023     	 mov r3,#128
 2409 00a8 9B05     	 lsl r3,r3,#22
 2410 00aa 1340     	 and r3,r2
 2411 00ac 5B0F     	 lsr r3,r3,#29
 2412 00ae DBB2     	 uxtb r3,r3
 2413 00b0 1A1C     	 add r2,r3,#0
 2414 00b2 0123     	 mov r3,#1
 2415 00b4 1340     	 and r3,r2
 2416 00b6 DAB2     	 uxtb r2,r3
 2417 00b8 7B68     	 ldr r3,[r7,#4]
 2418 00ba 0121     	 mov r1,#1
 2419 00bc 0A40     	 and r2,r1
 2420 00be 5001     	 lsl r0,r2,#5
 2421 00c0 DA7A     	 ldrb r2,[r3,#11]
 2422 00c2 2021     	 mov r1,#32
 2423 00c4 8A43     	 bic r2,r1
 2424 00c6 111C     	 add r1,r2,#0
 2425 00c8 021C     	 add r2,r0,#0
 2426 00ca 0A43     	 orr r2,r1
 2427 00cc DA72     	 strb r2,[r3,#11]
 750:../Libraries/XMCLib/src/xmc_can.c ****         if(can_mo->can_ide_mask == 1U)
 2428              	 .loc 2 750 0
 2429 00ce 7B68     	 ldr r3,[r7,#4]
 2430 00d0 DB7A     	 ldrb r3,[r3,#11]
 2431 00d2 2022     	 mov r2,#32
 2432 00d4 1340     	 and r3,r2
 2433 00d6 DBB2     	 uxtb r3,r3
 2434 00d8 002B     	 cmp r3,#0
 2435 00da 10D0     	 beq .L114
 751:../Libraries/XMCLib/src/xmc_can.c ****         {
 752:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >
 2436              	 .loc 2 752 0
 2437 00dc 7B68     	 ldr r3,[r7,#4]
 2438 00de 1B68     	 ldr r3,[r3]
 2439 00e0 DB68     	 ldr r3,[r3,#12]
 2440 00e2 484A     	 ldr r2,.L119
 2441 00e4 1340     	 and r3,r2
 2442 00e6 9B0C     	 lsr r3,r3,#18
 2443 00e8 DB00     	 lsl r3,r3,#3
 2444 00ea DA08     	 lsr r2,r3,#3
 2445 00ec 7B68     	 ldr r3,[r7,#4]
 2446 00ee D200     	 lsl r2,r2,#3
 2447 00f0 D208     	 lsr r2,r2,#3
 2448 00f2 9968     	 ldr r1,[r3,#8]
 2449 00f4 490F     	 lsr r1,r1,#29
 2450 00f6 4907     	 lsl r1,r1,#29
 2451 00f8 0A43     	 orr r2,r1
 2452 00fa 9A60     	 str r2,[r3,#8]
 2453 00fc 43E0     	 b .L116
 2454              	.L114:
 753:../Libraries/XMCLib/src/xmc_can.c ****         }
 754:../Libraries/XMCLib/src/xmc_can.c ****         else
 755:../Libraries/XMCLib/src/xmc_can.c ****         {
 756:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2455              	 .loc 2 756 0
 2456 00fe 7B68     	 ldr r3,[r7,#4]
 2457 0100 1B68     	 ldr r3,[r3]
 2458 0102 DB68     	 ldr r3,[r3,#12]
 2459 0104 DB00     	 lsl r3,r3,#3
 2460 0106 DA08     	 lsr r2,r3,#3
 2461 0108 7B68     	 ldr r3,[r7,#4]
 2462 010a D200     	 lsl r2,r2,#3
 2463 010c D208     	 lsr r2,r2,#3
 2464 010e 9968     	 ldr r1,[r3,#8]
 2465 0110 490F     	 lsr r1,r1,#29
 2466 0112 4907     	 lsl r1,r1,#29
 2467 0114 0A43     	 orr r2,r1
 2468 0116 9A60     	 str r2,[r3,#8]
 2469 0118 35E0     	 b .L116
 2470              	.L113:
 757:../Libraries/XMCLib/src/xmc_can.c ****         }
 758:../Libraries/XMCLib/src/xmc_can.c ****       }
 759:../Libraries/XMCLib/src/xmc_can.c ****       else
 760:../Libraries/XMCLib/src/xmc_can.c ****       {
 761:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 2471              	 .loc 2 761 0
 2472 011a 7B68     	 ldr r3,[r7,#4]
 2473 011c DA79     	 ldrb r2,[r3,#7]
 2474 011e 2021     	 mov r1,#32
 2475 0120 0A43     	 orr r2,r1
 2476 0122 DA71     	 strb r2,[r3,#7]
 762:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 2477              	 .loc 2 762 0
 2478 0124 7B68     	 ldr r3,[r7,#4]
 2479 0126 1B68     	 ldr r3,[r3]
 2480 0128 9B69     	 ldr r3,[r3,#24]
 2481 012a DB00     	 lsl r3,r3,#3
 2482 012c DA08     	 lsr r2,r3,#3
 2483 012e 7B68     	 ldr r3,[r7,#4]
 2484 0130 D200     	 lsl r2,r2,#3
 2485 0132 D208     	 lsr r2,r2,#3
 2486 0134 5968     	 ldr r1,[r3,#4]
 2487 0136 490F     	 lsr r1,r1,#29
 2488 0138 4907     	 lsl r1,r1,#29
 2489 013a 0A43     	 orr r2,r1
 2490 013c 5A60     	 str r2,[r3,#4]
 763:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2491              	 .loc 2 763 0
 2492 013e 7B68     	 ldr r3,[r7,#4]
 2493 0140 1B68     	 ldr r3,[r3]
 2494 0142 DB68     	 ldr r3,[r3,#12]
 2495 0144 DB00     	 lsl r3,r3,#3
 2496 0146 DA08     	 lsr r2,r3,#3
 2497 0148 7B68     	 ldr r3,[r7,#4]
 2498 014a D200     	 lsl r2,r2,#3
 2499 014c D208     	 lsr r2,r2,#3
 2500 014e 9968     	 ldr r1,[r3,#8]
 2501 0150 490F     	 lsr r1,r1,#29
 2502 0152 4907     	 lsl r1,r1,#29
 2503 0154 0A43     	 orr r2,r1
 2504 0156 9A60     	 str r2,[r3,#8]
 764:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2505              	 .loc 2 764 0
 2506 0158 7B68     	 ldr r3,[r7,#4]
 2507 015a 1B68     	 ldr r3,[r3]
 2508 015c DA68     	 ldr r2,[r3,#12]
 2509 015e 8023     	 mov r3,#128
 2510 0160 9B05     	 lsl r3,r3,#22
 2511 0162 1340     	 and r3,r2
 2512 0164 5B0F     	 lsr r3,r3,#29
 2513 0166 DBB2     	 uxtb r3,r3
 2514 0168 1A1C     	 add r2,r3,#0
 2515 016a 0123     	 mov r3,#1
 2516 016c 1340     	 and r3,r2
 2517 016e DAB2     	 uxtb r2,r3
 2518 0170 7B68     	 ldr r3,[r7,#4]
 2519 0172 0121     	 mov r1,#1
 2520 0174 0A40     	 and r2,r1
 2521 0176 5001     	 lsl r0,r2,#5
 2522 0178 DA7A     	 ldrb r2,[r3,#11]
 2523 017a 2021     	 mov r1,#32
 2524 017c 8A43     	 bic r2,r1
 2525 017e 111C     	 add r1,r2,#0
 2526 0180 021C     	 add r2,r0,#0
 2527 0182 0A43     	 orr r2,r1
 2528 0184 DA72     	 strb r2,[r3,#11]
 2529              	.L116:
 765:../Libraries/XMCLib/src/xmc_can.c ****       }
 766:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC
 2530              	 .loc 2 766 0
 2531 0186 7B68     	 ldr r3,[r7,#4]
 2532 0188 1B68     	 ldr r3,[r3]
 2533 018a 1A68     	 ldr r2,[r3]
 2534 018c F023     	 mov r3,#240
 2535 018e 1B05     	 lsl r3,r3,#20
 2536 0190 1340     	 and r3,r2
 2537 0192 1B0E     	 lsr r3,r3,#24
 2538 0194 DAB2     	 uxtb r2,r3
 2539 0196 7B68     	 ldr r3,[r7,#4]
 2540 0198 1A73     	 strb r2,[r3,#12]
 767:../Libraries/XMCLib/src/xmc_can.c **** 
 768:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2541              	 .loc 2 768 0
 2542 019a 7B68     	 ldr r3,[r7,#4]
 2543 019c 1B68     	 ldr r3,[r3]
 2544 019e 1A69     	 ldr r2,[r3,#16]
 2545 01a0 7B68     	 ldr r3,[r7,#4]
 2546 01a2 1A61     	 str r2,[r3,#16]
 769:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2547              	 .loc 2 769 0
 2548 01a4 7B68     	 ldr r3,[r7,#4]
 2549 01a6 1B68     	 ldr r3,[r3]
 2550 01a8 5A69     	 ldr r2,[r3,#20]
 2551 01aa 7B68     	 ldr r3,[r7,#4]
 2552 01ac 5A61     	 str r2,[r3,#20]
 770:../Libraries/XMCLib/src/xmc_can.c **** 
 771:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2553              	 .loc 2 771 0
 2554 01ae 7B68     	 ldr r3,[r7,#4]
 2555 01b0 1B68     	 ldr r3,[r3]
 2556 01b2 DB69     	 ldr r3,[r3,#28]
 2557 01b4 0422     	 mov r2,#4
 2558 01b6 1340     	 and r3,r2
 2559 01b8 9A08     	 lsr r2,r3,#2
 2560 01ba 1623     	 mov r3,#22
 2561 01bc FB18     	 add r3,r7,r3
 2562 01be 1A70     	 strb r2,[r3]
 772:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2563              	 .loc 2 772 0
 2564 01c0 7B68     	 ldr r3,[r7,#4]
 2565 01c2 1B68     	 ldr r3,[r3]
 2566 01c4 DB69     	 ldr r3,[r3,#28]
 2567 01c6 0822     	 mov r2,#8
 2568 01c8 1340     	 and r3,r2
 2569 01ca DA08     	 lsr r2,r3,#3
 2570 01cc 1523     	 mov r3,#21
 2571 01ce FB18     	 add r3,r7,r3
 2572 01d0 1A70     	 strb r2,[r3]
 773:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 2573              	 .loc 2 773 0
 2574 01d2 1623     	 mov r3,#22
 2575 01d4 FB18     	 add r3,r7,r3
 2576 01d6 1B78     	 ldrb r3,[r3]
 2577 01d8 002B     	 cmp r3,#0
 2578 01da 05D0     	 beq .L117
 2579              	 .loc 2 773 0 is_stmt 0 discriminator 1
 2580 01dc 1523     	 mov r3,#21
 2581 01de FB18     	 add r3,r7,r3
 2582 01e0 1B78     	 ldrb r3,[r3]
 2583 01e2 002B     	 cmp r3,#0
 2584 01e4 00D0     	 beq .LCB2310
 2585 01e6 3AE7     	 b .L112
 2586              	.LCB2310:
 2587              	.L117:
 774:../Libraries/XMCLib/src/xmc_can.c **** 
 775:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 2588              	 .loc 2 775 0 is_stmt 1
 2589 01e8 7B68     	 ldr r3,[r7,#4]
 2590 01ea 0022     	 mov r2,#0
 2591 01ec 1A76     	 strb r2,[r3,#24]
 776:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2592              	 .loc 2 776 0
 2593 01ee 1723     	 mov r3,#23
 2594 01f0 FB18     	 add r3,r7,r3
 2595 01f2 0022     	 mov r2,#0
 2596 01f4 1A70     	 strb r2,[r3]
 2597              	.L111:
 777:../Libraries/XMCLib/src/xmc_can.c ****   }
 778:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2598              	 .loc 2 778 0
 2599 01f6 1723     	 mov r3,#23
 2600 01f8 FB18     	 add r3,r7,r3
 2601 01fa 1B78     	 ldrb r3,[r3]
 779:../Libraries/XMCLib/src/xmc_can.c **** }
 2602              	 .loc 2 779 0
 2603 01fc 181C     	 mov r0,r3
 2604 01fe BD46     	 mov sp,r7
 2605 0200 06B0     	 add sp,sp,#24
 2606              	 
 2607 0202 80BD     	 pop {r7,pc}
 2608              	.L120:
 2609              	 .align 2
 2610              	.L119:
 2611 0204 0000FC1F 	 .word 536608768
 2612              	 .cfi_endproc
 2613              	.LFE138:
 2615              	 .section .text.XMC_CAN_NODE_EnableEvent,"ax",%progbits
 2616              	 .align 2
 2617              	 .global XMC_CAN_NODE_EnableEvent
 2618              	 .code 16
 2619              	 .thumb_func
 2621              	XMC_CAN_NODE_EnableEvent:
 2622              	.LFB139:
 780:../Libraries/XMCLib/src/xmc_can.c **** 
 781:../Libraries/XMCLib/src/xmc_can.c **** /* Function to enable node event */
 782:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 783:../Libraries/XMCLib/src/xmc_can.c **** {
 2623              	 .loc 2 783 0
 2624              	 .cfi_startproc
 2625 0000 80B5     	 push {r7,lr}
 2626              	.LCFI75:
 2627              	 .cfi_def_cfa_offset 8
 2628              	 .cfi_offset 7,-8
 2629              	 .cfi_offset 14,-4
 2630 0002 82B0     	 sub sp,sp,#8
 2631              	.LCFI76:
 2632              	 .cfi_def_cfa_offset 16
 2633 0004 00AF     	 add r7,sp,#0
 2634              	.LCFI77:
 2635              	 .cfi_def_cfa_register 7
 2636 0006 7860     	 str r0,[r7,#4]
 2637 0008 3960     	 str r1,[r7]
 784:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 2638              	 .loc 2 784 0
 2639 000a 3A68     	 ldr r2,[r7]
 2640 000c 8023     	 mov r3,#128
 2641 000e DB03     	 lsl r3,r3,#15
 2642 0010 9A42     	 cmp r2,r3
 2643 0012 06D0     	 beq .L122
 785:../Libraries/XMCLib/src/xmc_can.c ****   {
 786:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR |= (uint32_t)event;
 2644              	 .loc 2 786 0
 2645 0014 7B68     	 ldr r3,[r7,#4]
 2646 0016 1A68     	 ldr r2,[r3]
 2647 0018 3B68     	 ldr r3,[r7]
 2648 001a 1A43     	 orr r2,r3
 2649 001c 7B68     	 ldr r3,[r7,#4]
 2650 001e 1A60     	 str r2,[r3]
 2651 0020 05E0     	 b .L121
 2652              	.L122:
 787:../Libraries/XMCLib/src/xmc_can.c ****   }
 788:../Libraries/XMCLib/src/xmc_can.c ****   else
 789:../Libraries/XMCLib/src/xmc_can.c ****   {
 790:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR |= (uint32_t)event;
 2653              	 .loc 2 790 0
 2654 0022 7B68     	 ldr r3,[r7,#4]
 2655 0024 9A69     	 ldr r2,[r3,#24]
 2656 0026 3B68     	 ldr r3,[r7]
 2657 0028 1A43     	 orr r2,r3
 2658 002a 7B68     	 ldr r3,[r7,#4]
 2659 002c 9A61     	 str r2,[r3,#24]
 2660              	.L121:
 791:../Libraries/XMCLib/src/xmc_can.c ****   }
 792:../Libraries/XMCLib/src/xmc_can.c **** }
 2661              	 .loc 2 792 0
 2662 002e BD46     	 mov sp,r7
 2663 0030 02B0     	 add sp,sp,#8
 2664              	 
 2665 0032 80BD     	 pop {r7,pc}
 2666              	 .cfi_endproc
 2667              	.LFE139:
 2669              	 .section .text.XMC_CAN_NODE_DisableEvent,"ax",%progbits
 2670              	 .align 2
 2671              	 .global XMC_CAN_NODE_DisableEvent
 2672              	 .code 16
 2673              	 .thumb_func
 2675              	XMC_CAN_NODE_DisableEvent:
 2676              	.LFB140:
 793:../Libraries/XMCLib/src/xmc_can.c **** 
 794:../Libraries/XMCLib/src/xmc_can.c **** /* Function to disable node event */
 795:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 796:../Libraries/XMCLib/src/xmc_can.c **** {
 2677              	 .loc 2 796 0
 2678              	 .cfi_startproc
 2679 0000 80B5     	 push {r7,lr}
 2680              	.LCFI78:
 2681              	 .cfi_def_cfa_offset 8
 2682              	 .cfi_offset 7,-8
 2683              	 .cfi_offset 14,-4
 2684 0002 82B0     	 sub sp,sp,#8
 2685              	.LCFI79:
 2686              	 .cfi_def_cfa_offset 16
 2687 0004 00AF     	 add r7,sp,#0
 2688              	.LCFI80:
 2689              	 .cfi_def_cfa_register 7
 2690 0006 7860     	 str r0,[r7,#4]
 2691 0008 3960     	 str r1,[r7]
 797:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 2692              	 .loc 2 797 0
 2693 000a 3A68     	 ldr r2,[r7]
 2694 000c 8023     	 mov r3,#128
 2695 000e DB03     	 lsl r3,r3,#15
 2696 0010 9A42     	 cmp r2,r3
 2697 0012 07D0     	 beq .L125
 798:../Libraries/XMCLib/src/xmc_can.c ****   {
 799:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR &= ~(uint32_t)event;
 2698              	 .loc 2 799 0
 2699 0014 7B68     	 ldr r3,[r7,#4]
 2700 0016 1B68     	 ldr r3,[r3]
 2701 0018 3A68     	 ldr r2,[r7]
 2702 001a D243     	 mvn r2,r2
 2703 001c 1A40     	 and r2,r3
 2704 001e 7B68     	 ldr r3,[r7,#4]
 2705 0020 1A60     	 str r2,[r3]
 2706 0022 06E0     	 b .L124
 2707              	.L125:
 800:../Libraries/XMCLib/src/xmc_can.c ****   }
 801:../Libraries/XMCLib/src/xmc_can.c ****   else
 802:../Libraries/XMCLib/src/xmc_can.c ****   {
 803:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR &= ~(uint32_t)event;
 2708              	 .loc 2 803 0
 2709 0024 7B68     	 ldr r3,[r7,#4]
 2710 0026 9B69     	 ldr r3,[r3,#24]
 2711 0028 3A68     	 ldr r2,[r7]
 2712 002a D243     	 mvn r2,r2
 2713 002c 1A40     	 and r2,r3
 2714 002e 7B68     	 ldr r3,[r7,#4]
 2715 0030 9A61     	 str r2,[r3,#24]
 2716              	.L124:
 804:../Libraries/XMCLib/src/xmc_can.c ****   }
 805:../Libraries/XMCLib/src/xmc_can.c **** }
 2717              	 .loc 2 805 0
 2718 0032 BD46     	 mov sp,r7
 2719 0034 02B0     	 add sp,sp,#8
 2720              	 
 2721 0036 80BD     	 pop {r7,pc}
 2722              	 .cfi_endproc
 2723              	.LFE140:
 2725              	 .section .text.XMC_CAN_TXFIFO_Transmit,"ax",%progbits
 2726              	 .align 2
 2727              	 .global XMC_CAN_TXFIFO_Transmit
 2728              	 .code 16
 2729              	 .thumb_func
 2731              	XMC_CAN_TXFIFO_Transmit:
 2732              	.LFB141:
 806:../Libraries/XMCLib/src/xmc_can.c **** /* Function to transmit MO from the FIFO */
 807:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_TXFIFO_Transmit(const XMC_CAN_MO_t *const can_mo)
 808:../Libraries/XMCLib/src/xmc_can.c **** {
 2733              	 .loc 2 808 0
 2734              	 .cfi_startproc
 2735 0000 80B5     	 push {r7,lr}
 2736              	.LCFI81:
 2737              	 .cfi_def_cfa_offset 8
 2738              	 .cfi_offset 7,-8
 2739              	 .cfi_offset 14,-4
 2740 0002 88B0     	 sub sp,sp,#32
 2741              	.LCFI82:
 2742              	 .cfi_def_cfa_offset 40
 2743 0004 00AF     	 add r7,sp,#0
 2744              	.LCFI83:
 2745              	 .cfi_def_cfa_register 7
 2746 0006 7860     	 str r0,[r7,#4]
 809:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2747              	 .loc 2 809 0
 2748 0008 1F23     	 mov r3,#31
 2749 000a FB18     	 add r3,r7,r3
 2750 000c 0122     	 mov r2,#1
 2751 000e 1A70     	 strb r2,[r3]
 810:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = ((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2752              	 .loc 2 810 0
 2753 0010 7B68     	 ldr r3,[r7,#4]
 2754 0012 1B68     	 ldr r3,[r3]
 2755 0014 DB69     	 ldr r3,[r3,#28]
 2756 0016 2022     	 mov r2,#32
 2757 0018 1340     	 and r3,r2
 2758 001a 5B09     	 lsr r3,r3,#5
 2759 001c BB61     	 str r3,[r7,#24]
 811:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_M
 2760              	 .loc 2 811 0
 2761 001e 7B68     	 ldr r3,[r7,#4]
 2762 0020 1B68     	 ldr r3,[r3]
 2763 0022 DA69     	 ldr r2,[r3,#28]
 2764 0024 8023     	 mov r3,#128
 2765 0026 5B00     	 lsl r3,r3,#1
 2766 0028 1340     	 and r3,r2
 2767 002a 1B0A     	 lsr r3,r3,#8
 2768 002c 7B61     	 str r3,[r7,#20]
 812:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_cur =  (uint32_t)(can_mo->can_mo_ptr-> MOFGPR & CAN_MO_MOFGPR_CUR_Msk) >> CAN_MO_MOFG
 2769              	 .loc 2 812 0
 2770 002e 7B68     	 ldr r3,[r7,#4]
 2771 0030 1B68     	 ldr r3,[r3]
 2772 0032 5A68     	 ldr r2,[r3,#4]
 2773 0034 FF23     	 mov r3,#255
 2774 0036 1B04     	 lsl r3,r3,#16
 2775 0038 1340     	 and r3,r2
 2776 003a 1B0C     	 lsr r3,r3,#16
 2777 003c 3B61     	 str r3,[r7,#16]
 813:../Libraries/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 2778              	 .loc 2 813 0
 2779 003e 3B69     	 ldr r3,[r7,#16]
 2780 0040 114A     	 ldr r2,.L132
 2781 0042 9446     	 mov ip,r2
 2782 0044 6344     	 add r3,r3,ip
 2783 0046 5B01     	 lsl r3,r3,#5
 2784 0048 FB60     	 str r3,[r7,#12]
 814:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 815:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2785              	 .loc 2 815 0
 2786 004a BB69     	 ldr r3,[r7,#24]
 2787 004c 002B     	 cmp r3,#0
 2788 004e 04D1     	 bne .L128
 816:../Libraries/XMCLib/src/xmc_can.c ****   {
 817:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2789              	 .loc 2 817 0
 2790 0050 1F23     	 mov r3,#31
 2791 0052 FB18     	 add r3,r7,r3
 2792 0054 0422     	 mov r2,#4
 2793 0056 1A70     	 strb r2,[r3]
 2794 0058 0FE0     	 b .L129
 2795              	.L128:
 818:../Libraries/XMCLib/src/xmc_can.c ****   }
 819:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 820:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2796              	 .loc 2 820 0
 2797 005a 7B69     	 ldr r3,[r7,#20]
 2798 005c 012B     	 cmp r3,#1
 2799 005e 04D1     	 bne .L130
 821:../Libraries/XMCLib/src/xmc_can.c ****   {
 822:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2800              	 .loc 2 822 0
 2801 0060 1F23     	 mov r3,#31
 2802 0062 FB18     	 add r3,r7,r3
 2803 0064 0222     	 mov r2,#2
 2804 0066 1A70     	 strb r2,[r3]
 2805 0068 07E0     	 b .L129
 2806              	.L130:
 823:../Libraries/XMCLib/src/xmc_can.c ****   }
 824:../Libraries/XMCLib/src/xmc_can.c ****   else
 825:../Libraries/XMCLib/src/xmc_can.c ****   {
 826:../Libraries/XMCLib/src/xmc_can.c ****     mo->MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 2807              	 .loc 2 826 0
 2808 006a FB68     	 ldr r3,[r7,#12]
 2809 006c E022     	 mov r2,#224
 2810 006e D204     	 lsl r2,r2,#19
 2811 0070 DA61     	 str r2,[r3,#28]
 827:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2812              	 .loc 2 827 0
 2813 0072 1F23     	 mov r3,#31
 2814 0074 FB18     	 add r3,r7,r3
 2815 0076 0022     	 mov r2,#0
 2816 0078 1A70     	 strb r2,[r3]
 2817              	.L129:
 828:../Libraries/XMCLib/src/xmc_can.c ****   }
 829:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2818              	 .loc 2 829 0
 2819 007a 1F23     	 mov r3,#31
 2820 007c FB18     	 add r3,r7,r3
 2821 007e 1B78     	 ldrb r3,[r3]
 830:../Libraries/XMCLib/src/xmc_can.c **** }
 2822              	 .loc 2 830 0
 2823 0080 181C     	 mov r0,r3
 2824 0082 BD46     	 mov sp,r7
 2825 0084 08B0     	 add sp,sp,#32
 2826              	 
 2827 0086 80BD     	 pop {r7,pc}
 2828              	.L133:
 2829              	 .align 2
 2830              	.L132:
 2831 0088 80208002 	 .word 41951360
 2832              	 .cfi_endproc
 2833              	.LFE141:
 2835              	 .section .text.XMC_CAN_TXFIFO_ConfigMOBaseObject,"ax",%progbits
 2836              	 .align 2
 2837              	 .global XMC_CAN_TXFIFO_ConfigMOBaseObject
 2838              	 .code 16
 2839              	 .thumb_func
 2841              	XMC_CAN_TXFIFO_ConfigMOBaseObject:
 2842              	.LFB142:
 831:../Libraries/XMCLib/src/xmc_can.c **** 
 832:../Libraries/XMCLib/src/xmc_can.c **** /* Function to initialize the transmit FIFO MO base object */
 833:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 834:../Libraries/XMCLib/src/xmc_can.c **** {
 2843              	 .loc 2 834 0
 2844              	 .cfi_startproc
 2845 0000 80B5     	 push {r7,lr}
 2846              	.LCFI84:
 2847              	 .cfi_def_cfa_offset 8
 2848              	 .cfi_offset 7,-8
 2849              	 .cfi_offset 14,-4
 2850 0002 82B0     	 sub sp,sp,#8
 2851              	.LCFI85:
 2852              	 .cfi_def_cfa_offset 16
 2853 0004 00AF     	 add r7,sp,#0
 2854              	.LCFI86:
 2855              	 .cfi_def_cfa_register 7
 2856 0006 7860     	 str r0,[r7,#4]
 2857 0008 3B1C     	 mov r3,r7
 2858 000a 1960     	 str r1,[r3]
 835:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2859              	 .loc 2 835 0
 2860 000c 7B68     	 ldr r3,[r7,#4]
 2861 000e 1B68     	 ldr r3,[r3]
 2862 0010 7A68     	 ldr r2,[r7,#4]
 2863 0012 1268     	 ldr r2,[r2]
 2864 0014 1268     	 ldr r2,[r2]
 2865 0016 0F21     	 mov r1,#15
 2866 0018 8A43     	 bic r2,r1
 2867 001a 0221     	 mov r1,#2
 2868 001c 0A43     	 orr r2,r1
 2869 001e 1A60     	 str r2,[r3]
 836:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 837:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 2870              	 .loc 2 837 0
 2871 0020 7B68     	 ldr r3,[r7,#4]
 2872 0022 1B68     	 ldr r3,[r3]
 2873 0024 7A68     	 ldr r2,[r7,#4]
 2874 0026 1268     	 ldr r2,[r2]
 2875 0028 5268     	 ldr r2,[r2,#4]
 2876 002a 120E     	 lsr r2,r2,#24
 2877 002c 1206     	 lsl r2,r2,#24
 838:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 839:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 840:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2878              	 .loc 2 840 0
 2879 002e 391C     	 mov r1,r7
 2880 0030 0978     	 ldrb r1,[r1]
 839:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2881              	 .loc 2 839 0
 2882 0032 1143     	 orr r1,r2
 841:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2883              	 .loc 2 841 0
 2884 0034 3A1C     	 mov r2,r7
 2885 0036 9278     	 ldrb r2,[r2,#2]
 2886 0038 1004     	 lsl r0,r2,#16
 2887 003a FF22     	 mov r2,#255
 2888 003c 1204     	 lsl r2,r2,#16
 2889 003e 0240     	 and r2,r0
 840:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2890              	 .loc 2 840 0
 2891 0040 1143     	 orr r1,r2
 842:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 2892              	 .loc 2 842 0
 2893 0042 3A1C     	 mov r2,r7
 2894 0044 5278     	 ldrb r2,[r2,#1]
 2895 0046 1202     	 lsl r2,r2,#8
 2896 0048 1204     	 lsl r2,r2,#16
 2897 004a 120C     	 lsr r2,r2,#16
 841:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2898              	 .loc 2 841 0
 2899 004c 0A43     	 orr r2,r1
 837:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 2900              	 .loc 2 837 0
 2901 004e 5A60     	 str r2,[r3,#4]
 843:../Libraries/XMCLib/src/xmc_can.c **** }
 2902              	 .loc 2 843 0
 2903 0050 BD46     	 mov sp,r7
 2904 0052 02B0     	 add sp,sp,#8
 2905              	 
 2906 0054 80BD     	 pop {r7,pc}
 2907              	 .cfi_endproc
 2908              	.LFE142:
 2910 0056 C046     	 .section .text.XMC_CAN_RXFIFO_ConfigMOBaseObject,"ax",%progbits
 2911              	 .align 2
 2912              	 .global XMC_CAN_RXFIFO_ConfigMOBaseObject
 2913              	 .code 16
 2914              	 .thumb_func
 2916              	XMC_CAN_RXFIFO_ConfigMOBaseObject:
 2917              	.LFB143:
 844:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the receive FIFO MO base object */
 845:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_RXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 846:../Libraries/XMCLib/src/xmc_can.c **** {
 2918              	 .loc 2 846 0
 2919              	 .cfi_startproc
 2920 0000 80B5     	 push {r7,lr}
 2921              	.LCFI87:
 2922              	 .cfi_def_cfa_offset 8
 2923              	 .cfi_offset 7,-8
 2924              	 .cfi_offset 14,-4
 2925 0002 82B0     	 sub sp,sp,#8
 2926              	.LCFI88:
 2927              	 .cfi_def_cfa_offset 16
 2928 0004 00AF     	 add r7,sp,#0
 2929              	.LCFI89:
 2930              	 .cfi_def_cfa_register 7
 2931 0006 7860     	 str r0,[r7,#4]
 2932 0008 3B1C     	 mov r3,r7
 2933 000a 1960     	 str r1,[r3]
 847:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2934              	 .loc 2 847 0
 2935 000c 7B68     	 ldr r3,[r7,#4]
 2936 000e 1B68     	 ldr r3,[r3]
 2937 0010 7A68     	 ldr r2,[r7,#4]
 2938 0012 1268     	 ldr r2,[r2]
 2939 0014 1268     	 ldr r2,[r2]
 2940 0016 0F21     	 mov r1,#15
 2941 0018 8A43     	 bic r2,r1
 2942 001a 0121     	 mov r1,#1
 2943 001c 0A43     	 orr r2,r1
 2944 001e 1A60     	 str r2,[r3]
 848:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 849:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk 
 2945              	 .loc 2 849 0
 2946 0020 7B68     	 ldr r3,[r7,#4]
 2947 0022 1B68     	 ldr r3,[r3]
 2948 0024 7A68     	 ldr r2,[r7,#4]
 2949 0026 1268     	 ldr r2,[r2]
 2950 0028 5268     	 ldr r2,[r2,#4]
 2951 002a 120E     	 lsr r2,r2,#24
 2952 002c 1206     	 lsl r2,r2,#24
 850:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 851:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 852:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2953              	 .loc 2 852 0
 2954 002e 391C     	 mov r1,r7
 2955 0030 0978     	 ldrb r1,[r1]
 851:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2956              	 .loc 2 851 0
 2957 0032 1143     	 orr r1,r2
 853:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2958              	 .loc 2 853 0
 2959 0034 3A1C     	 mov r2,r7
 2960 0036 9278     	 ldrb r2,[r2,#2]
 2961 0038 1004     	 lsl r0,r2,#16
 2962 003a FF22     	 mov r2,#255
 2963 003c 1204     	 lsl r2,r2,#16
 2964 003e 0240     	 and r2,r0
 852:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2965              	 .loc 2 852 0
 2966 0040 1143     	 orr r1,r2
 854:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 2967              	 .loc 2 854 0
 2968 0042 3A1C     	 mov r2,r7
 2969 0044 5278     	 ldrb r2,[r2,#1]
 2970 0046 1202     	 lsl r2,r2,#8
 2971 0048 1204     	 lsl r2,r2,#16
 2972 004a 120C     	 lsr r2,r2,#16
 853:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2973              	 .loc 2 853 0
 2974 004c 0A43     	 orr r2,r1
 849:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 2975              	 .loc 2 849 0
 2976 004e 5A60     	 str r2,[r3,#4]
 855:../Libraries/XMCLib/src/xmc_can.c **** }
 2977              	 .loc 2 855 0
 2978 0050 BD46     	 mov sp,r7
 2979 0052 02B0     	 add sp,sp,#8
 2980              	 
 2981 0054 80BD     	 pop {r7,pc}
 2982              	 .cfi_endproc
 2983              	.LFE143:
 2985 0056 C046     	 .section .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject,"ax",%progbits
 2986              	 .align 2
 2987              	 .global XMC_CAN_TXFIFO_ConfigMOSlaveObject
 2988              	 .code 16
 2989              	 .thumb_func
 2991              	XMC_CAN_TXFIFO_ConfigMOSlaveObject:
 2992              	.LFB144:
 856:../Libraries/XMCLib/src/xmc_can.c **** 
 857:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the FIFO MO slave object */
 858:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOSlaveObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_
 859:../Libraries/XMCLib/src/xmc_can.c **** {
 2993              	 .loc 2 859 0
 2994              	 .cfi_startproc
 2995 0000 80B5     	 push {r7,lr}
 2996              	.LCFI90:
 2997              	 .cfi_def_cfa_offset 8
 2998              	 .cfi_offset 7,-8
 2999              	 .cfi_offset 14,-4
 3000 0002 82B0     	 sub sp,sp,#8
 3001              	.LCFI91:
 3002              	 .cfi_def_cfa_offset 16
 3003 0004 00AF     	 add r7,sp,#0
 3004              	.LCFI92:
 3005              	 .cfi_def_cfa_register 7
 3006 0006 7860     	 str r0,[r7,#4]
 3007 0008 3B1C     	 mov r3,r7
 3008 000a 1960     	 str r1,[r3]
 860:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 3009              	 .loc 2 860 0
 3010 000c 7B68     	 ldr r3,[r7,#4]
 3011 000e 1B68     	 ldr r3,[r3]
 3012 0010 7A68     	 ldr r2,[r7,#4]
 3013 0012 1268     	 ldr r2,[r2]
 3014 0014 1268     	 ldr r2,[r2]
 3015 0016 0F21     	 mov r1,#15
 3016 0018 8A43     	 bic r2,r1
 3017 001a 0321     	 mov r1,#3
 3018 001c 0A43     	 orr r2,r1
 3019 001e 1A60     	 str r2,[r3]
 861:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 862:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_CUR_Msk))
 3020              	 .loc 2 862 0
 3021 0020 7B68     	 ldr r3,[r7,#4]
 3022 0022 1B68     	 ldr r3,[r3]
 3023 0024 7A68     	 ldr r2,[r7,#4]
 3024 0026 1268     	 ldr r2,[r2]
 3025 0028 5268     	 ldr r2,[r2,#4]
 3026 002a 0849     	 ldr r1,.L137
 3027 002c 1140     	 and r1,r2
 863:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3028              	 .loc 2 863 0
 3029 002e 3A1C     	 mov r2,r7
 3030 0030 9278     	 ldrb r2,[r2,#2]
 3031 0032 1004     	 lsl r0,r2,#16
 3032 0034 FF22     	 mov r2,#255
 3033 0036 1204     	 lsl r2,r2,#16
 3034 0038 0240     	 and r2,r0
 862:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3035              	 .loc 2 862 0
 3036 003a 0A43     	 orr r2,r1
 3037 003c 5A60     	 str r2,[r3,#4]
 864:../Libraries/XMCLib/src/xmc_can.c **** 
 865:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOCTR  = CAN_MO_MOCTR_SETTXEN0_Msk|
 3038              	 .loc 2 865 0
 3039 003e 7B68     	 ldr r3,[r7,#4]
 3040 0040 1B68     	 ldr r3,[r3]
 3041 0042 034A     	 ldr r2,.L137+4
 3042 0044 DA61     	 str r2,[r3,#28]
 866:../Libraries/XMCLib/src/xmc_can.c ****                                CAN_MO_MOCTR_RESTXEN1_Msk;
 867:../Libraries/XMCLib/src/xmc_can.c **** }
 3043              	 .loc 2 867 0
 3044 0046 BD46     	 mov sp,r7
 3045 0048 02B0     	 add sp,sp,#8
 3046              	 
 3047 004a 80BD     	 pop {r7,pc}
 3048              	.L138:
 3049              	 .align 2
 3050              	.L137:
 3051 004c FFFF00FF 	 .word -16711681
 3052 0050 00040002 	 .word 33555456
 3053              	 .cfi_endproc
 3054              	.LFE144:
 3056              	 .section .text.XMC_CAN_GATEWAY_InitSourceObject,"ax",%progbits
 3057              	 .align 2
 3058              	 .global XMC_CAN_GATEWAY_InitSourceObject
 3059              	 .code 16
 3060              	 .thumb_func
 3062              	XMC_CAN_GATEWAY_InitSourceObject:
 3063              	.LFB145:
 868:../Libraries/XMCLib/src/xmc_can.c **** 
 869:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the Gateway Source Object */
 870:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG
 871:../Libraries/XMCLib/src/xmc_can.c **** {
 3064              	 .loc 2 871 0
 3065              	 .cfi_startproc
 3066 0000 80B5     	 push {r7,lr}
 3067              	.LCFI93:
 3068              	 .cfi_def_cfa_offset 8
 3069              	 .cfi_offset 7,-8
 3070              	 .cfi_offset 14,-4
 3071 0002 84B0     	 sub sp,sp,#16
 3072              	.LCFI94:
 3073              	 .cfi_def_cfa_offset 24
 3074 0004 00AF     	 add r7,sp,#0
 3075              	.LCFI95:
 3076              	 .cfi_def_cfa_register 7
 3077 0006 F860     	 str r0,[r7,#12]
 3078 0008 3B1D     	 add r3,r7,#4
 3079 000a 1960     	 str r1,[r3]
 3080 000c 5A60     	 str r2,[r3,#4]
 872:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 3081              	 .loc 2 872 0
 3082 000e FB68     	 ldr r3,[r7,#12]
 3083 0010 1B68     	 ldr r3,[r3]
 873:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3084              	 .loc 2 873 0
 3085 0012 3A1D     	 add r2,r7,#4
 3086 0014 D278     	 ldrb r2,[r2,#3]
 3087 0016 1102     	 lsl r1,r2,#8
 3088 0018 8022     	 mov r2,#128
 3089 001a 5200     	 lsl r2,r2,#1
 3090 001c 1140     	 and r1,r2
 874:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 3091              	 .loc 2 874 0
 3092 001e 3A1D     	 add r2,r7,#4
 3093 0020 5279     	 ldrb r2,[r2,#5]
 3094 0022 9002     	 lsl r0,r2,#10
 3095 0024 8022     	 mov r2,#128
 3096 0026 D200     	 lsl r2,r2,#3
 3097 0028 0240     	 and r2,r0
 873:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3098              	 .loc 2 873 0
 3099 002a 1143     	 orr r1,r2
 875:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 3100              	 .loc 2 875 0
 3101 002c 3A1D     	 add r2,r7,#4
 3102 002e 1279     	 ldrb r2,[r2,#4]
 3103 0030 5002     	 lsl r0,r2,#9
 3104 0032 8022     	 mov r2,#128
 3105 0034 9200     	 lsl r2,r2,#2
 3106 0036 0240     	 and r2,r0
 874:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 3107              	 .loc 2 874 0
 3108 0038 1143     	 orr r1,r2
 876:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos)
 3109              	 .loc 2 876 0
 3110 003a 3A1D     	 add r2,r7,#4
 3111 003c 9279     	 ldrb r2,[r2,#6]
 3112 003e D002     	 lsl r0,r2,#11
 3113 0040 8022     	 mov r2,#128
 3114 0042 1201     	 lsl r2,r2,#4
 3115 0044 0240     	 and r2,r0
 875:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 3116              	 .loc 2 875 0
 3117 0046 0A43     	 orr r2,r1
 3118 0048 0421     	 mov r1,#4
 3119 004a 0A43     	 orr r2,r1
 872:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3120              	 .loc 2 872 0
 3121 004c 1A60     	 str r2,[r3]
 877:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3122              	 .loc 2 877 0
 3123 004e FB68     	 ldr r3,[r7,#12]
 3124 0050 1B68     	 ldr r3,[r3]
 3125 0052 3A1D     	 add r2,r7,#4
 3126 0054 1278     	 ldrb r2,[r2]
 3127 0056 101C     	 mov r0,r2
 878:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR_Pos) & (ui
 3128              	 .loc 2 878 0
 3129 0058 3A1D     	 add r2,r7,#4
 3130 005a 9278     	 ldrb r2,[r2,#2]
 3131 005c 1104     	 lsl r1,r2,#16
 3132 005e FF22     	 mov r2,#255
 3133 0060 1204     	 lsl r2,r2,#16
 3134 0062 0A40     	 and r2,r1
 877:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3135              	 .loc 2 877 0
 3136 0064 011C     	 mov r1,r0
 3137 0066 1143     	 orr r1,r2
 879:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_Pos) & (uin
 3138              	 .loc 2 879 0
 3139 0068 3A1D     	 add r2,r7,#4
 3140 006a 5278     	 ldrb r2,[r2,#1]
 3141 006c 1202     	 lsl r2,r2,#8
 3142 006e 1204     	 lsl r2,r2,#16
 3143 0070 120C     	 lsr r2,r2,#16
 877:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3144              	 .loc 2 877 0
 3145 0072 0A43     	 orr r2,r1
 3146 0074 5A60     	 str r2,[r3,#4]
 880:../Libraries/XMCLib/src/xmc_can.c **** }
 3147              	 .loc 2 880 0
 3148 0076 BD46     	 mov sp,r7
 3149 0078 04B0     	 add sp,sp,#16
 3150              	 
 3151 007a 80BD     	 pop {r7,pc}
 3152              	 .cfi_endproc
 3153              	.LFE145:
 3155              	 .text
 3156              	.Letext0:
 3157              	 .file 3 "n:\\eecs 473\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3158              	 .file 4 "n:\\eecs 473\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3159              	 .file 5 "N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 3160              	 .file 6 "N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc/xmc1_scu.h"
 3161              	 .file 7 "N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_can.c
    {standard input}:18     .text.XMC_CAN_IsPanelControlReady:00000000 $t
    {standard input}:22     .text.XMC_CAN_IsPanelControlReady:00000000 XMC_CAN_IsPanelControlReady
    {standard input}:60     .text.XMC_CAN_PanelControl:00000000 $t
    {standard input}:64     .text.XMC_CAN_PanelControl:00000000 XMC_CAN_PanelControl
    {standard input}:126    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 $t
    {standard input}:130    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 XMC_CAN_NODE_EnableConfigurationChange
    {standard input}:162    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 $t
    {standard input}:166    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 XMC_CAN_NODE_DisableConfigurationChange
    {standard input}:199    .text.max:00000000 $t
    {standard input}:203    .text.max:00000000 max
    {standard input}:238    .text.min:00000000 $t
    {standard input}:242    .text.min:00000000 min
    {standard input}:278    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 $t
    {standard input}:283    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 XMC_CAN_NODE_NominalBitTimeConfigureEx
    {standard input}:512    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000150 $d
    {standard input}:517    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 $t
    {standard input}:522    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 XMC_CAN_NODE_NominalBitTimeConfigure
    {standard input}:833    .text.XMC_CAN_NODE_NominalBitTimeConfigure:000001cc $d
    {standard input}:839    .text.XMC_CAN_AllocateMOtoNodeList:00000000 $t
    {standard input}:844    .text.XMC_CAN_AllocateMOtoNodeList:00000000 XMC_CAN_AllocateMOtoNodeList
    {standard input}:905    .text.XMC_CAN_Disable:00000000 $t
    {standard input}:910    .text.XMC_CAN_Disable:00000000 XMC_CAN_Disable
    {standard input}:944    .text.XMC_CAN_Enable:00000000 $t
    {standard input}:949    .text.XMC_CAN_Enable:00000000 XMC_CAN_Enable
    {standard input}:996    .text.XMC_CAN_Init:00000000 $t
    {standard input}:1001   .text.XMC_CAN_Init:00000000 XMC_CAN_Init
    {standard input}:1184   .text.XMC_CAN_SetBaudrateClockSource:00000000 XMC_CAN_SetBaudrateClockSource
    {standard input}:1273   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 XMC_CAN_GetBaudrateClockFrequency
    {standard input}:1173   .text.XMC_CAN_Init:00000118 $d
    {standard input}:1179   .text.XMC_CAN_SetBaudrateClockSource:00000000 $t
    {standard input}:1228   .text.XMC_CAN_GetBaudrateClockSource:00000000 $t
    {standard input}:1233   .text.XMC_CAN_GetBaudrateClockSource:00000000 XMC_CAN_GetBaudrateClockSource
    {standard input}:1268   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 $t
    {standard input}:1332   .text.XMC_CAN_InitEx:00000000 $t
    {standard input}:1337   .text.XMC_CAN_InitEx:00000000 XMC_CAN_InitEx
    {standard input}:1433   .text.XMC_CAN_InitEx:0000009c $d
    {standard input}:1439   .text.XMC_CAN_MO_SetIdentifier:00000000 $t
    {standard input}:1444   .text.XMC_CAN_MO_SetIdentifier:00000000 XMC_CAN_MO_SetIdentifier
    {standard input}:1524   .text.XMC_CAN_MO_GetIdentifier:00000000 $t
    {standard input}:1529   .text.XMC_CAN_MO_GetIdentifier:00000000 XMC_CAN_MO_GetIdentifier
    {standard input}:1583   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 $t
    {standard input}:1588   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 XMC_CAN_MO_GetAcceptanceMask
    {standard input}:1650   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 $t
    {standard input}:1655   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 XMC_CAN_MO_SetAcceptanceMask
    {standard input}:1741   .text.XMC_CAN_MO_Config:00000000 $t
    {standard input}:1746   .text.XMC_CAN_MO_Config:00000000 XMC_CAN_MO_Config
    {standard input}:1963   .text.XMC_CAN_MO_UpdateData:00000000 XMC_CAN_MO_UpdateData
    {standard input}:1950   .text.XMC_CAN_MO_Config:00000130 $d
    {standard input}:1958   .text.XMC_CAN_MO_UpdateData:00000000 $t
    {standard input}:2055   .text.XMC_CAN_MO_UpdateData:0000007c $d
    {standard input}:2061   .text.XMC_CAN_MO_Transmit:00000000 $t
    {standard input}:2066   .text.XMC_CAN_MO_Transmit:00000000 XMC_CAN_MO_Transmit
    {standard input}:2152   .text.XMC_CAN_MO_ReceiveData:00000000 $t
    {standard input}:2157   .text.XMC_CAN_MO_ReceiveData:00000000 XMC_CAN_MO_ReceiveData
    {standard input}:2292   .text.XMC_CAN_MO_Receive:00000000 $t
    {standard input}:2297   .text.XMC_CAN_MO_Receive:00000000 XMC_CAN_MO_Receive
    {standard input}:2611   .text.XMC_CAN_MO_Receive:00000204 $d
    {standard input}:2616   .text.XMC_CAN_NODE_EnableEvent:00000000 $t
    {standard input}:2621   .text.XMC_CAN_NODE_EnableEvent:00000000 XMC_CAN_NODE_EnableEvent
    {standard input}:2670   .text.XMC_CAN_NODE_DisableEvent:00000000 $t
    {standard input}:2675   .text.XMC_CAN_NODE_DisableEvent:00000000 XMC_CAN_NODE_DisableEvent
    {standard input}:2726   .text.XMC_CAN_TXFIFO_Transmit:00000000 $t
    {standard input}:2731   .text.XMC_CAN_TXFIFO_Transmit:00000000 XMC_CAN_TXFIFO_Transmit
    {standard input}:2831   .text.XMC_CAN_TXFIFO_Transmit:00000088 $d
    {standard input}:2836   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2841   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_TXFIFO_ConfigMOBaseObject
    {standard input}:2911   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2916   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_RXFIFO_ConfigMOBaseObject
    {standard input}:2986   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 $t
    {standard input}:2991   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 XMC_CAN_TXFIFO_ConfigMOSlaveObject
    {standard input}:3051   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:0000004c $d
    {standard input}:3057   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 $t
    {standard input}:3062   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 XMC_CAN_GATEWAY_InitSourceObject
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidivmod
__aeabi_uidiv
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_CLOCK_GetPeripheralClockFrequency
OSCHP_GetFrequency
