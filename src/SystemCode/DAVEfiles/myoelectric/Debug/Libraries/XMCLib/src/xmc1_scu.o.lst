   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc1_scu.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .bss.event_handler_list,"aw",%nobits
  18              	 .align 2
  21              	event_handler_list:
  22 0000 00000000 	 .space 256
  22      00000000 
  22      00000000 
  22      00000000 
  22      00000000 
  23              	 .section .data.event_masks,"aw",%progbits
  24              	 .align 3
  27              	event_masks:
  28 0000 00001F00 	 .word 2031616
  29 0004 0E000000 	 .word 14
  30 0008 8F0060FF 	 .word -10485617
  31 000c 10000000 	 .word 16
  32 0010 70FF0000 	 .word 65392
  33 0014 01000000 	 .word 1
  34              	 .section .text.XMC_SCU_CalcTSEVAR,"ax",%progbits
  35              	 .align 2
  36              	 .code 16
  37              	 .thumb_func
  39              	XMC_SCU_CalcTSEVAR:
  40              	.LFB65:
  41              	 .file 1 "../Libraries/XMCLib/src/xmc1_scu.c"
   1:../Libraries/XMCLib/src/xmc1_scu.c **** /**
   2:../Libraries/XMCLib/src/xmc1_scu.c ****  * @file xmc1_scu.c
   3:../Libraries/XMCLib/src/xmc1_scu.c ****  * @date 2018-06-21
   4:../Libraries/XMCLib/src/xmc1_scu.c ****  *
   5:../Libraries/XMCLib/src/xmc1_scu.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc1_scu.c ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc1_scu.c ****  *
   9:../Libraries/XMCLib/src/xmc1_scu.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc1_scu.c ****  * All rights reserved.
  11:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  12:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc1_scu.c ****  * following conditions are met:
  14:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  15:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc1_scu.c ****  * disclaimer.
  17:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  18:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc1_scu.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  20:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  21:../Libraries/XMCLib/src/xmc1_scu.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc1_scu.c ****  * products derived from this software without specific prior written permission.
  23:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  24:../Libraries/XMCLib/src/xmc1_scu.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc1_scu.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc1_scu.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc1_scu.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc1_scu.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc1_scu.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc1_scu.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  32:../Libraries/XMCLib/src/xmc1_scu.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc1_scu.c ****  * Infineon Technologies AG dave@infineon.com).
  34:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  36:../Libraries/XMCLib/src/xmc1_scu.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc1_scu.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  39:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  42:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_StartTempMeasurement API is modified
  44:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_ASSERT statements are added in XMC_SCU_INTERRUPT_SetEventHandler
  45:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  46:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_EnableEvent,XMC_SCU_INTERRUPT_DisableEvent,
  48:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_TriggerEvent,XMC_SCU_INTERUPT_GetEventStatus,
  49:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_ClearEventStatus APIs are added
  50:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  51:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-09-23:
  52:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC1400 support added
  53:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  54:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-11-30:
  55:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Documentation improved
  56:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  57:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2016-02-29:
  58:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fixed XMC_SCU_CLOCK_ScaleMCLKFrequency
  59:../Libraries/XMCLib/src/xmc1_scu.c ****  *       It solves issues with down clock frequency scaling
  60:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  61:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2016-04-15:
  62:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fixed XMC_SCU_CLOCK_Init for XMC1400
  63:../Libraries/XMCLib/src/xmc1_scu.c ****  *       It solves issues when trying to disable the OSCHP and use the XTAL pins as GPIO
  64:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  65:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-02-09
  66:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - At XMC_SCU_CLOCK_Init() fixed issue while reading oscillator watchdog status
  67:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  68:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-04-11:
  69:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Added XMC_SCU_SetBMI()
  70:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  71:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-06-24
  72:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Changed XMC_SCU_SetBMI() for XMC11/XMC12/XMC13 to set to 1 the bit 11 of BMI
  73:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  74:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2017-10-25
  75:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Move the following functions to xmc1_scu.h as STATCI_INLINE and make them available for XM
  76:../Libraries/XMCLib/src/xmc1_scu.c ****  *            XMC_SCU_CLOCK_EnableDCO1OscillatorWatchdog(), 
  77:../Libraries/XMCLib/src/xmc1_scu.c ****  *            XMC_SCU_CLOCK_DisableDCO1OscillatorWatchdog(), 
  78:../Libraries/XMCLib/src/xmc1_scu.c ****  *            XMC_SCU_CLOCK_ClearDCO1OscillatorWatchdogStatus(), 
  79:../Libraries/XMCLib/src/xmc1_scu.c ****  *            XMC_SCU_CLOCK_IsDCO1ClockFrequencyUsable()
  80:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Changed XMC_SCU_SetBMI() for XMC11/XMC12/XMC13 to set to 1 the bits [7:6] of BMI
  81:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  82:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2018-06-21:
  83:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Changed XMC_SCU_CLOCK_Init() for XMC1400 adding a delay between disable/enable oscillator 
  84:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Changed XMC_SCU_CLOCK_Init() for XMC1400 adding a wait time of 5s after enabling the RTC_X
  85:../Libraries/XMCLib/src/xmc1_scu.c ****  * @endcond
  86:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  87:../Libraries/XMCLib/src/xmc1_scu.c ****  */
  88:../Libraries/XMCLib/src/xmc1_scu.c **** 
  89:../Libraries/XMCLib/src/xmc1_scu.c **** /**
  90:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  91:../Libraries/XMCLib/src/xmc1_scu.c ****  * @brief SCU low level driver API prototype definition for XMC1 family of microcontrollers <br>
  92:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  93:../Libraries/XMCLib/src/xmc1_scu.c ****  * <b>Detailed description of file</b> <br>
  94:../Libraries/XMCLib/src/xmc1_scu.c ****  * APIs provided in this file cover the following functional blocks of SCU: <br>
  95:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- GCU (APIs prefixed with XMC_SCU_GEN_) <br>
  96:../Libraries/XMCLib/src/xmc1_scu.c ****  * ----Temperature Monitoring, Voltage Monitoring, CCU Start etc
  97:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  98:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- CCU (APIs prefixed with XMC_SCU_CLOCK_)<br>
  99:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Clock initialization, Clock Gating, Sleep Management etc
 100:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 101:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- RCU (APIs prefixed with XMC_SCU_RESET_) <br>
 102:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Reset Init, Cause, Manual Reset Assert/Deassert etc
 103:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 104:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- INTERRUPT (APIs prefixed with XMC_SCU_INTERRUPT_)<br>
 105:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Initialization, Manual Assert/Deassert, Acknowledge etc
 106:../Libraries/XMCLib/src/xmc1_scu.c ****  *
 107:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 108:../Libraries/XMCLib/src/xmc1_scu.c **** 
 109:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 110:../Libraries/XMCLib/src/xmc1_scu.c ****  * HEADER FILES
 111:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 112:../Libraries/XMCLib/src/xmc1_scu.c **** #include <xmc_scu.h>
 113:../Libraries/XMCLib/src/xmc1_scu.c **** 
 114:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_FAMILY == XMC1
 115:../Libraries/XMCLib/src/xmc1_scu.c **** 
 116:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 117:../Libraries/XMCLib/src/xmc1_scu.c ****  * MACROS
 118:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 119:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_IRQ_NUM             (3U)  /**< array index value for list of events that can generate S
 120:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GCU_PASSWD_PROT_ENABLE  (195UL) /**< Password for enabling protection */
 121:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GCU_PASSWD_PROT_DISABLE (192UL) /**< Password for disabling protection */
 122:../Libraries/XMCLib/src/xmc1_scu.c **** 
 123:../Libraries/XMCLib/src/xmc1_scu.c **** 
 124:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_CHECK_RTCCLKSRC(source)       ( (source == XMC_SCU_CLOCK_RTCCLKSRC_DCO2) || \
 125:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ERU_IOUT0) || \
 126:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP0_OUT) || \
 127:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP1_OUT) || \
 128:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP2_OUT) ) /**
 129:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 whe
 130:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 clo
 131:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 or 
 132:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GENERAL_INTCR_INTSEL_Msk SCU_GENERAL_INTCR0_INTSEL0_Msk /**< Mask value of Interrupt So
 133:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          for Node 0 */
 134:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GENERAL_INTCR_INTSEL_Size SCU_GENERAL_INTCR0_INTSEL1_Pos /**< Bit position value of Int
 135:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          for Node 1 */
 136:../Libraries/XMCLib/src/xmc1_scu.c **** 
 137:../Libraries/XMCLib/src/xmc1_scu.c **** #define ANA_TSE_T1   (0x10000F30U) /**< d is a constant data can be retrieved from Flash sector 0 t
 138:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 139:../Libraries/XMCLib/src/xmc1_scu.c **** #define ANA_TSE_T2   (0x10000F31U) /**< e is a constant data can be retrieved from Flash sector 0 t
 140:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 141:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO_ADJLO_T1 (0x10000F32U) /**< b is a constant data can be retrieved from Flash sector 0 t
 142:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 143:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO_ADJLO_T2 (0x10000F33U) /**< a is a constant data can be retrieved from Flash sector 0 t
 144:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 145:../Libraries/XMCLib/src/xmc1_scu.c **** 
 146:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 147:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX (64U) /**< Maximum supported SCU events for XMC14 device. */
 148:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 149:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX (32U)  /**< Maximum supported SCU events for XMC11/12/13 device
 150:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 151:../Libraries/XMCLib/src/xmc1_scu.c **** 
 152:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 153:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO1_DIV2_FREQUENCY_KHZ_Q22_10 (48000U << 10) /**< used to configures main clock (MCLK) fre
 154:../Libraries/XMCLib/src/xmc1_scu.c ****                                                          frequency value during runtime for XMC14 d
 155:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 156:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO1_DIV2_FREQUENCY_KHZ_Q24_8 (32000U << 8) /**< used to configures main clock (MCLK) frequ
 157:../Libraries/XMCLib/src/xmc1_scu.c ****                                                          frequency value during runtime for XMC11/1
 158:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 159:../Libraries/XMCLib/src/xmc1_scu.c **** 
 160:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_BmiInstallationReq \
 161:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(uint32_t requestedBmiValue))0x00000108U)) /**< Pointer to Request BMI ins
 162:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          available inside ROM. */
 163:../Libraries/XMCLib/src/xmc1_scu.c **** 
 164:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_CalcTemperature \
 165:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(void))0x0000010cU)) /**<  Pointer to Calculate chip temperature routine i
 166:../Libraries/XMCLib/src/xmc1_scu.c ****                                                     available inside ROM. */
 167:../Libraries/XMCLib/src/xmc1_scu.c **** 
 168:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_CalcTSEVAR \
 169:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(uint32_t temperature))0x00000120U)) /**<  Pointer to Calculate target lev
 170:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                     comparison routine is available
 171:../Libraries/XMCLib/src/xmc1_scu.c ****         
 172:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 173:../Libraries/XMCLib/src/xmc1_scu.c ****  * LOCAL DATA
 174:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 175:../Libraries/XMCLib/src/xmc1_scu.c **** static XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler_list[XMC_SCU_INTERRUPT_EVENT_MAX]; /**< For 
 176:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                         functions o
 177:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                         occurrence.
 178:../Libraries/XMCLib/src/xmc1_scu.c **** 
 179:../Libraries/XMCLib/src/xmc1_scu.c **** static XMC_SCU_INTERRUPT_EVENT_t event_masks[SCU_IRQ_NUM] =
 180:../Libraries/XMCLib/src/xmc1_scu.c **** {
 181:../Libraries/XMCLib/src/xmc1_scu.c ****   (XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR |
 182:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED |
 183:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PESRAM |
 184:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEUSIC0 |
 185:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(USIC1)
 186:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEUSIC1 |
 187:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 188:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(CAN)
 189:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEMCAN |
 190:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 191:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 192:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK |
 193:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 194:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_LOCI),
 195:../Libraries/XMCLib/src/xmc1_scu.c **** 
 196:../Libraries/XMCLib/src/xmc1_scu.c ****   (XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL |
 197:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 198:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC |
 199:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 200:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VDDPI |
 201:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VDROP |
 202:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VCLIP |
 203:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_DONE |
 204:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_HIGH |
 205:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_LOW |
 206:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_WDT_WARN |
 207:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC |
 208:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTC_ALARM |
 209:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED |
 210:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED |
 211:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED |
 212:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED |
 213:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED),
 214:../Libraries/XMCLib/src/xmc1_scu.c **** 
 215:../Libraries/XMCLib/src/xmc1_scu.c ****   (
 216:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES != XMC11
 217:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC0 |
 218:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC1 |
 219:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC2 |
 220:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC3 |
 221:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC4 |
 222:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC5 |
 223:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC6 |
 224:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC7 |
 225:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 226:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(COMPARATOR)
 227:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP0 |
 228:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP1 |
 229:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP2 |
 230:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 231:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP3 |
 232:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 233:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 234:../Libraries/XMCLib/src/xmc1_scu.c ****    0)
 235:../Libraries/XMCLib/src/xmc1_scu.c **** }; /**<   Defines list of events that can generate SCU interrupt and also indicates SCU events mapp
 236:../Libraries/XMCLib/src/xmc1_scu.c ****          service request number. These event mask values can be used to verify which event is trigg
 237:../Libraries/XMCLib/src/xmc1_scu.c ****          to service request number during runtime. All the event items are tabulated as per service
 238:../Libraries/XMCLib/src/xmc1_scu.c ****          table of SCU. */
 239:../Libraries/XMCLib/src/xmc1_scu.c **** 
 240:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 241:../Libraries/XMCLib/src/xmc1_scu.c ****  * LOCAL ROUTINES
 242:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 243:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency up scaling */
 244:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t idiv);
 245:../Libraries/XMCLib/src/xmc1_scu.c **** 
 246:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency down scaling */
 247:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t idiv);
 248:../Libraries/XMCLib/src/xmc1_scu.c **** 
 249:../Libraries/XMCLib/src/xmc1_scu.c **** /* Calculates the value which must be installed in ANATSEIx register to get indication in
 250:../Libraries/XMCLib/src/xmc1_scu.c ****    SCU_INTERRUPT->SRRAW  bit when the chip temperature is above/below some target/threshold. */
 251:../Libraries/XMCLib/src/xmc1_scu.c **** static uint32_t XMC_SCU_CalcTSEVAR(uint32_t temperature)
 252:../Libraries/XMCLib/src/xmc1_scu.c **** {
  42              	 .loc 1 252 0
  43              	 .cfi_startproc
  44 0000 80B5     	 push {r7,lr}
  45              	.LCFI0:
  46              	 .cfi_def_cfa_offset 8
  47              	 .cfi_offset 7,-8
  48              	 .cfi_offset 14,-4
  49 0002 84B0     	 sub sp,sp,#16
  50              	.LCFI1:
  51              	 .cfi_def_cfa_offset 24
  52 0004 00AF     	 add r7,sp,#0
  53              	.LCFI2:
  54              	 .cfi_def_cfa_register 7
  55 0006 7860     	 str r0,[r7,#4]
 253:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t limit;
 254:../Libraries/XMCLib/src/xmc1_scu.c **** 
 255:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CalcTSEVAR: temperature out of range", (temperature >= 233U) && (temperature 
 256:../Libraries/XMCLib/src/xmc1_scu.c **** 
 257:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = ROM_CalcTSEVAR(temperature);
  56              	 .loc 1 257 0
  57 0008 9023     	 mov r3,#144
  58 000a 5B00     	 lsl r3,r3,#1
  59 000c 1B68     	 ldr r3,[r3]
  60 000e 7A68     	 ldr r2,[r7,#4]
  61 0010 101C     	 mov r0,r2
  62 0012 9847     	 blx r3
  63 0014 031C     	 mov r3,r0
  64 0016 FB60     	 str r3,[r7,#12]
 258:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit == 0U)
  65              	 .loc 1 258 0
  66 0018 FB68     	 ldr r3,[r7,#12]
  67 001a 002B     	 cmp r3,#0
  68 001c 14D1     	 bne .L2
 259:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 260:../Libraries/XMCLib/src/xmc1_scu.c ****     limit = ROM_CalcTSEVAR(temperature + 1U);
  69              	 .loc 1 260 0
  70 001e 9023     	 mov r3,#144
  71 0020 5B00     	 lsl r3,r3,#1
  72 0022 1B68     	 ldr r3,[r3]
  73 0024 7A68     	 ldr r2,[r7,#4]
  74 0026 0132     	 add r2,r2,#1
  75 0028 101C     	 mov r0,r2
  76 002a 9847     	 blx r3
  77 002c 031C     	 mov r3,r0
  78 002e FB60     	 str r3,[r7,#12]
 261:../Libraries/XMCLib/src/xmc1_scu.c ****     if (limit == 0U)
  79              	 .loc 1 261 0
  80 0030 FB68     	 ldr r3,[r7,#12]
  81 0032 002B     	 cmp r3,#0
  82 0034 08D1     	 bne .L2
 262:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 263:../Libraries/XMCLib/src/xmc1_scu.c ****       limit = ROM_CalcTSEVAR(temperature - 1U);
  83              	 .loc 1 263 0
  84 0036 9023     	 mov r3,#144
  85 0038 5B00     	 lsl r3,r3,#1
  86 003a 1B68     	 ldr r3,[r3]
  87 003c 7A68     	 ldr r2,[r7,#4]
  88 003e 013A     	 sub r2,r2,#1
  89 0040 101C     	 mov r0,r2
  90 0042 9847     	 blx r3
  91 0044 031C     	 mov r3,r0
  92 0046 FB60     	 str r3,[r7,#12]
  93              	.L2:
 264:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 265:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 266:../Libraries/XMCLib/src/xmc1_scu.c ****   
 267:../Libraries/XMCLib/src/xmc1_scu.c ****   return (limit);
  94              	 .loc 1 267 0
  95 0048 FB68     	 ldr r3,[r7,#12]
 268:../Libraries/XMCLib/src/xmc1_scu.c **** }
  96              	 .loc 1 268 0
  97 004a 181C     	 mov r0,r3
  98 004c BD46     	 mov sp,r7
  99 004e 04B0     	 add sp,sp,#16
 100              	 
 101 0050 80BD     	 pop {r7,pc}
 102              	 .cfi_endproc
 103              	.LFE65:
 105 0052 C046     	 .section .text.XMC_SCU_INTERRUPT_EnableEvent,"ax",%progbits
 106              	 .align 2
 107              	 .global XMC_SCU_INTERRUPT_EnableEvent
 108              	 .code 16
 109              	 .thumb_func
 111              	XMC_SCU_INTERRUPT_EnableEvent:
 112              	.LFB67:
 269:../Libraries/XMCLib/src/xmc1_scu.c **** 
 270:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 271:../Libraries/XMCLib/src/xmc1_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 272:../Libraries/XMCLib/src/xmc1_scu.c **** __STATIC_FORCEINLINE void delay(uint32_t cycles)
 273:../Libraries/XMCLib/src/xmc1_scu.c **** {
 274:../Libraries/XMCLib/src/xmc1_scu.c ****   while(--cycles > 0U)
 275:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 276:../Libraries/XMCLib/src/xmc1_scu.c ****     __NOP();
 277:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 278:../Libraries/XMCLib/src/xmc1_scu.c **** }
 279:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 280:../Libraries/XMCLib/src/xmc1_scu.c **** 
 281:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 282:../Libraries/XMCLib/src/xmc1_scu.c ****  * API IMPLEMENTATION
 283:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 284:../Libraries/XMCLib/src/xmc1_scu.c ****  #ifdef XMC_ASSERT_ENABLE
 285:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to verify SCU event weather it is valid event or not */
 286:../Libraries/XMCLib/src/xmc1_scu.c **** __STATIC_INLINE bool XMC_SCU_INTERRUPT_IsValidEvent(XMC_SCU_INTERRUPT_EVENT_t event)
 287:../Libraries/XMCLib/src/xmc1_scu.c **** {
 288:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((event == XMC_SCU_INTERRUPT_EVENT_WDT_WARN) ||
 289:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC) ||
 290:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTC_ALARM) ||
 291:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VDDPI) ||
 292:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(USIC1)
 293:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEUSIC1) ||
 294:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 295:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(CAN)
 296:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEMCAN) ||
 297:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 298:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 299:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK) ||
 300:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC) ||
 301:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 302:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(COMPARATOR)
 303:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP0) ||
 304:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP1) ||
 305:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP2) ||
 306:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 307:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP3) ||
 308:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 309:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 310:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VDROP) ||
 311:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES != XMC11
 312:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC0) ||
 313:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC1) ||
 314:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC2) ||
 315:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC3) ||
 316:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC4) ||
 317:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC5) ||
 318:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC6) ||
 319:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC7) ||
 320:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 321:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_LOCI) ||
 322:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PESRAM) ||
 323:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEUSIC0) ||
 324:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR) ||
 325:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED) ||
 326:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VCLIP) ||
 327:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL) ||
 328:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED) ||
 329:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED) ||
 330:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED) ||
 331:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED) ||
 332:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED) ||
 333:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_DONE) ||
 334:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_HIGH) ||
 335:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_LOW));
 336:../Libraries/XMCLib/src/xmc1_scu.c **** }
 337:../Libraries/XMCLib/src/xmc1_scu.c ****  #endif
 338:../Libraries/XMCLib/src/xmc1_scu.c **** 
 339:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to enable the SCU event */
 340:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 341:../Libraries/XMCLib/src/xmc1_scu.c **** {
 113              	 .loc 1 341 0
 114              	 .cfi_startproc
 115 0000 B0B5     	 push {r4,r5,r7,lr}
 116              	.LCFI3:
 117              	 .cfi_def_cfa_offset 16
 118              	 .cfi_offset 4,-16
 119              	 .cfi_offset 5,-12
 120              	 .cfi_offset 7,-8
 121              	 .cfi_offset 14,-4
 122 0002 82B0     	 sub sp,sp,#8
 123              	.LCFI4:
 124              	 .cfi_def_cfa_offset 24
 125 0004 00AF     	 add r7,sp,#0
 126              	.LCFI5:
 127              	 .cfi_def_cfa_register 7
 128 0006 3860     	 str r0,[r7]
 129 0008 7960     	 str r1,[r7,#4]
 342:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 130              	 .loc 1 342 0
 131 000a 094B     	 ldr r3,.L5
 132 000c 084A     	 ldr r2,.L5
 133 000e 5168     	 ldr r1,[r2,#4]
 134 0010 3A68     	 ldr r2,[r7]
 135 0012 0A43     	 orr r2,r1
 136 0014 5A60     	 str r2,[r3,#4]
 343:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 344:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK1 |= (uint32_t)(event >> 32U);
 137              	 .loc 1 344 0
 138 0016 064B     	 ldr r3,.L5
 139 0018 054A     	 ldr r2,.L5
 140 001a 526A     	 ldr r2,[r2,#36]
 141 001c 7968     	 ldr r1,[r7,#4]
 142 001e 0C00     	 lsr r4,r1,#0
 143 0020 0021     	 mov r1,#0
 144 0022 0D1C     	 mov r5,r1
 145 0024 211C     	 mov r1,r4
 146 0026 0A43     	 orr r2,r1
 147 0028 5A62     	 str r2,[r3,#36]
 345:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 346:../Libraries/XMCLib/src/xmc1_scu.c **** }
 148              	 .loc 1 346 0
 149 002a BD46     	 mov sp,r7
 150 002c 02B0     	 add sp,sp,#8
 151              	 
 152 002e B0BD     	 pop {r4,r5,r7,pc}
 153              	.L6:
 154              	 .align 2
 155              	.L5:
 156 0030 38000140 	 .word 1073807416
 157              	 .cfi_endproc
 158              	.LFE67:
 160              	 .section .text.XMC_SCU_INTERRUPT_DisableEvent,"ax",%progbits
 161              	 .align 2
 162              	 .global XMC_SCU_INTERRUPT_DisableEvent
 163              	 .code 16
 164              	 .thumb_func
 166              	XMC_SCU_INTERRUPT_DisableEvent:
 167              	.LFB68:
 347:../Libraries/XMCLib/src/xmc1_scu.c **** 
 348:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to disable the SCU event */
 349:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 350:../Libraries/XMCLib/src/xmc1_scu.c **** {
 168              	 .loc 1 350 0
 169              	 .cfi_startproc
 170 0000 B0B5     	 push {r4,r5,r7,lr}
 171              	.LCFI6:
 172              	 .cfi_def_cfa_offset 16
 173              	 .cfi_offset 4,-16
 174              	 .cfi_offset 5,-12
 175              	 .cfi_offset 7,-8
 176              	 .cfi_offset 14,-4
 177 0002 82B0     	 sub sp,sp,#8
 178              	.LCFI7:
 179              	 .cfi_def_cfa_offset 24
 180 0004 00AF     	 add r7,sp,#0
 181              	.LCFI8:
 182              	 .cfi_def_cfa_register 7
 183 0006 3860     	 str r0,[r7]
 184 0008 7960     	 str r1,[r7,#4]
 351:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK &= ~(uint32_t)event;
 185              	 .loc 1 351 0
 186 000a 0A4B     	 ldr r3,.L8
 187 000c 094A     	 ldr r2,.L8
 188 000e 5268     	 ldr r2,[r2,#4]
 189 0010 3968     	 ldr r1,[r7]
 190 0012 C943     	 mvn r1,r1
 191 0014 0A40     	 and r2,r1
 192 0016 5A60     	 str r2,[r3,#4]
 352:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 353:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK1 &= (uint32_t)~(event >> 32U);
 193              	 .loc 1 353 0
 194 0018 064B     	 ldr r3,.L8
 195 001a 064A     	 ldr r2,.L8
 196 001c 526A     	 ldr r2,[r2,#36]
 197 001e 7968     	 ldr r1,[r7,#4]
 198 0020 0C00     	 lsr r4,r1,#0
 199 0022 0021     	 mov r1,#0
 200 0024 0D1C     	 mov r5,r1
 201 0026 211C     	 mov r1,r4
 202 0028 C943     	 mvn r1,r1
 203 002a 0A40     	 and r2,r1
 204 002c 5A62     	 str r2,[r3,#36]
 354:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 355:../Libraries/XMCLib/src/xmc1_scu.c **** }
 205              	 .loc 1 355 0
 206 002e BD46     	 mov sp,r7
 207 0030 02B0     	 add sp,sp,#8
 208              	 
 209 0032 B0BD     	 pop {r4,r5,r7,pc}
 210              	.L9:
 211              	 .align 2
 212              	.L8:
 213 0034 38000140 	 .word 1073807416
 214              	 .cfi_endproc
 215              	.LFE68:
 217              	 .section .text.XMC_SCU_INTERRUPT_TriggerEvent,"ax",%progbits
 218              	 .align 2
 219              	 .global XMC_SCU_INTERRUPT_TriggerEvent
 220              	 .code 16
 221              	 .thumb_func
 223              	XMC_SCU_INTERRUPT_TriggerEvent:
 224              	.LFB69:
 356:../Libraries/XMCLib/src/xmc1_scu.c **** 
 357:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to trigger the SCU event */
 358:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 359:../Libraries/XMCLib/src/xmc1_scu.c **** {
 225              	 .loc 1 359 0
 226              	 .cfi_startproc
 227 0000 B0B5     	 push {r4,r5,r7,lr}
 228              	.LCFI9:
 229              	 .cfi_def_cfa_offset 16
 230              	 .cfi_offset 4,-16
 231              	 .cfi_offset 5,-12
 232              	 .cfi_offset 7,-8
 233              	 .cfi_offset 14,-4
 234 0002 82B0     	 sub sp,sp,#8
 235              	.LCFI10:
 236              	 .cfi_def_cfa_offset 24
 237 0004 00AF     	 add r7,sp,#0
 238              	.LCFI11:
 239              	 .cfi_def_cfa_register 7
 240 0006 3860     	 str r0,[r7]
 241 0008 7960     	 str r1,[r7,#4]
 360:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
 242              	 .loc 1 360 0
 243 000a 094B     	 ldr r3,.L11
 244 000c 084A     	 ldr r2,.L11
 245 000e D168     	 ldr r1,[r2,#12]
 246 0010 3A68     	 ldr r2,[r7]
 247 0012 0A43     	 orr r2,r1
 248 0014 DA60     	 str r2,[r3,#12]
 361:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 362:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET1 |= (uint32_t)(event >> 32U);
 249              	 .loc 1 362 0
 250 0016 064B     	 ldr r3,.L11
 251 0018 054A     	 ldr r2,.L11
 252 001a D26A     	 ldr r2,[r2,#44]
 253 001c 7968     	 ldr r1,[r7,#4]
 254 001e 0C00     	 lsr r4,r1,#0
 255 0020 0021     	 mov r1,#0
 256 0022 0D1C     	 mov r5,r1
 257 0024 211C     	 mov r1,r4
 258 0026 0A43     	 orr r2,r1
 259 0028 DA62     	 str r2,[r3,#44]
 363:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 364:../Libraries/XMCLib/src/xmc1_scu.c **** }
 260              	 .loc 1 364 0
 261 002a BD46     	 mov sp,r7
 262 002c 02B0     	 add sp,sp,#8
 263              	 
 264 002e B0BD     	 pop {r4,r5,r7,pc}
 265              	.L12:
 266              	 .align 2
 267              	.L11:
 268 0030 38000140 	 .word 1073807416
 269              	 .cfi_endproc
 270              	.LFE69:
 272              	 .section .text.XMC_SCU_INTERUPT_GetEventStatus,"ax",%progbits
 273              	 .align 2
 274              	 .global XMC_SCU_INTERUPT_GetEventStatus
 275              	 .code 16
 276              	 .thumb_func
 278              	XMC_SCU_INTERUPT_GetEventStatus:
 279              	.LFB70:
 365:../Libraries/XMCLib/src/xmc1_scu.c **** 
 366:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to get the SCU event status */
 367:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
 368:../Libraries/XMCLib/src/xmc1_scu.c **** {
 280              	 .loc 1 368 0
 281              	 .cfi_startproc
 282 0000 B0B5     	 push {r4,r5,r7,lr}
 283              	.LCFI12:
 284              	 .cfi_def_cfa_offset 16
 285              	 .cfi_offset 4,-16
 286              	 .cfi_offset 5,-12
 287              	 .cfi_offset 7,-8
 288              	 .cfi_offset 14,-4
 289 0002 82B0     	 sub sp,sp,#8
 290              	.LCFI13:
 291              	 .cfi_def_cfa_offset 24
 292 0004 00AF     	 add r7,sp,#0
 293              	.LCFI14:
 294              	 .cfi_def_cfa_register 7
 369:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t tmp;
 370:../Libraries/XMCLib/src/xmc1_scu.c **** 
 371:../Libraries/XMCLib/src/xmc1_scu.c ****   tmp = SCU_INTERRUPT->SRRAW;
 295              	 .loc 1 371 0
 296 0006 0E4B     	 ldr r3,.L15
 297 0008 1B68     	 ldr r3,[r3]
 298 000a 3B60     	 str r3,[r7]
 299 000c 0023     	 mov r3,#0
 300 000e 7B60     	 str r3,[r7,#4]
 372:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 373:../Libraries/XMCLib/src/xmc1_scu.c ****   tmp |= ((int64_t)SCU_INTERRUPT->SRRAW1 << 32U);
 301              	 .loc 1 373 0
 302 0010 0B4B     	 ldr r3,.L15
 303 0012 1B6A     	 ldr r3,[r3,#32]
 304 0014 1C1C     	 mov r4,r3
 305 0016 0023     	 mov r3,#0
 306 0018 1D1C     	 mov r5,r3
 307 001a 2200     	 lsl r2,r4,#0
 308 001c 0023     	 mov r3,#0
 309 001e 191C     	 mov r1,r3
 310 0020 0B1C     	 mov r3,r1
 311 0022 141C     	 mov r4,r2
 312 0024 3A68     	 ldr r2,[r7]
 313 0026 1A43     	 orr r2,r3
 314 0028 3A60     	 str r2,[r7]
 315 002a 7A68     	 ldr r2,[r7,#4]
 316 002c 2243     	 orr r2,r4
 317 002e 131C     	 mov r3,r2
 318 0030 7B60     	 str r3,[r7,#4]
 374:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 375:../Libraries/XMCLib/src/xmc1_scu.c ****   return (tmp);
 319              	 .loc 1 375 0
 320 0032 3B68     	 ldr r3,[r7]
 321 0034 7C68     	 ldr r4,[r7,#4]
 376:../Libraries/XMCLib/src/xmc1_scu.c **** }
 322              	 .loc 1 376 0
 323 0036 181C     	 mov r0,r3
 324 0038 211C     	 mov r1,r4
 325 003a BD46     	 mov sp,r7
 326 003c 02B0     	 add sp,sp,#8
 327              	 
 328 003e B0BD     	 pop {r4,r5,r7,pc}
 329              	.L16:
 330              	 .align 2
 331              	.L15:
 332 0040 38000140 	 .word 1073807416
 333              	 .cfi_endproc
 334              	.LFE70:
 336              	 .section .text.XMC_SCU_INTERRUPT_ClearEventStatus,"ax",%progbits
 337              	 .align 2
 338              	 .global XMC_SCU_INTERRUPT_ClearEventStatus
 339              	 .code 16
 340              	 .thumb_func
 342              	XMC_SCU_INTERRUPT_ClearEventStatus:
 343              	.LFB71:
 377:../Libraries/XMCLib/src/xmc1_scu.c **** 
 378:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to clear the SCU event status */
 379:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
 380:../Libraries/XMCLib/src/xmc1_scu.c **** {
 344              	 .loc 1 380 0
 345              	 .cfi_startproc
 346 0000 B0B5     	 push {r4,r5,r7,lr}
 347              	.LCFI15:
 348              	 .cfi_def_cfa_offset 16
 349              	 .cfi_offset 4,-16
 350              	 .cfi_offset 5,-12
 351              	 .cfi_offset 7,-8
 352              	 .cfi_offset 14,-4
 353 0002 82B0     	 sub sp,sp,#8
 354              	.LCFI16:
 355              	 .cfi_def_cfa_offset 24
 356 0004 00AF     	 add r7,sp,#0
 357              	.LCFI17:
 358              	 .cfi_def_cfa_register 7
 359 0006 3860     	 str r0,[r7]
 360 0008 7960     	 str r1,[r7,#4]
 381:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR |= (uint32_t)event;
 361              	 .loc 1 381 0
 362 000a 094B     	 ldr r3,.L18
 363 000c 084A     	 ldr r2,.L18
 364 000e 9168     	 ldr r1,[r2,#8]
 365 0010 3A68     	 ldr r2,[r7]
 366 0012 0A43     	 orr r2,r1
 367 0014 9A60     	 str r2,[r3,#8]
 382:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 383:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR1 |= (uint32_t)(event >> 32U);
 368              	 .loc 1 383 0
 369 0016 064B     	 ldr r3,.L18
 370 0018 054A     	 ldr r2,.L18
 371 001a 926A     	 ldr r2,[r2,#40]
 372 001c 7968     	 ldr r1,[r7,#4]
 373 001e 0C00     	 lsr r4,r1,#0
 374 0020 0021     	 mov r1,#0
 375 0022 0D1C     	 mov r5,r1
 376 0024 211C     	 mov r1,r4
 377 0026 0A43     	 orr r2,r1
 378 0028 9A62     	 str r2,[r3,#40]
 384:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 385:../Libraries/XMCLib/src/xmc1_scu.c **** }
 379              	 .loc 1 385 0
 380 002a BD46     	 mov sp,r7
 381 002c 02B0     	 add sp,sp,#8
 382              	 
 383 002e B0BD     	 pop {r4,r5,r7,pc}
 384              	.L19:
 385              	 .align 2
 386              	.L18:
 387 0030 38000140 	 .word 1073807416
 388              	 .cfi_endproc
 389              	.LFE71:
 391              	 .section .text.XMC_SCU_LockProtectedBits,"ax",%progbits
 392              	 .align 2
 393              	 .global XMC_SCU_LockProtectedBits
 394              	 .code 16
 395              	 .thumb_func
 397              	XMC_SCU_LockProtectedBits:
 398              	.LFB72:
 386:../Libraries/XMCLib/src/xmc1_scu.c **** 
 387:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to lock protected bitfields from being modified */
 388:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_LockProtectedBits(void)
 389:../Libraries/XMCLib/src/xmc1_scu.c **** {
 399              	 .loc 1 389 0
 400              	 .cfi_startproc
 401 0000 80B5     	 push {r7,lr}
 402              	.LCFI18:
 403              	 .cfi_def_cfa_offset 8
 404              	 .cfi_offset 7,-8
 405              	 .cfi_offset 14,-4
 406 0002 00AF     	 add r7,sp,#0
 407              	.LCFI19:
 408              	 .cfi_def_cfa_register 7
 390:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
 409              	 .loc 1 390 0
 410 0004 024B     	 ldr r3,.L21
 411 0006 C322     	 mov r2,#195
 412 0008 5A62     	 str r2,[r3,#36]
 391:../Libraries/XMCLib/src/xmc1_scu.c **** }
 413              	 .loc 1 391 0
 414 000a BD46     	 mov sp,r7
 415              	 
 416 000c 80BD     	 pop {r7,pc}
 417              	.L22:
 418 000e C046     	 .align 2
 419              	.L21:
 420 0010 00000140 	 .word 1073807360
 421              	 .cfi_endproc
 422              	.LFE72:
 424              	 .section .text.XMC_SCU_UnlockProtectedBits,"ax",%progbits
 425              	 .align 2
 426              	 .global XMC_SCU_UnlockProtectedBits
 427              	 .code 16
 428              	 .thumb_func
 430              	XMC_SCU_UnlockProtectedBits:
 431              	.LFB73:
 392:../Libraries/XMCLib/src/xmc1_scu.c **** 
 393:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to make protected bitfields available for modification */
 394:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_UnlockProtectedBits(void)
 395:../Libraries/XMCLib/src/xmc1_scu.c **** {
 432              	 .loc 1 395 0
 433              	 .cfi_startproc
 434 0000 80B5     	 push {r7,lr}
 435              	.LCFI20:
 436              	 .cfi_def_cfa_offset 8
 437              	 .cfi_offset 7,-8
 438              	 .cfi_offset 14,-4
 439 0002 00AF     	 add r7,sp,#0
 440              	.LCFI21:
 441              	 .cfi_def_cfa_register 7
 396:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
 442              	 .loc 1 396 0
 443 0004 054B     	 ldr r3,.L25
 444 0006 C022     	 mov r2,#192
 445 0008 5A62     	 str r2,[r3,#36]
 397:../Libraries/XMCLib/src/xmc1_scu.c **** 
 398:../Libraries/XMCLib/src/xmc1_scu.c ****   while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
 446              	 .loc 1 398 0
 447 000a C046     	 mov r8,r8
 448              	.L24:
 449              	 .loc 1 398 0 is_stmt 0 discriminator 1
 450 000c 034B     	 ldr r3,.L25
 451 000e 5B6A     	 ldr r3,[r3,#36]
 452 0010 0422     	 mov r2,#4
 453 0012 1340     	 and r3,r2
 454 0014 FAD1     	 bne .L24
 399:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 400:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Loop until the lock is removed */
 401:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 402:../Libraries/XMCLib/src/xmc1_scu.c **** }
 455              	 .loc 1 402 0 is_stmt 1
 456 0016 BD46     	 mov sp,r7
 457              	 
 458 0018 80BD     	 pop {r7,pc}
 459              	.L26:
 460 001a C046     	 .align 2
 461              	.L25:
 462 001c 00000140 	 .word 1073807360
 463              	 .cfi_endproc
 464              	.LFE73:
 466              	 .section .text.XMC_SCU_SupplyMonitorInit,"ax",%progbits
 467              	 .align 2
 468              	 .global XMC_SCU_SupplyMonitorInit
 469              	 .code 16
 470              	 .thumb_func
 472              	XMC_SCU_SupplyMonitorInit:
 473              	.LFB74:
 403:../Libraries/XMCLib/src/xmc1_scu.c **** 
 404:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to initialize power supply monitoring unit */
 405:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SupplyMonitorInit(const XMC_SCU_SUPPLYMONITOR_t *obj)
 406:../Libraries/XMCLib/src/xmc1_scu.c **** {
 474              	 .loc 1 406 0
 475              	 .cfi_startproc
 476 0000 80B5     	 push {r7,lr}
 477              	.LCFI22:
 478              	 .cfi_def_cfa_offset 8
 479              	 .cfi_offset 7,-8
 480              	 .cfi_offset 14,-4
 481 0002 84B0     	 sub sp,sp,#16
 482              	.LCFI23:
 483              	 .cfi_def_cfa_offset 24
 484 0004 00AF     	 add r7,sp,#0
 485              	.LCFI24:
 486              	 .cfi_def_cfa_register 7
 487 0006 7860     	 str r0,[r7,#4]
 407:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t anavdel;
 408:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t irqmask;
 409:../Libraries/XMCLib/src/xmc1_scu.c **** 
 410:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel = 0UL;
 488              	 .loc 1 410 0
 489 0008 0023     	 mov r3,#0
 490 000a FB60     	 str r3,[r7,#12]
 411:../Libraries/XMCLib/src/xmc1_scu.c **** 
 412:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel |= (uint32_t)((obj-> ext_supply_threshold) << SCU_ANALOG_ANAVDEL_VDEL_SELECT_Pos);
 491              	 .loc 1 412 0
 492 000c 7B68     	 ldr r3,[r7,#4]
 493 000e 1B68     	 ldr r3,[r3]
 494 0010 FA68     	 ldr r2,[r7,#12]
 495 0012 1343     	 orr r3,r2
 496 0014 FB60     	 str r3,[r7,#12]
 413:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel |= (uint32_t)((obj->ext_supply_monitor_speed) << SCU_ANALOG_ANAVDEL_VDEL_TIM_ADJ_Pos);
 497              	 .loc 1 413 0
 498 0016 7B68     	 ldr r3,[r7,#4]
 499 0018 5B68     	 ldr r3,[r3,#4]
 500 001a 9B00     	 lsl r3,r3,#2
 501 001c FA68     	 ldr r2,[r7,#12]
 502 001e 1343     	 orr r3,r2
 503 0020 FB60     	 str r3,[r7,#12]
 414:../Libraries/XMCLib/src/xmc1_scu.c **** 
 415:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_at_init))
 504              	 .loc 1 415 0
 505 0022 7B68     	 ldr r3,[r7,#4]
 506 0024 DB7A     	 ldrb r3,[r3,#11]
 507 0026 002B     	 cmp r3,#0
 508 0028 03D0     	 beq .L28
 416:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 417:../Libraries/XMCLib/src/xmc1_scu.c ****     anavdel |= (uint32_t)SCU_ANALOG_ANAVDEL_VDEL_EN_Msk;
 509              	 .loc 1 417 0
 510 002a FB68     	 ldr r3,[r7,#12]
 511 002c 1022     	 mov r2,#16
 512 002e 1343     	 orr r3,r2
 513 0030 FB60     	 str r3,[r7,#12]
 514              	.L28:
 418:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 419:../Libraries/XMCLib/src/xmc1_scu.c ****    SCU_ANALOG->ANAVDEL = (uint16_t) anavdel;
 515              	 .loc 1 419 0
 516 0032 144A     	 ldr r2,.L32
 517 0034 FB68     	 ldr r3,[r7,#12]
 518 0036 99B2     	 uxth r1,r3
 519 0038 5023     	 mov r3,#80
 520 003a D152     	 strh r1,[r2,r3]
 420:../Libraries/XMCLib/src/xmc1_scu.c **** 
 421:../Libraries/XMCLib/src/xmc1_scu.c ****   irqmask = 0UL;
 521              	 .loc 1 421 0
 522 003c 0023     	 mov r3,#0
 523 003e BB60     	 str r3,[r7,#8]
 422:../Libraries/XMCLib/src/xmc1_scu.c **** 
 423:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_prewarning_int))
 524              	 .loc 1 423 0
 525 0040 7B68     	 ldr r3,[r7,#4]
 526 0042 1B7A     	 ldrb r3,[r3,#8]
 527 0044 002B     	 cmp r3,#0
 528 0046 03D0     	 beq .L29
 424:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 425:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VDDPI_Msk;
 529              	 .loc 1 425 0
 530 0048 BB68     	 ldr r3,[r7,#8]
 531 004a 0822     	 mov r2,#8
 532 004c 1343     	 orr r3,r2
 533 004e BB60     	 str r3,[r7,#8]
 534              	.L29:
 426:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 427:../Libraries/XMCLib/src/xmc1_scu.c **** 
 428:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_vdrop_int))
 535              	 .loc 1 428 0
 536 0050 7B68     	 ldr r3,[r7,#4]
 537 0052 5B7A     	 ldrb r3,[r3,#9]
 538 0054 002B     	 cmp r3,#0
 539 0056 03D0     	 beq .L30
 429:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 430:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VDROPI_Msk;
 540              	 .loc 1 430 0
 541 0058 BB68     	 ldr r3,[r7,#8]
 542 005a 8022     	 mov r2,#128
 543 005c 1343     	 orr r3,r2
 544 005e BB60     	 str r3,[r7,#8]
 545              	.L30:
 431:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 432:../Libraries/XMCLib/src/xmc1_scu.c **** 
 433:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_vclip_int))
 546              	 .loc 1 433 0
 547 0060 7B68     	 ldr r3,[r7,#4]
 548 0062 9B7A     	 ldrb r3,[r3,#10]
 549 0064 002B     	 cmp r3,#0
 550 0066 04D0     	 beq .L31
 434:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 435:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VCLIPI_Msk;
 551              	 .loc 1 435 0
 552 0068 BB68     	 ldr r3,[r7,#8]
 553 006a 8022     	 mov r2,#128
 554 006c 9203     	 lsl r2,r2,#14
 555 006e 1343     	 orr r3,r2
 556 0070 BB60     	 str r3,[r7,#8]
 557              	.L31:
 436:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 437:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)irqmask;
 558              	 .loc 1 437 0
 559 0072 054B     	 ldr r3,.L32+4
 560 0074 044A     	 ldr r2,.L32+4
 561 0076 5168     	 ldr r1,[r2,#4]
 562 0078 BA68     	 ldr r2,[r7,#8]
 563 007a 0A43     	 orr r2,r1
 564 007c 5A60     	 str r2,[r3,#4]
 438:../Libraries/XMCLib/src/xmc1_scu.c **** }
 565              	 .loc 1 438 0
 566 007e BD46     	 mov sp,r7
 567 0080 04B0     	 add sp,sp,#16
 568              	 
 569 0082 80BD     	 pop {r7,pc}
 570              	.L33:
 571              	 .align 2
 572              	.L32:
 573 0084 00100140 	 .word 1073811456
 574 0088 38000140 	 .word 1073807416
 575              	 .cfi_endproc
 576              	.LFE74:
 578              	 .section .text.XMC_SCU_SetTempLowLimit,"ax",%progbits
 579              	 .align 2
 580              	 .global XMC_SCU_SetTempLowLimit
 581              	 .code 16
 582              	 .thumb_func
 584              	XMC_SCU_SetTempLowLimit:
 585              	.LFB75:
 439:../Libraries/XMCLib/src/xmc1_scu.c **** 
 440:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program lower temperature limit */
 441:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_SetTempLowLimit(uint32_t limit)
 442:../Libraries/XMCLib/src/xmc1_scu.c **** {
 586              	 .loc 1 442 0
 587              	 .cfi_startproc
 588 0000 80B5     	 push {r7,lr}
 589              	.LCFI25:
 590              	 .cfi_def_cfa_offset 8
 591              	 .cfi_offset 7,-8
 592              	 .cfi_offset 14,-4
 593 0002 84B0     	 sub sp,sp,#16
 594              	.LCFI26:
 595              	 .cfi_def_cfa_offset 24
 596 0004 00AF     	 add r7,sp,#0
 597              	.LCFI27:
 598              	 .cfi_def_cfa_register 7
 599 0006 7860     	 str r0,[r7,#4]
 443:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 600              	 .loc 1 443 0
 601 0008 0F23     	 mov r3,#15
 602 000a FB18     	 add r3,r7,r3
 603 000c 0022     	 mov r2,#0
 604 000e 1A70     	 strb r2,[r3]
 444:../Libraries/XMCLib/src/xmc1_scu.c **** 
 445:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = XMC_SCU_CalcTSEVAR(limit);
 605              	 .loc 1 445 0
 606 0010 7B68     	 ldr r3,[r7,#4]
 607 0012 181C     	 mov r0,r3
 608 0014 FFF7FEFF 	 bl XMC_SCU_CalcTSEVAR
 609 0018 031C     	 mov r3,r0
 610 001a 7B60     	 str r3,[r7,#4]
 446:../Libraries/XMCLib/src/xmc1_scu.c **** 
 447:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit != 0) 
 611              	 .loc 1 447 0
 612 001c 7B68     	 ldr r3,[r7,#4]
 613 001e 002B     	 cmp r3,#0
 614 0020 04D0     	 beq .L35
 448:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 449:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANATSEIL = (uint16_t)limit;
 615              	 .loc 1 449 0
 616 0022 084B     	 ldr r3,.L38
 617 0024 7A68     	 ldr r2,[r7,#4]
 618 0026 92B2     	 uxth r2,r2
 619 0028 9A86     	 strh r2,[r3,#52]
 620 002a 03E0     	 b .L36
 621              	.L35:
 450:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 451:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 452:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 453:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 622              	 .loc 1 453 0
 623 002c 0F23     	 mov r3,#15
 624 002e FB18     	 add r3,r7,r3
 625 0030 0122     	 mov r2,#1
 626 0032 1A70     	 strb r2,[r3]
 627              	.L36:
 454:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 455:../Libraries/XMCLib/src/xmc1_scu.c **** 
 456:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 628              	 .loc 1 456 0
 629 0034 0F23     	 mov r3,#15
 630 0036 FB18     	 add r3,r7,r3
 631 0038 1B78     	 ldrb r3,[r3]
 457:../Libraries/XMCLib/src/xmc1_scu.c **** }
 632              	 .loc 1 457 0
 633 003a 181C     	 mov r0,r3
 634 003c BD46     	 mov sp,r7
 635 003e 04B0     	 add sp,sp,#16
 636              	 
 637 0040 80BD     	 pop {r7,pc}
 638              	.L39:
 639 0042 C046     	 .align 2
 640              	.L38:
 641 0044 00100140 	 .word 1073811456
 642              	 .cfi_endproc
 643              	.LFE75:
 645              	 .section .text.XMC_SCU_SetTempHighLimit,"ax",%progbits
 646              	 .align 2
 647              	 .global XMC_SCU_SetTempHighLimit
 648              	 .code 16
 649              	 .thumb_func
 651              	XMC_SCU_SetTempHighLimit:
 652              	.LFB76:
 458:../Libraries/XMCLib/src/xmc1_scu.c ****   
 459:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program higher temperature limit */
 460:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_SetTempHighLimit(uint32_t limit)
 461:../Libraries/XMCLib/src/xmc1_scu.c **** {
 653              	 .loc 1 461 0
 654              	 .cfi_startproc
 655 0000 80B5     	 push {r7,lr}
 656              	.LCFI28:
 657              	 .cfi_def_cfa_offset 8
 658              	 .cfi_offset 7,-8
 659              	 .cfi_offset 14,-4
 660 0002 84B0     	 sub sp,sp,#16
 661              	.LCFI29:
 662              	 .cfi_def_cfa_offset 24
 663 0004 00AF     	 add r7,sp,#0
 664              	.LCFI30:
 665              	 .cfi_def_cfa_register 7
 666 0006 7860     	 str r0,[r7,#4]
 462:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 667              	 .loc 1 462 0
 668 0008 0F23     	 mov r3,#15
 669 000a FB18     	 add r3,r7,r3
 670 000c 0022     	 mov r2,#0
 671 000e 1A70     	 strb r2,[r3]
 463:../Libraries/XMCLib/src/xmc1_scu.c **** 
 464:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = XMC_SCU_CalcTSEVAR(limit);
 672              	 .loc 1 464 0
 673 0010 7B68     	 ldr r3,[r7,#4]
 674 0012 181C     	 mov r0,r3
 675 0014 FFF7FEFF 	 bl XMC_SCU_CalcTSEVAR
 676 0018 031C     	 mov r3,r0
 677 001a 7B60     	 str r3,[r7,#4]
 465:../Libraries/XMCLib/src/xmc1_scu.c **** 
 466:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit != 0) 
 678              	 .loc 1 466 0
 679 001c 7B68     	 ldr r3,[r7,#4]
 680 001e 002B     	 cmp r3,#0
 681 0020 04D0     	 beq .L41
 467:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 468:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANATSEIH = (uint16_t)limit;
 682              	 .loc 1 468 0
 683 0022 084B     	 ldr r3,.L44
 684 0024 7A68     	 ldr r2,[r7,#4]
 685 0026 92B2     	 uxth r2,r2
 686 0028 1A86     	 strh r2,[r3,#48]
 687 002a 03E0     	 b .L42
 688              	.L41:
 469:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 470:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 471:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 472:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 689              	 .loc 1 472 0
 690 002c 0F23     	 mov r3,#15
 691 002e FB18     	 add r3,r7,r3
 692 0030 0122     	 mov r2,#1
 693 0032 1A70     	 strb r2,[r3]
 694              	.L42:
 473:../Libraries/XMCLib/src/xmc1_scu.c ****   } 
 474:../Libraries/XMCLib/src/xmc1_scu.c **** 
 475:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 695              	 .loc 1 475 0
 696 0034 0F23     	 mov r3,#15
 697 0036 FB18     	 add r3,r7,r3
 698 0038 1B78     	 ldrb r3,[r3]
 476:../Libraries/XMCLib/src/xmc1_scu.c **** }
 699              	 .loc 1 476 0
 700 003a 181C     	 mov r0,r3
 701 003c BD46     	 mov sp,r7
 702 003e 04B0     	 add sp,sp,#16
 703              	 
 704 0040 80BD     	 pop {r7,pc}
 705              	.L45:
 706 0042 C046     	 .align 2
 707              	.L44:
 708 0044 00100140 	 .word 1073811456
 709              	 .cfi_endproc
 710              	.LFE76:
 712              	 .section .text.XMC_SCU_SetRawTempLimits,"ax",%progbits
 713              	 .align 2
 714              	 .global XMC_SCU_SetRawTempLimits
 715              	 .code 16
 716              	 .thumb_func
 718              	XMC_SCU_SetRawTempLimits:
 719              	.LFB77:
 477:../Libraries/XMCLib/src/xmc1_scu.c **** 
 478:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program temperature limits as raw digital values into temperature sensor */
 479:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp)
 480:../Libraries/XMCLib/src/xmc1_scu.c **** {
 720              	 .loc 1 480 0
 721              	 .cfi_startproc
 722 0000 80B5     	 push {r7,lr}
 723              	.LCFI31:
 724              	 .cfi_def_cfa_offset 8
 725              	 .cfi_offset 7,-8
 726              	 .cfi_offset 14,-4
 727 0002 82B0     	 sub sp,sp,#8
 728              	.LCFI32:
 729              	 .cfi_def_cfa_offset 16
 730 0004 00AF     	 add r7,sp,#0
 731              	.LCFI33:
 732              	 .cfi_def_cfa_register 7
 733 0006 7860     	 str r0,[r7,#4]
 734 0008 3960     	 str r1,[r7]
 481:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIH = (uint16_t)(upper_temp & SCU_ANALOG_ANATSEIH_TSE_IH_Msk);
 735              	 .loc 1 481 0
 736 000a 054B     	 ldr r3,.L47
 737 000c 3A68     	 ldr r2,[r7]
 738 000e 92B2     	 uxth r2,r2
 739 0010 1A86     	 strh r2,[r3,#48]
 482:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIL = (uint16_t)(lower_temp & SCU_ANALOG_ANATSEIL_TSE_IL_Msk);
 740              	 .loc 1 482 0
 741 0012 034B     	 ldr r3,.L47
 742 0014 7A68     	 ldr r2,[r7,#4]
 743 0016 92B2     	 uxth r2,r2
 744 0018 9A86     	 strh r2,[r3,#52]
 483:../Libraries/XMCLib/src/xmc1_scu.c **** }
 745              	 .loc 1 483 0
 746 001a BD46     	 mov sp,r7
 747 001c 02B0     	 add sp,sp,#8
 748              	 
 749 001e 80BD     	 pop {r7,pc}
 750              	.L48:
 751              	 .align 2
 752              	.L47:
 753 0020 00100140 	 .word 1073811456
 754              	 .cfi_endproc
 755              	.LFE77:
 757              	 .section .text.XMC_SCU_StartTempMeasurement,"ax",%progbits
 758              	 .align 2
 759              	 .global XMC_SCU_StartTempMeasurement
 760              	 .code 16
 761              	 .thumb_func
 763              	XMC_SCU_StartTempMeasurement:
 764              	.LFB78:
 484:../Libraries/XMCLib/src/xmc1_scu.c **** 
 485:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to start temperature measurement */
 486:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_StartTempMeasurement(void)
 487:../Libraries/XMCLib/src/xmc1_scu.c **** {
 765              	 .loc 1 487 0
 766              	 .cfi_startproc
 767 0000 80B5     	 push {r7,lr}
 768              	.LCFI34:
 769              	 .cfi_def_cfa_offset 8
 770              	 .cfi_offset 7,-8
 771              	 .cfi_offset 14,-4
 772 0002 00AF     	 add r7,sp,#0
 773              	.LCFI35:
 774              	 .cfi_def_cfa_register 7
 488:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL |= (uint16_t)SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 775              	 .loc 1 488 0
 776 0004 044A     	 ldr r2,.L50
 777 0006 044B     	 ldr r3,.L50
 778 0008 9B8C     	 ldrh r3,[r3,#36]
 779 000a 9BB2     	 uxth r3,r3
 780 000c 0121     	 mov r1,#1
 781 000e 0B43     	 orr r3,r1
 782 0010 9BB2     	 uxth r3,r3
 783 0012 9384     	 strh r3,[r2,#36]
 489:../Libraries/XMCLib/src/xmc1_scu.c **** }
 784              	 .loc 1 489 0
 785 0014 BD46     	 mov sp,r7
 786              	 
 787 0016 80BD     	 pop {r7,pc}
 788              	.L51:
 789              	 .align 2
 790              	.L50:
 791 0018 00100140 	 .word 1073811456
 792              	 .cfi_endproc
 793              	.LFE78:
 795              	 .section .text.XMC_SCU_StopTempMeasurement,"ax",%progbits
 796              	 .align 2
 797              	 .global XMC_SCU_StopTempMeasurement
 798              	 .code 16
 799              	 .thumb_func
 801              	XMC_SCU_StopTempMeasurement:
 802              	.LFB79:
 490:../Libraries/XMCLib/src/xmc1_scu.c **** 
 491:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to stop temperature measurement */
 492:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_StopTempMeasurement(void)
 493:../Libraries/XMCLib/src/xmc1_scu.c **** {
 803              	 .loc 1 493 0
 804              	 .cfi_startproc
 805 0000 80B5     	 push {r7,lr}
 806              	.LCFI36:
 807              	 .cfi_def_cfa_offset 8
 808              	 .cfi_offset 7,-8
 809              	 .cfi_offset 14,-4
 810 0002 00AF     	 add r7,sp,#0
 811              	.LCFI37:
 812              	 .cfi_def_cfa_register 7
 494:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL &= (uint16_t)~SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 813              	 .loc 1 494 0
 814 0004 044A     	 ldr r2,.L53
 815 0006 044B     	 ldr r3,.L53
 816 0008 9B8C     	 ldrh r3,[r3,#36]
 817 000a 9BB2     	 uxth r3,r3
 818 000c 0121     	 mov r1,#1
 819 000e 8B43     	 bic r3,r1
 820 0010 9BB2     	 uxth r3,r3
 821 0012 9384     	 strh r3,[r2,#36]
 495:../Libraries/XMCLib/src/xmc1_scu.c **** }
 822              	 .loc 1 495 0
 823 0014 BD46     	 mov sp,r7
 824              	 
 825 0016 80BD     	 pop {r7,pc}
 826              	.L54:
 827              	 .align 2
 828              	.L53:
 829 0018 00100140 	 .word 1073811456
 830              	 .cfi_endproc
 831              	.LFE79:
 833              	 .section .text.XMC_SCU_HighTemperature,"ax",%progbits
 834              	 .align 2
 835              	 .global XMC_SCU_HighTemperature
 836              	 .code 16
 837              	 .thumb_func
 839              	XMC_SCU_HighTemperature:
 840              	.LFB80:
 496:../Libraries/XMCLib/src/xmc1_scu.c **** 
 497:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to check if the temperature has gone past the ceiling */
 498:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_HighTemperature(void)
 499:../Libraries/XMCLib/src/xmc1_scu.c **** {
 841              	 .loc 1 499 0
 842              	 .cfi_startproc
 843 0000 80B5     	 push {r7,lr}
 844              	.LCFI38:
 845              	 .cfi_def_cfa_offset 8
 846              	 .cfi_offset 7,-8
 847              	 .cfi_offset 14,-4
 848 0002 00AF     	 add r7,sp,#0
 849              	.LCFI39:
 850              	 .cfi_def_cfa_register 7
 500:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_HIGH_Msk) == SCU_INTERRUPT_SRRAW_TSE_HIGH
 851              	 .loc 1 500 0
 852 0004 054B     	 ldr r3,.L57
 853 0006 1A68     	 ldr r2,[r3]
 854 0008 8023     	 mov r3,#128
 855 000a DB05     	 lsl r3,r3,#23
 856 000c 1340     	 and r3,r2
 857 000e 5A1E     	 sub r2,r3,#1
 858 0010 9341     	 sbc r3,r3,r2
 859 0012 DBB2     	 uxtb r3,r3
 501:../Libraries/XMCLib/src/xmc1_scu.c **** }
 860              	 .loc 1 501 0
 861 0014 181C     	 mov r0,r3
 862 0016 BD46     	 mov sp,r7
 863              	 
 864 0018 80BD     	 pop {r7,pc}
 865              	.L58:
 866 001a C046     	 .align 2
 867              	.L57:
 868 001c 38000140 	 .word 1073807416
 869              	 .cfi_endproc
 870              	.LFE80:
 872              	 .section .text.XMC_SCU_LowTemperature,"ax",%progbits
 873              	 .align 2
 874              	 .global XMC_SCU_LowTemperature
 875              	 .code 16
 876              	 .thumb_func
 878              	XMC_SCU_LowTemperature:
 879              	.LFB81:
 502:../Libraries/XMCLib/src/xmc1_scu.c **** 
 503:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to check if the temperature is lower than normal */
 504:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_LowTemperature(void)
 505:../Libraries/XMCLib/src/xmc1_scu.c **** {
 880              	 .loc 1 505 0
 881              	 .cfi_startproc
 882 0000 80B5     	 push {r7,lr}
 883              	.LCFI40:
 884              	 .cfi_def_cfa_offset 8
 885              	 .cfi_offset 7,-8
 886              	 .cfi_offset 14,-4
 887 0002 00AF     	 add r7,sp,#0
 888              	.LCFI41:
 889              	 .cfi_def_cfa_register 7
 506:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_LOW_Msk) == SCU_INTERRUPT_SRRAW_TSE_LOW_M
 890              	 .loc 1 506 0
 891 0004 034B     	 ldr r3,.L61
 892 0006 1B68     	 ldr r3,[r3]
 893 0008 DB0F     	 lsr r3,r3,#31
 894 000a DBB2     	 uxtb r3,r3
 507:../Libraries/XMCLib/src/xmc1_scu.c **** }
 895              	 .loc 1 507 0
 896 000c 181C     	 mov r0,r3
 897 000e BD46     	 mov sp,r7
 898              	 
 899 0010 80BD     	 pop {r7,pc}
 900              	.L62:
 901 0012 C046     	 .align 2
 902              	.L61:
 903 0014 38000140 	 .word 1073807416
 904              	 .cfi_endproc
 905              	.LFE81:
 907              	 .section .text.XMC_SCU_GetTemperature,"ax",%progbits
 908              	 .align 2
 909              	 .global XMC_SCU_GetTemperature
 910              	 .code 16
 911              	 .thumb_func
 913              	XMC_SCU_GetTemperature:
 914              	.LFB82:
 508:../Libraries/XMCLib/src/xmc1_scu.c **** 
 509:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to retrieve the device temperature */
 510:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_GetTemperature(void)
 511:../Libraries/XMCLib/src/xmc1_scu.c **** {
 915              	 .loc 1 511 0
 916              	 .cfi_startproc
 917 0000 80B5     	 push {r7,lr}
 918              	.LCFI42:
 919              	 .cfi_def_cfa_offset 8
 920              	 .cfi_offset 7,-8
 921              	 .cfi_offset 14,-4
 922 0002 82B0     	 sub sp,sp,#8
 923              	.LCFI43:
 924              	 .cfi_def_cfa_offset 16
 925 0004 00AF     	 add r7,sp,#0
 926              	.LCFI44:
 927              	 .cfi_def_cfa_register 7
 512:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t temperature;
 513:../Libraries/XMCLib/src/xmc1_scu.c **** 
 514:../Libraries/XMCLib/src/xmc1_scu.c ****   temperature = (uint32_t)(SCU_ANALOG->ANATSEMON);
 928              	 .loc 1 514 0
 929 0006 054A     	 ldr r2,.L65
 930 0008 4023     	 mov r3,#64
 931 000a D35A     	 ldrh r3,[r2,r3]
 932 000c 9BB2     	 uxth r3,r3
 933 000e 7B60     	 str r3,[r7,#4]
 515:../Libraries/XMCLib/src/xmc1_scu.c **** 
 516:../Libraries/XMCLib/src/xmc1_scu.c ****   return (temperature);
 934              	 .loc 1 516 0
 935 0010 7B68     	 ldr r3,[r7,#4]
 517:../Libraries/XMCLib/src/xmc1_scu.c **** }
 936              	 .loc 1 517 0
 937 0012 181C     	 mov r0,r3
 938 0014 BD46     	 mov sp,r7
 939 0016 02B0     	 add sp,sp,#8
 940              	 
 941 0018 80BD     	 pop {r7,pc}
 942              	.L66:
 943 001a C046     	 .align 2
 944              	.L65:
 945 001c 00100140 	 .word 1073811456
 946              	 .cfi_endproc
 947              	.LFE82:
 949              	 .section .text.XMC_SCU_CalcTemperature,"ax",%progbits
 950              	 .align 2
 951              	 .global XMC_SCU_CalcTemperature
 952              	 .code 16
 953              	 .thumb_func
 955              	XMC_SCU_CalcTemperature:
 956              	.LFB83:
 518:../Libraries/XMCLib/src/xmc1_scu.c **** 
 519:../Libraries/XMCLib/src/xmc1_scu.c **** /* Calculates the die temperature value using ROM function */
 520:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CalcTemperature(void)
 521:../Libraries/XMCLib/src/xmc1_scu.c **** {
 957              	 .loc 1 521 0
 958              	 .cfi_startproc
 959 0000 80B5     	 push {r7,lr}
 960              	.LCFI45:
 961              	 .cfi_def_cfa_offset 8
 962              	 .cfi_offset 7,-8
 963              	 .cfi_offset 14,-4
 964 0002 00AF     	 add r7,sp,#0
 965              	.LCFI46:
 966              	 .cfi_def_cfa_register 7
 522:../Libraries/XMCLib/src/xmc1_scu.c ****   return (ROM_CalcTemperature());
 967              	 .loc 1 522 0
 968 0004 8623     	 mov r3,#134
 969 0006 5B00     	 lsl r3,r3,#1
 970 0008 1B68     	 ldr r3,[r3]
 971 000a 9847     	 blx r3
 972 000c 031C     	 mov r3,r0
 523:../Libraries/XMCLib/src/xmc1_scu.c **** }
 973              	 .loc 1 523 0
 974 000e 181C     	 mov r0,r3
 975 0010 BD46     	 mov sp,r7
 976              	 
 977 0012 80BD     	 pop {r7,pc}
 978              	 .cfi_endproc
 979              	.LFE83:
 981              	 .section .text.XMC_SCU_CLOCK_Init,"ax",%progbits
 982              	 .align 2
 983              	 .global XMC_SCU_CLOCK_Init
 984              	 .code 16
 985              	 .thumb_func
 987              	XMC_SCU_CLOCK_Init:
 988              	.LFB84:
 524:../Libraries/XMCLib/src/xmc1_scu.c **** 
 525:../Libraries/XMCLib/src/xmc1_scu.c **** 
 526:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which initializes the clock tree ofthe device */
 527:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
 528:../Libraries/XMCLib/src/xmc1_scu.c **** {
 989              	 .loc 1 528 0
 990              	 .cfi_startproc
 991 0000 80B5     	 push {r7,lr}
 992              	.LCFI47:
 993              	 .cfi_def_cfa_offset 8
 994              	 .cfi_offset 7,-8
 995              	 .cfi_offset 14,-4
 996 0002 86B0     	 sub sp,sp,#24
 997              	.LCFI48:
 998              	 .cfi_def_cfa_offset 32
 999 0004 00AF     	 add r7,sp,#0
 1000              	.LCFI49:
 1001              	 .cfi_def_cfa_register 7
 1002 0006 7860     	 str r0,[r7,#4]
 529:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Remove protection */
 530:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1003              	 .loc 1 530 0
 1004 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 531:../Libraries/XMCLib/src/xmc1_scu.c **** 
 532:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 533:../Libraries/XMCLib/src/xmc1_scu.c ****   /* OSCHP source selection - OSC mode */
 534:../Libraries/XMCLib/src/xmc1_scu.c **** 
 535:../Libraries/XMCLib/src/xmc1_scu.c ****   if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
 1005              	 .loc 1 535 0
 1006 000c 7B68     	 ldr r3,[r7,#4]
 1007 000e 9B79     	 ldrb r3,[r3,#6]
 1008 0010 302B     	 cmp r3,#48
 1009 0012 4CD0     	 beq .L70
 536:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 537:../Libraries/XMCLib/src/xmc1_scu.c ****     if (OSCHP_GetFrequency() > 20000000U)
 1010              	 .loc 1 537 0
 1011 0014 FFF7FEFF 	 bl OSCHP_GetFrequency
 1012 0018 021E     	 sub r2,r0,#0
 1013 001a 454B     	 ldr r3,.L81
 1014 001c 9A42     	 cmp r2,r3
 1015 001e 09D9     	 bls .L71
 538:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 539:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
 1016              	 .loc 1 539 0
 1017 0020 444A     	 ldr r2,.L81+4
 1018 0022 4449     	 ldr r1,.L81+4
 1019 0024 9023     	 mov r3,#144
 1020 0026 CB5A     	 ldrh r3,[r1,r3]
 1021 0028 9BB2     	 uxth r3,r3
 1022 002a 4021     	 mov r1,#64
 1023 002c 0B43     	 orr r3,r1
 1024 002e 99B2     	 uxth r1,r3
 1025 0030 9023     	 mov r3,#144
 1026 0032 D152     	 strh r1,[r2,r3]
 1027              	.L71:
 540:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 541:../Libraries/XMCLib/src/xmc1_scu.c **** 
 542:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY
 1028              	 .loc 1 542 0
 1029 0034 3F4A     	 ldr r2,.L81+4
 1030 0036 3F49     	 ldr r1,.L81+4
 1031 0038 9023     	 mov r3,#144
 1032 003a CB5A     	 ldrh r3,[r1,r3]
 1033 003c 9BB2     	 uxth r3,r3
 1034 003e 9BB2     	 uxth r3,r3
 1035 0040 191C     	 add r1,r3,#0
 1036 0042 3223     	 mov r3,#50
 1037 0044 9943     	 bic r1,r3
 1038 0046 0B1C     	 mov r3,r1
 1039 0048 99B2     	 uxth r1,r3
 543:../Libraries/XMCLib/src/xmc1_scu.c ****                                config->oschp_mode;
 1040              	 .loc 1 543 0
 1041 004a 7B68     	 ldr r3,[r7,#4]
 1042 004c 9B79     	 ldrb r3,[r3,#6]
 542:../Libraries/XMCLib/src/xmc1_scu.c ****                                config->oschp_mode;
 1043              	 .loc 1 542 0
 1044 004e 9BB2     	 uxth r3,r3
 1045 0050 0B43     	 orr r3,r1
 1046 0052 9BB2     	 uxth r3,r3
 1047 0054 99B2     	 uxth r1,r3
 1048 0056 9023     	 mov r3,#144
 1049 0058 D152     	 strh r1,[r2,r3]
 1050              	.L76:
 544:../Libraries/XMCLib/src/xmc1_scu.c **** 
 545:../Libraries/XMCLib/src/xmc1_scu.c ****     do
 546:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 547:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Restart OSC_HP oscillator watchdog */
 548:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
 1051              	 .loc 1 548 0 discriminator 1
 1052 005a 374B     	 ldr r3,.L81+8
 1053 005c 0222     	 mov r2,#2
 1054 005e 9A62     	 str r2,[r3,#40]
 549:../Libraries/XMCLib/src/xmc1_scu.c **** 
 550:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Enable OSC_HP oscillator watchdog*/
 551:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
 1055              	 .loc 1 551 0 discriminator 1
 1056 0060 364B     	 ldr r3,.L81+12
 1057 0062 364A     	 ldr r2,.L81+12
 1058 0064 5269     	 ldr r2,[r2,#20]
 1059 0066 3649     	 ldr r1,.L81+16
 1060 0068 0A40     	 and r2,r1
 1061 006a 5A61     	 str r2,[r3,#20]
 1062 006c 1423     	 mov r3,#20
 1063 006e 7B61     	 str r3,[r7,#20]
 1064 0070 00E0     	 b .L72
 1065              	.L73:
 1066              	.LBB8:
 1067              	.LBB9:
 276:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1068              	 .loc 1 276 0
 1069              	
 1070 0072 C046     	 nop
 1071              	
 1072              	 .code 16
 1073              	.L72:
 274:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1074              	 .loc 1 274 0
 1075 0074 7B69     	 ldr r3,[r7,#20]
 1076 0076 013B     	 sub r3,r3,#1
 1077 0078 7B61     	 str r3,[r7,#20]
 1078 007a 7B69     	 ldr r3,[r7,#20]
 1079 007c 002B     	 cmp r3,#0
 1080 007e F8D1     	 bne .L73
 1081              	.LBE9:
 1082              	.LBE8:
 552:../Libraries/XMCLib/src/xmc1_scu.c ****       delay(20);
 553:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk;
 1083              	 .loc 1 553 0 discriminator 1
 1084 0080 2E4B     	 ldr r3,.L81+12
 1085 0082 2E4A     	 ldr r2,.L81+12
 1086 0084 5269     	 ldr r2,[r2,#20]
 1087 0086 8021     	 mov r1,#128
 1088 0088 8904     	 lsl r1,r1,#18
 1089 008a 0A43     	 orr r2,r1
 1090 008c 5A61     	 str r2,[r3,#20]
 1091 008e 2D4B     	 ldr r3,.L81+20
 1092 0090 3B61     	 str r3,[r7,#16]
 1093 0092 00E0     	 b .L74
 1094              	.L75:
 1095              	.LBB10:
 1096              	.LBB11:
 276:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1097              	 .loc 1 276 0
 1098              	
 1099 0094 C046     	 nop
 1100              	
 1101              	 .code 16
 1102              	.L74:
 274:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1103              	 .loc 1 274 0
 1104 0096 3B69     	 ldr r3,[r7,#16]
 1105 0098 013B     	 sub r3,r3,#1
 1106 009a 3B61     	 str r3,[r7,#16]
 1107 009c 3B69     	 ldr r3,[r7,#16]
 1108 009e 002B     	 cmp r3,#0
 1109 00a0 F8D1     	 bne .L75
 1110              	.LBE11:
 1111              	.LBE10:
 554:../Libraries/XMCLib/src/xmc1_scu.c **** 
 555:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Wait a few DCO2 cycles for the update of the clock detection result */
 556:../Libraries/XMCLib/src/xmc1_scu.c ****       delay(2500);
 557:../Libraries/XMCLib/src/xmc1_scu.c **** 
 558:../Libraries/XMCLib/src/xmc1_scu.c ****       /* check clock is ok */
 559:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 560:../Libraries/XMCLib/src/xmc1_scu.c ****     while(SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
 1112              	 .loc 1 560 0 discriminator 1
 1113 00a2 254B     	 ldr r3,.L81+8
 1114 00a4 1B6A     	 ldr r3,[r3,#32]
 1115 00a6 0222     	 mov r2,#2
 1116 00a8 1340     	 and r3,r2
 1117 00aa D6D1     	 bne .L76
 1118 00ac 09E0     	 b .L77
 1119              	.L70:
 561:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 562:../Libraries/XMCLib/src/xmc1_scu.c ****   else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
 563:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 564:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
 1120              	 .loc 1 564 0
 1121 00ae 214A     	 ldr r2,.L81+4
 1122 00b0 2049     	 ldr r1,.L81+4
 1123 00b2 9023     	 mov r3,#144
 1124 00b4 CB5A     	 ldrh r3,[r1,r3]
 1125 00b6 9BB2     	 uxth r3,r3
 1126 00b8 3021     	 mov r1,#48
 1127 00ba 0B43     	 orr r3,r1
 1128 00bc 99B2     	 uxth r1,r3
 1129 00be 9023     	 mov r3,#144
 1130 00c0 D152     	 strh r1,[r2,r3]
 1131              	.L77:
 565:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 566:../Libraries/XMCLib/src/xmc1_scu.c **** 
 567:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
 1132              	 .loc 1 567 0
 1133 00c2 1C4A     	 ldr r2,.L81+4
 1134 00c4 7B68     	 ldr r3,[r7,#4]
 1135 00c6 DB79     	 ldrb r3,[r3,#7]
 1136 00c8 99B2     	 uxth r1,r3
 1137 00ca 8C23     	 mov r3,#140
 1138 00cc D152     	 strh r1,[r2,r3]
 568:../Libraries/XMCLib/src/xmc1_scu.c ****   if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
 1139              	 .loc 1 568 0
 1140 00ce 7B68     	 ldr r3,[r7,#4]
 1141 00d0 DB79     	 ldrb r3,[r3,#7]
 1142 00d2 002B     	 cmp r3,#0
 1143 00d4 09D1     	 bne .L78
 1144 00d6 1C4B     	 ldr r3,.L81+24
 1145 00d8 FB60     	 str r3,[r7,#12]
 1146 00da 00E0     	 b .L79
 1147              	.L80:
 1148              	.LBB12:
 1149              	.LBB13:
 276:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1150              	 .loc 1 276 0
 1151              	
 1152 00dc C046     	 nop
 1153              	
 1154              	 .code 16
 1155              	.L79:
 274:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1156              	 .loc 1 274 0
 1157 00de FB68     	 ldr r3,[r7,#12]
 1158 00e0 013B     	 sub r3,r3,#1
 1159 00e2 FB60     	 str r3,[r7,#12]
 1160 00e4 FB68     	 ldr r3,[r7,#12]
 1161 00e6 002B     	 cmp r3,#0
 1162 00e8 F8D1     	 bne .L80
 1163              	.L78:
 1164              	.LBE13:
 1165              	.LBE12:
 569:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 570:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait oscillator startup time ~5s */
 571:../Libraries/XMCLib/src/xmc1_scu.c ****     delay(6500000);
 572:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 573:../Libraries/XMCLib/src/xmc1_scu.c **** 
 574:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
 1166              	 .loc 1 574 0
 1167 00ea 144B     	 ldr r3,.L81+12
 1168 00ec 134A     	 ldr r2,.L81+12
 1169 00ee D269     	 ldr r2,[r2,#28]
 1170 00f0 1649     	 ldr r1,.L81+28
 1171 00f2 0A40     	 and r2,r1
 575:../Libraries/XMCLib/src/xmc1_scu.c ****                     config->dclk_src;
 1172              	 .loc 1 575 0
 1173 00f4 7968     	 ldr r1,[r7,#4]
 1174 00f6 8988     	 ldrh r1,[r1,#4]
 574:../Libraries/XMCLib/src/xmc1_scu.c ****                     config->dclk_src;
 1175              	 .loc 1 574 0
 1176 00f8 0A43     	 orr r2,r1
 1177 00fa DA61     	 str r2,[r3,#28]
 576:../Libraries/XMCLib/src/xmc1_scu.c **** 
 577:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 578:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Update PCLK selection mux. */
 579:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSE
 1178              	 .loc 1 579 0
 1179 00fc 0F4A     	 ldr r2,.L81+12
 1180 00fe 0F4B     	 ldr r3,.L81+12
 1181 0100 1B68     	 ldr r3,[r3]
 1182 0102 1349     	 ldr r1,.L81+32
 1183 0104 1940     	 and r1,r3
 580:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1184              	 .loc 1 580 0
 1185 0106 7B68     	 ldr r3,[r7,#4]
 1186 0108 DB68     	 ldr r3,[r3,#12]
 579:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1187              	 .loc 1 579 0
 1188 010a 1943     	 orr r1,r3
 581:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->pclk_src;
 1189              	 .loc 1 581 0
 1190 010c 7B68     	 ldr r3,[r7,#4]
 1191 010e 9B68     	 ldr r3,[r3,#8]
 580:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1192              	 .loc 1 580 0
 1193 0110 0B43     	 orr r3,r1
 579:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1194              	 .loc 1 579 0
 1195 0112 1360     	 str r3,[r2]
 582:../Libraries/XMCLib/src/xmc1_scu.c **** 
 583:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Close the lock opened above. */
 584:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1196              	 .loc 1 584 0
 1197 0114 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 585:../Libraries/XMCLib/src/xmc1_scu.c **** 
 586:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Update the dividers now */
 587:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
 1198              	 .loc 1 587 0
 1199 0118 7B68     	 ldr r3,[r7,#4]
 1200 011a 9B78     	 ldrb r3,[r3,#2]
 1201 011c 1A1C     	 mov r2,r3
 1202 011e 7B68     	 ldr r3,[r7,#4]
 1203 0120 1B88     	 ldrh r3,[r3]
 1204 0122 101C     	 mov r0,r2
 1205 0124 191C     	 mov r1,r3
 1206 0126 FFF7FEFF 	 bl XMC_SCU_CLOCK_ScaleMCLKFrequency
 588:../Libraries/XMCLib/src/xmc1_scu.c **** 
 589:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1207              	 .loc 1 589 0
 1208 012a BD46     	 mov sp,r7
 1209 012c 06B0     	 add sp,sp,#24
 1210              	 
 1211 012e 80BD     	 pop {r7,pc}
 1212              	.L82:
 1213              	 .align 2
 1214              	.L81:
 1215 0130 002D3101 	 .word 20000000
 1216 0134 00100140 	 .word 1073811456
 1217 0138 38000140 	 .word 1073807416
 1218 013c 00030140 	 .word 1073808128
 1219 0140 FFFFFFFD 	 .word -33554433
 1220 0144 C4090000 	 .word 2500
 1221 0148 A02E6300 	 .word 6500000
 1222 014c FFFDFFFF 	 .word -513
 1223 0150 FFFFF0FF 	 .word -983041
 1224              	 .cfi_endproc
 1225              	.LFE84:
 1227              	 .section .text.XMC_SCU_CLOCK_SetRtcClockSource,"ax",%progbits
 1228              	 .align 2
 1229              	 .global XMC_SCU_CLOCK_SetRtcClockSource
 1230              	 .code 16
 1231              	 .thumb_func
 1233              	XMC_SCU_CLOCK_SetRtcClockSource:
 1234              	.LFB85:
 590:../Libraries/XMCLib/src/xmc1_scu.c **** 
 591:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which selects one of the available parent clock nodes for a given child clock node */
 592:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetRtcClockSource(const XMC_SCU_CLOCK_RTCCLKSRC_t source)
 593:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1235              	 .loc 1 593 0
 1236              	 .cfi_startproc
 1237 0000 80B5     	 push {r7,lr}
 1238              	.LCFI50:
 1239              	 .cfi_def_cfa_offset 8
 1240              	 .cfi_offset 7,-8
 1241              	 .cfi_offset 14,-4
 1242 0002 82B0     	 sub sp,sp,#8
 1243              	.LCFI51:
 1244              	 .cfi_def_cfa_offset 16
 1245 0004 00AF     	 add r7,sp,#0
 1246              	.LCFI52:
 1247              	 .cfi_def_cfa_register 7
 1248 0006 7860     	 str r0,[r7,#4]
 594:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetRtcSourceClock:Wrong Parent Clock", XMC_SCU_CHECK_RTCCLKSRC(source))
 595:../Libraries/XMCLib/src/xmc1_scu.c **** 
 596:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1249              	 .loc 1 596 0
 1250 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 597:../Libraries/XMCLib/src/xmc1_scu.c **** 
 598:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~SCU_CLK_CLKCR_RTCCLKSEL_Msk) |
 1251              	 .loc 1 598 0
 1252 000c 064B     	 ldr r3,.L84
 1253 000e 064A     	 ldr r2,.L84
 1254 0010 1268     	 ldr r2,[r2]
 1255 0012 0649     	 ldr r1,.L84+4
 1256 0014 1140     	 and r1,r2
 1257 0016 7A68     	 ldr r2,[r7,#4]
 1258 0018 0A43     	 orr r2,r1
 1259 001a 1A60     	 str r2,[r3]
 599:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 600:../Libraries/XMCLib/src/xmc1_scu.c **** 
 601:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1260              	 .loc 1 601 0
 1261 001c FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 602:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1262              	 .loc 1 602 0
 1263 0020 BD46     	 mov sp,r7
 1264 0022 02B0     	 add sp,sp,#8
 1265              	 
 1266 0024 80BD     	 pop {r7,pc}
 1267              	.L85:
 1268 0026 C046     	 .align 2
 1269              	.L84:
 1270 0028 00030140 	 .word 1073808128
 1271 002c FFFFF1FF 	 .word -917505
 1272              	 .cfi_endproc
 1273              	.LFE85:
 1275              	 .section .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource,"ax",%progbits
 1276              	 .align 2
 1277              	 .global XMC_SCU_CLOCK_SetFastPeripheralClockSource
 1278              	 .code 16
 1279              	 .thumb_func
 1281              	XMC_SCU_CLOCK_SetFastPeripheralClockSource:
 1282              	.LFB86:
 603:../Libraries/XMCLib/src/xmc1_scu.c **** 
 604:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program the divider placed between fperiph and its parent */
 605:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetFastPeripheralClockSource(const XMC_SCU_CLOCK_PCLKSRC_t source)
 606:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1283              	 .loc 1 606 0
 1284              	 .cfi_startproc
 1285 0000 80B5     	 push {r7,lr}
 1286              	.LCFI53:
 1287              	 .cfi_def_cfa_offset 8
 1288              	 .cfi_offset 7,-8
 1289              	 .cfi_offset 14,-4
 1290 0002 82B0     	 sub sp,sp,#8
 1291              	.LCFI54:
 1292              	 .cfi_def_cfa_offset 16
 1293 0004 00AF     	 add r7,sp,#0
 1294              	.LCFI55:
 1295              	 .cfi_def_cfa_register 7
 1296 0006 7860     	 str r0,[r7,#4]
 607:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1297              	 .loc 1 607 0
 1298 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 608:../Libraries/XMCLib/src/xmc1_scu.c **** 
 609:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~SCU_CLK_CLKCR_PCLKSEL_Msk) |
 1299              	 .loc 1 609 0
 1300 000c 064B     	 ldr r3,.L87
 1301 000e 064A     	 ldr r2,.L87
 1302 0010 1268     	 ldr r2,[r2]
 1303 0012 0649     	 ldr r1,.L87+4
 1304 0014 1140     	 and r1,r2
 1305 0016 7A68     	 ldr r2,[r7,#4]
 1306 0018 0A43     	 orr r2,r1
 1307 001a 1A60     	 str r2,[r3]
 610:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 611:../Libraries/XMCLib/src/xmc1_scu.c **** 
 612:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1308              	 .loc 1 612 0
 1309 001c FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 613:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1310              	 .loc 1 613 0
 1311 0020 BD46     	 mov sp,r7
 1312 0022 02B0     	 add sp,sp,#8
 1313              	 
 1314 0024 80BD     	 pop {r7,pc}
 1315              	.L88:
 1316 0026 C046     	 .align 2
 1317              	.L87:
 1318 0028 00030140 	 .word 1073808128
 1319 002c FFFFFEFF 	 .word -65537
 1320              	 .cfi_endproc
 1321              	.LFE86:
 1323              	 .section .text.XMC_SCU_CLOCK_GatePeripheralClock,"ax",%progbits
 1324              	 .align 2
 1325              	 .global XMC_SCU_CLOCK_GatePeripheralClock
 1326              	 .code 16
 1327              	 .thumb_func
 1329              	XMC_SCU_CLOCK_GatePeripheralClock:
 1330              	.LFB87:
 614:../Libraries/XMCLib/src/xmc1_scu.c **** 
 615:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which gates a clock node at its source */
 616:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 617:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1331              	 .loc 1 617 0
 1332              	 .cfi_startproc
 1333 0000 80B5     	 push {r7,lr}
 1334              	.LCFI56:
 1335              	 .cfi_def_cfa_offset 8
 1336              	 .cfi_offset 7,-8
 1337              	 .cfi_offset 14,-4
 1338 0002 82B0     	 sub sp,sp,#8
 1339              	.LCFI57:
 1340              	 .cfi_def_cfa_offset 16
 1341 0004 00AF     	 add r7,sp,#0
 1342              	.LCFI58:
 1343              	 .cfi_def_cfa_register 7
 1344 0006 7860     	 str r0,[r7,#4]
 618:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1345              	 .loc 1 618 0
 1346 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 619:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATSET0 |= (uint32_t)peripheral;
 1347              	 .loc 1 619 0
 1348 000c 054B     	 ldr r3,.L90
 1349 000e 054A     	 ldr r2,.L90
 1350 0010 D168     	 ldr r1,[r2,#12]
 1351 0012 7A68     	 ldr r2,[r7,#4]
 1352 0014 0A43     	 orr r2,r1
 1353 0016 DA60     	 str r2,[r3,#12]
 620:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1354              	 .loc 1 620 0
 1355 0018 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 621:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1356              	 .loc 1 621 0
 1357 001c BD46     	 mov sp,r7
 1358 001e 02B0     	 add sp,sp,#8
 1359              	 
 1360 0020 80BD     	 pop {r7,pc}
 1361              	.L91:
 1362 0022 C046     	 .align 2
 1363              	.L90:
 1364 0024 00030140 	 .word 1073808128
 1365              	 .cfi_endproc
 1366              	.LFE87:
 1368              	 .section .text.XMC_SCU_CLOCK_UngatePeripheralClock,"ax",%progbits
 1369              	 .align 2
 1370              	 .global XMC_SCU_CLOCK_UngatePeripheralClock
 1371              	 .code 16
 1372              	 .thumb_func
 1374              	XMC_SCU_CLOCK_UngatePeripheralClock:
 1375              	.LFB88:
 622:../Libraries/XMCLib/src/xmc1_scu.c **** 
 623:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which ungates a clock note at its source */
 624:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 625:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1376              	 .loc 1 625 0
 1377              	 .cfi_startproc
 1378 0000 80B5     	 push {r7,lr}
 1379              	.LCFI59:
 1380              	 .cfi_def_cfa_offset 8
 1381              	 .cfi_offset 7,-8
 1382              	 .cfi_offset 14,-4
 1383 0002 82B0     	 sub sp,sp,#8
 1384              	.LCFI60:
 1385              	 .cfi_def_cfa_offset 16
 1386 0004 00AF     	 add r7,sp,#0
 1387              	.LCFI61:
 1388              	 .cfi_def_cfa_register 7
 1389 0006 7860     	 str r0,[r7,#4]
 626:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1390              	 .loc 1 626 0
 1391 0008 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 627:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
 1392              	 .loc 1 627 0
 1393 000c 084B     	 ldr r3,.L94
 1394 000e 084A     	 ldr r2,.L94
 1395 0010 1169     	 ldr r1,[r2,#16]
 1396 0012 7A68     	 ldr r2,[r7,#4]
 1397 0014 0A43     	 orr r2,r1
 1398 0016 1A61     	 str r2,[r3,#16]
 628:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1399              	 .loc 1 628 0
 1400 0018 C046     	 mov r8,r8
 1401              	.L93:
 1402              	 .loc 1 628 0 is_stmt 0 discriminator 1
 1403 001a 054B     	 ldr r3,.L94
 1404 001c 1A68     	 ldr r2,[r3]
 1405 001e 8023     	 mov r3,#128
 1406 0020 DB05     	 lsl r3,r3,#23
 1407 0022 1340     	 and r3,r2
 1408 0024 F9D1     	 bne .L93
 629:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 630:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 631:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 632:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1409              	 .loc 1 632 0 is_stmt 1
 1410 0026 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 633:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1411              	 .loc 1 633 0
 1412 002a BD46     	 mov sp,r7
 1413 002c 02B0     	 add sp,sp,#8
 1414              	 
 1415 002e 80BD     	 pop {r7,pc}
 1416              	.L95:
 1417              	 .align 2
 1418              	.L94:
 1419 0030 00030140 	 .word 1073808128
 1420              	 .cfi_endproc
 1421              	.LFE88:
 1423              	 .section .text.XMC_SCU_CLOCK_IsPeripheralClockGated,"ax",%progbits
 1424              	 .align 2
 1425              	 .global XMC_SCU_CLOCK_IsPeripheralClockGated
 1426              	 .code 16
 1427              	 .thumb_func
 1429              	XMC_SCU_CLOCK_IsPeripheralClockGated:
 1430              	.LFB89:
 634:../Libraries/XMCLib/src/xmc1_scu.c **** 
 635:../Libraries/XMCLib/src/xmc1_scu.c **** /* Checks the status of peripheral clock gating */
 636:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 637:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1431              	 .loc 1 637 0
 1432              	 .cfi_startproc
 1433 0000 80B5     	 push {r7,lr}
 1434              	.LCFI62:
 1435              	 .cfi_def_cfa_offset 8
 1436              	 .cfi_offset 7,-8
 1437              	 .cfi_offset 14,-4
 1438 0002 82B0     	 sub sp,sp,#8
 1439              	.LCFI63:
 1440              	 .cfi_def_cfa_offset 16
 1441 0004 00AF     	 add r7,sp,#0
 1442              	.LCFI64:
 1443              	 .cfi_def_cfa_register 7
 1444 0006 7860     	 str r0,[r7,#4]
 638:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
 1445              	 .loc 1 638 0
 1446 0008 054B     	 ldr r3,.L98
 1447 000a 9B68     	 ldr r3,[r3,#8]
 1448 000c 7A68     	 ldr r2,[r7,#4]
 1449 000e 1340     	 and r3,r2
 1450 0010 5A1E     	 sub r2,r3,#1
 1451 0012 9341     	 sbc r3,r3,r2
 1452 0014 DBB2     	 uxtb r3,r3
 639:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1453              	 .loc 1 639 0
 1454 0016 181C     	 mov r0,r3
 1455 0018 BD46     	 mov sp,r7
 1456 001a 02B0     	 add sp,sp,#8
 1457              	 
 1458 001c 80BD     	 pop {r7,pc}
 1459              	.L99:
 1460 001e C046     	 .align 2
 1461              	.L98:
 1462 0020 00030140 	 .word 1073808128
 1463              	 .cfi_endproc
 1464              	.LFE89:
 1466              	 .global __aeabi_uidiv
 1467              	 .section .text.XMC_SCU_CLOCK_SetMCLKFrequency,"ax",%progbits
 1468              	 .align 2
 1469              	 .global XMC_SCU_CLOCK_SetMCLKFrequency
 1470              	 .code 16
 1471              	 .thumb_func
 1473              	XMC_SCU_CLOCK_SetMCLKFrequency:
 1474              	.LFB90:
 640:../Libraries/XMCLib/src/xmc1_scu.c **** 
 641:../Libraries/XMCLib/src/xmc1_scu.c **** /* This API configures main clock (MCLK) frequency to requested frequency value. */
 642:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetMCLKFrequency(uint32_t freq_khz)
 643:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1475              	 .loc 1 643 0
 1476              	 .cfi_startproc
 1477 0000 80B5     	 push {r7,lr}
 1478              	.LCFI65:
 1479              	 .cfi_def_cfa_offset 8
 1480              	 .cfi_offset 7,-8
 1481              	 .cfi_offset 14,-4
 1482 0002 86B0     	 sub sp,sp,#24
 1483              	.LCFI66:
 1484              	 .cfi_def_cfa_offset 32
 1485 0004 00AF     	 add r7,sp,#0
 1486              	.LCFI67:
 1487              	 .cfi_def_cfa_register 7
 1488 0006 7860     	 str r0,[r7,#4]
 644:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 645:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio_int;
 646:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio_frac;
 647:../Libraries/XMCLib/src/xmc1_scu.c **** 
 648:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 649:../Libraries/XMCLib/src/xmc1_scu.c ****   if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
 1489              	 .loc 1 649 0
 1490 0008 194B     	 ldr r3,.L104
 1491 000a DA69     	 ldr r2,[r3,#28]
 1492 000c 8023     	 mov r3,#128
 1493 000e 9B00     	 lsl r3,r3,#2
 1494 0010 1340     	 and r3,r2
 1495 0012 06D1     	 bne .L101
 650:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 651:../Libraries/XMCLib/src/xmc1_scu.c ****      ratio = DCO1_DIV2_FREQUENCY_KHZ_Q22_10 / freq_khz;
 1496              	 .loc 1 651 0
 1497 0014 1748     	 ldr r0,.L104+4
 1498 0016 7968     	 ldr r1,[r7,#4]
 1499 0018 FFF7FEFF 	 bl __aeabi_uidiv
 1500 001c 031C     	 mov r3,r0
 1501 001e 7B61     	 str r3,[r7,#20]
 1502 0020 0FE0     	 b .L102
 1503              	.L101:
 652:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 653:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 654:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 655:../Libraries/XMCLib/src/xmc1_scu.c ****      ratio = ((OSCHP_GetFrequency() / 1000U) << 10U) / freq_khz;
 1504              	 .loc 1 655 0
 1505 0022 FFF7FEFF 	 bl OSCHP_GetFrequency
 1506 0026 031C     	 mov r3,r0
 1507 0028 181C     	 mov r0,r3
 1508 002a FA23     	 mov r3,#250
 1509 002c 9900     	 lsl r1,r3,#2
 1510 002e FFF7FEFF 	 bl __aeabi_uidiv
 1511 0032 031C     	 mov r3,r0
 1512 0034 9B02     	 lsl r3,r3,#10
 1513 0036 181C     	 mov r0,r3
 1514 0038 7968     	 ldr r1,[r7,#4]
 1515 003a FFF7FEFF 	 bl __aeabi_uidiv
 1516 003e 031C     	 mov r3,r0
 1517 0040 7B61     	 str r3,[r7,#20]
 1518              	.L102:
 656:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 657:../Libraries/XMCLib/src/xmc1_scu.c **** 
 658:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Manage overflow */
 659:../Libraries/XMCLib/src/xmc1_scu.c ****   if (ratio > 0xffffffU)
 1519              	 .loc 1 659 0
 1520 0042 7B69     	 ldr r3,[r7,#20]
 1521 0044 0C4A     	 ldr r2,.L104+8
 1522 0046 9342     	 cmp r3,r2
 1523 0048 01D9     	 bls .L103
 660:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 661:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = 0xffffffU;
 1524              	 .loc 1 661 0
 1525 004a 0B4B     	 ldr r3,.L104+8
 1526 004c 7B61     	 str r3,[r7,#20]
 1527              	.L103:
 662:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 663:../Libraries/XMCLib/src/xmc1_scu.c **** 
 664:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_int = ratio >> 10U;
 1528              	 .loc 1 664 0
 1529 004e 7B69     	 ldr r3,[r7,#20]
 1530 0050 9B0A     	 lsr r3,r3,#10
 1531 0052 3B61     	 str r3,[r7,#16]
 665:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0x3ffU;
 1532              	 .loc 1 665 0
 1533 0054 7B69     	 ldr r3,[r7,#20]
 1534 0056 9B05     	 lsl r3,r3,#22
 1535 0058 9B0D     	 lsr r3,r3,#22
 1536 005a FB60     	 str r3,[r7,#12]
 666:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 667:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = DCO1_DIV2_FREQUENCY_KHZ_Q24_8 / freq_khz;
 668:../Libraries/XMCLib/src/xmc1_scu.c **** 
 669:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Manage overflow */
 670:../Libraries/XMCLib/src/xmc1_scu.c ****   if (ratio > 0xffffU)
 671:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 672:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = 0xffffU;
 673:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 674:../Libraries/XMCLib/src/xmc1_scu.c **** 
 675:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_int = ratio >> 8U;
 676:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0xffU;
 677:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 678:../Libraries/XMCLib/src/xmc1_scu.c **** 
 679:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_CLOCK_ScaleMCLKFrequency(ratio_int, ratio_frac);
 1537              	 .loc 1 679 0
 1538 005c 3A69     	 ldr r2,[r7,#16]
 1539 005e FB68     	 ldr r3,[r7,#12]
 1540 0060 101C     	 mov r0,r2
 1541 0062 191C     	 mov r1,r3
 1542 0064 FFF7FEFF 	 bl XMC_SCU_CLOCK_ScaleMCLKFrequency
 680:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1543              	 .loc 1 680 0
 1544 0068 BD46     	 mov sp,r7
 1545 006a 06B0     	 add sp,sp,#24
 1546              	 
 1547 006c 80BD     	 pop {r7,pc}
 1548              	.L105:
 1549 006e C046     	 .align 2
 1550              	.L104:
 1551 0070 00030140 	 .word 1073808128
 1552 0074 0000EE02 	 .word 49152000
 1553 0078 FFFFFF00 	 .word 16777215
 1554              	 .cfi_endproc
 1555              	.LFE90:
 1557              	 .section .text.XMC_SCU_CLOCK_ScaleMCLKFrequency,"ax",%progbits
 1558              	 .align 2
 1559              	 .global XMC_SCU_CLOCK_ScaleMCLKFrequency
 1560              	 .code 16
 1561              	 .thumb_func
 1563              	XMC_SCU_CLOCK_ScaleMCLKFrequency:
 1564              	.LFB91:
 681:../Libraries/XMCLib/src/xmc1_scu.c **** 
 682:../Libraries/XMCLib/src/xmc1_scu.c **** 
 683:../Libraries/XMCLib/src/xmc1_scu.c **** /* A utility routine which updates the fractional dividers in steps */
 684:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
 685:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1565              	 .loc 1 685 0
 1566              	 .cfi_startproc
 1567 0000 80B5     	 push {r7,lr}
 1568              	.LCFI68:
 1569              	 .cfi_def_cfa_offset 8
 1570              	 .cfi_offset 7,-8
 1571              	 .cfi_offset 14,-4
 1572 0002 84B0     	 sub sp,sp,#16
 1573              	.LCFI69:
 1574              	 .cfi_def_cfa_offset 24
 1575 0004 00AF     	 add r7,sp,#0
 1576              	.LCFI70:
 1577              	 .cfi_def_cfa_register 7
 1578 0006 7860     	 str r0,[r7,#4]
 1579 0008 3960     	 str r1,[r7]
 686:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Find out current and target value of idiv */
 687:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t curr_idiv;
 688:../Libraries/XMCLib/src/xmc1_scu.c **** 
 689:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1580              	 .loc 1 689 0
 1581 000a FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 690:../Libraries/XMCLib/src/xmc1_scu.c **** 
 691:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Take a snapshot of value already programmed into IDIV */
 692:../Libraries/XMCLib/src/xmc1_scu.c ****   curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
 1582              	 .loc 1 692 0
 1583 000e 274B     	 ldr r3,.L111
 1584 0010 1A68     	 ldr r2,[r3]
 1585 0012 FF23     	 mov r3,#255
 1586 0014 1B02     	 lsl r3,r3,#8
 1587 0016 1340     	 and r3,r2
 1588 0018 1B0A     	 lsr r3,r3,#8
 1589 001a FB60     	 str r3,[r7,#12]
 693:../Libraries/XMCLib/src/xmc1_scu.c **** 
 694:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 695:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
 1590              	 .loc 1 695 0
 1591 001c 234B     	 ldr r3,.L111
 1592 001e 234A     	 ldr r2,.L111
 1593 0020 D269     	 ldr r2,[r2,#28]
 1594 0022 0321     	 mov r1,#3
 1595 0024 8A43     	 bic r2,r1
 1596 0026 111C     	 mov r1,r2
 696:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
 1597              	 .loc 1 696 0
 1598 0028 3A68     	 ldr r2,[r7]
 1599 002a 120A     	 lsr r2,r2,#8
 695:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
 1600              	 .loc 1 695 0
 1601 002c 0A43     	 orr r2,r1
 1602 002e DA61     	 str r2,[r3,#28]
 697:../Libraries/XMCLib/src/xmc1_scu.c **** 
 698:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 1603              	 .loc 1 698 0
 1604 0030 1E4B     	 ldr r3,.L111
 1605 0032 1E4A     	 ldr r2,.L111
 1606 0034 1268     	 ldr r2,[r2]
 1607 0036 1E49     	 ldr r1,.L111+4
 1608 0038 1140     	 and r1,r2
 699:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
 1609              	 .loc 1 699 0
 1610 003a 3A68     	 ldr r2,[r7]
 1611 003c FF20     	 mov r0,#255
 1612 003e 0240     	 and r2,r0
 698:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
 1613              	 .loc 1 698 0
 1614 0040 0A43     	 orr r2,r1
 1615              	 .loc 1 699 0
 1616 0042 1C49     	 ldr r1,.L111+8
 1617 0044 0A43     	 orr r2,r1
 698:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
 1618              	 .loc 1 698 0
 1619 0046 1A60     	 str r2,[r3]
 700:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 701:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 702:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 703:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
 704:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 705:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 706:../Libraries/XMCLib/src/xmc1_scu.c **** 
 707:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1620              	 .loc 1 707 0
 1621 0048 C046     	 mov r8,r8
 1622              	.L107:
 1623              	 .loc 1 707 0 is_stmt 0 discriminator 1
 1624 004a 184B     	 ldr r3,.L111
 1625 004c 1A68     	 ldr r2,[r3]
 1626 004e 8023     	 mov r3,#128
 1627 0050 DB05     	 lsl r3,r3,#23
 1628 0052 1340     	 and r3,r2
 1629 0054 F9D1     	 bne .L107
 708:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 709:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Spin until the core supply stabilizes */
 710:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 711:../Libraries/XMCLib/src/xmc1_scu.c **** 
 712:../Libraries/XMCLib/src/xmc1_scu.c ****   if(curr_idiv <= idiv)
 1630              	 .loc 1 712 0 is_stmt 1
 1631 0056 FA68     	 ldr r2,[r7,#12]
 1632 0058 7B68     	 ldr r3,[r7,#4]
 1633 005a 9A42     	 cmp r2,r3
 1634 005c 06D8     	 bhi .L108
 713:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 714:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
 715:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
 1635              	 .loc 1 715 0
 1636 005e FA68     	 ldr r2,[r7,#12]
 1637 0060 7B68     	 ldr r3,[r7,#4]
 1638 0062 101C     	 mov r0,r2
 1639 0064 191C     	 mov r1,r3
 1640 0066 FFF7FEFF 	 bl XMC_SCU_CLOCK_lFrequencyDownScaling
 1641 006a 05E0     	 b .L109
 1642              	.L108:
 716:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 717:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 718:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 719:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
 720:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
 1643              	 .loc 1 720 0
 1644 006c FA68     	 ldr r2,[r7,#12]
 1645 006e 7B68     	 ldr r3,[r7,#4]
 1646 0070 101C     	 mov r0,r2
 1647 0072 191C     	 mov r1,r3
 1648 0074 FFF7FEFF 	 bl XMC_SCU_CLOCK_lFrequencyUpScaling
 1649              	.L109:
 721:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 722:../Libraries/XMCLib/src/xmc1_scu.c **** 
 723:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 1650              	 .loc 1 723 0
 1651 0078 0C4B     	 ldr r3,.L111
 1652 007a 0C4A     	 ldr r2,.L111
 1653 007c 1268     	 ldr r2,[r2]
 1654 007e 0E49     	 ldr r1,.L111+12
 1655 0080 1140     	 and r1,r2
 724:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1656              	 .loc 1 724 0
 1657 0082 7A68     	 ldr r2,[r7,#4]
 1658 0084 1202     	 lsl r2,r2,#8
 723:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1659              	 .loc 1 723 0
 1660 0086 0A43     	 orr r2,r1
 1661              	 .loc 1 724 0
 1662 0088 0A49     	 ldr r1,.L111+8
 1663 008a 0A43     	 orr r2,r1
 723:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1664              	 .loc 1 723 0
 1665 008c 1A60     	 str r2,[r3]
 725:../Libraries/XMCLib/src/xmc1_scu.c **** 
 726:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1666              	 .loc 1 726 0
 1667 008e C046     	 mov r8,r8
 1668              	.L110:
 1669              	 .loc 1 726 0 is_stmt 0 discriminator 1
 1670 0090 064B     	 ldr r3,.L111
 1671 0092 1A68     	 ldr r2,[r3]
 1672 0094 8023     	 mov r3,#128
 1673 0096 DB05     	 lsl r3,r3,#23
 1674 0098 1340     	 and r3,r2
 1675 009a F9D1     	 bne .L110
 727:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 728:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 729:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 730:../Libraries/XMCLib/src/xmc1_scu.c **** 
 731:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 1676              	 .loc 1 731 0 is_stmt 1
 1677 009c FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 732:../Libraries/XMCLib/src/xmc1_scu.c **** 
 733:../Libraries/XMCLib/src/xmc1_scu.c ****   SystemCoreClockUpdate();
 1678              	 .loc 1 733 0
 1679 00a0 FFF7FEFF 	 bl SystemCoreClockUpdate
 734:../Libraries/XMCLib/src/xmc1_scu.c **** 
 735:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1680              	 .loc 1 735 0
 1681 00a4 BD46     	 mov sp,r7
 1682 00a6 04B0     	 add sp,sp,#16
 1683              	 
 1684 00a8 80BD     	 pop {r7,pc}
 1685              	.L112:
 1686 00aa C046     	 .align 2
 1687              	.L111:
 1688 00ac 00030140 	 .word 1073808128
 1689 00b0 00FF0FC0 	 .word -1072693504
 1690 00b4 0000F03F 	 .word 1072693248
 1691 00b8 FF000FC0 	 .word -1072758529
 1692              	 .cfi_endproc
 1693              	.LFE91:
 1695              	 .section .text.XMC_SCU_CLOCK_lFrequencyUpScaling,"ax",%progbits
 1696              	 .align 2
 1697              	 .code 16
 1698              	 .thumb_func
 1700              	XMC_SCU_CLOCK_lFrequencyUpScaling:
 1701              	.LFB92:
 736:../Libraries/XMCLib/src/xmc1_scu.c **** 
 737:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency up scaling */
 738:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
 739:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1702              	 .loc 1 739 0
 1703              	 .cfi_startproc
 1704 0000 80B5     	 push {r7,lr}
 1705              	.LCFI71:
 1706              	 .cfi_def_cfa_offset 8
 1707              	 .cfi_offset 7,-8
 1708              	 .cfi_offset 14,-4
 1709 0002 82B0     	 sub sp,sp,#8
 1710              	.LCFI72:
 1711              	 .cfi_def_cfa_offset 16
 1712 0004 00AF     	 add r7,sp,#0
 1713              	.LCFI73:
 1714              	 .cfi_def_cfa_register 7
 1715 0006 7860     	 str r0,[r7,#4]
 1716 0008 3960     	 str r1,[r7]
 740:../Libraries/XMCLib/src/xmc1_scu.c ****   while (curr_idiv > (target_idiv * 4UL))
 1717              	 .loc 1 740 0
 1718 000a 14E0     	 b .L114
 1719              	.L116:
 741:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 742:../Libraries/XMCLib/src/xmc1_scu.c ****     curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
 1720              	 .loc 1 742 0
 1721 000c 7B68     	 ldr r3,[r7,#4]
 1722 000e 9B08     	 lsr r3,r3,#2
 1723 0010 7B60     	 str r3,[r7,#4]
 743:../Libraries/XMCLib/src/xmc1_scu.c **** 
 744:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 1724              	 .loc 1 744 0
 1725 0012 0D4B     	 ldr r3,.L117
 1726 0014 0C4A     	 ldr r2,.L117
 1727 0016 1268     	 ldr r2,[r2]
 1728 0018 0C49     	 ldr r1,.L117+4
 1729 001a 1140     	 and r1,r2
 745:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1730              	 .loc 1 745 0
 1731 001c 7A68     	 ldr r2,[r7,#4]
 1732 001e 1202     	 lsl r2,r2,#8
 744:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1733              	 .loc 1 744 0
 1734 0020 0A43     	 orr r2,r1
 1735              	 .loc 1 745 0
 1736 0022 0B49     	 ldr r1,.L117+8
 1737 0024 0A43     	 orr r2,r1
 744:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1738              	 .loc 1 744 0
 1739 0026 1A60     	 str r2,[r3]
 746:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 747:../Libraries/XMCLib/src/xmc1_scu.c **** 
 748:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1740              	 .loc 1 748 0
 1741 0028 C046     	 mov r8,r8
 1742              	.L115:
 1743              	 .loc 1 748 0 is_stmt 0 discriminator 1
 1744 002a 074B     	 ldr r3,.L117
 1745 002c 1A68     	 ldr r2,[r3]
 1746 002e 8023     	 mov r3,#128
 1747 0030 DB05     	 lsl r3,r3,#23
 1748 0032 1340     	 and r3,r2
 1749 0034 F9D1     	 bne .L115
 1750              	.L114:
 740:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1751              	 .loc 1 740 0 is_stmt 1
 1752 0036 3B68     	 ldr r3,[r7]
 1753 0038 9A00     	 lsl r2,r3,#2
 1754 003a 7B68     	 ldr r3,[r7,#4]
 1755 003c 9A42     	 cmp r2,r3
 1756 003e E5D3     	 bcc .L116
 749:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 750:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 751:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 752:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 753:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1757              	 .loc 1 753 0
 1758 0040 BD46     	 mov sp,r7
 1759 0042 02B0     	 add sp,sp,#8
 1760              	 
 1761 0044 80BD     	 pop {r7,pc}
 1762              	.L118:
 1763 0046 C046     	 .align 2
 1764              	.L117:
 1765 0048 00030140 	 .word 1073808128
 1766 004c FF000FC0 	 .word -1072758529
 1767 0050 0000F03F 	 .word 1072693248
 1768              	 .cfi_endproc
 1769              	.LFE92:
 1771              	 .section .text.XMC_SCU_CLOCK_lFrequencyDownScaling,"ax",%progbits
 1772              	 .align 2
 1773              	 .code 16
 1774              	 .thumb_func
 1776              	XMC_SCU_CLOCK_lFrequencyDownScaling:
 1777              	.LFB93:
 754:../Libraries/XMCLib/src/xmc1_scu.c **** 
 755:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency down scaling */
 756:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
 757:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1778              	 .loc 1 757 0
 1779              	 .cfi_startproc
 1780 0000 80B5     	 push {r7,lr}
 1781              	.LCFI74:
 1782              	 .cfi_def_cfa_offset 8
 1783              	 .cfi_offset 7,-8
 1784              	 .cfi_offset 14,-4
 1785 0002 82B0     	 sub sp,sp,#8
 1786              	.LCFI75:
 1787              	 .cfi_def_cfa_offset 16
 1788 0004 00AF     	 add r7,sp,#0
 1789              	.LCFI76:
 1790              	 .cfi_def_cfa_register 7
 1791 0006 7860     	 str r0,[r7,#4]
 1792 0008 3960     	 str r1,[r7]
 758:../Libraries/XMCLib/src/xmc1_scu.c **** 
 759:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((curr_idiv * 4UL) < target_idiv)
 1793              	 .loc 1 759 0
 1794 000a 19E0     	 b .L120
 1795              	.L123:
 760:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 761:../Libraries/XMCLib/src/xmc1_scu.c ****     if(0U == curr_idiv)
 1796              	 .loc 1 761 0
 1797 000c 7B68     	 ldr r3,[r7,#4]
 1798 000e 002B     	 cmp r3,#0
 1799 0010 01D1     	 bne .L121
 762:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 763:../Libraries/XMCLib/src/xmc1_scu.c ****       curr_idiv = 1U;
 1800              	 .loc 1 763 0
 1801 0012 0123     	 mov r3,#1
 1802 0014 7B60     	 str r3,[r7,#4]
 1803              	.L121:
 764:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 765:../Libraries/XMCLib/src/xmc1_scu.c ****     curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
 1804              	 .loc 1 765 0
 1805 0016 7B68     	 ldr r3,[r7,#4]
 1806 0018 9B00     	 lsl r3,r3,#2
 1807 001a 7B60     	 str r3,[r7,#4]
 766:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 1808              	 .loc 1 766 0
 1809 001c 0C4B     	 ldr r3,.L124
 1810 001e 0C4A     	 ldr r2,.L124
 1811 0020 1268     	 ldr r2,[r2]
 1812 0022 0C49     	 ldr r1,.L124+4
 1813 0024 1140     	 and r1,r2
 767:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 1814              	 .loc 1 767 0
 1815 0026 7A68     	 ldr r2,[r7,#4]
 1816 0028 1202     	 lsl r2,r2,#8
 766:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 1817              	 .loc 1 766 0
 1818 002a 0A43     	 orr r2,r1
 1819              	 .loc 1 767 0
 1820 002c 0A49     	 ldr r1,.L124+8
 1821 002e 0A43     	 orr r2,r1
 766:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 1822              	 .loc 1 766 0
 1823 0030 1A60     	 str r2,[r3]
 768:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 769:../Libraries/XMCLib/src/xmc1_scu.c **** 
 770:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1824              	 .loc 1 770 0
 1825 0032 C046     	 mov r8,r8
 1826              	.L122:
 1827              	 .loc 1 770 0 is_stmt 0 discriminator 1
 1828 0034 064B     	 ldr r3,.L124
 1829 0036 1A68     	 ldr r2,[r3]
 1830 0038 8023     	 mov r3,#128
 1831 003a DB05     	 lsl r3,r3,#23
 1832 003c 1340     	 and r3,r2
 1833 003e F9D1     	 bne .L122
 1834              	.L120:
 759:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1835              	 .loc 1 759 0 is_stmt 1
 1836 0040 7B68     	 ldr r3,[r7,#4]
 1837 0042 9A00     	 lsl r2,r3,#2
 1838 0044 3B68     	 ldr r3,[r7]
 1839 0046 9A42     	 cmp r2,r3
 1840 0048 E0D3     	 bcc .L123
 771:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 772:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 773:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 774:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 775:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1841              	 .loc 1 775 0
 1842 004a BD46     	 mov sp,r7
 1843 004c 02B0     	 add sp,sp,#8
 1844              	 
 1845 004e 80BD     	 pop {r7,pc}
 1846              	.L125:
 1847              	 .align 2
 1848              	.L124:
 1849 0050 00030140 	 .word 1073808128
 1850 0054 FF000FC0 	 .word -1072758529
 1851 0058 0000F03F 	 .word 1072693248
 1852              	 .cfi_endproc
 1853              	.LFE93:
 1855              	 .section .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency,"ax",%progbits
 1856              	 .align 2
 1857              	 .global XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1858              	 .code 16
 1859              	 .thumb_func
 1861              	XMC_SCU_CLOCK_GetPeripheralClockFrequency:
 1862              	.LFB94:
 776:../Libraries/XMCLib/src/xmc1_scu.c **** 
 777:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 778:../Libraries/XMCLib/src/xmc1_scu.c ****  * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional c
 779:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 780:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
 781:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1863              	 .loc 1 781 0
 1864              	 .cfi_startproc
 1865 0000 80B5     	 push {r7,lr}
 1866              	.LCFI77:
 1867              	 .cfi_def_cfa_offset 8
 1868              	 .cfi_offset 7,-8
 1869              	 .cfi_offset 14,-4
 1870 0002 00AF     	 add r7,sp,#0
 1871              	.LCFI78:
 1872              	 .cfi_def_cfa_register 7
 782:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock);
 1873              	 .loc 1 782 0
 1874 0004 024B     	 ldr r3,.L128
 1875 0006 1B68     	 ldr r3,[r3]
 783:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1876              	 .loc 1 783 0
 1877 0008 181C     	 mov r0,r3
 1878 000a BD46     	 mov sp,r7
 1879              	 
 1880 000c 80BD     	 pop {r7,pc}
 1881              	.L129:
 1882 000e C046     	 .align 2
 1883              	.L128:
 1884 0010 00000000 	 .word SystemCoreClock
 1885              	 .cfi_endproc
 1886              	.LFE94:
 1888              	 .section .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency,"ax",%progbits
 1889              	 .align 2
 1890              	 .global XMC_SCU_CLOCK_GetFastPeripheralClockFrequency
 1891              	 .code 16
 1892              	 .thumb_func
 1894              	XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:
 1895              	.LFB95:
 784:../Libraries/XMCLib/src/xmc1_scu.c **** 
 785:../Libraries/XMCLib/src/xmc1_scu.c **** /* Provides the clock frequency of peripherals on the peripheral bus that are using a shared functi
 786:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CLOCK_GetFastPeripheralClockFrequency(void)
 787:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1896              	 .loc 1 787 0
 1897              	 .cfi_startproc
 1898 0000 80B5     	 push {r7,lr}
 1899              	.LCFI79:
 1900              	 .cfi_def_cfa_offset 8
 1901              	 .cfi_offset 7,-8
 1902              	 .cfi_offset 14,-4
 1903 0002 00AF     	 add r7,sp,#0
 1904              	.LCFI80:
 1905              	 .cfi_def_cfa_register 7
 788:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock << ((SCU_CLK->CLKCR & SCU_CLK_CLKCR_PCLKSEL_Msk) >> SCU_CLK_CLKCR_PCLKSEL
 1906              	 .loc 1 788 0
 1907 0004 064B     	 ldr r3,.L132
 1908 0006 1A68     	 ldr r2,[r3]
 1909 0008 064B     	 ldr r3,.L132+4
 1910 000a 1968     	 ldr r1,[r3]
 1911 000c 8023     	 mov r3,#128
 1912 000e 5B02     	 lsl r3,r3,#9
 1913 0010 0B40     	 and r3,r1
 1914 0012 1B0C     	 lsr r3,r3,#16
 1915 0014 9A40     	 lsl r2,r2,r3
 1916 0016 131C     	 mov r3,r2
 789:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1917              	 .loc 1 789 0
 1918 0018 181C     	 mov r0,r3
 1919 001a BD46     	 mov sp,r7
 1920              	 
 1921 001c 80BD     	 pop {r7,pc}
 1922              	.L133:
 1923 001e C046     	 .align 2
 1924              	.L132:
 1925 0020 00000000 	 .word SystemCoreClock
 1926 0024 00030140 	 .word 1073808128
 1927              	 .cfi_endproc
 1928              	.LFE95:
 1930              	 .global __aeabi_idiv
 1931              	 .section .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature,"ax",%progbits
 1932              	 .align 2
 1933              	 .global XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature
 1934              	 .code 16
 1935              	 .thumb_func
 1937              	XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:
 1938              	.LFB96:
 790:../Libraries/XMCLib/src/xmc1_scu.c **** 
 791:../Libraries/XMCLib/src/xmc1_scu.c **** /* DCO1 clock frequency can be calibrated during runtime to achieve a better accuracy */
 792:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature(int32_t temperature)
 793:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1939              	 .loc 1 793 0
 1940              	 .cfi_startproc
 1941 0000 80B5     	 push {r7,lr}
 1942              	.LCFI81:
 1943              	 .cfi_def_cfa_offset 8
 1944              	 .cfi_offset 7,-8
 1945              	 .cfi_offset 14,-4
 1946 0002 88B0     	 sub sp,sp,#32
 1947              	.LCFI82:
 1948              	 .cfi_def_cfa_offset 40
 1949 0004 00AF     	 add r7,sp,#0
 1950              	.LCFI83:
 1951              	 .cfi_def_cfa_register 7
 1952 0006 7860     	 str r0,[r7,#4]
 794:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t a;
 795:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t b;
 796:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t d;
 797:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t e;
 798:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t offset;
 799:../Libraries/XMCLib/src/xmc1_scu.c **** 
 800:../Libraries/XMCLib/src/xmc1_scu.c ****   a = *((uint8_t*)DCO_ADJLO_T2);
 1953              	 .loc 1 800 0
 1954 0008 174B     	 ldr r3,.L135
 1955 000a 1B78     	 ldrb r3,[r3]
 1956 000c FB61     	 str r3,[r7,#28]
 801:../Libraries/XMCLib/src/xmc1_scu.c ****   b = *((uint8_t*)DCO_ADJLO_T1);
 1957              	 .loc 1 801 0
 1958 000e 174B     	 ldr r3,.L135+4
 1959 0010 1B78     	 ldrb r3,[r3]
 1960 0012 BB61     	 str r3,[r7,#24]
 802:../Libraries/XMCLib/src/xmc1_scu.c ****   d = *((uint8_t*)ANA_TSE_T1);
 1961              	 .loc 1 802 0
 1962 0014 164B     	 ldr r3,.L135+8
 1963 0016 1B78     	 ldrb r3,[r3]
 1964 0018 7B61     	 str r3,[r7,#20]
 803:../Libraries/XMCLib/src/xmc1_scu.c ****   e = *((uint8_t*)ANA_TSE_T2);
 1965              	 .loc 1 803 0
 1966 001a 164B     	 ldr r3,.L135+12
 1967 001c 1B78     	 ldrb r3,[r3]
 1968 001e 3B61     	 str r3,[r7,#16]
 804:../Libraries/XMCLib/src/xmc1_scu.c **** 
 805:../Libraries/XMCLib/src/xmc1_scu.c ****   offset = b + (((a - b) * (temperature - d)) / (e - d));
 1969              	 .loc 1 805 0
 1970 0020 FA69     	 ldr r2,[r7,#28]
 1971 0022 BB69     	 ldr r3,[r7,#24]
 1972 0024 D31A     	 sub r3,r2,r3
 1973 0026 7968     	 ldr r1,[r7,#4]
 1974 0028 7A69     	 ldr r2,[r7,#20]
 1975 002a 8A1A     	 sub r2,r1,r2
 1976 002c 5A43     	 mul r2,r3
 1977 002e 111C     	 mov r1,r2
 1978 0030 3A69     	 ldr r2,[r7,#16]
 1979 0032 7B69     	 ldr r3,[r7,#20]
 1980 0034 D31A     	 sub r3,r2,r3
 1981 0036 081C     	 mov r0,r1
 1982 0038 191C     	 mov r1,r3
 1983 003a FFF7FEFF 	 bl __aeabi_idiv
 1984 003e 031C     	 mov r3,r0
 1985 0040 1A1C     	 mov r2,r3
 1986 0042 BB69     	 ldr r3,[r7,#24]
 1987 0044 D318     	 add r3,r2,r3
 1988 0046 FB60     	 str r3,[r7,#12]
 806:../Libraries/XMCLib/src/xmc1_scu.c ****   offset &= SCU_ANALOG_ANAOFFSET_ADJL_OFFSET_Msk;
 1989              	 .loc 1 806 0
 1990 0048 FB68     	 ldr r3,[r7,#12]
 1991 004a 7F22     	 mov r2,#127
 1992 004c 1340     	 and r3,r2
 1993 004e FB60     	 str r3,[r7,#12]
 807:../Libraries/XMCLib/src/xmc1_scu.c **** 
 808:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 1994              	 .loc 1 808 0
 1995 0050 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 809:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOFFSET = (uint16_t)offset;
 1996              	 .loc 1 809 0
 1997 0054 084A     	 ldr r2,.L135+16
 1998 0056 FB68     	 ldr r3,[r7,#12]
 1999 0058 99B2     	 uxth r1,r3
 2000 005a 6C23     	 mov r3,#108
 2001 005c D152     	 strh r1,[r2,r3]
 810:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 2002              	 .loc 1 810 0
 2003 005e FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 811:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2004              	 .loc 1 811 0
 2005 0062 BD46     	 mov sp,r7
 2006 0064 08B0     	 add sp,sp,#32
 2007              	 
 2008 0066 80BD     	 pop {r7,pc}
 2009              	.L136:
 2010              	 .align 2
 2011              	.L135:
 2012 0068 330F0010 	 .word 268439347
 2013 006c 320F0010 	 .word 268439346
 2014 0070 300F0010 	 .word 268439344
 2015 0074 310F0010 	 .word 268439345
 2016 0078 00100140 	 .word 1073811456
 2017              	 .cfi_endproc
 2018              	.LFE96:
 2020              	 .section .text.XMC_SCU_INTERRUPT_SetEventHandler,"ax",%progbits
 2021              	 .align 2
 2022              	 .global XMC_SCU_INTERRUPT_SetEventHandler
 2023              	 .code 16
 2024              	 .thumb_func
 2026              	XMC_SCU_INTERRUPT_SetEventHandler:
 2027              	.LFB97:
 812:../Libraries/XMCLib/src/xmc1_scu.c **** 
 813:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 814:../Libraries/XMCLib/src/xmc1_scu.c ****  * API to assign the event handler function to be executed on occurrence of the selected event
 815:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 816:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(XMC_SCU_INTERRUPT_EVENT_t event, XMC_SCU_INTERRU
 817:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2028              	 .loc 1 817 0
 2029              	 .cfi_startproc
 2030 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 2031              	.LCFI84:
 2032              	 .cfi_def_cfa_offset 20
 2033              	 .cfi_offset 4,-20
 2034              	 .cfi_offset 5,-16
 2035              	 .cfi_offset 6,-12
 2036              	 .cfi_offset 7,-8
 2037              	 .cfi_offset 14,-4
 2038 0002 87B0     	 sub sp,sp,#28
 2039              	.LCFI85:
 2040              	 .cfi_def_cfa_offset 48
 2041 0004 00AF     	 add r7,sp,#0
 2042              	.LCFI86:
 2043              	 .cfi_def_cfa_register 7
 2044 0006 B860     	 str r0,[r7,#8]
 2045 0008 F960     	 str r1,[r7,#12]
 2046 000a 7A60     	 str r2,[r7,#4]
 818:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t index;
 819:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status;
 820:../Libraries/XMCLib/src/xmc1_scu.c **** 
 821:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(eve
 822:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);
 823:../Libraries/XMCLib/src/xmc1_scu.c **** 
 824:../Libraries/XMCLib/src/xmc1_scu.c ****   index = 0U;
 2047              	 .loc 1 824 0
 2048 000c 0022     	 mov r2,#0
 2049 000e 7A61     	 str r2,[r7,#20]
 825:../Libraries/XMCLib/src/xmc1_scu.c **** 
 826:../Libraries/XMCLib/src/xmc1_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 2050              	 .loc 1 826 0
 2051 0010 02E0     	 b .L138
 2052              	.L142:
 827:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 828:../Libraries/XMCLib/src/xmc1_scu.c ****     index++;
 2053              	 .loc 1 828 0
 2054 0012 7A69     	 ldr r2,[r7,#20]
 2055 0014 0132     	 add r2,r2,#1
 2056 0016 7A61     	 str r2,[r7,#20]
 2057              	.L138:
 826:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 2058              	 .loc 1 826 0
 2059 0018 7A69     	 ldr r2,[r7,#20]
 2060 001a 111C     	 mov r1,r2
 2061 001c 2039     	 sub r1,r1,#32
 2062 001e 0029     	 cmp r1,#0
 2063 0020 03DB     	 blt .L139
 2064 0022 F868     	 ldr r0,[r7,#12]
 2065 0024 C840     	 lsr r0,r0,r1
 2066 0026 031C     	 mov r3,r0
 2067 0028 08E0     	 b .L140
 2068              	.L139:
 2069 002a 2021     	 mov r1,#32
 2070 002c 891A     	 sub r1,r1,r2
 2071 002e F868     	 ldr r0,[r7,#12]
 2072 0030 8840     	 lsl r0,r0,r1
 2073 0032 011C     	 mov r1,r0
 2074 0034 B868     	 ldr r0,[r7,#8]
 2075 0036 D040     	 lsr r0,r0,r2
 2076 0038 031C     	 mov r3,r0
 2077 003a 0B43     	 orr r3,r1
 2078              	.L140:
 2079 003c F968     	 ldr r1,[r7,#12]
 2080 003e D140     	 lsr r1,r1,r2
 2081 0040 0C1C     	 mov r4,r1
 2082 0042 0122     	 mov r2,#1
 2083 0044 1A40     	 and r2,r3
 2084 0046 151C     	 mov r5,r2
 2085 0048 0022     	 mov r2,#0
 2086 004a 2240     	 and r2,r4
 2087 004c 161C     	 mov r6,r2
 2088 004e 2A1C     	 mov r2,r5
 2089 0050 3243     	 orr r2,r6
 2090 0052 02D1     	 bne .L141
 826:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 2091              	 .loc 1 826 0 is_stmt 0 discriminator 1
 2092 0054 7A69     	 ldr r2,[r7,#20]
 2093 0056 3F2A     	 cmp r2,#63
 2094 0058 DBD9     	 bls .L142
 2095              	.L141:
 829:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 830:../Libraries/XMCLib/src/xmc1_scu.c **** 
 831:../Libraries/XMCLib/src/xmc1_scu.c ****   if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 2096              	 .loc 1 831 0 is_stmt 1
 2097 005a 7B69     	 ldr r3,[r7,#20]
 2098 005c 402B     	 cmp r3,#64
 2099 005e 04D1     	 bne .L143
 832:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 833:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 2100              	 .loc 1 833 0
 2101 0060 1323     	 mov r3,#19
 2102 0062 FB18     	 add r3,r7,r3
 2103 0064 0122     	 mov r2,#1
 2104 0066 1A70     	 strb r2,[r3]
 2105 0068 08E0     	 b .L144
 2106              	.L143:
 834:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 835:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 836:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 837:../Libraries/XMCLib/src/xmc1_scu.c ****     event_handler_list[index] = handler;
 2107              	 .loc 1 837 0
 2108 006a 084B     	 ldr r3,.L146
 2109 006c 7A69     	 ldr r2,[r7,#20]
 2110 006e 9200     	 lsl r2,r2,#2
 2111 0070 7968     	 ldr r1,[r7,#4]
 2112 0072 D150     	 str r1,[r2,r3]
 838:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_OK;
 2113              	 .loc 1 838 0
 2114 0074 1323     	 mov r3,#19
 2115 0076 FB18     	 add r3,r7,r3
 2116 0078 0022     	 mov r2,#0
 2117 007a 1A70     	 strb r2,[r3]
 2118              	.L144:
 839:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 840:../Libraries/XMCLib/src/xmc1_scu.c **** 
 841:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 2119              	 .loc 1 841 0
 2120 007c 1323     	 mov r3,#19
 2121 007e FB18     	 add r3,r7,r3
 2122 0080 1B78     	 ldrb r3,[r3]
 842:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2123              	 .loc 1 842 0
 2124 0082 181C     	 mov r0,r3
 2125 0084 BD46     	 mov sp,r7
 2126 0086 07B0     	 add sp,sp,#28
 2127              	 
 2128 0088 F0BD     	 pop {r4,r5,r6,r7,pc}
 2129              	.L147:
 2130 008a C046     	 .align 2
 2131              	.L146:
 2132 008c 00000000 	 .word event_handler_list
 2133              	 .cfi_endproc
 2134              	.LFE97:
 2136              	 .section .text.XMC_SCU_IRQHandler,"ax",%progbits
 2137              	 .align 2
 2138              	 .global XMC_SCU_IRQHandler
 2139              	 .code 16
 2140              	 .thumb_func
 2142              	XMC_SCU_IRQHandler:
 2143              	.LFB98:
 843:../Libraries/XMCLib/src/xmc1_scu.c **** 
 844:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 845:../Libraries/XMCLib/src/xmc1_scu.c ****  * A common function to execute callback functions for multiple events
 846:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 847:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_IRQHandler(uint32_t sr_num)
 848:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2144              	 .loc 1 848 0
 2145              	 .cfi_startproc
 2146 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 2147              	.LCFI87:
 2148              	 .cfi_def_cfa_offset 20
 2149              	 .cfi_offset 4,-20
 2150              	 .cfi_offset 5,-16
 2151              	 .cfi_offset 6,-12
 2152              	 .cfi_offset 7,-8
 2153              	 .cfi_offset 14,-4
 2154 0002 8FB0     	 sub sp,sp,#60
 2155              	.LCFI88:
 2156              	 .cfi_def_cfa_offset 80
 2157 0004 00AF     	 add r7,sp,#0
 2158              	.LCFI89:
 2159              	 .cfi_def_cfa_register 7
 2160 0006 F861     	 str r0,[r7,#28]
 849:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_IRQHandler: Invalid sr_num", sr_num < SCU_IRQ_NUM);
 850:../Libraries/XMCLib/src/xmc1_scu.c **** 
 851:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t index;
 852:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t event;
 853:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
 854:../Libraries/XMCLib/src/xmc1_scu.c **** 
 855:../Libraries/XMCLib/src/xmc1_scu.c ****   index = 0U;
 2161              	 .loc 1 855 0
 2162 0008 0023     	 mov r3,#0
 2163 000a 7B63     	 str r3,[r7,#52]
 856:../Libraries/XMCLib/src/xmc1_scu.c ****   event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
 2164              	 .loc 1 856 0
 2165 000c FFF7FEFF 	 bl XMC_SCU_INTERUPT_GetEventStatus
 2166 0010 384A     	 ldr r2,.L159
 2167 0012 FB69     	 ldr r3,[r7,#28]
 2168 0014 DB00     	 lsl r3,r3,#3
 2169 0016 D318     	 add r3,r2,r3
 2170 0018 1A68     	 ldr r2,[r3]
 2171 001a 5B68     	 ldr r3,[r3,#4]
 2172 001c 161C     	 mov r6,r2
 2173 001e 0640     	 and r6,r0
 2174 0020 BE62     	 str r6,[r7,#40]
 2175 0022 0B40     	 and r3,r1
 2176 0024 FB62     	 str r3,[r7,#44]
 857:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_ClearEventStatus(event);
 2177              	 .loc 1 857 0
 2178 0026 BA6A     	 ldr r2,[r7,#40]
 2179 0028 FB6A     	 ldr r3,[r7,#44]
 2180 002a 101C     	 mov r0,r2
 2181 002c 191C     	 mov r1,r3
 2182 002e FFF7FEFF 	 bl XMC_SCU_INTERRUPT_ClearEventStatus
 858:../Libraries/XMCLib/src/xmc1_scu.c **** 
 859:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 2183              	 .loc 1 859 0
 2184 0032 55E0     	 b .L149
 2185              	.L158:
 860:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 861:../Libraries/XMCLib/src/xmc1_scu.c ****     if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 2186              	 .loc 1 861 0
 2187 0034 7B6B     	 ldr r3,[r7,#52]
 2188 0036 1A1C     	 mov r2,r3
 2189 0038 203A     	 sub r2,r2,#32
 2190 003a 002A     	 cmp r2,#0
 2191 003c 03DB     	 blt .L150
 2192 003e F96A     	 ldr r1,[r7,#44]
 2193 0040 D140     	 lsr r1,r1,r2
 2194 0042 0C1C     	 mov r4,r1
 2195 0044 08E0     	 b .L151
 2196              	.L150:
 2197 0046 2022     	 mov r2,#32
 2198 0048 D21A     	 sub r2,r2,r3
 2199 004a F96A     	 ldr r1,[r7,#44]
 2200 004c 9140     	 lsl r1,r1,r2
 2201 004e 0A1C     	 mov r2,r1
 2202 0050 B96A     	 ldr r1,[r7,#40]
 2203 0052 D940     	 lsr r1,r1,r3
 2204 0054 0C1C     	 mov r4,r1
 2205 0056 1443     	 orr r4,r2
 2206              	.L151:
 2207 0058 FA6A     	 ldr r2,[r7,#44]
 2208 005a DA40     	 lsr r2,r2,r3
 2209 005c 151C     	 mov r5,r2
 2210 005e 0123     	 mov r3,#1
 2211 0060 2340     	 and r3,r4
 2212 0062 BB60     	 str r3,[r7,#8]
 2213 0064 0023     	 mov r3,#0
 2214 0066 2B40     	 and r3,r5
 2215 0068 FB60     	 str r3,[r7,#12]
 2216 006a B968     	 ldr r1,[r7,#8]
 2217 006c FA68     	 ldr r2,[r7,#12]
 2218 006e 0B1C     	 mov r3,r1
 2219 0070 1343     	 orr r3,r2
 2220 0072 32D0     	 beq .L152
 862:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 863:../Libraries/XMCLib/src/xmc1_scu.c ****       event &= ~((XMC_SCU_INTERRUPT_EVENT_t)1 << index);
 2221              	 .loc 1 863 0
 2222 0074 7B6B     	 ldr r3,[r7,#52]
 2223 0076 1A1C     	 mov r2,r3
 2224 0078 203A     	 sub r2,r2,#32
 2225 007a 002A     	 cmp r2,#0
 2226 007c 03DB     	 blt .L154
 2227 007e 0121     	 mov r1,#1
 2228 0080 9140     	 lsl r1,r1,r2
 2229 0082 7961     	 str r1,[r7,#20]
 2230 0084 0AE0     	 b .L155
 2231              	.L154:
 2232 0086 2022     	 mov r2,#32
 2233 0088 D21A     	 sub r2,r2,r3
 2234 008a 0121     	 mov r1,#1
 2235 008c D140     	 lsr r1,r1,r2
 2236 008e 0A1C     	 mov r2,r1
 2237 0090 0021     	 mov r1,#0
 2238 0092 9940     	 lsl r1,r1,r3
 2239 0094 7961     	 str r1,[r7,#20]
 2240 0096 7969     	 ldr r1,[r7,#20]
 2241 0098 1143     	 orr r1,r2
 2242 009a 7961     	 str r1,[r7,#20]
 2243              	.L155:
 2244 009c 0122     	 mov r2,#1
 2245 009e 9A40     	 lsl r2,r2,r3
 2246 00a0 3A61     	 str r2,[r7,#16]
 2247 00a2 3969     	 ldr r1,[r7,#16]
 2248 00a4 7A69     	 ldr r2,[r7,#20]
 2249 00a6 0B1C     	 mov r3,r1
 2250 00a8 DB43     	 mvn r3,r3
 2251 00aa 3B60     	 str r3,[r7]
 2252 00ac 131C     	 mov r3,r2
 2253 00ae DB43     	 mvn r3,r3
 2254 00b0 7B60     	 str r3,[r7,#4]
 2255 00b2 BB6A     	 ldr r3,[r7,#40]
 2256 00b4 3868     	 ldr r0,[r7]
 2257 00b6 7968     	 ldr r1,[r7,#4]
 2258 00b8 021C     	 mov r2,r0
 2259 00ba 1340     	 and r3,r2
 2260 00bc BB62     	 str r3,[r7,#40]
 2261 00be FB6A     	 ldr r3,[r7,#44]
 2262 00c0 0A1C     	 mov r2,r1
 2263 00c2 1340     	 and r3,r2
 2264 00c4 FB62     	 str r3,[r7,#44]
 864:../Libraries/XMCLib/src/xmc1_scu.c ****       event_handler = event_handler_list[index];
 2265              	 .loc 1 864 0
 2266 00c6 0C4B     	 ldr r3,.L159+4
 2267 00c8 7A6B     	 ldr r2,[r7,#52]
 2268 00ca 9200     	 lsl r2,r2,#2
 2269 00cc D358     	 ldr r3,[r2,r3]
 2270 00ce 7B62     	 str r3,[r7,#36]
 865:../Libraries/XMCLib/src/xmc1_scu.c ****       if (event_handler != NULL)
 2271              	 .loc 1 865 0
 2272 00d0 7B6A     	 ldr r3,[r7,#36]
 2273 00d2 002B     	 cmp r3,#0
 2274 00d4 01D0     	 beq .L152
 866:../Libraries/XMCLib/src/xmc1_scu.c ****       {
 867:../Libraries/XMCLib/src/xmc1_scu.c ****         event_handler();
 2275              	 .loc 1 867 0
 2276 00d6 7B6A     	 ldr r3,[r7,#36]
 2277 00d8 9847     	 blx r3
 2278              	.L152:
 868:../Libraries/XMCLib/src/xmc1_scu.c ****       }
 869:../Libraries/XMCLib/src/xmc1_scu.c **** 
 870:../Libraries/XMCLib/src/xmc1_scu.c ****       /* break; XMC1: Only PULSE interrupts */
 871:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 872:../Libraries/XMCLib/src/xmc1_scu.c ****     index++;
 2279              	 .loc 1 872 0
 2280 00da 7B6B     	 ldr r3,[r7,#52]
 2281 00dc 0133     	 add r3,r3,#1
 2282 00de 7B63     	 str r3,[r7,#52]
 2283              	.L149:
 859:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 2284              	 .loc 1 859 0
 2285 00e0 BB6A     	 ldr r3,[r7,#40]
 2286 00e2 FA6A     	 ldr r2,[r7,#44]
 2287 00e4 1343     	 orr r3,r2
 2288 00e6 02D0     	 beq .L148
 2289 00e8 7B6B     	 ldr r3,[r7,#52]
 2290 00ea 3F2B     	 cmp r3,#63
 2291 00ec A2D9     	 bls .L158
 2292              	.L148:
 873:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 874:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2293              	 .loc 1 874 0
 2294 00ee BD46     	 mov sp,r7
 2295 00f0 0FB0     	 add sp,sp,#60
 2296              	 
 2297 00f2 F0BD     	 pop {r4,r5,r6,r7,pc}
 2298              	.L160:
 2299              	 .align 2
 2300              	.L159:
 2301 00f4 00000000 	 .word event_masks
 2302 00f8 00000000 	 .word event_handler_list
 2303              	 .cfi_endproc
 2304              	.LFE98:
 2306              	 .section .text.XMC_SCU_SetBMI,"ax",%progbits
 2307              	 .align 2
 2308              	 .global XMC_SCU_SetBMI
 2309              	 .code 16
 2310              	 .thumb_func
 2312              	XMC_SCU_SetBMI:
 2313              	.LFB99:
 875:../Libraries/XMCLib/src/xmc1_scu.c **** 
 876:../Libraries/XMCLib/src/xmc1_scu.c **** /* Install BMI */
 877:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_SetBMI(uint32_t flags, uint8_t timeout)
 878:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2314              	 .loc 1 878 0
 2315              	 .cfi_startproc
 2316 0000 80B5     	 push {r7,lr}
 2317              	.LCFI90:
 2318              	 .cfi_def_cfa_offset 8
 2319              	 .cfi_offset 7,-8
 2320              	 .cfi_offset 14,-4
 2321 0002 82B0     	 sub sp,sp,#8
 2322              	.LCFI91:
 2323              	 .cfi_def_cfa_offset 16
 2324 0004 00AF     	 add r7,sp,#0
 2325              	.LCFI92:
 2326              	 .cfi_def_cfa_register 7
 2327 0006 7860     	 str r0,[r7,#4]
 2328 0008 0A1C     	 mov r2,r1
 2329 000a FB1C     	 add r3,r7,#3
 2330 000c 1A70     	 strb r2,[r3]
 879:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 880:../Libraries/XMCLib/src/xmc1_scu.c ****   return ROM_BmiInstallationReq((flags & 0x0fffU) | ((timeout << 12) & 0xf000U));
 2331              	 .loc 1 880 0
 2332 000e 8423     	 mov r3,#132
 2333 0010 5B00     	 lsl r3,r3,#1
 2334 0012 1B68     	 ldr r3,[r3]
 2335 0014 7A68     	 ldr r2,[r7,#4]
 2336 0016 1205     	 lsl r2,r2,#20
 2337 0018 110D     	 lsr r1,r2,#20
 2338 001a FA1C     	 add r2,r7,#3
 2339 001c 1278     	 ldrb r2,[r2]
 2340 001e 1203     	 lsl r2,r2,#12
 2341 0020 1204     	 lsl r2,r2,#16
 2342 0022 120C     	 lsr r2,r2,#16
 2343 0024 0A43     	 orr r2,r1
 2344 0026 101C     	 mov r0,r2
 2345 0028 9847     	 blx r3
 2346 002a 031C     	 mov r3,r0
 881:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 882:../Libraries/XMCLib/src/xmc1_scu.c ****   return ROM_BmiInstallationReq((flags & 0x07ffU) | ((timeout << 12) & 0xf000U) | 0x08c0U);
 883:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 884:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2347              	 .loc 1 884 0
 2348 002c 181C     	 mov r0,r3
 2349 002e BD46     	 mov sp,r7
 2350 0030 02B0     	 add sp,sp,#8
 2351              	 
 2352 0032 80BD     	 pop {r7,pc}
 2353              	 .cfi_endproc
 2354              	.LFE99:
 2356              	 .section .text.XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration,"ax",%progbits
 2357              	 .align 2
 2358              	 .global XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration
 2359              	 .code 16
 2360              	 .thumb_func
 2362              	XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration:
 2363              	.LFB100:
 885:../Libraries/XMCLib/src/xmc1_scu.c **** 
 886:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 887:../Libraries/XMCLib/src/xmc1_scu.c **** /* DCO1 clock frequency can be calibrated during runtime to achieve a better accuracy */
 888:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration(XMC_SCU_CLOCK_SYNC_CLKSRC_t sync_clk, uint32_t presc
 889:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2364              	 .loc 1 889 0
 2365              	 .cfi_startproc
 2366 0000 80B5     	 push {r7,lr}
 2367              	.LCFI93:
 2368              	 .cfi_def_cfa_offset 8
 2369              	 .cfi_offset 7,-8
 2370              	 .cfi_offset 14,-4
 2371 0002 84B0     	 sub sp,sp,#16
 2372              	.LCFI94:
 2373              	 .cfi_def_cfa_offset 24
 2374 0004 00AF     	 add r7,sp,#0
 2375              	.LCFI95:
 2376              	 .cfi_def_cfa_register 7
 2377 0006 B960     	 str r1,[r7,#8]
 2378 0008 7A60     	 str r2,[r7,#4]
 2379 000a 0E23     	 mov r3,#14
 2380 000c FB18     	 add r3,r7,r3
 2381 000e 021C     	 add r2,r0,#0
 2382 0010 1A80     	 strh r2,[r3]
 890:../Libraries/XMCLib/src/xmc1_scu.c **** 
 891:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 2383              	 .loc 1 891 0
 2384 0012 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 892:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANASYNC2 = (uint16_t)(prescaler << SCU_ANALOG_ANASYNC2_PRESCALER_Pos);
 2385              	 .loc 1 892 0
 2386 0016 0C4A     	 ldr r2,.L164
 2387 0018 BB68     	 ldr r3,[r7,#8]
 2388 001a 99B2     	 uxth r1,r3
 2389 001c 7C23     	 mov r3,#124
 2390 001e D152     	 strh r1,[r2,r3]
 893:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANASYNC1 = (uint16_t)(syn_preload |
 2391              	 .loc 1 893 0
 2392 0020 0949     	 ldr r1,.L164
 2393 0022 7B68     	 ldr r3,[r7,#4]
 2394 0024 9AB2     	 uxth r2,r3
 2395 0026 0E23     	 mov r3,#14
 2396 0028 FB18     	 add r3,r7,r3
 2397 002a 1B88     	 ldrh r3,[r3]
 2398 002c 1343     	 orr r3,r2
 2399 002e 9BB2     	 uxth r3,r3
 2400 0030 8022     	 mov r2,#128
 2401 0032 D201     	 lsl r2,r2,#7
 2402 0034 1343     	 orr r3,r2
 2403 0036 9AB2     	 uxth r2,r3
 2404 0038 7823     	 mov r3,#120
 2405 003a CA52     	 strh r2,[r1,r3]
 894:../Libraries/XMCLib/src/xmc1_scu.c ****                          sync_clk |
 895:../Libraries/XMCLib/src/xmc1_scu.c ****                          SCU_ANALOG_ANASYNC1_SYNC_DCO_EN_Msk);
 896:../Libraries/XMCLib/src/xmc1_scu.c **** 
 897:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 2406              	 .loc 1 897 0
 2407 003c FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 898:../Libraries/XMCLib/src/xmc1_scu.c **** 
 899:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2408              	 .loc 1 899 0
 2409 0040 BD46     	 mov sp,r7
 2410 0042 04B0     	 add sp,sp,#16
 2411              	 
 2412 0044 80BD     	 pop {r7,pc}
 2413              	.L165:
 2414 0046 C046     	 .align 2
 2415              	.L164:
 2416 0048 00100140 	 .word 1073811456
 2417              	 .cfi_endproc
 2418              	.LFE100:
 2420              	 .section .text.XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration,"ax",%progbits
 2421              	 .align 2
 2422              	 .global XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration
 2423              	 .code 16
 2424              	 .thumb_func
 2426              	XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration:
 2427              	.LFB101:
 900:../Libraries/XMCLib/src/xmc1_scu.c **** 
 901:../Libraries/XMCLib/src/xmc1_scu.c **** /* This function stops the automatic DCO1 calibration based on the selected clock source */
 902:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration(void)
 903:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2428              	 .loc 1 903 0
 2429              	 .cfi_startproc
 2430 0000 80B5     	 push {r7,lr}
 2431              	.LCFI96:
 2432              	 .cfi_def_cfa_offset 8
 2433              	 .cfi_offset 7,-8
 2434              	 .cfi_offset 14,-4
 2435 0002 00AF     	 add r7,sp,#0
 2436              	.LCFI97:
 2437              	 .cfi_def_cfa_register 7
 904:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 2438              	 .loc 1 904 0
 2439 0004 FFF7FEFF 	 bl XMC_SCU_UnlockProtectedBits
 905:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANASYNC2 = 0U;
 2440              	 .loc 1 905 0
 2441 0008 054A     	 ldr r2,.L167
 2442 000a 7C23     	 mov r3,#124
 2443 000c 0021     	 mov r1,#0
 2444 000e D152     	 strh r1,[r2,r3]
 906:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANASYNC1 = 0U;
 2445              	 .loc 1 906 0
 2446 0010 034A     	 ldr r2,.L167
 2447 0012 7823     	 mov r3,#120
 2448 0014 0021     	 mov r1,#0
 2449 0016 D152     	 strh r1,[r2,r3]
 907:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 2450              	 .loc 1 907 0
 2451 0018 FFF7FEFF 	 bl XMC_SCU_LockProtectedBits
 908:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2452              	 .loc 1 908 0
 2453 001c BD46     	 mov sp,r7
 2454              	 
 2455 001e 80BD     	 pop {r7,pc}
 2456              	.L168:
 2457              	 .align 2
 2458              	.L167:
 2459 0020 00100140 	 .word 1073811456
 2460              	 .cfi_endproc
 2461              	.LFE101:
 2463              	 .section .text.XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady,"ax",%progbits
 2464              	 .align 2
 2465              	 .global XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady
 2466              	 .code 16
 2467              	 .thumb_func
 2469              	XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady:
 2470              	.LFB102:
 909:../Libraries/XMCLib/src/xmc1_scu.c **** 
 910:../Libraries/XMCLib/src/xmc1_scu.c **** /* This functions checks the status of the synchronisation */
 911:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady(void)
 912:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2471              	 .loc 1 912 0
 2472              	 .cfi_startproc
 2473 0000 80B5     	 push {r7,lr}
 2474              	.LCFI98:
 2475              	 .cfi_def_cfa_offset 8
 2476              	 .cfi_offset 7,-8
 2477              	 .cfi_offset 14,-4
 2478 0002 00AF     	 add r7,sp,#0
 2479              	.LCFI99:
 2480              	 .cfi_def_cfa_register 7
 913:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
 2481              	 .loc 1 913 0
 2482 0004 064A     	 ldr r2,.L171
 2483 0006 7C23     	 mov r3,#124
 2484 0008 D35A     	 ldrh r3,[r2,r3]
 2485 000a 9BB2     	 uxth r3,r3
 2486 000c 1A1C     	 mov r2,r3
 2487 000e 8023     	 mov r3,#128
 2488 0010 5B01     	 lsl r3,r3,#5
 2489 0012 1340     	 and r3,r2
 2490 0014 5A1E     	 sub r2,r3,#1
 2491 0016 9341     	 sbc r3,r3,r2
 2492 0018 DBB2     	 uxtb r3,r3
 914:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2493              	 .loc 1 914 0
 2494 001a 181C     	 mov r0,r3
 2495 001c BD46     	 mov sp,r7
 2496              	 
 2497 001e 80BD     	 pop {r7,pc}
 2498              	.L172:
 2499              	 .align 2
 2500              	.L171:
 2501 0020 00100140 	 .word 1073811456
 2502              	 .cfi_endproc
 2503              	.LFE102:
 2505              	 .section .text.XMC_SCU_SetInterruptControl,"ax",%progbits
 2506              	 .align 2
 2507              	 .global XMC_SCU_SetInterruptControl
 2508              	 .code 16
 2509              	 .thumb_func
 2511              	XMC_SCU_SetInterruptControl:
 2512              	.LFB103:
 915:../Libraries/XMCLib/src/xmc1_scu.c **** 
 916:../Libraries/XMCLib/src/xmc1_scu.c **** /* This function selects service request source for a NVIC interrupt node */
 917:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
 918:../Libraries/XMCLib/src/xmc1_scu.c **** {
 2513              	 .loc 1 918 0
 2514              	 .cfi_startproc
 2515 0000 80B5     	 push {r7,lr}
 2516              	.LCFI100:
 2517              	 .cfi_def_cfa_offset 8
 2518              	 .cfi_offset 7,-8
 2519              	 .cfi_offset 14,-4
 2520 0002 82B0     	 sub sp,sp,#8
 2521              	.LCFI101:
 2522              	 .cfi_def_cfa_offset 16
 2523 0004 00AF     	 add r7,sp,#0
 2524              	.LCFI102:
 2525              	 .cfi_def_cfa_register 7
 2526 0006 021C     	 mov r2,r0
 2527 0008 FB1D     	 add r3,r7,#7
 2528 000a 1A70     	 strb r2,[r3]
 2529 000c 3B1D     	 add r3,r7,#4
 2530 000e 0A1C     	 add r2,r1,#0
 2531 0010 1A80     	 strh r2,[r3]
 919:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
 920:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);
 921:../Libraries/XMCLib/src/xmc1_scu.c **** 
 922:../Libraries/XMCLib/src/xmc1_scu.c ****   source &= 0x3U;
 2532              	 .loc 1 922 0
 2533 0012 3B1D     	 add r3,r7,#4
 2534 0014 3A1D     	 add r2,r7,#4
 2535 0016 1288     	 ldrh r2,[r2]
 2536 0018 0321     	 mov r1,#3
 2537 001a 0A40     	 and r2,r1
 2538 001c 1A80     	 strh r2,[r3]
 923:../Libraries/XMCLib/src/xmc1_scu.c ****   if (irq_number < 16U)
 2539              	 .loc 1 923 0
 2540 001e FB1D     	 add r3,r7,#7
 2541 0020 1B78     	 ldrb r3,[r3]
 2542 0022 0F2B     	 cmp r3,#15
 2543 0024 13D8     	 bhi .L174
 924:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 925:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SC
 2544              	 .loc 1 925 0
 2545 0026 184B     	 ldr r3,.L176
 2546 0028 174A     	 ldr r2,.L176
 2547 002a D26E     	 ldr r2,[r2,#108]
 2548 002c F91D     	 add r1,r7,#7
 2549 002e 0978     	 ldrb r1,[r1]
 2550 0030 4900     	 lsl r1,r1,#1
 2551 0032 081C     	 mov r0,r1
 2552 0034 0321     	 mov r1,#3
 2553 0036 8140     	 lsl r1,r1,r0
 2554 0038 C943     	 mvn r1,r1
 2555 003a 0A40     	 and r2,r1
 926:../Libraries/XMCLib/src/xmc1_scu.c ****                           (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
 2556              	 .loc 1 926 0
 2557 003c 391D     	 add r1,r7,#4
 2558 003e 0988     	 ldrh r1,[r1]
 2559 0040 F81D     	 add r0,r7,#7
 2560 0042 0078     	 ldrb r0,[r0]
 2561 0044 4000     	 lsl r0,r0,#1
 2562 0046 8140     	 lsl r1,r1,r0
 925:../Libraries/XMCLib/src/xmc1_scu.c ****                           (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
 2563              	 .loc 1 925 0
 2564 0048 0A43     	 orr r2,r1
 2565 004a DA66     	 str r2,[r3,#108]
 2566 004c 18E0     	 b .L173
 2567              	.L174:
 927:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 928:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 929:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 930:../Libraries/XMCLib/src/xmc1_scu.c ****     irq_number &= 0x0fU;
 2568              	 .loc 1 930 0
 2569 004e FB1D     	 add r3,r7,#7
 2570 0050 FA1D     	 add r2,r7,#7
 2571 0052 1278     	 ldrb r2,[r2]
 2572 0054 0F21     	 mov r1,#15
 2573 0056 0A40     	 and r2,r1
 2574 0058 1A70     	 strb r2,[r3]
 931:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * S
 2575              	 .loc 1 931 0
 2576 005a 0B4B     	 ldr r3,.L176
 2577 005c 0A4A     	 ldr r2,.L176
 2578 005e 126F     	 ldr r2,[r2,#112]
 2579 0060 F91D     	 add r1,r7,#7
 2580 0062 0978     	 ldrb r1,[r1]
 2581 0064 4900     	 lsl r1,r1,#1
 2582 0066 081C     	 mov r0,r1
 2583 0068 0321     	 mov r1,#3
 2584 006a 8140     	 lsl r1,r1,r0
 2585 006c C943     	 mvn r1,r1
 2586 006e 0A40     	 and r2,r1
 932:../Libraries/XMCLib/src/xmc1_scu.c ****                           (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
 2587              	 .loc 1 932 0
 2588 0070 391D     	 add r1,r7,#4
 2589 0072 0988     	 ldrh r1,[r1]
 2590 0074 F81D     	 add r0,r7,#7
 2591 0076 0078     	 ldrb r0,[r0]
 2592 0078 4000     	 lsl r0,r0,#1
 2593 007a 8140     	 lsl r1,r1,r0
 931:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * S
 2594              	 .loc 1 931 0
 2595 007c 0A43     	 orr r2,r1
 2596 007e 1A67     	 str r2,[r3,#112]
 2597              	.L173:
 933:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 934:../Libraries/XMCLib/src/xmc1_scu.c **** }
 2598              	 .loc 1 934 0
 2599 0080 BD46     	 mov sp,r7
 2600 0082 02B0     	 add sp,sp,#8
 2601              	 
 2602 0084 80BD     	 pop {r7,pc}
 2603              	.L177:
 2604 0086 C046     	 .align 2
 2605              	.L176:
 2606 0088 00000140 	 .word 1073807360
 2607              	 .cfi_endproc
 2608              	.LFE103:
 2610              	 .text
 2611              	.Letext0:
 2612              	 .file 2 "n:\\eecs 473\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2613              	 .file 3 "n:\\eecs 473\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2614              	 .file 4 "N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 2615              	 .file 5 "N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc/xmc_scu.h"
 2616              	 .file 6 "N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc/xmc1_scu.h"
 2617              	 .file 7 "N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc1_scu.c
    {standard input}:18     .bss.event_handler_list:00000000 $d
    {standard input}:21     .bss.event_handler_list:00000000 event_handler_list
    {standard input}:24     .data.event_masks:00000000 $d
    {standard input}:27     .data.event_masks:00000000 event_masks
    {standard input}:35     .text.XMC_SCU_CalcTSEVAR:00000000 $t
    {standard input}:39     .text.XMC_SCU_CalcTSEVAR:00000000 XMC_SCU_CalcTSEVAR
    {standard input}:106    .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 $t
    {standard input}:111    .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 XMC_SCU_INTERRUPT_EnableEvent
    {standard input}:156    .text.XMC_SCU_INTERRUPT_EnableEvent:00000030 $d
    {standard input}:161    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 $t
    {standard input}:166    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 XMC_SCU_INTERRUPT_DisableEvent
    {standard input}:213    .text.XMC_SCU_INTERRUPT_DisableEvent:00000034 $d
    {standard input}:218    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 $t
    {standard input}:223    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 XMC_SCU_INTERRUPT_TriggerEvent
    {standard input}:268    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000030 $d
    {standard input}:273    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 $t
    {standard input}:278    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 XMC_SCU_INTERUPT_GetEventStatus
    {standard input}:332    .text.XMC_SCU_INTERUPT_GetEventStatus:00000040 $d
    {standard input}:337    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 $t
    {standard input}:342    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 XMC_SCU_INTERRUPT_ClearEventStatus
    {standard input}:387    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000030 $d
    {standard input}:392    .text.XMC_SCU_LockProtectedBits:00000000 $t
    {standard input}:397    .text.XMC_SCU_LockProtectedBits:00000000 XMC_SCU_LockProtectedBits
    {standard input}:420    .text.XMC_SCU_LockProtectedBits:00000010 $d
    {standard input}:425    .text.XMC_SCU_UnlockProtectedBits:00000000 $t
    {standard input}:430    .text.XMC_SCU_UnlockProtectedBits:00000000 XMC_SCU_UnlockProtectedBits
    {standard input}:462    .text.XMC_SCU_UnlockProtectedBits:0000001c $d
    {standard input}:467    .text.XMC_SCU_SupplyMonitorInit:00000000 $t
    {standard input}:472    .text.XMC_SCU_SupplyMonitorInit:00000000 XMC_SCU_SupplyMonitorInit
    {standard input}:573    .text.XMC_SCU_SupplyMonitorInit:00000084 $d
    {standard input}:579    .text.XMC_SCU_SetTempLowLimit:00000000 $t
    {standard input}:584    .text.XMC_SCU_SetTempLowLimit:00000000 XMC_SCU_SetTempLowLimit
    {standard input}:641    .text.XMC_SCU_SetTempLowLimit:00000044 $d
    {standard input}:646    .text.XMC_SCU_SetTempHighLimit:00000000 $t
    {standard input}:651    .text.XMC_SCU_SetTempHighLimit:00000000 XMC_SCU_SetTempHighLimit
    {standard input}:708    .text.XMC_SCU_SetTempHighLimit:00000044 $d
    {standard input}:713    .text.XMC_SCU_SetRawTempLimits:00000000 $t
    {standard input}:718    .text.XMC_SCU_SetRawTempLimits:00000000 XMC_SCU_SetRawTempLimits
    {standard input}:753    .text.XMC_SCU_SetRawTempLimits:00000020 $d
    {standard input}:758    .text.XMC_SCU_StartTempMeasurement:00000000 $t
    {standard input}:763    .text.XMC_SCU_StartTempMeasurement:00000000 XMC_SCU_StartTempMeasurement
    {standard input}:791    .text.XMC_SCU_StartTempMeasurement:00000018 $d
    {standard input}:796    .text.XMC_SCU_StopTempMeasurement:00000000 $t
    {standard input}:801    .text.XMC_SCU_StopTempMeasurement:00000000 XMC_SCU_StopTempMeasurement
    {standard input}:829    .text.XMC_SCU_StopTempMeasurement:00000018 $d
    {standard input}:834    .text.XMC_SCU_HighTemperature:00000000 $t
    {standard input}:839    .text.XMC_SCU_HighTemperature:00000000 XMC_SCU_HighTemperature
    {standard input}:868    .text.XMC_SCU_HighTemperature:0000001c $d
    {standard input}:873    .text.XMC_SCU_LowTemperature:00000000 $t
    {standard input}:878    .text.XMC_SCU_LowTemperature:00000000 XMC_SCU_LowTemperature
    {standard input}:903    .text.XMC_SCU_LowTemperature:00000014 $d
    {standard input}:908    .text.XMC_SCU_GetTemperature:00000000 $t
    {standard input}:913    .text.XMC_SCU_GetTemperature:00000000 XMC_SCU_GetTemperature
    {standard input}:945    .text.XMC_SCU_GetTemperature:0000001c $d
    {standard input}:950    .text.XMC_SCU_CalcTemperature:00000000 $t
    {standard input}:955    .text.XMC_SCU_CalcTemperature:00000000 XMC_SCU_CalcTemperature
    {standard input}:982    .text.XMC_SCU_CLOCK_Init:00000000 $t
    {standard input}:987    .text.XMC_SCU_CLOCK_Init:00000000 XMC_SCU_CLOCK_Init
    {standard input}:1563   .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000000 XMC_SCU_CLOCK_ScaleMCLKFrequency
    {standard input}:1215   .text.XMC_SCU_CLOCK_Init:00000130 $d
    {standard input}:1228   .text.XMC_SCU_CLOCK_SetRtcClockSource:00000000 $t
    {standard input}:1233   .text.XMC_SCU_CLOCK_SetRtcClockSource:00000000 XMC_SCU_CLOCK_SetRtcClockSource
    {standard input}:1270   .text.XMC_SCU_CLOCK_SetRtcClockSource:00000028 $d
    {standard input}:1276   .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000000 $t
    {standard input}:1281   .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000000 XMC_SCU_CLOCK_SetFastPeripheralClockSource
    {standard input}:1318   .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000028 $d
    {standard input}:1324   .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 $t
    {standard input}:1329   .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 XMC_SCU_CLOCK_GatePeripheralClock
    {standard input}:1364   .text.XMC_SCU_CLOCK_GatePeripheralClock:00000024 $d
    {standard input}:1369   .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 $t
    {standard input}:1374   .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 XMC_SCU_CLOCK_UngatePeripheralClock
    {standard input}:1419   .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000030 $d
    {standard input}:1424   .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 $t
    {standard input}:1429   .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 XMC_SCU_CLOCK_IsPeripheralClockGated
    {standard input}:1462   .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000020 $d
    {standard input}:1468   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000000 $t
    {standard input}:1473   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000000 XMC_SCU_CLOCK_SetMCLKFrequency
    {standard input}:1551   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000070 $d
    {standard input}:1558   .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000000 $t
    {standard input}:1776   .text.XMC_SCU_CLOCK_lFrequencyDownScaling:00000000 XMC_SCU_CLOCK_lFrequencyDownScaling
    {standard input}:1700   .text.XMC_SCU_CLOCK_lFrequencyUpScaling:00000000 XMC_SCU_CLOCK_lFrequencyUpScaling
    {standard input}:1688   .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:000000ac $d
    {standard input}:1696   .text.XMC_SCU_CLOCK_lFrequencyUpScaling:00000000 $t
    {standard input}:1765   .text.XMC_SCU_CLOCK_lFrequencyUpScaling:00000048 $d
    {standard input}:1772   .text.XMC_SCU_CLOCK_lFrequencyDownScaling:00000000 $t
    {standard input}:1849   .text.XMC_SCU_CLOCK_lFrequencyDownScaling:00000050 $d
    {standard input}:1856   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 $t
    {standard input}:1861   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetPeripheralClockFrequency
    {standard input}:1884   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000010 $d
    {standard input}:1889   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000000 $t
    {standard input}:1894   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetFastPeripheralClockFrequency
    {standard input}:1925   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000020 $d
    {standard input}:1932   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000000 $t
    {standard input}:1937   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000000 XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature
    {standard input}:2012   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000068 $d
    {standard input}:2021   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 $t
    {standard input}:2026   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 XMC_SCU_INTERRUPT_SetEventHandler
    {standard input}:2132   .text.XMC_SCU_INTERRUPT_SetEventHandler:0000008c $d
    {standard input}:2137   .text.XMC_SCU_IRQHandler:00000000 $t
    {standard input}:2142   .text.XMC_SCU_IRQHandler:00000000 XMC_SCU_IRQHandler
    {standard input}:2301   .text.XMC_SCU_IRQHandler:000000f4 $d
    {standard input}:2307   .text.XMC_SCU_SetBMI:00000000 $t
    {standard input}:2312   .text.XMC_SCU_SetBMI:00000000 XMC_SCU_SetBMI
    {standard input}:2357   .text.XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration:00000000 $t
    {standard input}:2362   .text.XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration:00000000 XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration
    {standard input}:2416   .text.XMC_SCU_CLOCK_EnableDCO1ExtRefCalibration:00000048 $d
    {standard input}:2421   .text.XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration:00000000 $t
    {standard input}:2426   .text.XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration:00000000 XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration
    {standard input}:2459   .text.XMC_SCU_CLOCK_DisableDCO1ExtRefCalibration:00000020 $d
    {standard input}:2464   .text.XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady:00000000 $t
    {standard input}:2469   .text.XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady:00000000 XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady
    {standard input}:2501   .text.XMC_SCU_CLOCK_IsDCO1ExtRefCalibrationReady:00000020 $d
    {standard input}:2506   .text.XMC_SCU_SetInterruptControl:00000000 $t
    {standard input}:2511   .text.XMC_SCU_SetInterruptControl:00000000 XMC_SCU_SetInterruptControl
    {standard input}:2606   .text.XMC_SCU_SetInterruptControl:00000088 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
OSCHP_GetFrequency
__aeabi_uidiv
SystemCoreClockUpdate
SystemCoreClock
__aeabi_idiv
