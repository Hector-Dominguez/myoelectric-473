   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_vadc.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_VADC_GROUP_ExternalMuxControlInit,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_VADC_GROUP_ExternalMuxControlInit:
  23              	.LFB88:
  24              	 .file 1 "N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc/xmc_vadc.h"
   1:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2017-08-14
   4:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
   7:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.                        
  11:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                             
  12:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * following conditions are met:   
  14:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  15:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer.                        
  17:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  18:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  21:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  24:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  32:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
  35:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  37:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  38:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  39:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  40:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  41:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *      
  42:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  43:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   
  45:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  46:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  51:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  52:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  54:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  57:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  61:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  70:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  71:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  72:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  73:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  74:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  75:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  80:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  81:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  82:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  87:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  88:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  89:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  90:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  91:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  92:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR. 
  93:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  94:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-06-17:
  95:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
  96:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  97:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs added are:
  98:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  99:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-02-06:
 107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new functions to remove channels from background request source, XMC_VADC_GLOBAL_Bac
 108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-06-24:
 110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new function XMC_VADC_GLOBAL_SHS_SetAnalogReference() for XMC1 family
 111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-08-14:
 113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GLOBAL_DETAILED_RESULT_t
 114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *       You can cast the return of XMC_VADC_GLOBAL_GetDetailedResult() to a varible of type XMC_VA
 115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_SetAnalogReference() to update AREF bitfield correctly
 116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond 
 118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
 122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_common.h>
 128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_scu.h>
 129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
 130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
 146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   
 386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   
 413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 634:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 635:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 636:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 637:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 638:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 639:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 640:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 641:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 642:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 643:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 644:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 645:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 646:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 647:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 648:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 649:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 650:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 651:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 652:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 653:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 654:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 655:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 656:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 657:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 658:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 659:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 660:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 661:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 662:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 663:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 664:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 665:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 666:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 667:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 668:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 669:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 670:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 671:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 672:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 673:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 674:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 675:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 676:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 677:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 678:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 679:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 680:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 681:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 682:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 683:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 684:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 685:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 686:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 687:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 688:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 689:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 690:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 691:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 692:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 693:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 694:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 695:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 696:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 697:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 698:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** */
 699:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 700:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 701:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 704:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 705:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 706:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 707:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 708:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 709:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 710:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 711:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 712:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 713:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 714:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 715:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
 716:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 717:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_AREF
 718:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 719:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_EXTERNAL_VDD_UPPER_RANGE = 0 << SHS_SHSCFG_AREF_Pos, /**< External refer
 720:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_UPPER_RANGE = 2 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 721:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_LOWER_RANGE = 3 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 722:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_AREF_t;
 723:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 724:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 725:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 726:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 727:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 728:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 729:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 730:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 731:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 732:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 733:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 734:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 735:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 736:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 737:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 738:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 739:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 740:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 741:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 742:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 743:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 744:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 745:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 746:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 747:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 748:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 749:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 750:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 751:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 752:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 753:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 754:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 755:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 756:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 757:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 758:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 759:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 760:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 761:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 762:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 763:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 764:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 765:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 766:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 767:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 768:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 769:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 770:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 771:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 772:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 773:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 774:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 775:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the ready signal selection
 776:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 777:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 778:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 779:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 780:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 781:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 782:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 783:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 784:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SYNCTR_EVAL_t;
 785:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 786:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 787:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 788:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 789:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 790:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 791:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma push
 792:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma anon_unions
 793:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 794:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning 586
 795:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 796:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 797:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 798:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 799:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 800:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 801:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 802:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 803:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 804:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 805:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 806:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 807:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 808:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 809:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 810:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 811:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 812:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 813:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 814:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 815:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 816:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 817:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 818:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 819:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 820:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 821:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 822:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 823:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 824:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 825:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 826:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 827:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 828:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 829:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 830:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 831:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 832:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 833:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asctrl;
 834:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 835:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 836:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 837:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 838:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 839:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 2;
 840:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 841:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 842:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 843:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 844:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 845:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 26;
 846:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 847:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asmr;
 848:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 849:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 850:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 851:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 852:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 853:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 854:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 855:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 856:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 857:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 858:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 859:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 860:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 861:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 862:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 863:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 864:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 865:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 866:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 2;
 867:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 868:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 869:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 870:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 871:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 872:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 873:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 874:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 875:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 876:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 4;
 877:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 878:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 879:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 880:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 881:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 6;
 882:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 883:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 884:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 885:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 886:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t chctr;
 887:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 888:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 889:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 890:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 891:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 892:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 8;
 893:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 894:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 895:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 896:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 897:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 898:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 899:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 900:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 901:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 902:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 903:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 904:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 905:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 906:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 907:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 908:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 909:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 910:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 911:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 912:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 913:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 914:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 915:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 916:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 917:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 918:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 12;
 919:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 920:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bfl;
 921:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 922:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 923:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 924:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 925:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 926:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 927:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 928:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 929:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 930:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 931:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 932:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 933:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 934:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 935:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t                           : 16;
 936:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 937:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bflc;
 938:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 939:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 940:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 941:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 942:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 943:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 944:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 945:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 946:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 947:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 948:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 949:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 950:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 951:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 952:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 953:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 954:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 955:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 956:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 957:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 958:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 959:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 24;
 960:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 961:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 962:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qinr0;
 963:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 964:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 965:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 966:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 967:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 968:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 969:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 970:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 971:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 972:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 973:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 974:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 975:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 976:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 977:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 978:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 979:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 980:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 981:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 982:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 983:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 984:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 985:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 986:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 987:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 988:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 989:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 990:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 991:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 992:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 993:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 994:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 995:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 996:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
 997:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 998:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 999:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qctrl0;
1000:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1001:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1002:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1003:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1004:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1005:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 2;
1006:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
1007:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 29;
1008:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1009:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qmr0;
1010:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1011:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
1012:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1013:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1014:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1015:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
1016:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1017:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1018:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
1019:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1020:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1021:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1022:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1023:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1024:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1025:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1026:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1027:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1028:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1029:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1030:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1031:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1032:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1033:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1034:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1035:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1036:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1037:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1038:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 16;
1039:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1040:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1041:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globiclass;
1042:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1043:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1044:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1045:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1046:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1047:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1048:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1049:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1050:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1051:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1052:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1053:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1054:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1055:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1056:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
1057:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 2;
1058:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
1059:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
1060:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 5;
1061:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 17;
1062:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1063:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globcfg;
1064:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1065:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1066:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1067:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1068:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1069:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1070:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1071:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1072:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1073:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1074:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1075:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1076:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1077:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1078:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1079:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1080:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1081:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1082:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1083:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globbound;
1084:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1085:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1086:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1087:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1088:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1089:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1090:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1091:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1092:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1093:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1094:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1095:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1096:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1097:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1098:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1099:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 6;
1100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globrcr;
1103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 2;
1110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 28;
1112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t clc;
1114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_iclass0;
1142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 13;
1159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 5;
1164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 1;
1173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 2;
1175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_bound;
1201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 4;
1207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 1;
1209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 24;
1212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 2;
1234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_rcr;
1240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :6;
1296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :10;
1298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif      
1299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :20;
1301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed global result structure
1313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_DETAILED_RESULT
1315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t group_number             :4;   /**< Indicates the group to which the channel_number 
1322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_DETAILED_RESULT_t;
1332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed channel result structure
1335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_DETAILED_RESULT
1337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DETAILED_RESULT_t;
1354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
1355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma pop
1359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning restore
1361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
1591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1634:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1635:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1636:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1637:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1638:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1639:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1640:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1641:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1642:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1643:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1644:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1645:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1646:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1647:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1648:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1649:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1650:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1651:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1652:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1653:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1654:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1655:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1656:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1657:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1658:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1659:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1660:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1661:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1662:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1663:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1664:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1665:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1666:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1667:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1668:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1669:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1670:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1671:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1672:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1673:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1674:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1675:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1676:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1677:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1678:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1679:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1680:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1681:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1682:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1683:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1684:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1685:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1686:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1687:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1688:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1689:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1690:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1691:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1692:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1693:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1694:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1695:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1696:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1697:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1698:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1699:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1700:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1701:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1704:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1705:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1706:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1707:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1708:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1709:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1710:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1711:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1712:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1713:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1714:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1715:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1716:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1717:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1718:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1719:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
1720:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1721:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1722:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1723:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1724:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1725:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1726:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1727:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const uint16_t boundary_value); 
1728:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1729:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1730:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1731:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1732:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1733:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1734:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1735:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1736:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1737:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1738:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1739:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1740:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1741:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1742:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1743:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b emuxif.
1744:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1745:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1746:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1747:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1748:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1749:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1750:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1751:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1752:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1753:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1754:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1755:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1756:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1757:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1758:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1759:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1760:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1761:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1762:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @note You can cast the return to a varible of type XMC_VADC_GLOBAL_DETAILED_RESULT_t to easily a
1763:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1764:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1765:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1766:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1767:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1768:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1769:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1770:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1771:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  return(global_ptr->GLOBRES);
1772:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1773:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1774:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1775:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1776:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1777:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1778:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1779:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1780:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1781:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1782:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1783:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1784:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1785:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1786:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1787:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1788:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1789:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1790:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1791:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1792:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1793:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1794:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1795:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1796:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1797:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1798:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1799:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1800:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1801:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1802:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1803:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1804:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1805:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1806:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1807:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1808:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1809:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1810:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1811:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1812:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1813:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1814:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1815:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1816:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1817:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1818:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1819:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1820:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1821:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1822:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1823:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1824:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1825:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1826:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1827:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1828:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1829:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1830:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1831:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1832:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1833:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1834:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1835:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1836:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1837:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1838:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1839:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1840:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1841:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \a event_type.
1842:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1843:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1844:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1845:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1846:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1847:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1848:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1849:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1850:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1851:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1852:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1853:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1854:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1855:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1856:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1857:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1858:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1859:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1860:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1861:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1862:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1863:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1864:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1865:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1866:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1867:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1868:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1869:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1870:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1871:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1872:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1873:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1874:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1875:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1876:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1877:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1878:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1879:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1880:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1881:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1882:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1883:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1884:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1885:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1886:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1887:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1888:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1889:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1890:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1891:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1892:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1893:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1894:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1895:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1896:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1897:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1898:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1899:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1900:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1901:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1902:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1903:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1904:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1905:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1906:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * corresponding \a sr line.
1907:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1908:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1909:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1910:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1911:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1912:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1913:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1914:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1915:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1916:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1917:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1918:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1919:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1920:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1921:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1922:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1923:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1924:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1925:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1926:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1927:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1928:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1929:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1930:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1931:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1932:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param aref    Analog reference used for conversions. Refer @ref XMC_VADC_GLOBAL_SHS_AREF_t enum
1933:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1934:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1935:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1936:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1937:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
1938:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1939:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1940:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1941:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1942:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetAnalogReference(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1943:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             const XMC_VADC_GLOBAL_SHS_AREF_t aref)
1944:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1945:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1946:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1947:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1948:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref | SHS_SHS
1949:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1950:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1951:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1952:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1953:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1954:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1955:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1956:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return None
1957:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1958:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1959:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1960:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1961:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * The stepper sequence is configured using this API.
1962:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1963:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1964:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1965:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1966:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1967:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1968:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1969:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1970:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1971:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1972:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1973:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1974:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1975:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1976:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1977:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1978:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1979:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1980:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1981:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1982:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *              returns false if the analog converter is powered down
1983:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1984:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1985:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the converter status.<BR>\n
1986:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1987:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1988:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1989:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1990:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1991:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1992:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1993:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1994:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1995:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
1996:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1997:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1998:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1999:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2000:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2001:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2002:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2003:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2004:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2005:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2006:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2007:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2008:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
2009:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2010:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2011:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2012:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2013:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2014:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
2015:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2016:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2017:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2018:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
2019:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2020:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2021:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2022:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2023:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2024:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
2025:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2026:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2027:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2028:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2029:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2030:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
2031:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2032:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2033:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2034:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2035:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
2036:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
2037:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2038:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2039:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2040:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2041:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
2042:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2043:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
2044:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
2045:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2046:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2047:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2048:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2049:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2050:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
2051:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint8_t sst_value);
2052:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2053:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2054:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2055:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2056:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
2057:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
2058:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2059:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2060:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2061:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
2062:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
2063:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the Sample and hold converter.
2064:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2065:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2066:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2067:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2068:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
2069:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2070:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
2071:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2072:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
2073:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
2074:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2075:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
2076:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
2077:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2078:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2079:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2080:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2081:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_value gain value possible
2082:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
2083:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2084:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
2085:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2086:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2087:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2088:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
2089:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
2090:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2091:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2092:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2093:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2094:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2095:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t gain_value,
2096:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
2097:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t ch_num);
2098:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2099:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
2103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
2104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
2108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
2109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
2110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
2111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        uint32_t max_calibration_time)
2117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          XMC_VADC_GROUP_INDEX_t group_num);
2140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                           XMC_VADC_GROUP_INDEX_t group_num);
2155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
2172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
2190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    uint8_t offset_calibration_value);
2192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_GROUP_INDEX_t group_num,
2212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
2213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                            uint8_t ch_num);
2214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               XMC_VADC_SHS_LOOP_CH_t loop_select)
2230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                XMC_VADC_SHS_LOOP_CH_t loop_select)
2254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  program.
2279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter must be turned on.
2345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * in these channels.
2403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group waiting for ready signal
2412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_waiting_group  The VADC Group which expects a ready signal to start it's conversion.
2413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_origin_group  The VADC Group from which the eval_waiting_group will expect a ready s
2414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets the ready signal in the eval_waiting_group .<BR>\n
2418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion all the slaves participating need to configure the ready signal.
2419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A slave group will also need to configure the ready signals coming from the other slave groups.
2420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync.slave's EVAL Bits (GxSYNCTR.EVALy).
2421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
2426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_waiting_group,
2427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_origin_group);
2428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *         uint32_t EVAL bits for the group
2434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Get the Eval bits of the group.<BR>\n
2437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would return the Sync EVAL Bits (GxSYNCTR.EVALy) which can be used to set in 
2439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr)
2444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return( group_ptr->SYNCTR & eval_mask);
2454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_mask  mask to configure the eval bits
2459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Use XMC_VADC_SYNCTR_EVAL_t to create the mask.
2460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the Eval bits of the group.<BR>\n
2464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync EVAL Bits (GxSYNCTR.EVALy).
2466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_SetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr, uint32_t 
2471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR &= ~(eval_mask);
2481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR |= mask;
2482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the slaves.
2497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sampling + converting.
2527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, 
2555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary0, 
2556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
2569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint16_t boundary_value); 
2576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr, 
2593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint32_t sr_num, 
2594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_IRQ_t type);
2595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                            const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
  25              	 .loc 1 2613 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 84B0     	 sub sp,sp,#16
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 24
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
  39 0008 3960     	 str r1,[r7]
2614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t   emux_config;
2615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
  40              	 .loc 1 2618 0
  41 000a 3B1C     	 mov r3,r7
  42 000c 1B78     	 ldrb r3,[r3]
  43 000e 5B07     	 lsl r3,r3,#29
  44 0010 5B0F     	 lsr r3,r3,#29
  45 0012 DBB2     	 uxtb r3,r3
  46 0014 1A1C     	 mov r2,r3
2619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  47              	 .loc 1 2619 0
  48 0016 BB1C     	 add r3,r7,#2
  49 0018 1B88     	 ldrh r3,[r3]
  50 001a 9B05     	 lsl r3,r3,#22
  51 001c 9B0D     	 lsr r3,r3,#22
  52 001e 9BB2     	 uxth r3,r3
  53 0020 1B04     	 lsl r3,r3,#16
2618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  54              	 .loc 1 2618 0
  55 0022 1343     	 orr r3,r2
  56 0024 FB60     	 str r3,[r7,#12]
2620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
  57              	 .loc 1 2621 0
  58 0026 7A68     	 ldr r2,[r7,#4]
  59 0028 F823     	 mov r3,#248
  60 002a 5B00     	 lsl r3,r3,#1
  61 002c F968     	 ldr r1,[r7,#12]
  62 002e D150     	 str r1,[r2,r3]
2622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  63              	 .loc 1 2622 0
  64 0030 FB1C     	 add r3,r7,#3
  65 0032 1B78     	 ldrb r3,[r3]
  66 0034 DB06     	 lsl r3,r3,#27
  67 0036 DB0F     	 lsr r3,r3,#31
  68 0038 DBB2     	 uxtb r3,r3
  69 003a 1A07     	 lsl r2,r3,#28
2623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
  70              	 .loc 1 2623 0
  71 003c FB1C     	 add r3,r7,#3
  72 003e 1B78     	 ldrb r3,[r3]
  73 0040 1B07     	 lsl r3,r3,#28
  74 0042 9B0F     	 lsr r3,r3,#30
  75 0044 DBB2     	 uxtb r3,r3
  76 0046 9B06     	 lsl r3,r3,#26
2622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  77              	 .loc 1 2622 0
  78 0048 1A43     	 orr r2,r3
2624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
  79              	 .loc 1 2624 0
  80 004a FB1C     	 add r3,r7,#3
  81 004c 1B78     	 ldrb r3,[r3]
  82 004e 9B06     	 lsl r3,r3,#26
  83 0050 DB0F     	 lsr r3,r3,#31
  84 0052 DBB2     	 uxtb r3,r3
  85 0054 5B07     	 lsl r3,r3,#29
2622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  86              	 .loc 1 2622 0
  87 0056 1343     	 orr r3,r2
  88 0058 FB60     	 str r3,[r7,#12]
2625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
  89              	 .loc 1 2627 0
  90 005a FB1C     	 add r3,r7,#3
  91 005c 1B78     	 ldrb r3,[r3]
  92 005e 5B06     	 lsl r3,r3,#25
  93 0060 DB0F     	 lsr r3,r3,#31
  94 0062 DBB2     	 uxtb r3,r3
  95 0064 9B07     	 lsl r3,r3,#30
  96 0066 FA68     	 ldr r2,[r7,#12]
  97 0068 1343     	 orr r3,r2
  98 006a FB60     	 str r3,[r7,#12]
2628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
  99              	 .loc 1 2629 0
 100 006c 7A68     	 ldr r2,[r7,#4]
 101 006e F823     	 mov r3,#248
 102 0070 5B00     	 lsl r3,r3,#1
 103 0072 D258     	 ldr r2,[r2,r3]
 104 0074 FB68     	 ldr r3,[r7,#12]
 105 0076 1343     	 orr r3,r2
 106 0078 8022     	 mov r2,#128
 107 007a 1206     	 lsl r2,r2,#24
 108 007c 1A43     	 orr r2,r3
 109 007e 111C     	 mov r1,r2
 110 0080 7A68     	 ldr r2,[r7,#4]
 111 0082 F823     	 mov r3,#248
 112 0084 5B00     	 lsl r3,r3,#1
 113 0086 D150     	 str r1,[r2,r3]
2630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
 114              	 .loc 1 2630 0
 115 0088 BD46     	 mov sp,r7
 116 008a 04B0     	 add sp,sp,#16
 117              	 
 118 008c 80BD     	 pop {r7,pc}
 119              	 .cfi_endproc
 120              	.LFE88:
 122 008e C046     	 .section .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot,"ax",%progbits
 123              	 .align 2
 124              	 .code 16
 125              	 .thumb_func
 127              	XMC_VADC_GROUP_ScanEnableArbitrationSlot:
 128              	.LFB91:
2631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2634:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2635:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2636:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2637:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2638:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param node    Service Request node Id
2639:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2640:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2641:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2642:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2643:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2644:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2645:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2646:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2647:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2648:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2649:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2650:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2651:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2652:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const uint8_t boundary_flag_num,
2653:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const XMC_VADC_BOUNDARY_NODE_t node);
2654:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2655:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2656:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2657:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2658:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2659:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2660:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2661:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2662:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2663:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2664:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2665:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2666:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2667:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2668:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2669:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2670:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2671:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2672:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2673:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2674:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2675:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2676:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2677:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2678:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2679:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2680:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2681:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2682:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2683:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2684:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2685:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2686:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2687:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2688:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const XMC_VADC_CHANNEL_CONV_t c
2689:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2690:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2691:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2692:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected", 
2693:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2694:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2695:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2696:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2697:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
2698:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2699:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   }
2700:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2701:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return (input_value);
2702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2704:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2705:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2706:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2707:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2708:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2709:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2710:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2711:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2712:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2713:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2714:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2715:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2716:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2717:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2718:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2719:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2720:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2721:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2722:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2723:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2724:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2725:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2726:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2727:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2728:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2729:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2730:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2731:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2732:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2733:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2734:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2735:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2736:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2737:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2738:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2739:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2740:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2741:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2742:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 129              	 .loc 1 2742 0
 130              	 .cfi_startproc
 131 0000 80B5     	 push {r7,lr}
 132              	.LCFI3:
 133              	 .cfi_def_cfa_offset 8
 134              	 .cfi_offset 7,-8
 135              	 .cfi_offset 14,-4
 136 0002 82B0     	 sub sp,sp,#8
 137              	.LCFI4:
 138              	 .cfi_def_cfa_offset 16
 139 0004 00AF     	 add r7,sp,#0
 140              	.LCFI5:
 141              	 .cfi_def_cfa_register 7
 142 0006 7860     	 str r0,[r7,#4]
2743:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2744:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
 143              	 .loc 1 2744 0
 144 0008 7B68     	 ldr r3,[r7,#4]
 145 000a 8422     	 mov r2,#132
 146 000c 9B58     	 ldr r3,[r3,r2]
 147 000e 8022     	 mov r2,#128
 148 0010 9204     	 lsl r2,r2,#18
 149 0012 1A43     	 orr r2,r3
 150 0014 7B68     	 ldr r3,[r7,#4]
 151 0016 8421     	 mov r1,#132
 152 0018 5A50     	 str r2,[r3,r1]
2745:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
 153              	 .loc 1 2745 0
 154 001a BD46     	 mov sp,r7
 155 001c 02B0     	 add sp,sp,#8
 156              	 
 157 001e 80BD     	 pop {r7,pc}
 158              	 .cfi_endproc
 159              	.LFE91:
 161              	 .section .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot,"ax",%progbits
 162              	 .align 2
 163              	 .code 16
 164              	 .thumb_func
 166              	XMC_VADC_GROUP_ScanDisableArbitrationSlot:
 167              	.LFB92:
2746:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2747:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2748:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2749:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2750:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2751:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2752:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2753:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2754:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2755:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2756:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2757:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2758:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2759:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2760:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2761:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2762:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2763:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 168              	 .loc 1 2763 0
 169              	 .cfi_startproc
 170 0000 80B5     	 push {r7,lr}
 171              	.LCFI6:
 172              	 .cfi_def_cfa_offset 8
 173              	 .cfi_offset 7,-8
 174              	 .cfi_offset 14,-4
 175 0002 82B0     	 sub sp,sp,#8
 176              	.LCFI7:
 177              	 .cfi_def_cfa_offset 16
 178 0004 00AF     	 add r7,sp,#0
 179              	.LCFI8:
 180              	 .cfi_def_cfa_register 7
 181 0006 7860     	 str r0,[r7,#4]
2764:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2765:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 182              	 .loc 1 2765 0
 183 0008 7B68     	 ldr r3,[r7,#4]
 184 000a 8422     	 mov r2,#132
 185 000c 9B58     	 ldr r3,[r3,r2]
 186 000e 044A     	 ldr r2,.L4
 187 0010 1A40     	 and r2,r3
 188 0012 7B68     	 ldr r3,[r7,#4]
 189 0014 8421     	 mov r1,#132
 190 0016 5A50     	 str r2,[r3,r1]
2766:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
 191              	 .loc 1 2766 0
 192 0018 BD46     	 mov sp,r7
 193 001a 02B0     	 add sp,sp,#8
 194              	 
 195 001c 80BD     	 pop {r7,pc}
 196              	.L5:
 197 001e C046     	 .align 2
 198              	.L4:
 199 0020 FFFFFFFD 	 .word -33554433
 200              	 .cfi_endproc
 201              	.LFE92:
 203              	 .section .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot,"ax",%progbits
 204              	 .align 2
 205              	 .code 16
 206              	 .thumb_func
 208              	XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:
 209              	.LFB108:
2767:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2768:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2769:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2770:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2771:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2772:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2773:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2774:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2775:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2776:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2777:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2778:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2779:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2780:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2781:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2782:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2783:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2784:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2785:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2786:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2787:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2788:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2789:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2790:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2791:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2792:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2793:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2794:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2795:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2796:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2797:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2798:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2799:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2800:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2801:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2802:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2803:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2804:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2805:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2806:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2807:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2808:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2809:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2810:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2811:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2812:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2813:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2814:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2815:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2816:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2817:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2818:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2819:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2820:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2821:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2822:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2823:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2824:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2825:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2826:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2827:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2828:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2829:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2830:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2831:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2832:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2833:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2834:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2835:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2836:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2837:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2838:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2839:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2840:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2841:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2842:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2843:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2844:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2845:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2846:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2847:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2848:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2849:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2850:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2851:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2852:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2853:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2854:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2855:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2856:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2857:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2858:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2859:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2860:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2861:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2862:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2863:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2864:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2865:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2866:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2867:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2868:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
2869:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2870:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2871:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2872:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2873:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2874:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2875:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2876:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2877:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2878:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2879:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2880:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2881:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2882:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2883:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2884:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2885:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2886:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2887:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2888:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2889:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2890:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2891:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2892:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2893:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2894:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2895:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2896:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2897:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2898:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2899:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2900:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2901:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2902:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2903:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2904:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2905:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2906:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2907:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2908:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2909:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2910:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2911:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2912:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2913:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2914:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2915:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2916:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2917:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2918:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2919:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2920:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2921:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2922:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2923:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2924:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2925:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2926:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2927:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2928:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2929:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2930:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2931:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2932:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2933:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2934:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2935:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2936:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2937:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2938:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2939:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2940:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2941:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2942:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2943:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2944:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2945:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2946:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2947:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2948:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2949:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2950:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2951:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2952:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2953:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2954:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2955:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2956:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2957:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2958:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2959:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2960:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2961:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2962:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2963:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
2964:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
2965:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
2966:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2967:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2968:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2969:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
2970:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2971:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
2972:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2973:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
2974:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number", 
2975:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
2976:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
2977:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2978:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2979:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2980:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2981:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
2982:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
2983:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
2984:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
2985:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
2986:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2987:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2988:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2989:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2990:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
2991:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
2992:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
2993:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2994:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2995:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2996:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
2997:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2998:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
2999:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3000:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
3001:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
3002:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3003:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3004:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3005:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3006:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3007:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3008:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3009:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3010:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3011:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3012:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
3013:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3014:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3015:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3016:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
3017:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3018:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3019:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
3020:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3021:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
3022:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3023:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3024:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3025:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
3026:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3027:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
3028:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3029:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3030:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3031:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
3032:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return  <BR>
3033:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3034:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
3035:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3036:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3037:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
3038:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3039:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3040:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3041:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
3042:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3043:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3044:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
3045:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3046:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
3047:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3048:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3049:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3050:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3051:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3052:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3053:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3054:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3055:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
3056:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3057:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3058:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3059:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3060:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3061:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3062:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3063:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3064:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3065:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
3066:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3067:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3068:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3069:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3070:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3071:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3072:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3073:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3074:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
3075:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3076:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3077:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3078:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3079:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
3080:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3081:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3082:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3083:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3084:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
3085:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3086:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3087:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3088:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3089:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3090:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3091:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3092:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3093:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3094:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3095:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
3096:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
3097:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3098:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3099:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
3102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
3104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
3105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr    Service Request Id
3110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
3115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
3116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
3117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
3118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
3123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
3131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
3132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
3133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
3134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
3137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
3141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
3143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
3152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
3153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
3154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
3155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
3156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
3159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
3165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
3170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
3175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
3176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
3177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
3178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
3183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the scan request source event .<BR>
3191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the scan request source.
3192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableEvent(XMC_VADC_GROUP_t *const group_ptr)
3199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
3201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= ((uint32_t)VADC_G_ASMR_ENSI_Msk);
3203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the scan request source event .<BR>
3212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the scan request source.
3213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableEvent(XMC_VADC_GROUP_t *const group_ptr)
3220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
3222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENSI_Msk);
3224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
3229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
3233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
3234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
3235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
3236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  conversion request from background request source
3248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 210              	 .loc 1 3263 0
 211              	 .cfi_startproc
 212 0000 80B5     	 push {r7,lr}
 213              	.LCFI9:
 214              	 .cfi_def_cfa_offset 8
 215              	 .cfi_offset 7,-8
 216              	 .cfi_offset 14,-4
 217 0002 82B0     	 sub sp,sp,#8
 218              	.LCFI10:
 219              	 .cfi_def_cfa_offset 16
 220 0004 00AF     	 add r7,sp,#0
 221              	.LCFI11:
 222              	 .cfi_def_cfa_register 7
 223 0006 7860     	 str r0,[r7,#4]
3264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 224              	 .loc 1 3265 0
 225 0008 7B68     	 ldr r3,[r7,#4]
 226 000a 8422     	 mov r2,#132
 227 000c 9B58     	 ldr r3,[r3,r2]
 228 000e 8022     	 mov r2,#128
 229 0010 D204     	 lsl r2,r2,#19
 230 0012 1A43     	 orr r2,r3
 231 0014 7B68     	 ldr r3,[r7,#4]
 232 0016 8421     	 mov r1,#132
 233 0018 5A50     	 str r2,[r3,r1]
3266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
 234              	 .loc 1 3266 0
 235 001a BD46     	 mov sp,r7
 236 001c 02B0     	 add sp,sp,#8
 237              	 
 238 001e 80BD     	 pop {r7,pc}
 239              	 .cfi_endproc
 240              	.LFE108:
 242              	 .section .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot,"ax",%progbits
 243              	 .align 2
 244              	 .code 16
 245              	 .thumb_func
 247              	XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:
 248              	.LFB109:
3267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     from background request source
3271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 249              	 .loc 1 3285 0
 250              	 .cfi_startproc
 251 0000 80B5     	 push {r7,lr}
 252              	.LCFI12:
 253              	 .cfi_def_cfa_offset 8
 254              	 .cfi_offset 7,-8
 255              	 .cfi_offset 14,-4
 256 0002 82B0     	 sub sp,sp,#8
 257              	.LCFI13:
 258              	 .cfi_def_cfa_offset 16
 259 0004 00AF     	 add r7,sp,#0
 260              	.LCFI14:
 261              	 .cfi_def_cfa_register 7
 262 0006 7860     	 str r0,[r7,#4]
3286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 263              	 .loc 1 3287 0
 264 0008 7B68     	 ldr r3,[r7,#4]
 265 000a 8422     	 mov r2,#132
 266 000c 9B58     	 ldr r3,[r3,r2]
 267 000e 044A     	 ldr r2,.L8
 268 0010 1A40     	 and r2,r3
 269 0012 7B68     	 ldr r3,[r7,#4]
 270 0014 8421     	 mov r1,#132
 271 0016 5A50     	 str r2,[r3,r1]
3288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
 272              	 .loc 1 3288 0
 273 0018 BD46     	 mov sp,r7
 274 001a 02B0     	 add sp,sp,#8
 275              	 
 276 001c 80BD     	 pop {r7,pc}
 277              	.L9:
 278 001e C046     	 .align 2
 279              	.L8:
 280 0020 FFFFFFFB 	 .word -67108865
 281              	 .cfi_endproc
 282              	.LFE109:
 284              	 .section .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot,"ax",%progbits
 285              	 .align 2
 286              	 .code 16
 287              	 .thumb_func
 289              	XMC_VADC_GROUP_QueueEnableArbitrationSlot:
 290              	.LFB126:
3289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             XMC_VADC_GATEMODE_t mode_sel)
3367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
3442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * current scan sequence.
3456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t grp_num,
3482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t ch_num)
3483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
3490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_mask)
3515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel to the background scan sequence.<BR>\n
3532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundRemoveChannelFromSequence(XMC_VADC_GLOBAL_t *const g
3540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                          const uint32_t grp_num,
3541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                          const uint32_t ch_num)
3542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~((uint32_t)1 << ch_num);
3549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes multiple channels to the scan sequence.<BR>\n
3564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndRemoveMultipleChannels(XMC_VADC_GLOBAL_t *const global_
3572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                    const uint32_t grp_num,
3573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                    const uint32_t ch_mask)
3574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~ch_mask;
3578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_num)
3601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return  <BR>
3613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3634:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3635:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3636:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3637:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3638:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3639:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3640:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3641:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3642:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3643:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3644:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3645:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3646:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3647:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3648:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3649:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3650:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3651:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3652:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3653:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3654:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3655:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3656:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3657:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3658:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3659:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3660:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3661:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3662:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3663:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3664:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3665:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3666:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3667:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3668:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3669:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3670:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3671:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3672:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3673:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3674:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3675:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3676:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3677:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3678:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3679:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3680:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3681:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3682:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3683:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3684:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3685:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3686:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3687:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3688:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3689:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3690:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3691:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3692:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3693:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3694:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3695:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3696:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3697:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3698:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3699:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3700:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3701:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3704:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Module Pointer", (global_ptr ==
3705:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3706:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3707:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3708:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3709:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3710:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3711:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3712:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3713:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3714:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3715:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3716:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3717:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3718:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3719:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3720:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3721:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3722:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3723:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3724:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3725:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3726:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Module Pointer", (global_ptr =
3727:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3728:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3729:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3730:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3731:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3732:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3733:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3734:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3735:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3736:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3737:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the background scan request source event .<BR>
3738:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the background scan request sou
3739:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3740:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3741:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3742:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3743:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptN
3744:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3745:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3746:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3747:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableEvent:Wrong Module Pointer", (global_ptr == VADC))
3748:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3749:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= ((uint32_t)VADC_BRSMR_ENSI_Msk);
3750:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3751:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3752:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3753:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr     Pointer to the VADC module
3754:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3755:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3756:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3757:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3758:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the background scan request source event .<BR>
3759:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the background scan request s
3760:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3761:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3762:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3763:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3764:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNo
3765:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3766:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3767:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3768:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableEvent:Wrong Module Pointer", (global_ptr == VADC))
3769:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3770:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENSI_Msk);
3771:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3772:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3773:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3774:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3775:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3776:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3777:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3778:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3779:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3780:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3781:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3782:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3783:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3784:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3785:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3786:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3787:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3788:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * source.
3789:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3790:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3791:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3792:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3793:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3794:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3795:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3796:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3797:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3798:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3799:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3800:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3801:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3802:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3803:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3804:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3805:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3806:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3807:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3808:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3809:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3810:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3811:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3812:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 291              	 .loc 1 3812 0
 292              	 .cfi_startproc
 293 0000 80B5     	 push {r7,lr}
 294              	.LCFI15:
 295              	 .cfi_def_cfa_offset 8
 296              	 .cfi_offset 7,-8
 297              	 .cfi_offset 14,-4
 298 0002 82B0     	 sub sp,sp,#8
 299              	.LCFI16:
 300              	 .cfi_def_cfa_offset 16
 301 0004 00AF     	 add r7,sp,#0
 302              	.LCFI17:
 303              	 .cfi_def_cfa_register 7
 304 0006 7860     	 str r0,[r7,#4]
3813:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3814:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 305              	 .loc 1 3814 0
 306 0008 7B68     	 ldr r3,[r7,#4]
 307 000a 8422     	 mov r2,#132
 308 000c 9B58     	 ldr r3,[r3,r2]
 309 000e 8022     	 mov r2,#128
 310 0010 5204     	 lsl r2,r2,#17
 311 0012 1A43     	 orr r2,r3
 312 0014 7B68     	 ldr r3,[r7,#4]
 313 0016 8421     	 mov r1,#132
 314 0018 5A50     	 str r2,[r3,r1]
3815:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
 315              	 .loc 1 3815 0
 316 001a BD46     	 mov sp,r7
 317 001c 02B0     	 add sp,sp,#8
 318              	 
 319 001e 80BD     	 pop {r7,pc}
 320              	 .cfi_endproc
 321              	.LFE126:
 323              	 .section .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot,"ax",%progbits
 324              	 .align 2
 325              	 .code 16
 326              	 .thumb_func
 328              	XMC_VADC_GROUP_QueueDisableArbitrationSlot:
 329              	.LFB127:
3816:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3817:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3818:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3819:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3820:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3821:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3822:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3823:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3824:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3825:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3826:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3827:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3828:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3829:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3830:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3831:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3832:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3833:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 330              	 .loc 1 3833 0
 331              	 .cfi_startproc
 332 0000 80B5     	 push {r7,lr}
 333              	.LCFI18:
 334              	 .cfi_def_cfa_offset 8
 335              	 .cfi_offset 7,-8
 336              	 .cfi_offset 14,-4
 337 0002 82B0     	 sub sp,sp,#8
 338              	.LCFI19:
 339              	 .cfi_def_cfa_offset 16
 340 0004 00AF     	 add r7,sp,#0
 341              	.LCFI20:
 342              	 .cfi_def_cfa_register 7
 343 0006 7860     	 str r0,[r7,#4]
3834:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3835:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 344              	 .loc 1 3835 0
 345 0008 7B68     	 ldr r3,[r7,#4]
 346 000a 8422     	 mov r2,#132
 347 000c 9B58     	 ldr r3,[r3,r2]
 348 000e 044A     	 ldr r2,.L12
 349 0010 1A40     	 and r2,r3
 350 0012 7B68     	 ldr r3,[r7,#4]
 351 0014 8421     	 mov r1,#132
 352 0016 5A50     	 str r2,[r3,r1]
3836:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
 353              	 .loc 1 3836 0
 354 0018 BD46     	 mov sp,r7
 355 001a 02B0     	 add sp,sp,#8
 356              	 
 357 001c 80BD     	 pop {r7,pc}
 358              	.L13:
 359 001e C046     	 .align 2
 360              	.L12:
 361 0020 FFFFFFFE 	 .word -16777217
 362              	 .cfi_endproc
 363              	.LFE127:
 365              	 .section .text.XMC_VADC_GROUP_QueueFlushEntries,"ax",%progbits
 366              	 .align 2
 367              	 .code 16
 368              	 .thumb_func
 370              	XMC_VADC_GROUP_QueueFlushEntries:
 371              	.LFB131:
3837:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3838:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3839:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3840:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3841:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3842:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3843:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3844:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3845:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3846:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3847:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3848:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3849:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3850:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3851:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3852:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3853:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3854:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3855:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3856:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3857:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3858:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3859:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3860:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3861:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3862:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3863:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3864:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3865:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3866:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3867:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3868:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3869:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3870:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3871:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3872:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3873:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3874:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3875:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3876:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3877:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3878:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, 
3879:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3880:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3881:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3882:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3883:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3884:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3885:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3886:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3887:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3888:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3889:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3890:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3891:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3892:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3893:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3894:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3895:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3896:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3897:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3898:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3899:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3900:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3901:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3902:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3903:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3904:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3905:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3906:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3907:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3908:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3909:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3910:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3911:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3912:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3913:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3914:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3915:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3916:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3917:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3918:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3919:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3920:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3921:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3922:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3923:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3924:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3925:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3926:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3927:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3928:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3929:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3930:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3931:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3932:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3933:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3934:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3935:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3936:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3937:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3938:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3939:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3940:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3941:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
3942:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3943:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3944:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3945:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3946:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3947:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3948:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3949:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3950:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3951:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3952:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3953:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3954:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3955:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3956:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3957:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3958:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3959:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3960:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3961:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <ul>
3962:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3963:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
3964:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * </ul>
3965:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3966:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3967:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3968:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3969:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
3970:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3971:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3972:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
3973:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3974:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3975:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3976:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3977:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3978:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
3979:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3980:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3981:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3982:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
3983:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
3984:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
3985:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
3986:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
3987:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to determine the queue length.
3988:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3989:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3990:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3991:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3992:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
3993:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3994:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3995:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3996:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3997:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3998:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3999:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4000:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
4001:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
4002:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4003:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
4004:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue sequence.
4005:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4006:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4007:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
4008:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4009:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
4010:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4011:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4012:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4013:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4014:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4015:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4016:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4017:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
4018:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
4019:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4020:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
4021:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * all the entries are removed from the queue.
4022:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4023:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4024:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
4025:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4026:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
4027:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 372              	 .loc 1 4027 0
 373              	 .cfi_startproc
 374 0000 80B5     	 push {r7,lr}
 375              	.LCFI21:
 376              	 .cfi_def_cfa_offset 8
 377              	 .cfi_offset 7,-8
 378              	 .cfi_offset 14,-4
 379 0002 82B0     	 sub sp,sp,#8
 380              	.LCFI22:
 381              	 .cfi_def_cfa_offset 16
 382 0004 00AF     	 add r7,sp,#0
 383              	.LCFI23:
 384              	 .cfi_def_cfa_register 7
 385 0006 7860     	 str r0,[r7,#4]
4028:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
4029:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 386              	 .loc 1 4029 0
 387 0008 7A68     	 ldr r2,[r7,#4]
 388 000a 8223     	 mov r3,#130
 389 000c 5B00     	 lsl r3,r3,#1
 390 000e D358     	 ldr r3,[r2,r3]
 391 0010 8022     	 mov r2,#128
 392 0012 D200     	 lsl r2,r2,#3
 393 0014 1A43     	 orr r2,r3
 394 0016 111C     	 mov r1,r2
 395 0018 7A68     	 ldr r2,[r7,#4]
 396 001a 8223     	 mov r3,#130
 397 001c 5B00     	 lsl r3,r3,#1
 398 001e D150     	 str r1,[r2,r3]
4030:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4031:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 399              	 .loc 1 4031 0
 400 0020 C046     	 mov r8,r8
 401              	.L15:
 402              	 .loc 1 4031 0 is_stmt 0 discriminator 1
 403 0022 7A68     	 ldr r2,[r7,#4]
 404 0024 8423     	 mov r3,#132
 405 0026 5B00     	 lsl r3,r3,#1
 406 0028 D358     	 ldr r3,[r2,r3]
 407 002a 2022     	 mov r2,#32
 408 002c 1340     	 and r3,r2
 409 002e F8D0     	 beq .L15
4032:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
4033:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     /* Wait until the queue is indeed flushed */
4034:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   }
4035:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
 410              	 .loc 1 4035 0 is_stmt 1
 411 0030 BD46     	 mov sp,r7
 412 0032 02B0     	 add sp,sp,#8
 413              	 
 414 0034 80BD     	 pop {r7,pc}
 415              	 .cfi_endproc
 416              	.LFE131:
 418 0036 C046     	 .section .rodata.g_xmc_vadc_group_array,"a",%progbits
 419              	 .align 2
 422              	g_xmc_vadc_group_array:
 423 0000 00040348 	 .word 1208157184
 424 0004 00080348 	 .word 1208158208
 425              	 .section .text.XMC_VADC_GLOBAL_EnableModule,"ax",%progbits
 426              	 .align 2
 427              	 .global XMC_VADC_GLOBAL_EnableModule
 428              	 .code 16
 429              	 .thumb_func
 431              	XMC_VADC_GLOBAL_EnableModule:
 432              	.LFB153:
 433              	 .file 2 "../Libraries/XMCLib/src/xmc_vadc.c"
   1:../Libraries/XMCLib/src/xmc_vadc.c **** /**
   2:../Libraries/XMCLib/src/xmc_vadc.c ****  * @file xmc_vadc.c
   3:../Libraries/XMCLib/src/xmc_vadc.c ****  * @date 2018-06-26
   4:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   5:../Libraries/XMCLib/src/xmc_vadc.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_vadc.c ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   9:../Libraries/XMCLib/src/xmc_vadc.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_vadc.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_vadc.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  18:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  21:../Libraries/XMCLib/src/xmc_vadc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_vadc.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_vadc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_vadc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_vadc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_vadc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_vadc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_vadc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_vadc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_vadc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_vadc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  36:../Libraries/XMCLib/src/xmc_vadc.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_vadc.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  39:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-15:
  40:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_vadc.c ****  *      
  42:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-20:
  43:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised for XMC1201 device.<br>
  44:../Libraries/XMCLib/src/xmc_vadc.c ****  *   
  45:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-04-27:
  46:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for SHS.<br>
  47:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added New APIs for trigger edge selection.<BR>
  48:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  51:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  54:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-25:
  55:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - BFL configuration in channel initialization fixed.
  56:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  57:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-07-28:
  58:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  59:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  60:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  61:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs Created.
  62:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  63:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  64:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAlias
  65:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetInputClass
  66:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  67:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  68:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  69:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  70:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  71:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-12-01:
  72:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  73:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  74:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  75:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2016-06-17:
  76:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE 
  77:../Libraries/XMCLib/src/xmc_vadc.c ****  *       and XMC_VADC_SYNCTR_START_LOCATION
  78:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  79:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the EVAL configuration in API XMC_VADC_GROUP_CheckSlaveReadiness and XMC_VADC_GROUP_
  80:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs added are:
  81:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  82:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
  83:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
  84:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultRegPriority
  85:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
  86:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
  87:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetResultRegPriority
  88:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  89:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2017-01-11:
  90:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fix assertion in XMC_VADC_GROUP_CheckSlaveReadiness() and XMC_VADC_GROUP_IgnoreSlaveReadin
  91:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  92:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2018-06-26:
  93:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed XMC_VADC_GLOBAL_StartupCalibration(), added wait until calibration is started
  94:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  95:../Libraries/XMCLib/src/xmc_vadc.c ****  * @endcond 
  96:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  97:../Libraries/XMCLib/src/xmc_vadc.c ****  */
  98:../Libraries/XMCLib/src/xmc_vadc.c **** 
  99:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 100:../Libraries/XMCLib/src/xmc_vadc.c ****  * HEADER FILES
 101:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 102:../Libraries/XMCLib/src/xmc_vadc.c **** #include <xmc_vadc.h>
 103:../Libraries/XMCLib/src/xmc_vadc.c **** 
 104:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 105:../Libraries/XMCLib/src/xmc_vadc.c ****  * MACROS
 106:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 107:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_MAX_ICLASS_SET          (2U)  /**< Defines the maximum number of conversion parame
 108:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_NUM_EMUX_INTERFACES     (2U)  /**< Defines the maximum number of external multiple
 109:../Libraries/XMCLib/src/xmc_vadc.c **** 
 110:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_RESULT_LEFT_ALIGN_10BIT (2U)  /**< Defines the 10 bit converted result register le
 111:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     is used in the XMC_VADC_GLOBAL_SetCompareValue(
 112:../Libraries/XMCLib/src/xmc_vadc.c **** 
 113:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_SYNCTR_START_LOCATION (3U)  /**< Defines the location in SYNCTR needed for calcula
 114:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 115:../Libraries/XMCLib/src/xmc_vadc.c ****  * ENUMS
 116:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 117:../Libraries/XMCLib/src/xmc_vadc.c **** 
 118:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 119:../Libraries/XMCLib/src/xmc_vadc.c ****  * DATA STRUCTURES
 120:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 121:../Libraries/XMCLib/src/xmc_vadc.c **** 
 122:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 123:../Libraries/XMCLib/src/xmc_vadc.c ****  * GLOBAL DATA
 124:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 125:../Libraries/XMCLib/src/xmc_vadc.c **** 
 126:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 127:../Libraries/XMCLib/src/xmc_vadc.c **** 
 128:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U) 
 129:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 130:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 131:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 132:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 133:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 134:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 135:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 136:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 137:../Libraries/XMCLib/src/xmc_vadc.c **** 
 138:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 139:../Libraries/XMCLib/src/xmc_vadc.c **** 
 140:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 141:../Libraries/XMCLib/src/xmc_vadc.c ****  * LOCAL ROUTINES
 142:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 143:../Libraries/XMCLib/src/xmc_vadc.c **** 
 144:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 145:../Libraries/XMCLib/src/xmc_vadc.c ****  * API IMPLEMENTATION
 146:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 147:../Libraries/XMCLib/src/xmc_vadc.c **** 
 148:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to enable the VADC Module*/
 149:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_EnableModule(void)
 150:../Libraries/XMCLib/src/xmc_vadc.c **** {
 434              	 .loc 2 150 0
 435              	 .cfi_startproc
 436 0000 80B5     	 push {r7,lr}
 437              	.LCFI24:
 438              	 .cfi_def_cfa_offset 8
 439              	 .cfi_offset 7,-8
 440              	 .cfi_offset 14,-4
 441 0002 00AF     	 add r7,sp,#0
 442              	.LCFI25:
 443              	 .cfi_def_cfa_register 7
 151:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
 152:../Libraries/XMCLib/src/xmc_vadc.c ****    * Enable Out of Range Comparator for ADC channels pins P2.2to P2.9. This hack is applicable only
 153:../Libraries/XMCLib/src/xmc_vadc.c ****    * and in particular the G11 step.
 154:../Libraries/XMCLib/src/xmc_vadc.c ****    *
 155:../Libraries/XMCLib/src/xmc_vadc.c ****    * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additona
 156:../Libraries/XMCLib/src/xmc_vadc.c ****    * function
 157:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 158:../Libraries/XMCLib/src/xmc_vadc.c **** 
 159:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined (COMPARATOR)
 160:../Libraries/XMCLib/src/xmc_vadc.c ****   COMPARATOR->ORCCTRL = (uint32_t)0xFF;
 444              	 .loc 2 160 0
 445 0004 034B     	 ldr r3,.L17
 446 0006 FF22     	 mov r2,#255
 447 0008 1A60     	 str r2,[r3]
 161:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 162:../Libraries/XMCLib/src/xmc_vadc.c **** 
 163:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 164:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 448              	 .loc 2 164 0
 449 000a 0120     	 mov r0,#1
 450 000c FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 165:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 166:../Libraries/XMCLib/src/xmc_vadc.c **** 
 167:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 168:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 169:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC )
 170:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 171:../Libraries/XMCLib/src/xmc_vadc.c **** }
 451              	 .loc 2 171 0
 452 0010 BD46     	 mov sp,r7
 453              	 
 454 0012 80BD     	 pop {r7,pc}
 455              	.L18:
 456              	 .align 2
 457              	.L17:
 458 0014 00050140 	 .word 1073808640
 459              	 .cfi_endproc
 460              	.LFE153:
 462              	 .section .text.XMC_VADC_GLOBAL_DisableModule,"ax",%progbits
 463              	 .align 2
 464              	 .global XMC_VADC_GLOBAL_DisableModule
 465              	 .code 16
 466              	 .thumb_func
 468              	XMC_VADC_GLOBAL_DisableModule:
 469              	.LFB154:
 172:../Libraries/XMCLib/src/xmc_vadc.c **** 
 173:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to Disable the VADC Module*/
 174:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_DisableModule(void)
 175:../Libraries/XMCLib/src/xmc_vadc.c **** {
 470              	 .loc 2 175 0
 471              	 .cfi_startproc
 472 0000 80B5     	 push {r7,lr}
 473              	.LCFI26:
 474              	 .cfi_def_cfa_offset 8
 475              	 .cfi_offset 7,-8
 476              	 .cfi_offset 14,-4
 477 0002 00AF     	 add r7,sp,#0
 478              	.LCFI27:
 479              	 .cfi_def_cfa_register 7
 176:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 177:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 178:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_AssertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 179:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 180:../Libraries/XMCLib/src/xmc_vadc.c **** 
 181:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 182:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 480              	 .loc 2 182 0
 481 0004 0120     	 mov r0,#1
 482 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 183:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 184:../Libraries/XMCLib/src/xmc_vadc.c **** 
 185:../Libraries/XMCLib/src/xmc_vadc.c **** }
 483              	 .loc 2 185 0
 484 000a BD46     	 mov sp,r7
 485              	 
 486 000c 80BD     	 pop {r7,pc}
 487              	 .cfi_endproc
 488              	.LFE154:
 490 000e C046     	 .section .text.XMC_VADC_GLOBAL_Init,"ax",%progbits
 491              	 .align 2
 492              	 .global XMC_VADC_GLOBAL_Init
 493              	 .code 16
 494              	 .thumb_func
 496              	XMC_VADC_GLOBAL_Init:
 497              	.LFB155:
 186:../Libraries/XMCLib/src/xmc_vadc.c **** 
 187:../Libraries/XMCLib/src/xmc_vadc.c **** 
 188:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize global resources */
 189:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
 190:../Libraries/XMCLib/src/xmc_vadc.c **** {
 498              	 .loc 2 190 0
 499              	 .cfi_startproc
 500 0000 80B5     	 push {r7,lr}
 501              	.LCFI28:
 502              	 .cfi_def_cfa_offset 8
 503              	 .cfi_offset 7,-8
 504              	 .cfi_offset 14,-4
 505 0002 82B0     	 sub sp,sp,#8
 506              	.LCFI29:
 507              	 .cfi_def_cfa_offset 16
 508 0004 00AF     	 add r7,sp,#0
 509              	.LCFI30:
 510              	 .cfi_def_cfa_register 7
 511 0006 7860     	 str r0,[r7,#4]
 512 0008 3960     	 str r1,[r7]
 191:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 192:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
 193:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 194:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))
 195:../Libraries/XMCLib/src/xmc_vadc.c **** 
 196:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the VADC module*/
 197:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GLOBAL_EnableModule();
 513              	 .loc 2 197 0
 514 000a FFF7FEFF 	 bl XMC_VADC_GLOBAL_EnableModule
 198:../Libraries/XMCLib/src/xmc_vadc.c **** 
 199:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->CLC = (uint32_t)(config->clc);
 515              	 .loc 2 199 0
 516 000e 3B68     	 ldr r3,[r7]
 517 0010 5A69     	 ldr r2,[r3,#20]
 518 0012 7B68     	 ldr r3,[r7,#4]
 519 0014 1A60     	 str r2,[r3]
 200:../Libraries/XMCLib/src/xmc_vadc.c **** 
 201:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Clock configuration */
 202:../Libraries/XMCLib/src/xmc_vadc.c **** 
 203:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 204:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Ms
 520              	 .loc 2 204 0
 521 0016 3B68     	 ldr r3,[r7]
 522 0018 5B68     	 ldr r3,[r3,#4]
 523 001a 8022     	 mov r2,#128
 524 001c 1202     	 lsl r2,r2,#8
 525 001e 1A43     	 orr r2,r3
 526 0020 7B68     	 ldr r3,[r7,#4]
 527 0022 8021     	 mov r1,#128
 528 0024 5A50     	 str r2,[r3,r1]
 205:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 206:../Libraries/XMCLib/src/xmc_vadc.c **** 
 207:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-0 configuration */
 208:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 529              	 .loc 2 208 0
 530 0026 3B68     	 ldr r3,[r7]
 531 0028 9A68     	 ldr r2,[r3,#8]
 532 002a 7B68     	 ldr r3,[r7,#4]
 533 002c A021     	 mov r1,#160
 534 002e 5A50     	 str r2,[r3,r1]
 209:../Libraries/XMCLib/src/xmc_vadc.c **** 
 210:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-1 configuration */
 211:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 535              	 .loc 2 211 0
 536 0030 3B68     	 ldr r3,[r7]
 537 0032 DA68     	 ldr r2,[r3,#12]
 538 0034 7B68     	 ldr r3,[r7,#4]
 539 0036 A421     	 mov r1,#164
 540 0038 5A50     	 str r2,[r3,r1]
 212:../Libraries/XMCLib/src/xmc_vadc.c **** 
 213:../Libraries/XMCLib/src/xmc_vadc.c **** 
 214:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Result generation related configuration */
 215:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 541              	 .loc 2 215 0
 542 003a 3B68     	 ldr r3,[r7]
 543 003c 1969     	 ldr r1,[r3,#16]
 544 003e 7A68     	 ldr r2,[r7,#4]
 545 0040 A023     	 mov r3,#160
 546 0042 9B00     	 lsl r3,r3,#2
 547 0044 D150     	 str r1,[r2,r3]
 216:../Libraries/XMCLib/src/xmc_vadc.c **** 
 217:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 218:../Libraries/XMCLib/src/xmc_vadc.c **** 
 219:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Boundaries */
 220:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 548              	 .loc 2 220 0
 549 0046 3B68     	 ldr r3,[r7]
 550 0048 1A68     	 ldr r2,[r3]
 551 004a 7B68     	 ldr r3,[r7,#4]
 552 004c B821     	 mov r1,#184
 553 004e 5A50     	 str r2,[r3,r1]
 221:../Libraries/XMCLib/src/xmc_vadc.c **** 
 222:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 223:../Libraries/XMCLib/src/xmc_vadc.c **** 
 224:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Configure the SHS register that are needed for XMC11xx devices*/
 225:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 226:../Libraries/XMCLib/src/xmc_vadc.c **** 
 227:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enabling the Analog part of the converter*/
 228:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = SHS0->SHSCFG  | SHS_SHSCFG_SCWC_Msk;
 229:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(SHS_SHSCFG_ANOFF_Msk);
 230:../Libraries/XMCLib/src/xmc_vadc.c ****   SHS0->SHSCFG = reg;
 231:../Libraries/XMCLib/src/xmc_vadc.c **** 
 232:../Libraries/XMCLib/src/xmc_vadc.c ****   /* From the Errata sheet of XMC1100 V1.7*/
 233:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
 234:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 235:../Libraries/XMCLib/src/xmc_vadc.c **** 
 236:../Libraries/XMCLib/src/xmc_vadc.c **** }
 554              	 .loc 2 236 0
 555 0050 BD46     	 mov sp,r7
 556 0052 02B0     	 add sp,sp,#8
 557              	 
 558 0054 80BD     	 pop {r7,pc}
 559              	 .cfi_endproc
 560              	.LFE155:
 562 0056 C046     	 .section .text.XMC_VADC_GLOBAL_InputClassInit,"ax",%progbits
 563              	 .align 2
 564              	 .global XMC_VADC_GLOBAL_InputClassInit
 565              	 .code 16
 566              	 .thumb_func
 568              	XMC_VADC_GLOBAL_InputClassInit:
 569              	.LFB156:
 237:../Libraries/XMCLib/src/xmc_vadc.c **** 
 238:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Set the Global IClass registers*/
 239:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
 240:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 241:../Libraries/XMCLib/src/xmc_vadc.c **** {
 570              	 .loc 2 241 0
 571              	 .cfi_startproc
 572 0000 80B5     	 push {r7,lr}
 573              	.LCFI31:
 574              	 .cfi_def_cfa_offset 8
 575              	 .cfi_offset 7,-8
 576              	 .cfi_offset 14,-4
 577 0002 84B0     	 sub sp,sp,#16
 578              	.LCFI32:
 579              	 .cfi_def_cfa_offset 24
 580 0004 00AF     	 add r7,sp,#0
 581              	.LCFI33:
 582              	 .cfi_def_cfa_register 7
 583 0006 F860     	 str r0,[r7,#12]
 584 0008 B960     	 str r1,[r7,#8]
 585 000a 3B60     	 str r3,[r7]
 586 000c FB1D     	 add r3,r7,#7
 587 000e 1A70     	 strb r2,[r3]
 242:../Libraries/XMCLib/src/xmc_vadc.c **** 
 243:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
 244:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP
 245:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLA
 246:../Libraries/XMCLib/src/xmc_vadc.c **** 
 247:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 248:../Libraries/XMCLib/src/xmc_vadc.c ****   if (conv_type == XMC_VADC_GROUP_CONV_STD )
 588              	 .loc 2 248 0
 589 0010 FB1D     	 add r3,r7,#7
 590 0012 1B78     	 ldrb r3,[r3]
 591 0014 002B     	 cmp r3,#0
 592 0016 09D1     	 bne .L22
 249:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 250:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 251:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass &
 593              	 .loc 2 251 0
 594 0018 BB68     	 ldr r3,[r7,#8]
 595 001a 0A4A     	 ldr r2,.L24
 596 001c 1340     	 and r3,r2
 597 001e 191C     	 mov r1,r3
 598 0020 FB68     	 ldr r3,[r7,#12]
 599 0022 3A68     	 ldr r2,[r7]
 600 0024 2832     	 add r2,r2,#40
 601 0026 9200     	 lsl r2,r2,#2
 602 0028 D150     	 str r1,[r2,r3]
 603 002a 08E0     	 b .L21
 604              	.L22:
 252:../Libraries/XMCLib/src/xmc_vadc.c ****                                       (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk
 253:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 254:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 255:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 256:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 257:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC
 605              	 .loc 2 257 0
 606 002c BB68     	 ldr r3,[r7,#8]
 607 002e 064A     	 ldr r2,.L24+4
 608 0030 1340     	 and r3,r2
 609 0032 191C     	 mov r1,r3
 610 0034 FB68     	 ldr r3,[r7,#12]
 611 0036 3A68     	 ldr r2,[r7]
 612 0038 2832     	 add r2,r2,#40
 613 003a 9200     	 lsl r2,r2,#2
 614 003c D150     	 str r1,[r2,r3]
 615              	.L21:
 258:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 259:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 260:../Libraries/XMCLib/src/xmc_vadc.c **** }
 616              	 .loc 2 260 0
 617 003e BD46     	 mov sp,r7
 618 0040 04B0     	 add sp,sp,#16
 619              	 
 620 0042 80BD     	 pop {r7,pc}
 621              	.L25:
 622              	 .align 2
 623              	.L24:
 624 0044 1F070000 	 .word 1823
 625 0048 00001F07 	 .word 119472128
 626              	 .cfi_endproc
 627              	.LFE156:
 629              	 .section .text.XMC_VADC_GLOBAL_StartupCalibration,"ax",%progbits
 630              	 .align 2
 631              	 .global XMC_VADC_GLOBAL_StartupCalibration
 632              	 .code 16
 633              	 .thumb_func
 635              	XMC_VADC_GLOBAL_StartupCalibration:
 636              	.LFB157:
 261:../Libraries/XMCLib/src/xmc_vadc.c **** 
 262:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable startup calibration feature */
 263:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
 264:../Libraries/XMCLib/src/xmc_vadc.c **** {
 637              	 .loc 2 264 0
 638              	 .cfi_startproc
 639 0000 80B5     	 push {r7,lr}
 640              	.LCFI34:
 641              	 .cfi_def_cfa_offset 8
 642              	 .cfi_offset 7,-8
 643              	 .cfi_offset 14,-4
 644 0002 84B0     	 sub sp,sp,#16
 645              	.LCFI35:
 646              	 .cfi_def_cfa_offset 24
 647 0004 00AF     	 add r7,sp,#0
 648              	.LCFI36:
 649              	 .cfi_def_cfa_register 7
 650 0006 7860     	 str r0,[r7,#4]
 265:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 266:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
 267:../Libraries/XMCLib/src/xmc_vadc.c ****   VADC_G_TypeDef *group_ptr;
 268:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 269:../Libraries/XMCLib/src/xmc_vadc.c ****   
 270:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))
 271:../Libraries/XMCLib/src/xmc_vadc.c **** 
 272:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 651              	 .loc 2 272 0
 652 0008 7B68     	 ldr r3,[r7,#4]
 653 000a 8022     	 mov r2,#128
 654 000c 9B58     	 ldr r3,[r3,r2]
 655 000e 8022     	 mov r2,#128
 656 0010 1206     	 lsl r2,r2,#24
 657 0012 1A43     	 orr r2,r3
 658 0014 7B68     	 ldr r3,[r7,#4]
 659 0016 8021     	 mov r1,#128
 660 0018 5A50     	 str r2,[r3,r1]
 273:../Libraries/XMCLib/src/xmc_vadc.c **** 
 274:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 275:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until all active groups finish calibration */
 276:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 661              	 .loc 2 276 0
 662 001a 0F23     	 mov r3,#15
 663 001c FB18     	 add r3,r7,r3
 664 001e 0022     	 mov r2,#0
 665 0020 1A70     	 strb r2,[r3]
 666 0022 1DE0     	 b .L27
 667              	.L31:
 277:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 278:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr = g_xmc_vadc_group_array[i];
 668              	 .loc 2 278 0
 669 0024 0F23     	 mov r3,#15
 670 0026 FB18     	 add r3,r7,r3
 671 0028 1A78     	 ldrb r2,[r3]
 672 002a 114B     	 ldr r3,.L32
 673 002c 9200     	 lsl r2,r2,#2
 674 002e D358     	 ldr r3,[r2,r3]
 675 0030 BB60     	 str r3,[r7,#8]
 279:../Libraries/XMCLib/src/xmc_vadc.c ****     if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 676              	 .loc 2 279 0
 677 0032 BB68     	 ldr r3,[r7,#8]
 678 0034 8022     	 mov r2,#128
 679 0036 9A58     	 ldr r2,[r3,r2]
 680 0038 C023     	 mov r3,#192
 681 003a 9B02     	 lsl r3,r3,#10
 682 003c 1340     	 and r3,r2
 683 003e 08D0     	 beq .L28
 280:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 281:../Libraries/XMCLib/src/xmc_vadc.c ****       /* This group is active. Loop until it finishes calibration */
 282:../Libraries/XMCLib/src/xmc_vadc.c ****       while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 684              	 .loc 2 282 0
 685 0040 00E0     	 b .L29
 686              	.L30:
 283:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 284:../Libraries/XMCLib/src/xmc_vadc.c ****         __NOP();
 687              	 .loc 2 284 0
 688              	
 689 0042 C046     	 nop
 690              	
 691              	 .code 16
 692              	.L29:
 282:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 693              	 .loc 2 282 0
 694 0044 BB68     	 ldr r3,[r7,#8]
 695 0046 8022     	 mov r2,#128
 696 0048 9A58     	 ldr r2,[r3,r2]
 697 004a 8023     	 mov r3,#128
 698 004c 5B05     	 lsl r3,r3,#21
 699 004e 1340     	 and r3,r2
 700 0050 F7D1     	 bne .L30
 701              	.L28:
 276:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 702              	 .loc 2 276 0 discriminator 2
 703 0052 0F23     	 mov r3,#15
 704 0054 FB18     	 add r3,r7,r3
 705 0056 1A78     	 ldrb r2,[r3]
 706 0058 0F23     	 mov r3,#15
 707 005a FB18     	 add r3,r7,r3
 708 005c 0132     	 add r2,r2,#1
 709 005e 1A70     	 strb r2,[r3]
 710              	.L27:
 276:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 711              	 .loc 2 276 0 is_stmt 0 discriminator 1
 712 0060 0F23     	 mov r3,#15
 713 0062 FB18     	 add r3,r7,r3
 714 0064 1B78     	 ldrb r3,[r3]
 715 0066 012B     	 cmp r3,#1
 716 0068 DCD9     	 bls .L31
 285:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 286:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 287:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 288:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 289:../Libraries/XMCLib/src/xmc_vadc.c **** 
 290:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until calibration is started */
 291:../Libraries/XMCLib/src/xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) !=
 292:../Libraries/XMCLib/src/xmc_vadc.c **** 		  XMC_VADC_SHS_START_UP_CAL_ACTIVE  )
 293:../Libraries/XMCLib/src/xmc_vadc.c ****    {
 294:../Libraries/XMCLib/src/xmc_vadc.c ****      __NOP();
 295:../Libraries/XMCLib/src/xmc_vadc.c ****    }
 296:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until it finishes calibration */
 297:../Libraries/XMCLib/src/xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
 298:../Libraries/XMCLib/src/xmc_vadc.c ****          XMC_VADC_SHS_START_UP_CAL_ACTIVE )
 299:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 300:../Libraries/XMCLib/src/xmc_vadc.c ****     __NOP();
 301:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 302:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 303:../Libraries/XMCLib/src/xmc_vadc.c **** }
 717              	 .loc 2 303 0 is_stmt 1
 718 006a BD46     	 mov sp,r7
 719 006c 04B0     	 add sp,sp,#16
 720              	 
 721 006e 80BD     	 pop {r7,pc}
 722              	.L33:
 723              	 .align 2
 724              	.L32:
 725 0070 00000000 	 .word g_xmc_vadc_group_array
 726              	 .cfi_endproc
 727              	.LFE157:
 729              	 .section .text.XMC_VADC_GLOBAL_SetBoundaries,"ax",%progbits
 730              	 .align 2
 731              	 .global XMC_VADC_GLOBAL_SetBoundaries
 732              	 .code 16
 733              	 .thumb_func
 735              	XMC_VADC_GLOBAL_SetBoundaries:
 736              	.LFB158:
 304:../Libraries/XMCLib/src/xmc_vadc.c **** 
 305:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boudaries for result of conversion. Should the boundaries be violated, interrupts are
 306:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 307:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr,
 308:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary0,
 309:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary1)
 310:../Libraries/XMCLib/src/xmc_vadc.c **** {
 737              	 .loc 2 310 0
 738              	 .cfi_startproc
 739 0000 80B5     	 push {r7,lr}
 740              	.LCFI37:
 741              	 .cfi_def_cfa_offset 8
 742              	 .cfi_offset 7,-8
 743              	 .cfi_offset 14,-4
 744 0002 86B0     	 sub sp,sp,#24
 745              	.LCFI38:
 746              	 .cfi_def_cfa_offset 32
 747 0004 00AF     	 add r7,sp,#0
 748              	.LCFI39:
 749              	 .cfi_def_cfa_register 7
 750 0006 F860     	 str r0,[r7,#12]
 751 0008 B960     	 str r1,[r7,#8]
 752 000a 7A60     	 str r2,[r7,#4]
 311:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 312:../Libraries/XMCLib/src/xmc_vadc.c **** 
 313:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 314:../Libraries/XMCLib/src/xmc_vadc.c **** 
 315:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = 0U;
 753              	 .loc 2 315 0
 754 000c 0023     	 mov r3,#0
 755 000e 7B61     	 str r3,[r7,#20]
 316:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary0 << VADC_GLOBBOUND_BOUNDARY0_Pos);
 756              	 .loc 2 316 0
 757 0010 7A69     	 ldr r2,[r7,#20]
 758 0012 BB68     	 ldr r3,[r7,#8]
 759 0014 1343     	 orr r3,r2
 760 0016 7B61     	 str r3,[r7,#20]
 317:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary1 << VADC_GLOBBOUND_BOUNDARY1_Pos);
 761              	 .loc 2 317 0
 762 0018 7B68     	 ldr r3,[r7,#4]
 763 001a 1B04     	 lsl r3,r3,#16
 764 001c 7A69     	 ldr r2,[r7,#20]
 765 001e 1343     	 orr r3,r2
 766 0020 7B61     	 str r3,[r7,#20]
 318:../Libraries/XMCLib/src/xmc_vadc.c **** 
 319:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 767              	 .loc 2 319 0
 768 0022 FB68     	 ldr r3,[r7,#12]
 769 0024 B821     	 mov r1,#184
 770 0026 7A69     	 ldr r2,[r7,#20]
 771 0028 5A50     	 str r2,[r3,r1]
 320:../Libraries/XMCLib/src/xmc_vadc.c **** }
 772              	 .loc 2 320 0
 773 002a BD46     	 mov sp,r7
 774 002c 06B0     	 add sp,sp,#24
 775              	 
 776 002e 80BD     	 pop {r7,pc}
 777              	 .cfi_endproc
 778              	.LFE158:
 780              	 .section .text.XMC_VADC_GLOBAL_SetIndividualBoundary,"ax",%progbits
 781              	 .align 2
 782              	 .global XMC_VADC_GLOBAL_SetIndividualBoundary
 783              	 .code 16
 784              	 .thumb_func
 786              	XMC_VADC_GLOBAL_SetIndividualBoundary:
 787              	.LFB159:
 321:../Libraries/XMCLib/src/xmc_vadc.c **** 
 322:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 323:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
 324:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 325:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint16_t boundary_value)
 326:../Libraries/XMCLib/src/xmc_vadc.c **** {
 788              	 .loc 2 326 0
 789              	 .cfi_startproc
 790 0000 80B5     	 push {r7,lr}
 791              	.LCFI40:
 792              	 .cfi_def_cfa_offset 8
 793              	 .cfi_offset 7,-8
 794              	 .cfi_offset 14,-4
 795 0002 84B0     	 sub sp,sp,#16
 796              	.LCFI41:
 797              	 .cfi_def_cfa_offset 24
 798 0004 00AF     	 add r7,sp,#0
 799              	.LCFI42:
 800              	 .cfi_def_cfa_register 7
 801 0006 7860     	 str r0,[r7,#4]
 802 0008 081C     	 mov r0,r1
 803 000a 111C     	 mov r1,r2
 804 000c FB1C     	 add r3,r7,#3
 805 000e 021C     	 add r2,r0,#0
 806 0010 1A70     	 strb r2,[r3]
 807 0012 3B1C     	 mov r3,r7
 808 0014 0A1C     	 add r2,r1,#0
 809 0016 1A80     	 strh r2,[r3]
 327:../Libraries/XMCLib/src/xmc_vadc.c **** 
 328:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 329:../Libraries/XMCLib/src/xmc_vadc.c **** 
 330:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 331:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Boundary Selection",
 332:../Libraries/XMCLib/src/xmc_vadc.c ****              ((XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection) ||
 333:../Libraries/XMCLib/src/xmc_vadc.c ****               (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)))
 334:../Libraries/XMCLib/src/xmc_vadc.c **** 
 335:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 336:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = global_ptr->GLOBBOUND;
 810              	 .loc 2 336 0
 811 0018 7B68     	 ldr r3,[r7,#4]
 812 001a B822     	 mov r2,#184
 813 001c 9B58     	 ldr r3,[r3,r2]
 814 001e FB60     	 str r3,[r7,#12]
 337:../Libraries/XMCLib/src/xmc_vadc.c **** 
 338:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection)
 815              	 .loc 2 338 0
 816 0020 FB1C     	 add r3,r7,#3
 817 0022 1B78     	 ldrb r3,[r3]
 818 0024 022B     	 cmp r3,#2
 819 0026 09D1     	 bne .L36
 339:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 340:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY0_Msk);
 820              	 .loc 2 340 0
 821 0028 FB68     	 ldr r3,[r7,#12]
 822 002a 1B0B     	 lsr r3,r3,#12
 823 002c 1B03     	 lsl r3,r3,#12
 824 002e FB60     	 str r3,[r7,#12]
 341:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY0_Pos);
 825              	 .loc 2 341 0
 826 0030 3B1C     	 mov r3,r7
 827 0032 1B88     	 ldrh r3,[r3]
 828 0034 FA68     	 ldr r2,[r7,#12]
 829 0036 1343     	 orr r3,r2
 830 0038 FB60     	 str r3,[r7,#12]
 831 003a 0DE0     	 b .L37
 832              	.L36:
 342:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 343:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)
 833              	 .loc 2 343 0
 834 003c FB1C     	 add r3,r7,#3
 835 003e 1B78     	 ldrb r3,[r3]
 836 0040 032B     	 cmp r3,#3
 837 0042 09D1     	 bne .L37
 344:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 345:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY1_Msk);
 838              	 .loc 2 345 0
 839 0044 FB68     	 ldr r3,[r7,#12]
 840 0046 084A     	 ldr r2,.L38
 841 0048 1340     	 and r3,r2
 842 004a FB60     	 str r3,[r7,#12]
 346:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 843              	 .loc 2 346 0
 844 004c 3B1C     	 mov r3,r7
 845 004e 1B88     	 ldrh r3,[r3]
 846 0050 1B04     	 lsl r3,r3,#16
 847 0052 FA68     	 ldr r2,[r7,#12]
 848 0054 1343     	 orr r3,r2
 849 0056 FB60     	 str r3,[r7,#12]
 850              	.L37:
 347:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 348:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 349:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 350:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 351:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 352:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 851              	 .loc 2 352 0
 852 0058 7B68     	 ldr r3,[r7,#4]
 853 005a B821     	 mov r1,#184
 854 005c FA68     	 ldr r2,[r7,#12]
 855 005e 5A50     	 str r2,[r3,r1]
 353:../Libraries/XMCLib/src/xmc_vadc.c **** 
 354:../Libraries/XMCLib/src/xmc_vadc.c **** }
 856              	 .loc 2 354 0
 857 0060 BD46     	 mov sp,r7
 858 0062 04B0     	 add sp,sp,#16
 859              	 
 860 0064 80BD     	 pop {r7,pc}
 861              	.L39:
 862 0066 C046     	 .align 2
 863              	.L38:
 864 0068 FFFF00F0 	 .word -268369921
 865              	 .cfi_endproc
 866              	.LFE159:
 868              	 .section .text.XMC_VADC_GLOBAL_SetCompareValue,"ax",%progbits
 869              	 .align 2
 870              	 .global XMC_VADC_GLOBAL_SetCompareValue
 871              	 .code 16
 872              	 .thumb_func
 874              	XMC_VADC_GLOBAL_SetCompareValue:
 875              	.LFB160:
 355:../Libraries/XMCLib/src/xmc_vadc.c **** 
 356:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 357:../Libraries/XMCLib/src/xmc_vadc.c **** 
 358:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set compare value for the result register. Result of conversion is compared against this 
 359:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
 360:../Libraries/XMCLib/src/xmc_vadc.c **** {
 876              	 .loc 2 360 0
 877              	 .cfi_startproc
 878 0000 80B5     	 push {r7,lr}
 879              	.LCFI43:
 880              	 .cfi_def_cfa_offset 8
 881              	 .cfi_offset 7,-8
 882              	 .cfi_offset 14,-4
 883 0002 82B0     	 sub sp,sp,#8
 884              	.LCFI44:
 885              	 .cfi_def_cfa_offset 16
 886 0004 00AF     	 add r7,sp,#0
 887              	.LCFI45:
 888              	 .cfi_def_cfa_register 7
 889 0006 7860     	 str r0,[r7,#4]
 890 0008 0A1C     	 mov r2,r1
 891 000a BB1C     	 add r3,r7,#2
 892 000c 1A80     	 strh r2,[r3]
 361:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetCompareValue:Wrong Module Pointer", (global_ptr == VADC))
 362:../Libraries/XMCLib/src/xmc_vadc.c **** 
 363:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES &= ~((uint32_t)VADC_GLOBRES_RESULT_Msk);
 893              	 .loc 2 363 0
 894 000e 7A68     	 ldr r2,[r7,#4]
 895 0010 C023     	 mov r3,#192
 896 0012 9B00     	 lsl r3,r3,#2
 897 0014 D358     	 ldr r3,[r2,r3]
 898 0016 1B0C     	 lsr r3,r3,#16
 899 0018 1904     	 lsl r1,r3,#16
 900 001a 7A68     	 ldr r2,[r7,#4]
 901 001c C023     	 mov r3,#192
 902 001e 9B00     	 lsl r3,r3,#2
 903 0020 D150     	 str r1,[r2,r3]
 364:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 904              	 .loc 2 364 0
 905 0022 7A68     	 ldr r2,[r7,#4]
 906 0024 C023     	 mov r3,#192
 907 0026 9B00     	 lsl r3,r3,#2
 908 0028 D258     	 ldr r2,[r2,r3]
 909 002a BB1C     	 add r3,r7,#2
 910 002c 1B88     	 ldrh r3,[r3]
 911 002e 9B00     	 lsl r3,r3,#2
 912 0030 1A43     	 orr r2,r3
 913 0032 111C     	 mov r1,r2
 914 0034 7A68     	 ldr r2,[r7,#4]
 915 0036 C023     	 mov r3,#192
 916 0038 9B00     	 lsl r3,r3,#2
 917 003a D150     	 str r1,[r2,r3]
 365:../Libraries/XMCLib/src/xmc_vadc.c **** }
 918              	 .loc 2 365 0
 919 003c BD46     	 mov sp,r7
 920 003e 02B0     	 add sp,sp,#8
 921              	 
 922 0040 80BD     	 pop {r7,pc}
 923              	 .cfi_endproc
 924              	.LFE160:
 926 0042 C046     	 .section .text.XMC_VADC_GLOBAL_GetCompareResult,"ax",%progbits
 927              	 .align 2
 928              	 .global XMC_VADC_GLOBAL_GetCompareResult
 929              	 .code 16
 930              	 .thumb_func
 932              	XMC_VADC_GLOBAL_GetCompareResult:
 933              	.LFB161:
 366:../Libraries/XMCLib/src/xmc_vadc.c **** 
 367:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of comparison */
 368:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr)
 369:../Libraries/XMCLib/src/xmc_vadc.c **** {
 934              	 .loc 2 369 0
 935              	 .cfi_startproc
 936 0000 80B5     	 push {r7,lr}
 937              	.LCFI46:
 938              	 .cfi_def_cfa_offset 8
 939              	 .cfi_offset 7,-8
 940              	 .cfi_offset 14,-4
 941 0002 84B0     	 sub sp,sp,#16
 942              	.LCFI47:
 943              	 .cfi_def_cfa_offset 24
 944 0004 00AF     	 add r7,sp,#0
 945              	.LCFI48:
 946              	 .cfi_def_cfa_register 7
 947 0006 7860     	 str r0,[r7,#4]
 370:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
 371:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
 372:../Libraries/XMCLib/src/xmc_vadc.c **** 
 373:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetCompareResult:Wrong Module Pointer", (global_ptr == VADC))
 374:../Libraries/XMCLib/src/xmc_vadc.c **** 
 375:../Libraries/XMCLib/src/xmc_vadc.c ****   res = global_ptr->GLOBRES;
 948              	 .loc 2 375 0
 949 0008 7A68     	 ldr r2,[r7,#4]
 950 000a C023     	 mov r3,#192
 951 000c 9B00     	 lsl r3,r3,#2
 952 000e D358     	 ldr r3,[r2,r3]
 953 0010 BB60     	 str r3,[r7,#8]
 376:../Libraries/XMCLib/src/xmc_vadc.c **** 
 377:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_GLOBRES_VF_Msk)
 954              	 .loc 2 377 0
 955 0012 BB68     	 ldr r3,[r7,#8]
 956 0014 002B     	 cmp r3,#0
 957 0016 08DA     	 bge .L42
 378:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 379:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_GLOBRES_FCR_Pos) & (uint32_
 958              	 .loc 2 379 0
 959 0018 BB68     	 ldr r3,[r7,#8]
 960 001a 9B0F     	 lsr r3,r3,#30
 961 001c DAB2     	 uxtb r2,r3
 962 001e 0F23     	 mov r3,#15
 963 0020 FB18     	 add r3,r7,r3
 964 0022 0121     	 mov r1,#1
 965 0024 0A40     	 and r2,r1
 966 0026 1A70     	 strb r2,[r3]
 967 0028 03E0     	 b .L43
 968              	.L42:
 380:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 381:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 382:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 383:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 969              	 .loc 2 383 0
 970 002a 0F23     	 mov r3,#15
 971 002c FB18     	 add r3,r7,r3
 972 002e 0222     	 mov r2,#2
 973 0030 1A70     	 strb r2,[r3]
 974              	.L43:
 384:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 385:../Libraries/XMCLib/src/xmc_vadc.c **** 
 386:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 975              	 .loc 2 386 0
 976 0032 0F23     	 mov r3,#15
 977 0034 FB18     	 add r3,r7,r3
 978 0036 1B78     	 ldrb r3,[r3]
 387:../Libraries/XMCLib/src/xmc_vadc.c **** }
 979              	 .loc 2 387 0
 980 0038 181C     	 mov r0,r3
 981 003a BD46     	 mov sp,r7
 982 003c 04B0     	 add sp,sp,#16
 983              	 
 984 003e 80BD     	 pop {r7,pc}
 985              	 .cfi_endproc
 986              	.LFE161:
 988              	 .section .text.XMC_VADC_GLOBAL_BindGroupToEMux,"ax",%progbits
 989              	 .align 2
 990              	 .global XMC_VADC_GLOBAL_BindGroupToEMux
 991              	 .code 16
 992              	 .thumb_func
 994              	XMC_VADC_GLOBAL_BindGroupToEMux:
 995              	.LFB162:
 388:../Libraries/XMCLib/src/xmc_vadc.c **** 
 389:../Libraries/XMCLib/src/xmc_vadc.c **** /* Bind one of the four groups to one of the two EMUX interfaces */
 390:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_EMUX_AVAILABLE == 1U)
 391:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
 392:../Libraries/XMCLib/src/xmc_vadc.c **** {
 996              	 .loc 2 392 0
 997              	 .cfi_startproc
 998 0000 80B5     	 push {r7,lr}
 999              	.LCFI49:
 1000              	 .cfi_def_cfa_offset 8
 1001              	 .cfi_offset 7,-8
 1002              	 .cfi_offset 14,-4
 1003 0002 86B0     	 sub sp,sp,#24
 1004              	.LCFI50:
 1005              	 .cfi_def_cfa_offset 32
 1006 0004 00AF     	 add r7,sp,#0
 1007              	.LCFI51:
 1008              	 .cfi_def_cfa_register 7
 1009 0006 F860     	 str r0,[r7,#12]
 1010 0008 B960     	 str r1,[r7,#8]
 1011 000a 7A60     	 str r2,[r7,#4]
 393:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
 394:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
 395:../Libraries/XMCLib/src/xmc_vadc.c **** 
 396:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong Module Pointer", (global_ptr == VADC))
 397:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong EMUX Group", (emuxif < XMC_VADC_NUM_EMUX_INTERF
 398:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong VADC Group", (group < XMC_VADC_MAXIMUM_NUM_GROU
 399:../Libraries/XMCLib/src/xmc_vadc.c **** 
 400:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == emuxif)
 1012              	 .loc 2 400 0
 1013 000c BB68     	 ldr r3,[r7,#8]
 1014 000e 002B     	 cmp r3,#0
 1015 0010 04D1     	 bne .L46
 401:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 402:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Pos;
 1016              	 .loc 2 402 0
 1017 0012 0023     	 mov r3,#0
 1018 0014 3B61     	 str r3,[r7,#16]
 403:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Msk;
 1019              	 .loc 2 403 0
 1020 0016 0F23     	 mov r3,#15
 1021 0018 7B61     	 str r3,[r7,#20]
 1022 001a 03E0     	 b .L47
 1023              	.L46:
 404:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 405:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 406:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 407:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Pos;
 1024              	 .loc 2 407 0
 1025 001c 0423     	 mov r3,#4
 1026 001e 3B61     	 str r3,[r7,#16]
 408:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Msk;
 1027              	 .loc 2 408 0
 1028 0020 F023     	 mov r3,#240
 1029 0022 7B61     	 str r3,[r7,#20]
 1030              	.L47:
 409:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 410:../Libraries/XMCLib/src/xmc_vadc.c **** 
 411:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL &= ~(mask);
 1031              	 .loc 2 411 0
 1032 0024 FA68     	 ldr r2,[r7,#12]
 1033 0026 FC23     	 mov r3,#252
 1034 0028 9B00     	 lsl r3,r3,#2
 1035 002a D358     	 ldr r3,[r2,r3]
 1036 002c 7A69     	 ldr r2,[r7,#20]
 1037 002e D243     	 mvn r2,r2
 1038 0030 1A40     	 and r2,r3
 1039 0032 111C     	 mov r1,r2
 1040 0034 FA68     	 ldr r2,[r7,#12]
 1041 0036 FC23     	 mov r3,#252
 1042 0038 9B00     	 lsl r3,r3,#2
 1043 003a D150     	 str r1,[r2,r3]
 412:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 1044              	 .loc 2 412 0
 1045 003c FA68     	 ldr r2,[r7,#12]
 1046 003e FC23     	 mov r3,#252
 1047 0040 9B00     	 lsl r3,r3,#2
 1048 0042 D258     	 ldr r2,[r2,r3]
 1049 0044 3B69     	 ldr r3,[r7,#16]
 1050 0046 7968     	 ldr r1,[r7,#4]
 1051 0048 9940     	 lsl r1,r1,r3
 1052 004a 0B1C     	 mov r3,r1
 1053 004c 1A43     	 orr r2,r3
 1054 004e 111C     	 mov r1,r2
 1055 0050 FA68     	 ldr r2,[r7,#12]
 1056 0052 FC23     	 mov r3,#252
 1057 0054 9B00     	 lsl r3,r3,#2
 1058 0056 D150     	 str r1,[r2,r3]
 413:../Libraries/XMCLib/src/xmc_vadc.c **** 
 414:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1059              	 .loc 2 414 0
 1060 0058 BD46     	 mov sp,r7
 1061 005a 06B0     	 add sp,sp,#24
 1062              	 
 1063 005c 80BD     	 pop {r7,pc}
 1064              	 .cfi_endproc
 1065              	.LFE162:
 1067 005e C046     	 .section .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode,"ax",%progbits
 1068              	 .align 2
 1069              	 .global XMC_VADC_GLOBAL_SetResultEventInterruptNode
 1070              	 .code 16
 1071              	 .thumb_func
 1073              	XMC_VADC_GLOBAL_SetResultEventInterruptNode:
 1074              	.LFB163:
 415:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 416:../Libraries/XMCLib/src/xmc_vadc.c **** 
 417:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind result event with a service request line */
 418:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
 419:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1075              	 .loc 2 419 0
 1076              	 .cfi_startproc
 1077 0000 80B5     	 push {r7,lr}
 1078              	.LCFI52:
 1079              	 .cfi_def_cfa_offset 8
 1080              	 .cfi_offset 7,-8
 1081              	 .cfi_offset 14,-4
 1082 0002 84B0     	 sub sp,sp,#16
 1083              	.LCFI53:
 1084              	 .cfi_def_cfa_offset 24
 1085 0004 00AF     	 add r7,sp,#0
 1086              	.LCFI54:
 1087              	 .cfi_def_cfa_register 7
 1088 0006 7860     	 str r0,[r7,#4]
 1089 0008 0A1C     	 mov r2,r1
 1090 000a FB1C     	 add r3,r7,#3
 1091 000c 1A70     	 strb r2,[r3]
 420:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 421:../Libraries/XMCLib/src/xmc_vadc.c ****   
 422:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VAD
 423:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHAR
 424:../Libraries/XMCLib/src/xmc_vadc.c **** 
 425:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1092              	 .loc 2 425 0
 1093 000e FB1C     	 add r3,r7,#3
 1094 0010 1B78     	 ldrb r3,[r3]
 1095 0012 032B     	 cmp r3,#3
 1096 0014 04D9     	 bls .L49
 426:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 427:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1097              	 .loc 2 427 0
 1098 0016 FB1C     	 add r3,r7,#3
 1099 0018 1B78     	 ldrb r3,[r3]
 1100 001a 043B     	 sub r3,r3,#4
 1101 001c FB60     	 str r3,[r7,#12]
 1102 001e 02E0     	 b .L50
 1103              	.L49:
 428:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 429:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 430:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 431:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1104              	 .loc 2 431 0
 1105 0020 FB1C     	 add r3,r7,#3
 1106 0022 1B78     	 ldrb r3,[r3]
 1107 0024 FB60     	 str r3,[r7,#12]
 1108              	.L50:
 432:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 433:../Libraries/XMCLib/src/xmc_vadc.c **** 
 434:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
 1109              	 .loc 2 434 0
 1110 0026 7A68     	 ldr r2,[r7,#4]
 1111 0028 A023     	 mov r3,#160
 1112 002a 5B00     	 lsl r3,r3,#1
 1113 002c D358     	 ldr r3,[r2,r3]
 1114 002e 0B4A     	 ldr r2,.L51
 1115 0030 1340     	 and r3,r2
 1116 0032 191C     	 mov r1,r3
 1117 0034 7A68     	 ldr r2,[r7,#4]
 1118 0036 A023     	 mov r3,#160
 1119 0038 5B00     	 lsl r3,r3,#1
 1120 003a D150     	 str r1,[r2,r3]
 435:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 1121              	 .loc 2 435 0
 1122 003c 7A68     	 ldr r2,[r7,#4]
 1123 003e A023     	 mov r3,#160
 1124 0040 5B00     	 lsl r3,r3,#1
 1125 0042 D258     	 ldr r2,[r2,r3]
 1126 0044 FB68     	 ldr r3,[r7,#12]
 1127 0046 1B04     	 lsl r3,r3,#16
 1128 0048 1A43     	 orr r2,r3
 1129 004a 111C     	 mov r1,r2
 1130 004c 7A68     	 ldr r2,[r7,#4]
 1131 004e A023     	 mov r3,#160
 1132 0050 5B00     	 lsl r3,r3,#1
 1133 0052 D150     	 str r1,[r2,r3]
 436:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1134              	 .loc 2 436 0
 1135 0054 BD46     	 mov sp,r7
 1136 0056 04B0     	 add sp,sp,#16
 1137              	 
 1138 0058 80BD     	 pop {r7,pc}
 1139              	.L52:
 1140 005a C046     	 .align 2
 1141              	.L51:
 1142 005c FFFFF0FF 	 .word -983041
 1143              	 .cfi_endproc
 1144              	.LFE163:
 1146              	 .section .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode,"ax",%progbits
 1147              	 .align 2
 1148              	 .global XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
 1149              	 .code 16
 1150              	 .thumb_func
 1152              	XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:
 1153              	.LFB164:
 437:../Libraries/XMCLib/src/xmc_vadc.c **** 
 438:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind request source event with a service request line */
 439:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
 440:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1154              	 .loc 2 440 0
 1155              	 .cfi_startproc
 1156 0000 80B5     	 push {r7,lr}
 1157              	.LCFI55:
 1158              	 .cfi_def_cfa_offset 8
 1159              	 .cfi_offset 7,-8
 1160              	 .cfi_offset 14,-4
 1161 0002 84B0     	 sub sp,sp,#16
 1162              	.LCFI56:
 1163              	 .cfi_def_cfa_offset 24
 1164 0004 00AF     	 add r7,sp,#0
 1165              	.LCFI57:
 1166              	 .cfi_def_cfa_register 7
 1167 0006 7860     	 str r0,[r7,#4]
 1168 0008 0A1C     	 mov r2,r1
 1169 000a FB1C     	 add r3,r7,#3
 1170 000c 1A70     	 strb r2,[r3]
 441:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 442:../Libraries/XMCLib/src/xmc_vadc.c ****   
 443:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_
 444:../Libraries/XMCLib/src/xmc_vadc.c **** 
 445:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1171              	 .loc 2 445 0
 1172 000e FB1C     	 add r3,r7,#3
 1173 0010 1B78     	 ldrb r3,[r3]
 1174 0012 032B     	 cmp r3,#3
 1175 0014 04D9     	 bls .L54
 446:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 447:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1176              	 .loc 2 447 0
 1177 0016 FB1C     	 add r3,r7,#3
 1178 0018 1B78     	 ldrb r3,[r3]
 1179 001a 043B     	 sub r3,r3,#4
 1180 001c FB60     	 str r3,[r7,#12]
 1181 001e 02E0     	 b .L55
 1182              	.L54:
 448:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 449:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 450:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 451:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1183              	 .loc 2 451 0
 1184 0020 FB1C     	 add r3,r7,#3
 1185 0022 1B78     	 ldrb r3,[r3]
 1186 0024 FB60     	 str r3,[r7,#12]
 1187              	.L55:
 452:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 453:../Libraries/XMCLib/src/xmc_vadc.c **** 
 454:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 1188              	 .loc 2 454 0
 1189 0026 7A68     	 ldr r2,[r7,#4]
 1190 0028 A023     	 mov r3,#160
 1191 002a 5B00     	 lsl r3,r3,#1
 1192 002c D358     	 ldr r3,[r2,r3]
 1193 002e 0F22     	 mov r2,#15
 1194 0030 9343     	 bic r3,r2
 1195 0032 191C     	 mov r1,r3
 1196 0034 7A68     	 ldr r2,[r7,#4]
 1197 0036 A023     	 mov r3,#160
 1198 0038 5B00     	 lsl r3,r3,#1
 1199 003a D150     	 str r1,[r2,r3]
 455:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 1200              	 .loc 2 455 0
 1201 003c 7A68     	 ldr r2,[r7,#4]
 1202 003e A023     	 mov r3,#160
 1203 0040 5B00     	 lsl r3,r3,#1
 1204 0042 D258     	 ldr r2,[r2,r3]
 1205 0044 FB68     	 ldr r3,[r7,#12]
 1206 0046 1A43     	 orr r2,r3
 1207 0048 111C     	 mov r1,r2
 1208 004a 7A68     	 ldr r2,[r7,#4]
 1209 004c A023     	 mov r3,#160
 1210 004e 5B00     	 lsl r3,r3,#1
 1211 0050 D150     	 str r1,[r2,r3]
 456:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1212              	 .loc 2 456 0
 1213 0052 BD46     	 mov sp,r7
 1214 0054 04B0     	 add sp,sp,#16
 1215              	 
 1216 0056 80BD     	 pop {r7,pc}
 1217              	 .cfi_endproc
 1218              	.LFE164:
 1220              	 .section .text.XMC_VADC_GROUP_Init,"ax",%progbits
 1221              	 .align 2
 1222              	 .global XMC_VADC_GROUP_Init
 1223              	 .code 16
 1224              	 .thumb_func
 1226              	XMC_VADC_GROUP_Init:
 1227              	.LFB165:
 457:../Libraries/XMCLib/src/xmc_vadc.c **** 
 458:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize an instance of group of VADC hardware */
 459:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)  
 460:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
 461:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1228              	 .loc 2 461 0
 1229              	 .cfi_startproc
 1230 0000 80B5     	 push {r7,lr}
 1231              	.LCFI58:
 1232              	 .cfi_def_cfa_offset 8
 1233              	 .cfi_offset 7,-8
 1234              	 .cfi_offset 14,-4
 1235 0002 82B0     	 sub sp,sp,#8
 1236              	.LCFI59:
 1237              	 .cfi_def_cfa_offset 16
 1238 0004 00AF     	 add r7,sp,#0
 1239              	.LCFI60:
 1240              	 .cfi_def_cfa_register 7
 1241 0006 7860     	 str r0,[r7,#4]
 1242 0008 3960     	 str r1,[r7]
 462:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
 463:../Libraries/XMCLib/src/xmc_vadc.c **** 
 464:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the input classes */
 465:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 1243              	 .loc 2 465 0
 1244 000a 7A68     	 ldr r2,[r7,#4]
 1245 000c 3B68     	 ldr r3,[r7]
 1246 000e 5B68     	 ldr r3,[r3,#4]
 1247 0010 101C     	 mov r0,r2
 1248 0012 191C     	 mov r1,r3
 1249 0014 0022     	 mov r2,#0
 1250 0016 0023     	 mov r3,#0
 1251 0018 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 466:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 1252              	 .loc 2 466 0
 1253 001c 7A68     	 ldr r2,[r7,#4]
 1254 001e 3B68     	 ldr r3,[r7]
 1255 0020 5B68     	 ldr r3,[r3,#4]
 1256 0022 101C     	 mov r0,r2
 1257 0024 191C     	 mov r1,r3
 1258 0026 0122     	 mov r2,#1
 1259 0028 0023     	 mov r3,#0
 1260 002a FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 467:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 1261              	 .loc 2 467 0
 1262 002e 7A68     	 ldr r2,[r7,#4]
 1263 0030 3B68     	 ldr r3,[r7]
 1264 0032 9B68     	 ldr r3,[r3,#8]
 1265 0034 101C     	 mov r0,r2
 1266 0036 191C     	 mov r1,r3
 1267 0038 0022     	 mov r2,#0
 1268 003a 0123     	 mov r3,#1
 1269 003c FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 468:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 1270              	 .loc 2 468 0
 1271 0040 7A68     	 ldr r2,[r7,#4]
 1272 0042 3B68     	 ldr r3,[r7]
 1273 0044 9B68     	 ldr r3,[r3,#8]
 1274 0046 101C     	 mov r0,r2
 1275 0048 191C     	 mov r1,r3
 1276 004a 0122     	 mov r2,#1
 1277 004c 0123     	 mov r3,#1
 1278 004e FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 469:../Libraries/XMCLib/src/xmc_vadc.c **** 
 470:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = config->g_arbcfg;
 1279              	 .loc 2 470 0
 1280 0052 3B68     	 ldr r3,[r7]
 1281 0054 1A69     	 ldr r2,[r3,#16]
 1282 0056 7B68     	 ldr r3,[r7,#4]
 1283 0058 8021     	 mov r1,#128
 1284 005a 5A50     	 str r2,[r3,r1]
 471:../Libraries/XMCLib/src/xmc_vadc.c **** 
 472:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = config->g_bound;
 1285              	 .loc 2 472 0
 1286 005c 3B68     	 ldr r3,[r7]
 1287 005e DA68     	 ldr r2,[r3,#12]
 1288 0060 7B68     	 ldr r3,[r7,#4]
 1289 0062 B821     	 mov r1,#184
 1290 0064 5A50     	 str r2,[r3,r1]
 473:../Libraries/XMCLib/src/xmc_vadc.c **** 
 474:../Libraries/XMCLib/src/xmc_vadc.c ****   /* External mux configuration */
 475:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 1291              	 .loc 2 475 0
 1292 0066 7A68     	 ldr r2,[r7,#4]
 1293 0068 3B68     	 ldr r3,[r7]
 1294 006a 1B68     	 ldr r3,[r3]
 1295 006c 101C     	 mov r0,r2
 1296 006e 191C     	 mov r1,r3
 1297 0070 FFF7FEFF 	 bl XMC_VADC_GROUP_ExternalMuxControlInit
 476:../Libraries/XMCLib/src/xmc_vadc.c **** 
 477:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1298              	 .loc 2 477 0
 1299 0074 BD46     	 mov sp,r7
 1300 0076 02B0     	 add sp,sp,#8
 1301              	 
 1302 0078 80BD     	 pop {r7,pc}
 1303              	 .cfi_endproc
 1304              	.LFE165:
 1306 007a C046     	 .section .text.XMC_VADC_GROUP_InputClassInit,"ax",%progbits
 1307              	 .align 2
 1308              	 .global XMC_VADC_GROUP_InputClassInit
 1309              	 .code 16
 1310              	 .thumb_func
 1312              	XMC_VADC_GROUP_InputClassInit:
 1313              	.LFB166:
 478:../Libraries/XMCLib/src/xmc_vadc.c **** 
 479:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to program conversion characteristics */
 480:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
 481:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 482:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1314              	 .loc 2 482 0
 1315              	 .cfi_startproc
 1316 0000 80B5     	 push {r7,lr}
 1317              	.LCFI61:
 1318              	 .cfi_def_cfa_offset 8
 1319              	 .cfi_offset 7,-8
 1320              	 .cfi_offset 14,-4
 1321 0002 8CB0     	 sub sp,sp,#48
 1322              	.LCFI62:
 1323              	 .cfi_def_cfa_offset 56
 1324 0004 00AF     	 add r7,sp,#0
 1325              	.LCFI63:
 1326              	 .cfi_def_cfa_register 7
 1327 0006 F860     	 str r0,[r7,#12]
 1328 0008 B960     	 str r1,[r7,#8]
 1329 000a 3B60     	 str r3,[r7]
 1330 000c FB1D     	 add r3,r7,#7
 1331 000e 1A70     	 strb r2,[r3]
 483:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_class;
 484:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_pos;
 485:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_pos;
 486:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_mask;
 487:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_mask;
 488:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time;
 489:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONVMODE_t conv_mode;
 490:../Libraries/XMCLib/src/xmc_vadc.c **** 
 491:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
 492:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_
 493:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLAS
 494:../Libraries/XMCLib/src/xmc_vadc.c **** 
 495:../Libraries/XMCLib/src/xmc_vadc.c ****   /* 
 496:../Libraries/XMCLib/src/xmc_vadc.c ****    * Obtain the mask and position macros of the parameters based on what is being requested - Stand
 497:../Libraries/XMCLib/src/xmc_vadc.c ****    * external mux channels.
 498:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 499:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_CONV_STD == conv_type)
 1332              	 .loc 2 499 0
 1333 0010 FB1D     	 add r3,r7,#7
 1334 0012 1B78     	 ldrb r3,[r3]
 1335 0014 002B     	 cmp r3,#0
 1336 0016 19D1     	 bne .L58
 500:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 501:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 1337              	 .loc 2 501 0
 1338 0018 0823     	 mov r3,#8
 1339 001a FB62     	 str r3,[r7,#44]
 502:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 1340              	 .loc 2 502 0
 1341 001c E023     	 mov r3,#224
 1342 001e DB00     	 lsl r3,r3,#3
 1343 0020 7B62     	 str r3,[r7,#36]
 503:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 1344              	 .loc 2 503 0
 1345 0022 0023     	 mov r3,#0
 1346 0024 BB62     	 str r3,[r7,#40]
 504:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 1347              	 .loc 2 504 0
 1348 0026 1F23     	 mov r3,#31
 1349 0028 3B62     	 str r3,[r7,#32]
 505:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sample_time_std_conv;
 1350              	 .loc 2 505 0
 1351 002a 0823     	 mov r3,#8
 1352 002c FB18     	 add r3,r7,r3
 1353 002e 1B78     	 ldrb r3,[r3]
 1354 0030 DB06     	 lsl r3,r3,#27
 1355 0032 DB0E     	 lsr r3,r3,#27
 1356 0034 DBB2     	 uxtb r3,r3
 1357 0036 FB61     	 str r3,[r7,#28]
 506:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 1358              	 .loc 2 506 0
 1359 0038 0923     	 mov r3,#9
 1360 003a FB18     	 add r3,r7,r3
 1361 003c 1B78     	 ldrb r3,[r3]
 1362 003e 5B07     	 lsl r3,r3,#29
 1363 0040 5B0F     	 lsr r3,r3,#29
 1364 0042 DAB2     	 uxtb r2,r3
 1365 0044 1B23     	 mov r3,#27
 1366 0046 FB18     	 add r3,r7,r3
 1367 0048 1A70     	 strb r2,[r3]
 1368 004a 19E0     	 b .L59
 1369              	.L58:
 507:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 508:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 509:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 510:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 1370              	 .loc 2 510 0
 1371 004c 1823     	 mov r3,#24
 1372 004e FB62     	 str r3,[r7,#44]
 511:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 1373              	 .loc 2 511 0
 1374 0050 E023     	 mov r3,#224
 1375 0052 DB04     	 lsl r3,r3,#19
 1376 0054 7B62     	 str r3,[r7,#36]
 512:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 1377              	 .loc 2 512 0
 1378 0056 1023     	 mov r3,#16
 1379 0058 BB62     	 str r3,[r7,#40]
 513:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 1380              	 .loc 2 513 0
 1381 005a F823     	 mov r3,#248
 1382 005c 5B03     	 lsl r3,r3,#13
 1383 005e 3B62     	 str r3,[r7,#32]
 514:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 1384              	 .loc 2 514 0
 1385 0060 0A23     	 mov r3,#10
 1386 0062 FB18     	 add r3,r7,r3
 1387 0064 1B78     	 ldrb r3,[r3]
 1388 0066 DB06     	 lsl r3,r3,#27
 1389 0068 DB0E     	 lsr r3,r3,#27
 1390 006a DBB2     	 uxtb r3,r3
 1391 006c FB61     	 str r3,[r7,#28]
 515:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 1392              	 .loc 2 515 0
 1393 006e 0B23     	 mov r3,#11
 1394 0070 FB18     	 add r3,r7,r3
 1395 0072 1B78     	 ldrb r3,[r3]
 1396 0074 5B07     	 lsl r3,r3,#29
 1397 0076 5B0F     	 lsr r3,r3,#29
 1398 0078 DAB2     	 uxtb r2,r3
 1399 007a 1B23     	 mov r3,#27
 1400 007c FB18     	 add r3,r7,r3
 1401 007e 1A70     	 strb r2,[r3]
 1402              	.L59:
 516:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 517:../Libraries/XMCLib/src/xmc_vadc.c **** 
 518:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the class */
 519:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class  = group_ptr->ICLASS[set_num];
 1403              	 .loc 2 519 0
 1404 0080 FB68     	 ldr r3,[r7,#12]
 1405 0082 3A68     	 ldr r2,[r7]
 1406 0084 2832     	 add r2,r2,#40
 1407 0086 9200     	 lsl r2,r2,#2
 1408 0088 D358     	 ldr r3,[r2,r3]
 1409 008a 7B61     	 str r3,[r7,#20]
 520:../Libraries/XMCLib/src/xmc_vadc.c **** 
 521:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the class register */
 522:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(conv_mode_mask);
 1410              	 .loc 2 522 0
 1411 008c 7B6A     	 ldr r3,[r7,#36]
 1412 008e DA43     	 mvn r2,r3
 1413 0090 7B69     	 ldr r3,[r7,#20]
 1414 0092 1340     	 and r3,r2
 1415 0094 7B61     	 str r3,[r7,#20]
 523:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 1416              	 .loc 2 523 0
 1417 0096 1B23     	 mov r3,#27
 1418 0098 FB18     	 add r3,r7,r3
 1419 009a 1A78     	 ldrb r2,[r3]
 1420 009c FB6A     	 ldr r3,[r7,#44]
 1421 009e 9A40     	 lsl r2,r2,r3
 1422 00a0 131C     	 mov r3,r2
 1423 00a2 7A69     	 ldr r2,[r7,#20]
 1424 00a4 1343     	 orr r3,r2
 1425 00a6 7B61     	 str r3,[r7,#20]
 524:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 1426              	 .loc 2 524 0
 1427 00a8 3B6A     	 ldr r3,[r7,#32]
 1428 00aa DA43     	 mvn r2,r3
 1429 00ac 7B69     	 ldr r3,[r7,#20]
 1430 00ae 1340     	 and r3,r2
 1431 00b0 7B61     	 str r3,[r7,#20]
 525:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 1432              	 .loc 2 525 0
 1433 00b2 BB6A     	 ldr r3,[r7,#40]
 1434 00b4 FA69     	 ldr r2,[r7,#28]
 1435 00b6 9A40     	 lsl r2,r2,r3
 1436 00b8 131C     	 mov r3,r2
 1437 00ba 7A69     	 ldr r2,[r7,#20]
 1438 00bc 1343     	 orr r3,r2
 1439 00be 7B61     	 str r3,[r7,#20]
 526:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 1440              	 .loc 2 526 0
 1441 00c0 FB68     	 ldr r3,[r7,#12]
 1442 00c2 3A68     	 ldr r2,[r7]
 1443 00c4 2832     	 add r2,r2,#40
 1444 00c6 9200     	 lsl r2,r2,#2
 1445 00c8 7969     	 ldr r1,[r7,#20]
 1446 00ca D150     	 str r1,[r2,r3]
 527:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1447              	 .loc 2 527 0
 1448 00cc BD46     	 mov sp,r7
 1449 00ce 0CB0     	 add sp,sp,#48
 1450              	 
 1451 00d0 80BD     	 pop {r7,pc}
 1452              	 .cfi_endproc
 1453              	.LFE166:
 1455 00d2 C046     	 .section .text.XMC_VADC_GROUP_SetPowerMode,"ax",%progbits
 1456              	 .align 2
 1457              	 .global XMC_VADC_GROUP_SetPowerMode
 1458              	 .code 16
 1459              	 .thumb_func
 1461              	XMC_VADC_GROUP_SetPowerMode:
 1462              	.LFB167:
 528:../Libraries/XMCLib/src/xmc_vadc.c **** 
 529:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which sets the power mode of analog converter of a VADC group */
 530:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
 531:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1463              	 .loc 2 531 0
 1464              	 .cfi_startproc
 1465 0000 80B5     	 push {r7,lr}
 1466              	.LCFI64:
 1467              	 .cfi_def_cfa_offset 8
 1468              	 .cfi_offset 7,-8
 1469              	 .cfi_offset 14,-4
 1470 0002 84B0     	 sub sp,sp,#16
 1471              	.LCFI65:
 1472              	 .cfi_def_cfa_offset 24
 1473 0004 00AF     	 add r7,sp,#0
 1474              	.LCFI66:
 1475              	 .cfi_def_cfa_register 7
 1476 0006 7860     	 str r0,[r7,#4]
 1477 0008 0A1C     	 mov r2,r1
 1478 000a FB1C     	 add r3,r7,#3
 1479 000c 1A70     	 strb r2,[r3]
 532:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t arbcfg;
 533:../Libraries/XMCLib/src/xmc_vadc.c **** 
 534:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 535:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMOD
 536:../Libraries/XMCLib/src/xmc_vadc.c **** 
 537:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = group_ptr->ARBCFG;
 1480              	 .loc 2 537 0
 1481 000e 7B68     	 ldr r3,[r7,#4]
 1482 0010 8022     	 mov r2,#128
 1483 0012 9B58     	 ldr r3,[r3,r2]
 1484 0014 FB60     	 str r3,[r7,#12]
 538:../Libraries/XMCLib/src/xmc_vadc.c **** 
 539:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 1485              	 .loc 2 539 0
 1486 0016 FB68     	 ldr r3,[r7,#12]
 1487 0018 0322     	 mov r2,#3
 1488 001a 9343     	 bic r3,r2
 1489 001c FB60     	 str r3,[r7,#12]
 540:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg |= (uint32_t)power_mode;
 1490              	 .loc 2 540 0
 1491 001e FB1C     	 add r3,r7,#3
 1492 0020 1B78     	 ldrb r3,[r3]
 1493 0022 FA68     	 ldr r2,[r7,#12]
 1494 0024 1343     	 orr r3,r2
 1495 0026 FB60     	 str r3,[r7,#12]
 541:../Libraries/XMCLib/src/xmc_vadc.c **** 
 542:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = arbcfg;
 1496              	 .loc 2 542 0
 1497 0028 7B68     	 ldr r3,[r7,#4]
 1498 002a 8021     	 mov r1,#128
 1499 002c FA68     	 ldr r2,[r7,#12]
 1500 002e 5A50     	 str r2,[r3,r1]
 543:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1501              	 .loc 2 543 0
 1502 0030 BD46     	 mov sp,r7
 1503 0032 04B0     	 add sp,sp,#16
 1504              	 
 1505 0034 80BD     	 pop {r7,pc}
 1506              	 .cfi_endproc
 1507              	.LFE167:
 1509 0036 C046     	 .section .text.XMC_VADC_GROUP_SetSyncSlave,"ax",%progbits
 1510              	 .align 2
 1511              	 .global XMC_VADC_GROUP_SetSyncSlave
 1512              	 .code 16
 1513              	 .thumb_func
 1515              	XMC_VADC_GROUP_SetSyncSlave:
 1516              	.LFB168:
 544:../Libraries/XMCLib/src/xmc_vadc.c **** 
 545:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a slave group during sync conversions */
 546:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
 547:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1517              	 .loc 2 547 0
 1518              	 .cfi_startproc
 1519 0000 80B5     	 push {r7,lr}
 1520              	.LCFI67:
 1521              	 .cfi_def_cfa_offset 8
 1522              	 .cfi_offset 7,-8
 1523              	 .cfi_offset 14,-4
 1524 0002 86B0     	 sub sp,sp,#24
 1525              	.LCFI68:
 1526              	 .cfi_def_cfa_offset 32
 1527 0004 00AF     	 add r7,sp,#0
 1528              	.LCFI69:
 1529              	 .cfi_def_cfa_register 7
 1530 0006 F860     	 str r0,[r7,#12]
 1531 0008 B960     	 str r1,[r7,#8]
 1532 000a 7A60     	 str r2,[r7,#4]
 548:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 549:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 550:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 551:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 552:../Libraries/XMCLib/src/xmc_vadc.c ****   
 553:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 554:../Libraries/XMCLib/src/xmc_vadc.c **** 
 555:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the coding of SYNCTR */
 556:../Libraries/XMCLib/src/xmc_vadc.c ****   if (slave_grp > master_grp)
 1533              	 .loc 2 556 0
 1534 000c 7A68     	 ldr r2,[r7,#4]
 1535 000e BB68     	 ldr r3,[r7,#8]
 1536 0010 9A42     	 cmp r2,r3
 1537 0012 02D9     	 bls .L62
 557:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 558:../Libraries/XMCLib/src/xmc_vadc.c ****     master_grp = master_grp + 1U;
 1538              	 .loc 2 558 0
 1539 0014 BB68     	 ldr r3,[r7,#8]
 1540 0016 0133     	 add r3,r3,#1
 1541 0018 BB60     	 str r3,[r7,#8]
 1542              	.L62:
 559:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 560:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 561:../Libraries/XMCLib/src/xmc_vadc.c ****   
 562:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program SYNCTR */
 563:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1543              	 .loc 2 563 0
 1544 001a FB68     	 ldr r3,[r7,#12]
 1545 001c C022     	 mov r2,#192
 1546 001e 9B58     	 ldr r3,[r3,r2]
 1547 0020 7B61     	 str r3,[r7,#20]
 564:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1548              	 .loc 2 564 0
 1549 0022 7B69     	 ldr r3,[r7,#20]
 1550 0024 0322     	 mov r2,#3
 1551 0026 9343     	 bic r3,r2
 1552 0028 7B61     	 str r3,[r7,#20]
 565:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   |= master_grp;
 1553              	 .loc 2 565 0
 1554 002a 7A69     	 ldr r2,[r7,#20]
 1555 002c BB68     	 ldr r3,[r7,#8]
 1556 002e 1343     	 orr r3,r2
 1557 0030 7B61     	 str r3,[r7,#20]
 566:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1558              	 .loc 2 566 0
 1559 0032 FB68     	 ldr r3,[r7,#12]
 1560 0034 C021     	 mov r1,#192
 1561 0036 7A69     	 ldr r2,[r7,#20]
 1562 0038 5A50     	 str r2,[r3,r1]
 567:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1563              	 .loc 2 567 0
 1564 003a BD46     	 mov sp,r7
 1565 003c 06B0     	 add sp,sp,#24
 1566              	 
 1567 003e 80BD     	 pop {r7,pc}
 1568              	 .cfi_endproc
 1569              	.LFE168:
 1571              	 .section .text.XMC_VADC_GROUP_SetSyncMaster,"ax",%progbits
 1572              	 .align 2
 1573              	 .global XMC_VADC_GROUP_SetSyncMaster
 1574              	 .code 16
 1575              	 .thumb_func
 1577              	XMC_VADC_GROUP_SetSyncMaster:
 1578              	.LFB169:
 568:../Libraries/XMCLib/src/xmc_vadc.c **** 
 569:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a master group during sync conversions */
 570:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
 571:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1579              	 .loc 2 571 0
 1580              	 .cfi_startproc
 1581 0000 80B5     	 push {r7,lr}
 1582              	.LCFI70:
 1583              	 .cfi_def_cfa_offset 8
 1584              	 .cfi_offset 7,-8
 1585              	 .cfi_offset 14,-4
 1586 0002 84B0     	 sub sp,sp,#16
 1587              	.LCFI71:
 1588              	 .cfi_def_cfa_offset 24
 1589 0004 00AF     	 add r7,sp,#0
 1590              	.LCFI72:
 1591              	 .cfi_def_cfa_register 7
 1592 0006 7860     	 str r0,[r7,#4]
 572:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 573:../Libraries/XMCLib/src/xmc_vadc.c **** 
 574:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 575:../Libraries/XMCLib/src/xmc_vadc.c **** 
 576:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1593              	 .loc 2 576 0
 1594 0008 7B68     	 ldr r3,[r7,#4]
 1595 000a C022     	 mov r2,#192
 1596 000c 9B58     	 ldr r3,[r3,r2]
 1597 000e FB60     	 str r3,[r7,#12]
 577:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1598              	 .loc 2 577 0
 1599 0010 FB68     	 ldr r3,[r7,#12]
 1600 0012 0322     	 mov r2,#3
 1601 0014 9343     	 bic r3,r2
 1602 0016 FB60     	 str r3,[r7,#12]
 578:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1603              	 .loc 2 578 0
 1604 0018 7B68     	 ldr r3,[r7,#4]
 1605 001a C021     	 mov r1,#192
 1606 001c FA68     	 ldr r2,[r7,#12]
 1607 001e 5A50     	 str r2,[r3,r1]
 579:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1608              	 .loc 2 579 0
 1609 0020 BD46     	 mov sp,r7
 1610 0022 04B0     	 add sp,sp,#16
 1611              	 
 1612 0024 80BD     	 pop {r7,pc}
 1613              	 .cfi_endproc
 1614              	.LFE169:
 1616 0026 C046     	 .section .text.XMC_VADC_GROUP_CheckSlaveReadiness,"ax",%progbits
 1617              	 .align 2
 1618              	 .global XMC_VADC_GROUP_CheckSlaveReadiness
 1619              	 .code 16
 1620              	 .thumb_func
 1622              	XMC_VADC_GROUP_CheckSlaveReadiness:
 1623              	.LFB170:
 580:../Libraries/XMCLib/src/xmc_vadc.c **** 
 581:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable checking of readiness of slaves before a synchronous conversion request is issued 
 582:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 583:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1624              	 .loc 2 583 0
 1625              	 .cfi_startproc
 1626 0000 80B5     	 push {r7,lr}
 1627              	.LCFI73:
 1628              	 .cfi_def_cfa_offset 8
 1629              	 .cfi_offset 7,-8
 1630              	 .cfi_offset 14,-4
 1631 0002 84B0     	 sub sp,sp,#16
 1632              	.LCFI74:
 1633              	 .cfi_def_cfa_offset 24
 1634 0004 00AF     	 add r7,sp,#0
 1635              	.LCFI75:
 1636              	 .cfi_def_cfa_register 7
 1637 0006 7860     	 str r0,[r7,#4]
 1638 0008 3960     	 str r1,[r7]
 584:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i,master_grp_num;
 585:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
 586:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave_
 587:../Libraries/XMCLib/src/xmc_vadc.c **** 
 588:../Libraries/XMCLib/src/xmc_vadc.c ****   master_grp_num =0;
 1639              	 .loc 2 588 0
 1640 000a 0023     	 mov r3,#0
 1641 000c BB60     	 str r3,[r7,#8]
 589:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1642              	 .loc 2 589 0
 1643 000e 0023     	 mov r3,#0
 1644 0010 FB60     	 str r3,[r7,#12]
 1645 0012 0BE0     	 b .L65
 1646              	.L67:
 590:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 591:../Libraries/XMCLib/src/xmc_vadc.c ****     if(g_xmc_vadc_group_array[i] == group_ptr)
 1647              	 .loc 2 591 0
 1648 0014 124B     	 ldr r3,.L69
 1649 0016 FA68     	 ldr r2,[r7,#12]
 1650 0018 9200     	 lsl r2,r2,#2
 1651 001a D258     	 ldr r2,[r2,r3]
 1652 001c 7B68     	 ldr r3,[r7,#4]
 1653 001e 9A42     	 cmp r2,r3
 1654 0020 01D1     	 bne .L66
 592:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 593:../Libraries/XMCLib/src/xmc_vadc.c ****       master_grp_num = i;
 1655              	 .loc 2 593 0
 1656 0022 FB68     	 ldr r3,[r7,#12]
 1657 0024 BB60     	 str r3,[r7,#8]
 1658              	.L66:
 589:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1659              	 .loc 2 589 0 discriminator 2
 1660 0026 FB68     	 ldr r3,[r7,#12]
 1661 0028 0133     	 add r3,r3,#1
 1662 002a FB60     	 str r3,[r7,#12]
 1663              	.L65:
 589:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1664              	 .loc 2 589 0 is_stmt 0 discriminator 1
 1665 002c FB68     	 ldr r3,[r7,#12]
 1666 002e 012B     	 cmp r3,#1
 1667 0030 F0D9     	 bls .L67
 594:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 595:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 596:../Libraries/XMCLib/src/xmc_vadc.c **** 
 597:../Libraries/XMCLib/src/xmc_vadc.c **** 
 598:../Libraries/XMCLib/src/xmc_vadc.c ****   if(slave_group < master_grp_num)
 1668              	 .loc 2 598 0 is_stmt 1
 1669 0032 3A68     	 ldr r2,[r7]
 1670 0034 BB68     	 ldr r3,[r7,#8]
 1671 0036 9A42     	 cmp r2,r3
 1672 0038 02D2     	 bcs .L68
 599:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 600:../Libraries/XMCLib/src/xmc_vadc.c ****     slave_group++;
 1673              	 .loc 2 600 0
 1674 003a 3B68     	 ldr r3,[r7]
 1675 003c 0133     	 add r3,r3,#1
 1676 003e 3B60     	 str r3,[r7]
 1677              	.L68:
 601:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 602:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 1678              	 .loc 2 602 0
 1679 0040 7B68     	 ldr r3,[r7,#4]
 1680 0042 C022     	 mov r2,#192
 1681 0044 9A58     	 ldr r2,[r3,r2]
 1682 0046 3B68     	 ldr r3,[r7]
 1683 0048 0333     	 add r3,r3,#3
 1684 004a 191C     	 mov r1,r3
 1685 004c 0123     	 mov r3,#1
 1686 004e 8B40     	 lsl r3,r3,r1
 1687 0050 1A43     	 orr r2,r3
 1688 0052 7B68     	 ldr r3,[r7,#4]
 1689 0054 C021     	 mov r1,#192
 1690 0056 5A50     	 str r2,[r3,r1]
 603:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1691              	 .loc 2 603 0
 1692 0058 BD46     	 mov sp,r7
 1693 005a 04B0     	 add sp,sp,#16
 1694              	 
 1695 005c 80BD     	 pop {r7,pc}
 1696              	.L70:
 1697 005e C046     	 .align 2
 1698              	.L69:
 1699 0060 00000000 	 .word g_xmc_vadc_group_array
 1700              	 .cfi_endproc
 1701              	.LFE170:
 1703              	 .section .text.XMC_VADC_GROUP_IgnoreSlaveReadiness,"ax",%progbits
 1704              	 .align 2
 1705              	 .global XMC_VADC_GROUP_IgnoreSlaveReadiness
 1706              	 .code 16
 1707              	 .thumb_func
 1709              	XMC_VADC_GROUP_IgnoreSlaveReadiness:
 1710              	.LFB171:
 604:../Libraries/XMCLib/src/xmc_vadc.c **** 
 605:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable checking of readiness of slaves during synchronous conversions */
 606:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 607:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1711              	 .loc 2 607 0
 1712              	 .cfi_startproc
 1713 0000 80B5     	 push {r7,lr}
 1714              	.LCFI76:
 1715              	 .cfi_def_cfa_offset 8
 1716              	 .cfi_offset 7,-8
 1717              	 .cfi_offset 14,-4
 1718 0002 84B0     	 sub sp,sp,#16
 1719              	.LCFI77:
 1720              	 .cfi_def_cfa_offset 24
 1721 0004 00AF     	 add r7,sp,#0
 1722              	.LCFI78:
 1723              	 .cfi_def_cfa_register 7
 1724 0006 7860     	 str r0,[r7,#4]
 1725 0008 3960     	 str r1,[r7]
 608:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i,master_grp_num;
 609:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
 610:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Slave group", ((slave_group >= 0) && (slave
 611:../Libraries/XMCLib/src/xmc_vadc.c **** 
 612:../Libraries/XMCLib/src/xmc_vadc.c ****   master_grp_num =0;
 1726              	 .loc 2 612 0
 1727 000a 0023     	 mov r3,#0
 1728 000c BB60     	 str r3,[r7,#8]
 613:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1729              	 .loc 2 613 0
 1730 000e 0023     	 mov r3,#0
 1731 0010 FB60     	 str r3,[r7,#12]
 1732 0012 0BE0     	 b .L72
 1733              	.L74:
 614:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 615:../Libraries/XMCLib/src/xmc_vadc.c **** 	  if(g_xmc_vadc_group_array[i] == group_ptr)
 1734              	 .loc 2 615 0
 1735 0014 124B     	 ldr r3,.L76
 1736 0016 FA68     	 ldr r2,[r7,#12]
 1737 0018 9200     	 lsl r2,r2,#2
 1738 001a D258     	 ldr r2,[r2,r3]
 1739 001c 7B68     	 ldr r3,[r7,#4]
 1740 001e 9A42     	 cmp r2,r3
 1741 0020 01D1     	 bne .L73
 616:../Libraries/XMCLib/src/xmc_vadc.c **** 	  {
 617:../Libraries/XMCLib/src/xmc_vadc.c **** 	    master_grp_num = i;
 1742              	 .loc 2 617 0
 1743 0022 FB68     	 ldr r3,[r7,#12]
 1744 0024 BB60     	 str r3,[r7,#8]
 1745              	.L73:
 613:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1746              	 .loc 2 613 0 discriminator 2
 1747 0026 FB68     	 ldr r3,[r7,#12]
 1748 0028 0133     	 add r3,r3,#1
 1749 002a FB60     	 str r3,[r7,#12]
 1750              	.L72:
 613:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1751              	 .loc 2 613 0 is_stmt 0 discriminator 1
 1752 002c FB68     	 ldr r3,[r7,#12]
 1753 002e 012B     	 cmp r3,#1
 1754 0030 F0D9     	 bls .L74
 618:../Libraries/XMCLib/src/xmc_vadc.c **** 	  }
 619:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 620:../Libraries/XMCLib/src/xmc_vadc.c **** 
 621:../Libraries/XMCLib/src/xmc_vadc.c ****   if(slave_group < master_grp_num)
 1755              	 .loc 2 621 0 is_stmt 1
 1756 0032 3A68     	 ldr r2,[r7]
 1757 0034 BB68     	 ldr r3,[r7,#8]
 1758 0036 9A42     	 cmp r2,r3
 1759 0038 02D2     	 bcs .L75
 622:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 623:../Libraries/XMCLib/src/xmc_vadc.c **** 	  slave_group++;
 1760              	 .loc 2 623 0
 1761 003a 3B68     	 ldr r3,[r7]
 1762 003c 0133     	 add r3,r3,#1
 1763 003e 3B60     	 str r3,[r7]
 1764              	.L75:
 624:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 625:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~(1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 1765              	 .loc 2 625 0
 1766 0040 7B68     	 ldr r3,[r7,#4]
 1767 0042 C022     	 mov r2,#192
 1768 0044 9B58     	 ldr r3,[r3,r2]
 1769 0046 3A68     	 ldr r2,[r7]
 1770 0048 0332     	 add r2,r2,#3
 1771 004a 111C     	 mov r1,r2
 1772 004c 0122     	 mov r2,#1
 1773 004e 8A40     	 lsl r2,r2,r1
 1774 0050 D243     	 mvn r2,r2
 1775 0052 1A40     	 and r2,r3
 1776 0054 7B68     	 ldr r3,[r7,#4]
 1777 0056 C021     	 mov r1,#192
 1778 0058 5A50     	 str r2,[r3,r1]
 626:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1779              	 .loc 2 626 0
 1780 005a BD46     	 mov sp,r7
 1781 005c 04B0     	 add sp,sp,#16
 1782              	 
 1783 005e 80BD     	 pop {r7,pc}
 1784              	.L77:
 1785              	 .align 2
 1786              	.L76:
 1787 0060 00000000 	 .word g_xmc_vadc_group_array
 1788              	 .cfi_endproc
 1789              	.LFE171:
 1791              	 .section .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal,"ax",%progbits
 1792              	 .align 2
 1793              	 .global XMC_VADC_GROUP_SetSyncSlaveReadySignal
 1794              	 .code 16
 1795              	 .thumb_func
 1797              	XMC_VADC_GROUP_SetSyncSlaveReadySignal:
 1798              	.LFB172:
 627:../Libraries/XMCLib/src/xmc_vadc.c **** 
 628:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure EVAL bit in the slave groups*/
 629:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
 630:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint32_t eval_waiting_group,
 631:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint32_t eval_origin_group)
 632:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1799              	 .loc 2 632 0
 1800              	 .cfi_startproc
 1801 0000 80B5     	 push {r7,lr}
 1802              	.LCFI79:
 1803              	 .cfi_def_cfa_offset 8
 1804              	 .cfi_offset 7,-8
 1805              	 .cfi_offset 14,-4
 1806 0002 84B0     	 sub sp,sp,#16
 1807              	.LCFI80:
 1808              	 .cfi_def_cfa_offset 24
 1809 0004 00AF     	 add r7,sp,#0
 1810              	.LCFI81:
 1811              	 .cfi_def_cfa_register 7
 1812 0006 F860     	 str r0,[r7,#12]
 1813 0008 B960     	 str r1,[r7,#8]
 1814 000a 7A60     	 str r2,[r7,#4]
 633:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
 634:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group numbers", (eval_waiting_group != e
 635:../Libraries/XMCLib/src/xmc_vadc.c **** 
 636:../Libraries/XMCLib/src/xmc_vadc.c ****   if(eval_origin_group < eval_waiting_group)
 1815              	 .loc 2 636 0
 1816 000c 7A68     	 ldr r2,[r7,#4]
 1817 000e BB68     	 ldr r3,[r7,#8]
 1818 0010 9A42     	 cmp r2,r3
 1819 0012 02D2     	 bcs .L79
 637:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 638:../Libraries/XMCLib/src/xmc_vadc.c **** 	  eval_origin_group++;
 1820              	 .loc 2 638 0
 1821 0014 7B68     	 ldr r3,[r7,#4]
 1822 0016 0133     	 add r3,r3,#1
 1823 0018 7B60     	 str r3,[r7,#4]
 1824              	.L79:
 639:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 640:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (eval_origin_group + XMC_VADC_SYNCTR_START_LOCATION));
 1825              	 .loc 2 640 0
 1826 001a FB68     	 ldr r3,[r7,#12]
 1827 001c C022     	 mov r2,#192
 1828 001e 9A58     	 ldr r2,[r3,r2]
 1829 0020 7B68     	 ldr r3,[r7,#4]
 1830 0022 0333     	 add r3,r3,#3
 1831 0024 191C     	 mov r1,r3
 1832 0026 0123     	 mov r3,#1
 1833 0028 8B40     	 lsl r3,r3,r1
 1834 002a 1A43     	 orr r2,r3
 1835 002c FB68     	 ldr r3,[r7,#12]
 1836 002e C021     	 mov r1,#192
 1837 0030 5A50     	 str r2,[r3,r1]
 641:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1838              	 .loc 2 641 0
 1839 0032 BD46     	 mov sp,r7
 1840 0034 04B0     	 add sp,sp,#16
 1841              	 
 1842 0036 80BD     	 pop {r7,pc}
 1843              	 .cfi_endproc
 1844              	.LFE172:
 1846              	 .section .text.XMC_VADC_GROUP_EnableChannelSyncRequest,"ax",%progbits
 1847              	 .align 2
 1848              	 .global XMC_VADC_GROUP_EnableChannelSyncRequest
 1849              	 .code 16
 1850              	 .thumb_func
 1852              	XMC_VADC_GROUP_EnableChannelSyncRequest:
 1853              	.LFB173:
 642:../Libraries/XMCLib/src/xmc_vadc.c **** 
 643:../Libraries/XMCLib/src/xmc_vadc.c **** 
 644:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the synchronous conversion feature - Applicable only to kernel configured as maste
 645:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
 646:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1854              	 .loc 2 646 0
 1855              	 .cfi_startproc
 1856 0000 80B5     	 push {r7,lr}
 1857              	.LCFI82:
 1858              	 .cfi_def_cfa_offset 8
 1859              	 .cfi_offset 7,-8
 1860              	 .cfi_offset 14,-4
 1861 0002 84B0     	 sub sp,sp,#16
 1862              	.LCFI83:
 1863              	 .cfi_def_cfa_offset 24
 1864 0004 00AF     	 add r7,sp,#0
 1865              	.LCFI84:
 1866              	 .cfi_def_cfa_register 7
 1867 0006 7860     	 str r0,[r7,#4]
 1868 0008 3960     	 str r1,[r7]
 647:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 648:../Libraries/XMCLib/src/xmc_vadc.c **** 
 649:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
 650:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Channel Number",
 651:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 652:../Libraries/XMCLib/src/xmc_vadc.c **** 
 653:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1869              	 .loc 2 653 0
 1870 000a 7B68     	 ldr r3,[r7,#4]
 1871 000c C022     	 mov r2,#192
 1872 000e 9B58     	 ldr r3,[r3,r2]
 1873 0010 FB60     	 str r3,[r7,#12]
 654:../Libraries/XMCLib/src/xmc_vadc.c **** 
 655:../Libraries/XMCLib/src/xmc_vadc.c ****   if (!(synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk))
 1874              	 .loc 2 655 0
 1875 0012 FB68     	 ldr r3,[r7,#12]
 1876 0014 0322     	 mov r2,#3
 1877 0016 1340     	 and r3,r2
 1878 0018 0DD1     	 bne .L80
 656:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 657:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] |= (uint32_t)((uint32_t)1 << VADC_G_CHCTR_SYNC_Pos);
 1879              	 .loc 2 657 0
 1880 001a 7B68     	 ldr r3,[r7,#4]
 1881 001c 3A68     	 ldr r2,[r7]
 1882 001e 8032     	 add r2,r2,#128
 1883 0020 9200     	 lsl r2,r2,#2
 1884 0022 D358     	 ldr r3,[r2,r3]
 1885 0024 8022     	 mov r2,#128
 1886 0026 D200     	 lsl r2,r2,#3
 1887 0028 1A43     	 orr r2,r3
 1888 002a 111C     	 mov r1,r2
 1889 002c 7B68     	 ldr r3,[r7,#4]
 1890 002e 3A68     	 ldr r2,[r7]
 1891 0030 8032     	 add r2,r2,#128
 1892 0032 9200     	 lsl r2,r2,#2
 1893 0034 D150     	 str r1,[r2,r3]
 1894              	.L80:
 658:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 659:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1895              	 .loc 2 659 0
 1896 0036 BD46     	 mov sp,r7
 1897 0038 04B0     	 add sp,sp,#16
 1898              	 
 1899 003a 80BD     	 pop {r7,pc}
 1900              	 .cfi_endproc
 1901              	.LFE173:
 1903              	 .section .text.XMC_VADC_GROUP_DisableChannelSyncRequest,"ax",%progbits
 1904              	 .align 2
 1905              	 .global XMC_VADC_GROUP_DisableChannelSyncRequest
 1906              	 .code 16
 1907              	 .thumb_func
 1909              	XMC_VADC_GROUP_DisableChannelSyncRequest:
 1910              	.LFB174:
 660:../Libraries/XMCLib/src/xmc_vadc.c **** 
 661:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable synchronous conversion feature */
 662:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
 663:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1911              	 .loc 2 663 0
 1912              	 .cfi_startproc
 1913 0000 80B5     	 push {r7,lr}
 1914              	.LCFI85:
 1915              	 .cfi_def_cfa_offset 8
 1916              	 .cfi_offset 7,-8
 1917              	 .cfi_offset 14,-4
 1918 0002 84B0     	 sub sp,sp,#16
 1919              	.LCFI86:
 1920              	 .cfi_def_cfa_offset 24
 1921 0004 00AF     	 add r7,sp,#0
 1922              	.LCFI87:
 1923              	 .cfi_def_cfa_register 7
 1924 0006 7860     	 str r0,[r7,#4]
 1925 0008 3960     	 str r1,[r7]
 664:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    synctr;
 665:../Libraries/XMCLib/src/xmc_vadc.c **** 
 666:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
 667:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Channel Number",
 668:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 669:../Libraries/XMCLib/src/xmc_vadc.c **** 
 670:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1926              	 .loc 2 670 0
 1927 000a 7B68     	 ldr r3,[r7,#4]
 1928 000c C022     	 mov r2,#192
 1929 000e 9B58     	 ldr r3,[r3,r2]
 1930 0010 FB60     	 str r3,[r7,#12]
 671:../Libraries/XMCLib/src/xmc_vadc.c **** 
 672:../Libraries/XMCLib/src/xmc_vadc.c ****   if (synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk)
 1931              	 .loc 2 672 0
 1932 0012 FB68     	 ldr r3,[r7,#12]
 1933 0014 0322     	 mov r2,#3
 1934 0016 1340     	 and r3,r2
 1935 0018 0CD0     	 beq .L82
 673:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 674:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_SYNC_Msk);
 1936              	 .loc 2 674 0
 1937 001a 7B68     	 ldr r3,[r7,#4]
 1938 001c 3A68     	 ldr r2,[r7]
 1939 001e 8032     	 add r2,r2,#128
 1940 0020 9200     	 lsl r2,r2,#2
 1941 0022 D358     	 ldr r3,[r2,r3]
 1942 0024 054A     	 ldr r2,.L84
 1943 0026 1340     	 and r3,r2
 1944 0028 191C     	 mov r1,r3
 1945 002a 7B68     	 ldr r3,[r7,#4]
 1946 002c 3A68     	 ldr r2,[r7]
 1947 002e 8032     	 add r2,r2,#128
 1948 0030 9200     	 lsl r2,r2,#2
 1949 0032 D150     	 str r1,[r2,r3]
 1950              	.L82:
 675:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 676:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1951              	 .loc 2 676 0
 1952 0034 BD46     	 mov sp,r7
 1953 0036 04B0     	 add sp,sp,#16
 1954              	 
 1955 0038 80BD     	 pop {r7,pc}
 1956              	.L85:
 1957 003a C046     	 .align 2
 1958              	.L84:
 1959 003c FFFBFFFF 	 .word -1025
 1960              	 .cfi_endproc
 1961              	.LFE174:
 1963              	 .section .text.XMC_VADC_GROUP_IsConverterBusy,"ax",%progbits
 1964              	 .align 2
 1965              	 .global XMC_VADC_GROUP_IsConverterBusy
 1966              	 .code 16
 1967              	 .thumb_func
 1969              	XMC_VADC_GROUP_IsConverterBusy:
 1970              	.LFB175:
 677:../Libraries/XMCLib/src/xmc_vadc.c **** 
 678:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the converter state - Idle vs Busy */ 
 679:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr)
 680:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1971              	 .loc 2 680 0
 1972              	 .cfi_startproc
 1973 0000 80B5     	 push {r7,lr}
 1974              	.LCFI88:
 1975              	 .cfi_def_cfa_offset 8
 1976              	 .cfi_offset 7,-8
 1977              	 .cfi_offset 14,-4
 1978 0002 84B0     	 sub sp,sp,#16
 1979              	.LCFI89:
 1980              	 .cfi_def_cfa_offset 24
 1981 0004 00AF     	 add r7,sp,#0
 1982              	.LCFI90:
 1983              	 .cfi_def_cfa_register 7
 1984 0006 7860     	 str r0,[r7,#4]
 681:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      arbcfg;
 682:../Libraries/XMCLib/src/xmc_vadc.c **** 
 683:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsConverterBusy:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
 684:../Libraries/XMCLib/src/xmc_vadc.c **** 
 685:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg  = group_ptr->ARBCFG;
 1985              	 .loc 2 685 0
 1986 0008 7B68     	 ldr r3,[r7,#4]
 1987 000a 8022     	 mov r2,#128
 1988 000c 9B58     	 ldr r3,[r3,r2]
 1989 000e FB60     	 str r3,[r7,#12]
 686:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= (uint32_t)VADC_G_ARBCFG_BUSY_Msk;
 1990              	 .loc 2 686 0
 1991 0010 FA68     	 ldr r2,[r7,#12]
 1992 0012 8023     	 mov r3,#128
 1993 0014 DB05     	 lsl r3,r3,#23
 1994 0016 1340     	 and r3,r2
 1995 0018 FB60     	 str r3,[r7,#12]
 687:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = arbcfg >> VADC_G_ARBCFG_BUSY_Pos;
 1996              	 .loc 2 687 0
 1997 001a FB68     	 ldr r3,[r7,#12]
 1998 001c 9B0F     	 lsr r3,r3,#30
 1999 001e FB60     	 str r3,[r7,#12]
 688:../Libraries/XMCLib/src/xmc_vadc.c **** 
 689:../Libraries/XMCLib/src/xmc_vadc.c ****   return( (XMC_VADC_GROUP_STATE_t)arbcfg);
 2000              	 .loc 2 689 0
 2001 0020 FB68     	 ldr r3,[r7,#12]
 2002 0022 DBB2     	 uxtb r3,r3
 690:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2003              	 .loc 2 690 0
 2004 0024 181C     	 mov r0,r3
 2005 0026 BD46     	 mov sp,r7
 2006 0028 04B0     	 add sp,sp,#16
 2007              	 
 2008 002a 80BD     	 pop {r7,pc}
 2009              	 .cfi_endproc
 2010              	.LFE175:
 2012              	 .section .text.XMC_VADC_GROUP_SetBoundaries,"ax",%progbits
 2013              	 .align 2
 2014              	 .global XMC_VADC_GROUP_SetBoundaries
 2015              	 .code 16
 2016              	 .thumb_func
 2018              	XMC_VADC_GROUP_SetBoundaries:
 2019              	.LFB176:
 691:../Libraries/XMCLib/src/xmc_vadc.c **** 
 692:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boundaries for conversion results */
 693:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, const uint32_t boundary0, cons
 694:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2020              	 .loc 2 694 0
 2021              	 .cfi_startproc
 2022 0000 80B5     	 push {r7,lr}
 2023              	.LCFI91:
 2024              	 .cfi_def_cfa_offset 8
 2025              	 .cfi_offset 7,-8
 2026              	 .cfi_offset 14,-4
 2027 0002 86B0     	 sub sp,sp,#24
 2028              	.LCFI92:
 2029              	 .cfi_def_cfa_offset 32
 2030 0004 00AF     	 add r7,sp,#0
 2031              	.LCFI93:
 2032              	 .cfi_def_cfa_register 7
 2033 0006 F860     	 str r0,[r7,#12]
 2034 0008 B960     	 str r1,[r7,#8]
 2035 000a 7A60     	 str r2,[r7,#4]
 695:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 696:../Libraries/XMCLib/src/xmc_vadc.c **** 
 697:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaries:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 698:../Libraries/XMCLib/src/xmc_vadc.c **** 
 699:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 700:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2036              	 .loc 2 700 0
 2037 000c FB68     	 ldr r3,[r7,#12]
 2038 000e B822     	 mov r2,#184
 2039 0010 9B58     	 ldr r3,[r3,r2]
 2040 0012 7B61     	 str r3,[r7,#20]
 701:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2041              	 .loc 2 701 0
 2042 0014 7B69     	 ldr r3,[r7,#20]
 2043 0016 1B0B     	 lsr r3,r3,#12
 2044 0018 1B03     	 lsl r3,r3,#12
 2045 001a 7B61     	 str r3,[r7,#20]
 702:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2046              	 .loc 2 702 0
 2047 001c 7B69     	 ldr r3,[r7,#20]
 2048 001e 094A     	 ldr r2,.L89
 2049 0020 1340     	 and r3,r2
 2050 0022 7B61     	 str r3,[r7,#20]
 703:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary0 << VADC_G_BOUND_BOUNDARY0_Pos);
 2051              	 .loc 2 703 0
 2052 0024 7A69     	 ldr r2,[r7,#20]
 2053 0026 BB68     	 ldr r3,[r7,#8]
 2054 0028 1343     	 orr r3,r2
 2055 002a 7B61     	 str r3,[r7,#20]
 704:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary1 << VADC_G_BOUND_BOUNDARY1_Pos);
 2056              	 .loc 2 704 0
 2057 002c 7B68     	 ldr r3,[r7,#4]
 2058 002e 1B04     	 lsl r3,r3,#16
 2059 0030 7A69     	 ldr r2,[r7,#20]
 2060 0032 1343     	 orr r3,r2
 2061 0034 7B61     	 str r3,[r7,#20]
 705:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2062              	 .loc 2 705 0
 2063 0036 FB68     	 ldr r3,[r7,#12]
 2064 0038 B821     	 mov r1,#184
 2065 003a 7A69     	 ldr r2,[r7,#20]
 2066 003c 5A50     	 str r2,[r3,r1]
 706:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2067              	 .loc 2 706 0
 2068 003e BD46     	 mov sp,r7
 2069 0040 06B0     	 add sp,sp,#24
 2070              	 
 2071 0042 80BD     	 pop {r7,pc}
 2072              	.L90:
 2073              	 .align 2
 2074              	.L89:
 2075 0044 FFFF00F0 	 .word -268369921
 2076              	 .cfi_endproc
 2077              	.LFE176:
 2079              	 .section .text.XMC_VADC_GROUP_SetIndividualBoundary,"ax",%progbits
 2080              	 .align 2
 2081              	 .global XMC_VADC_GROUP_SetIndividualBoundary
 2082              	 .code 16
 2083              	 .thumb_func
 2085              	XMC_VADC_GROUP_SetIndividualBoundary:
 2086              	.LFB177:
 707:../Libraries/XMCLib/src/xmc_vadc.c **** 
 708:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 709:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
 710:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 711:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint16_t boundary_value)
 712:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2087              	 .loc 2 712 0
 2088              	 .cfi_startproc
 2089 0000 80B5     	 push {r7,lr}
 2090              	.LCFI94:
 2091              	 .cfi_def_cfa_offset 8
 2092              	 .cfi_offset 7,-8
 2093              	 .cfi_offset 14,-4
 2094 0002 84B0     	 sub sp,sp,#16
 2095              	.LCFI95:
 2096              	 .cfi_def_cfa_offset 24
 2097 0004 00AF     	 add r7,sp,#0
 2098              	.LCFI96:
 2099              	 .cfi_def_cfa_register 7
 2100 0006 7860     	 str r0,[r7,#4]
 2101 0008 081C     	 mov r0,r1
 2102 000a 111C     	 mov r1,r2
 2103 000c FB1C     	 add r3,r7,#3
 2104 000e 021C     	 add r2,r0,#0
 2105 0010 1A70     	 strb r2,[r3]
 2106 0012 3B1C     	 mov r3,r7
 2107 0014 0A1C     	 add r2,r1,#0
 2108 0016 1A80     	 strh r2,[r3]
 713:../Libraries/XMCLib/src/xmc_vadc.c **** 
 714:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 715:../Libraries/XMCLib/src/xmc_vadc.c **** 
 716:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 717:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Boundary Selection",
 718:../Libraries/XMCLib/src/xmc_vadc.c ****                ((XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection) ||
 719:../Libraries/XMCLib/src/xmc_vadc.c ****                 (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)))
 720:../Libraries/XMCLib/src/xmc_vadc.c **** 
 721:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 722:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2109              	 .loc 2 722 0
 2110 0018 7B68     	 ldr r3,[r7,#4]
 2111 001a B822     	 mov r2,#184
 2112 001c 9B58     	 ldr r3,[r3,r2]
 2113 001e FB60     	 str r3,[r7,#12]
 723:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection)
 2114              	 .loc 2 723 0
 2115 0020 FB1C     	 add r3,r7,#3
 2116 0022 1B78     	 ldrb r3,[r3]
 2117 0024 002B     	 cmp r3,#0
 2118 0026 09D1     	 bne .L92
 724:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 725:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2119              	 .loc 2 725 0
 2120 0028 FB68     	 ldr r3,[r7,#12]
 2121 002a 1B0B     	 lsr r3,r3,#12
 2122 002c 1B03     	 lsl r3,r3,#12
 2123 002e FB60     	 str r3,[r7,#12]
 726:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY0_Pos);
 2124              	 .loc 2 726 0
 2125 0030 3B1C     	 mov r3,r7
 2126 0032 1B88     	 ldrh r3,[r3]
 2127 0034 FA68     	 ldr r2,[r7,#12]
 2128 0036 1343     	 orr r3,r2
 2129 0038 FB60     	 str r3,[r7,#12]
 2130 003a 0DE0     	 b .L93
 2131              	.L92:
 727:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 728:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)
 2132              	 .loc 2 728 0
 2133 003c FB1C     	 add r3,r7,#3
 2134 003e 1B78     	 ldrb r3,[r3]
 2135 0040 012B     	 cmp r3,#1
 2136 0042 09D1     	 bne .L93
 729:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 730:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2137              	 .loc 2 730 0
 2138 0044 FB68     	 ldr r3,[r7,#12]
 2139 0046 084A     	 ldr r2,.L94
 2140 0048 1340     	 and r3,r2
 2141 004a FB60     	 str r3,[r7,#12]
 731:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 2142              	 .loc 2 731 0
 2143 004c 3B1C     	 mov r3,r7
 2144 004e 1B88     	 ldrh r3,[r3]
 2145 0050 1B04     	 lsl r3,r3,#16
 2146 0052 FA68     	 ldr r2,[r7,#12]
 2147 0054 1343     	 orr r3,r2
 2148 0056 FB60     	 str r3,[r7,#12]
 2149              	.L93:
 732:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 733:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 734:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 735:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 736:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 737:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2150              	 .loc 2 737 0
 2151 0058 7B68     	 ldr r3,[r7,#4]
 2152 005a B821     	 mov r1,#184
 2153 005c FA68     	 ldr r2,[r7,#12]
 2154 005e 5A50     	 str r2,[r3,r1]
 738:../Libraries/XMCLib/src/xmc_vadc.c **** 
 739:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2155              	 .loc 2 739 0
 2156 0060 BD46     	 mov sp,r7
 2157 0062 04B0     	 add sp,sp,#16
 2158              	 
 2159 0064 80BD     	 pop {r7,pc}
 2160              	.L95:
 2161 0066 C046     	 .align 2
 2162              	.L94:
 2163 0068 FFFF00F0 	 .word -268369921
 2164              	 .cfi_endproc
 2165              	.LFE177:
 2167              	 .section .text.XMC_VADC_GROUP_TriggerServiceRequest,"ax",%progbits
 2168              	 .align 2
 2169              	 .global XMC_VADC_GROUP_TriggerServiceRequest
 2170              	 .code 16
 2171              	 .thumb_func
 2173              	XMC_VADC_GROUP_TriggerServiceRequest:
 2174              	.LFB178:
 740:../Libraries/XMCLib/src/xmc_vadc.c **** 
 741:../Libraries/XMCLib/src/xmc_vadc.c **** /* Manually assert service request (Interrupt) to NVIC */
 742:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
 743:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint32_t sr_num,
 744:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_IRQ_t type)
 745:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2175              	 .loc 2 745 0
 2176              	 .cfi_startproc
 2177 0000 80B5     	 push {r7,lr}
 2178              	.LCFI97:
 2179              	 .cfi_def_cfa_offset 8
 2180              	 .cfi_offset 7,-8
 2181              	 .cfi_offset 14,-4
 2182 0002 86B0     	 sub sp,sp,#24
 2183              	.LCFI98:
 2184              	 .cfi_def_cfa_offset 32
 2185 0004 00AF     	 add r7,sp,#0
 2186              	.LCFI99:
 2187              	 .cfi_def_cfa_register 7
 2188 0006 F860     	 str r0,[r7,#12]
 2189 0008 B960     	 str r1,[r7,#8]
 2190 000a FB1D     	 add r3,r7,#7
 2191 000c 1A70     	 strb r2,[r3]
 746:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sract;
 747:../Libraries/XMCLib/src/xmc_vadc.c **** 
 748:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 749:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR number", (sr_num <= XMC_VADC_SR_SHARED_
 750:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR type", ((type)<= XMC_VADC_GROUP_IRQ_SHA
 751:../Libraries/XMCLib/src/xmc_vadc.c **** 
 752:../Libraries/XMCLib/src/xmc_vadc.c ****   sract = group_ptr->SRACT;
 2192              	 .loc 2 752 0
 2193 000e FA68     	 ldr r2,[r7,#12]
 2194 0010 E423     	 mov r3,#228
 2195 0012 5B00     	 lsl r3,r3,#1
 2196 0014 D358     	 ldr r3,[r2,r3]
 2197 0016 7B61     	 str r3,[r7,#20]
 753:../Libraries/XMCLib/src/xmc_vadc.c **** 
 754:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_IRQ_KERNEL == type)
 2198              	 .loc 2 754 0
 2199 0018 FB1D     	 add r3,r7,#7
 2200 001a 1B78     	 ldrb r3,[r3]
 2201 001c 002B     	 cmp r3,#0
 2202 001e 07D1     	 bne .L97
 755:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 756:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << sr_num);
 2203              	 .loc 2 756 0
 2204 0020 BB68     	 ldr r3,[r7,#8]
 2205 0022 0122     	 mov r2,#1
 2206 0024 9A40     	 lsl r2,r2,r3
 2207 0026 131C     	 mov r3,r2
 2208 0028 7A69     	 ldr r2,[r7,#20]
 2209 002a 1343     	 orr r3,r2
 2210 002c 7B61     	 str r3,[r7,#20]
 2211 002e 07E0     	 b .L98
 2212              	.L97:
 757:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 758:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 759:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 760:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << (sr_num + (uint32_t)8));
 2213              	 .loc 2 760 0
 2214 0030 BB68     	 ldr r3,[r7,#8]
 2215 0032 0833     	 add r3,r3,#8
 2216 0034 1A1C     	 mov r2,r3
 2217 0036 0123     	 mov r3,#1
 2218 0038 9340     	 lsl r3,r3,r2
 2219 003a 7A69     	 ldr r2,[r7,#20]
 2220 003c 1343     	 orr r3,r2
 2221 003e 7B61     	 str r3,[r7,#20]
 2222              	.L98:
 761:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 762:../Libraries/XMCLib/src/xmc_vadc.c **** 
 763:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SRACT = sract;
 2223              	 .loc 2 763 0
 2224 0040 FA68     	 ldr r2,[r7,#12]
 2225 0042 E423     	 mov r3,#228
 2226 0044 5B00     	 lsl r3,r3,#1
 2227 0046 7969     	 ldr r1,[r7,#20]
 2228 0048 D150     	 str r1,[r2,r3]
 764:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2229              	 .loc 2 764 0
 2230 004a BD46     	 mov sp,r7
 2231 004c 06B0     	 add sp,sp,#24
 2232              	 
 2233 004e 80BD     	 pop {r7,pc}
 2234              	 .cfi_endproc
 2235              	.LFE178:
 2237              	 .section .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode,"ax",%progbits
 2238              	 .align 2
 2239              	 .global XMC_VADC_GROUP_SetBoundaryEventInterruptNode
 2240              	 .code 16
 2241              	 .thumb_func
 2243              	XMC_VADC_GROUP_SetBoundaryEventInterruptNode:
 2244              	.LFB179:
 765:../Libraries/XMCLib/src/xmc_vadc.c **** 
 766:../Libraries/XMCLib/src/xmc_vadc.c **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
 767:../Libraries/XMCLib/src/xmc_vadc.c **** 
 768:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the SR line for the Boundary flag node pointer*/
 769:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
 770:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const uint8_t boundary_flag_num,
 771:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const XMC_VADC_BOUNDARY_NODE_t sr
 772:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2245              	 .loc 2 772 0
 2246              	 .cfi_startproc
 2247 0000 80B5     	 push {r7,lr}
 2248              	.LCFI100:
 2249              	 .cfi_def_cfa_offset 8
 2250              	 .cfi_offset 7,-8
 2251              	 .cfi_offset 14,-4
 2252 0002 84B0     	 sub sp,sp,#16
 2253              	.LCFI101:
 2254              	 .cfi_def_cfa_offset 24
 2255 0004 00AF     	 add r7,sp,#0
 2256              	.LCFI102:
 2257              	 .cfi_def_cfa_register 7
 2258 0006 7860     	 str r0,[r7,#4]
 2259 0008 081C     	 mov r0,r1
 2260 000a 111C     	 mov r1,r2
 2261 000c FB1C     	 add r3,r7,#3
 2262 000e 021C     	 add r2,r0,#0
 2263 0010 1A70     	 strb r2,[r3]
 2264 0012 BB1C     	 add r3,r7,#2
 2265 0014 0A1C     	 add r2,r1,#0
 2266 0016 1A70     	 strb r2,[r3]
 773:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t flag_pos;
 774:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaryEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GRO
 775:../Libraries/XMCLib/src/xmc_vadc.c **** 
 776:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the GxBFLNP */
 777:../Libraries/XMCLib/src/xmc_vadc.c ****   flag_pos = (uint32_t)boundary_flag_num << (uint32_t)2;
 2267              	 .loc 2 777 0
 2268 0018 FB1C     	 add r3,r7,#3
 2269 001a 1B78     	 ldrb r3,[r3]
 2270 001c 9B00     	 lsl r3,r3,#2
 2271 001e FB60     	 str r3,[r7,#12]
 778:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP &= ~((uint32_t)VADC_G_BFLNP_BFL0NP_Msk << flag_pos);
 2272              	 .loc 2 778 0
 2273 0020 7B68     	 ldr r3,[r7,#4]
 2274 0022 D422     	 mov r2,#212
 2275 0024 9B58     	 ldr r3,[r3,r2]
 2276 0026 FA68     	 ldr r2,[r7,#12]
 2277 0028 0F21     	 mov r1,#15
 2278 002a 9140     	 lsl r1,r1,r2
 2279 002c 0A1C     	 mov r2,r1
 2280 002e D243     	 mvn r2,r2
 2281 0030 1A40     	 and r2,r3
 2282 0032 7B68     	 ldr r3,[r7,#4]
 2283 0034 D421     	 mov r1,#212
 2284 0036 5A50     	 str r2,[r3,r1]
 779:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 2285              	 .loc 2 779 0
 2286 0038 7B68     	 ldr r3,[r7,#4]
 2287 003a D422     	 mov r2,#212
 2288 003c 9A58     	 ldr r2,[r3,r2]
 2289 003e BB1C     	 add r3,r7,#2
 2290 0040 1978     	 ldrb r1,[r3]
 2291 0042 FB68     	 ldr r3,[r7,#12]
 2292 0044 9940     	 lsl r1,r1,r3
 2293 0046 0B1C     	 mov r3,r1
 2294 0048 1A43     	 orr r2,r3
 2295 004a 7B68     	 ldr r3,[r7,#4]
 2296 004c D421     	 mov r1,#212
 2297 004e 5A50     	 str r2,[r3,r1]
 780:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2298              	 .loc 2 780 0
 2299 0050 BD46     	 mov sp,r7
 2300 0052 04B0     	 add sp,sp,#16
 2301              	 
 2302 0054 80BD     	 pop {r7,pc}
 2303              	 .cfi_endproc
 2304              	.LFE179:
 2306 0056 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_Init,"ax",%progbits
 2307              	 .align 2
 2308              	 .global XMC_VADC_GLOBAL_SHS_Init
 2309              	 .code 16
 2310              	 .thumb_func
 2312              	XMC_VADC_GLOBAL_SHS_Init:
 2313              	.LFB180:
 781:../Libraries/XMCLib/src/xmc_vadc.c **** 
 782:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 783:../Libraries/XMCLib/src/xmc_vadc.c **** 
 784:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 785:../Libraries/XMCLib/src/xmc_vadc.c **** 
 786:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 787:../Libraries/XMCLib/src/xmc_vadc.c **** 
 788:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Initialize the Sample and hold features*/
 789:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFI
 790:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2314              	 .loc 2 790 0
 2315              	 .cfi_startproc
 2316 0000 80B5     	 push {r7,lr}
 2317              	.LCFI103:
 2318              	 .cfi_def_cfa_offset 8
 2319              	 .cfi_offset 7,-8
 2320              	 .cfi_offset 14,-4
 2321 0002 82B0     	 sub sp,sp,#8
 2322              	.LCFI104:
 2323              	 .cfi_def_cfa_offset 16
 2324 0004 00AF     	 add r7,sp,#0
 2325              	.LCFI105:
 2326              	 .cfi_def_cfa_register 7
 2327 0006 7860     	 str r0,[r7,#4]
 2328 0008 3960     	 str r1,[r7]
 791:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(voi
 792:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong Index number",(config == (XMC_VADC_GLOBAL_SHS_CONFIG_t
 793:../Libraries/XMCLib/src/xmc_vadc.c **** 
 794:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Initialize the SHS Configuration register*/
 795:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->SHSCFG = (uint32_t)((uint32_t)config->shscfg | (uint32_t)SHS_SHSCFG_SCWC_Msk);
 2329              	 .loc 2 795 0
 2330 000a 3B68     	 ldr r3,[r7]
 2331 000c 1B68     	 ldr r3,[r3]
 2332 000e 8022     	 mov r2,#128
 2333 0010 1202     	 lsl r2,r2,#8
 2334 0012 1A43     	 orr r2,r3
 2335 0014 7B68     	 ldr r3,[r7,#4]
 2336 0016 1A64     	 str r2,[r3,#64]
 796:../Libraries/XMCLib/src/xmc_vadc.c **** 
 797:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 798:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Select the Calibration order*/
 799:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALORD_Msk);
 2337              	 .loc 2 799 0
 2338 0018 7B68     	 ldr r3,[r7,#4]
 2339 001a BC22     	 mov r2,#188
 2340 001c 9B58     	 ldr r3,[r3,r2]
 2341 001e 0122     	 mov r2,#1
 2342 0020 9343     	 bic r3,r2
 2343 0022 1A1C     	 mov r2,r3
 2344 0024 7B68     	 ldr r3,[r7,#4]
 2345 0026 BC21     	 mov r1,#188
 2346 0028 5A50     	 str r2,[r3,r1]
 800:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
 2347              	 .loc 2 800 0
 2348 002a 7B68     	 ldr r3,[r7,#4]
 2349 002c BC22     	 mov r2,#188
 2350 002e 9B58     	 ldr r3,[r3,r2]
 2351 0030 3A68     	 ldr r2,[r7]
 2352 0032 1279     	 ldrb r2,[r2,#4]
 2353 0034 1A43     	 orr r2,r3
 2354 0036 7B68     	 ldr r3,[r7,#4]
 2355 0038 BC21     	 mov r1,#188
 2356 003a 5A50     	 str r2,[r3,r1]
 801:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 802:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2357              	 .loc 2 802 0
 2358 003c BD46     	 mov sp,r7
 2359 003e 02B0     	 add sp,sp,#8
 2360              	 
 2361 0040 80BD     	 pop {r7,pc}
 2362              	 .cfi_endproc
 2363              	.LFE180:
 2365 0042 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode,"ax",%progbits
 2366              	 .align 2
 2367              	 .global XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
 2368              	 .code 16
 2369              	 .thumb_func
 2371              	XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:
 2372              	.LFB181:
 803:../Libraries/XMCLib/src/xmc_vadc.c **** 
 804:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 805:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the accelerated mode of conversion */
 806:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP
 807:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2373              	 .loc 2 807 0
 2374              	 .cfi_startproc
 2375 0000 80B5     	 push {r7,lr}
 2376              	.LCFI106:
 2377              	 .cfi_def_cfa_offset 8
 2378              	 .cfi_offset 7,-8
 2379              	 .cfi_offset 14,-4
 2380 0002 82B0     	 sub sp,sp,#8
 2381              	.LCFI107:
 2382              	 .cfi_def_cfa_offset 16
 2383 0004 00AF     	 add r7,sp,#0
 2384              	.LCFI108:
 2385              	 .cfi_def_cfa_register 7
 2386 0006 7860     	 str r0,[r7,#4]
 2387 0008 0A1C     	 mov r2,r1
 2388 000a FB1C     	 add r3,r7,#3
 2389 000c 1A70     	 strb r2,[r3]
 808:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
 809:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 810:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_
 811:../Libraries/XMCLib/src/xmc_vadc.c **** 
 812:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 813:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2390              	 .loc 2 813 0
 2391 000e FB1C     	 add r3,r7,#3
 2392 0010 1B78     	 ldrb r3,[r3]
 2393 0012 002B     	 cmp r3,#0
 2394 0014 08D1     	 bne .L102
 814:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 815:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
 2395              	 .loc 2 815 0
 2396 0016 7B68     	 ldr r3,[r7,#4]
 2397 0018 8022     	 mov r2,#128
 2398 001a 9B58     	 ldr r3,[r3,r2]
 2399 001c 0122     	 mov r2,#1
 2400 001e 1A43     	 orr r2,r3
 2401 0020 7B68     	 ldr r3,[r7,#4]
 2402 0022 8021     	 mov r1,#128
 2403 0024 5A50     	 str r2,[r3,r1]
 2404 0026 0BE0     	 b .L101
 2405              	.L102:
 816:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 817:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2406              	 .loc 2 817 0
 2407 0028 FB1C     	 add r3,r7,#3
 2408 002a 1B78     	 ldrb r3,[r3]
 2409 002c 012B     	 cmp r3,#1
 2410 002e 07D1     	 bne .L101
 818:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 819:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
 2411              	 .loc 2 819 0
 2412 0030 7B68     	 ldr r3,[r7,#4]
 2413 0032 8422     	 mov r2,#132
 2414 0034 9B58     	 ldr r3,[r3,r2]
 2415 0036 0122     	 mov r2,#1
 2416 0038 1A43     	 orr r2,r3
 2417 003a 7B68     	 ldr r3,[r7,#4]
 2418 003c 8421     	 mov r1,#132
 2419 003e 5A50     	 str r2,[r3,r1]
 2420              	.L101:
 820:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 821:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 822:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 823:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 824:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 825:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2421              	 .loc 2 825 0
 2422 0040 BD46     	 mov sp,r7
 2423 0042 02B0     	 add sp,sp,#8
 2424              	 
 2425 0044 80BD     	 pop {r7,pc}
 2426              	 .cfi_endproc
 2427              	.LFE181:
 2429 0046 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode,"ax",%progbits
 2430              	 .align 2
 2431              	 .global XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode
 2432              	 .code 16
 2433              	 .thumb_func
 2435              	XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:
 2436              	.LFB182:
 826:../Libraries/XMCLib/src/xmc_vadc.c **** 
 827:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable the accelerated mode of conversion */
 828:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROU
 829:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2437              	 .loc 2 829 0
 2438              	 .cfi_startproc
 2439 0000 80B5     	 push {r7,lr}
 2440              	.LCFI109:
 2441              	 .cfi_def_cfa_offset 8
 2442              	 .cfi_offset 7,-8
 2443              	 .cfi_offset 14,-4
 2444 0002 82B0     	 sub sp,sp,#8
 2445              	.LCFI110:
 2446              	 .cfi_def_cfa_offset 16
 2447 0004 00AF     	 add r7,sp,#0
 2448              	.LCFI111:
 2449              	 .cfi_def_cfa_register 7
 2450 0006 7860     	 str r0,[r7,#4]
 2451 0008 0A1C     	 mov r2,r1
 2452 000a FB1C     	 add r3,r7,#3
 2453 000c 1A70     	 strb r2,[r3]
 830:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong SHS Pointer",
 831:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 832:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC
 833:../Libraries/XMCLib/src/xmc_vadc.c **** 
 834:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 835:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2454              	 .loc 2 835 0
 2455 000e FB1C     	 add r3,r7,#3
 2456 0010 1B78     	 ldrb r3,[r3]
 2457 0012 002B     	 cmp r3,#0
 2458 0014 09D1     	 bne .L105
 836:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 837:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~(uint32_t)SHS_TIMCFG0_AT_Msk;
 2459              	 .loc 2 837 0
 2460 0016 7B68     	 ldr r3,[r7,#4]
 2461 0018 8022     	 mov r2,#128
 2462 001a 9B58     	 ldr r3,[r3,r2]
 2463 001c 0122     	 mov r2,#1
 2464 001e 9343     	 bic r3,r2
 2465 0020 1A1C     	 mov r2,r3
 2466 0022 7B68     	 ldr r3,[r7,#4]
 2467 0024 8021     	 mov r1,#128
 2468 0026 5A50     	 str r2,[r3,r1]
 2469 0028 0CE0     	 b .L104
 2470              	.L105:
 838:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 839:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2471              	 .loc 2 839 0
 2472 002a FB1C     	 add r3,r7,#3
 2473 002c 1B78     	 ldrb r3,[r3]
 2474 002e 012B     	 cmp r3,#1
 2475 0030 08D1     	 bne .L104
 840:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 841:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~(uint32_t)SHS_TIMCFG1_AT_Msk;
 2476              	 .loc 2 841 0
 2477 0032 7B68     	 ldr r3,[r7,#4]
 2478 0034 8422     	 mov r2,#132
 2479 0036 9B58     	 ldr r3,[r3,r2]
 2480 0038 0122     	 mov r2,#1
 2481 003a 9343     	 bic r3,r2
 2482 003c 1A1C     	 mov r2,r3
 2483 003e 7B68     	 ldr r3,[r7,#4]
 2484 0040 8421     	 mov r1,#132
 2485 0042 5A50     	 str r2,[r3,r1]
 2486              	.L104:
 842:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 843:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 844:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 845:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 846:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 847:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2487              	 .loc 2 847 0
 2488 0044 BD46     	 mov sp,r7
 2489 0046 02B0     	 add sp,sp,#8
 2490              	 
 2491 0048 80BD     	 pop {r7,pc}
 2492              	 .cfi_endproc
 2493              	.LFE182:
 2495 004a C046     	 .section .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime,"ax",%progbits
 2496              	 .align 2
 2497              	 .global XMC_VADC_GLOBAL_SHS_SetShortSampleTime
 2498              	 .code 16
 2499              	 .thumb_func
 2501              	XMC_VADC_GLOBAL_SHS_SetShortSampleTime:
 2502              	.LFB183:
 848:../Libraries/XMCLib/src/xmc_vadc.c **** 
 849:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the Short sample time of the Sample and hold module*/
 850:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 851:../Libraries/XMCLib/src/xmc_vadc.c ****                                             XMC_VADC_GROUP_INDEX_t group_num,
 852:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint8_t sst_value)
 853:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2503              	 .loc 2 853 0
 2504              	 .cfi_startproc
 2505 0000 80B5     	 push {r7,lr}
 2506              	.LCFI112:
 2507              	 .cfi_def_cfa_offset 8
 2508              	 .cfi_offset 7,-8
 2509              	 .cfi_offset 14,-4
 2510 0002 82B0     	 sub sp,sp,#8
 2511              	.LCFI113:
 2512              	 .cfi_def_cfa_offset 16
 2513 0004 00AF     	 add r7,sp,#0
 2514              	.LCFI114:
 2515              	 .cfi_def_cfa_register 7
 2516 0006 7860     	 str r0,[r7,#4]
 2517 0008 081C     	 mov r0,r1
 2518 000a 111C     	 mov r1,r2
 2519 000c FB1C     	 add r3,r7,#3
 2520 000e 021C     	 add r2,r0,#0
 2521 0010 1A70     	 strb r2,[r3]
 2522 0012 BB1C     	 add r3,r7,#2
 2523 0014 0A1C     	 add r2,r1,#0
 2524 0016 1A70     	 strb r2,[r3]
 854:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SHS Pointer",
 855:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 856:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong Index number",(group_num <= XMC_VADC_GRO
 857:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SST value",(sst_value < 64U))
 858:../Libraries/XMCLib/src/xmc_vadc.c **** 
 859:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the short sample time for the Accelerated mode of operation*/
 860:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2525              	 .loc 2 860 0
 2526 0018 FB1C     	 add r3,r7,#3
 2527 001a 1B78     	 ldrb r3,[r3]
 2528 001c 002B     	 cmp r3,#0
 2529 001e 12D1     	 bne .L108
 861:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 862:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~((uint32_t)SHS_TIMCFG0_SST_Msk);
 2530              	 .loc 2 862 0
 2531 0020 7B68     	 ldr r3,[r7,#4]
 2532 0022 8022     	 mov r2,#128
 2533 0024 9B58     	 ldr r3,[r3,r2]
 2534 0026 144A     	 ldr r2,.L110
 2535 0028 1A40     	 and r2,r3
 2536 002a 7B68     	 ldr r3,[r7,#4]
 2537 002c 8021     	 mov r1,#128
 2538 002e 5A50     	 str r2,[r3,r1]
 863:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG0_SST_Pos );
 2539              	 .loc 2 863 0
 2540 0030 7B68     	 ldr r3,[r7,#4]
 2541 0032 8022     	 mov r2,#128
 2542 0034 9A58     	 ldr r2,[r3,r2]
 2543 0036 BB1C     	 add r3,r7,#2
 2544 0038 1B78     	 ldrb r3,[r3]
 2545 003a 1B02     	 lsl r3,r3,#8
 2546 003c 1A43     	 orr r2,r3
 2547 003e 7B68     	 ldr r3,[r7,#4]
 2548 0040 8021     	 mov r1,#128
 2549 0042 5A50     	 str r2,[r3,r1]
 2550 0044 15E0     	 b .L107
 2551              	.L108:
 864:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 865:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2552              	 .loc 2 865 0
 2553 0046 FB1C     	 add r3,r7,#3
 2554 0048 1B78     	 ldrb r3,[r3]
 2555 004a 012B     	 cmp r3,#1
 2556 004c 11D1     	 bne .L107
 866:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 867:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~((uint32_t)SHS_TIMCFG1_SST_Msk);
 2557              	 .loc 2 867 0
 2558 004e 7B68     	 ldr r3,[r7,#4]
 2559 0050 8422     	 mov r2,#132
 2560 0052 9B58     	 ldr r3,[r3,r2]
 2561 0054 084A     	 ldr r2,.L110
 2562 0056 1A40     	 and r2,r3
 2563 0058 7B68     	 ldr r3,[r7,#4]
 2564 005a 8421     	 mov r1,#132
 2565 005c 5A50     	 str r2,[r3,r1]
 868:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 2566              	 .loc 2 868 0
 2567 005e 7B68     	 ldr r3,[r7,#4]
 2568 0060 8422     	 mov r2,#132
 2569 0062 9A58     	 ldr r2,[r3,r2]
 2570 0064 BB1C     	 add r3,r7,#2
 2571 0066 1B78     	 ldrb r3,[r3]
 2572 0068 1B02     	 lsl r3,r3,#8
 2573 006a 1A43     	 orr r2,r3
 2574 006c 7B68     	 ldr r3,[r7,#4]
 2575 006e 8421     	 mov r1,#132
 2576 0070 5A50     	 str r2,[r3,r1]
 2577              	.L107:
 869:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 870:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 871:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 872:../Libraries/XMCLib/src/xmc_vadc.c ****   /* for MISRA*/
 873:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 874:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2578              	 .loc 2 874 0
 2579 0072 BD46     	 mov sp,r7
 2580 0074 02B0     	 add sp,sp,#8
 2581              	 
 2582 0076 80BD     	 pop {r7,pc}
 2583              	.L111:
 2584              	 .align 2
 2585              	.L110:
 2586 0078 FFC0FFFF 	 .word -16129
 2587              	 .cfi_endproc
 2588              	.LFE183:
 2590              	 .section .text.XMC_VADC_GLOBAL_SHS_SetGainFactor,"ax",%progbits
 2591              	 .align 2
 2592              	 .global XMC_VADC_GLOBAL_SHS_SetGainFactor
 2593              	 .code 16
 2594              	 .thumb_func
 2596              	XMC_VADC_GLOBAL_SHS_SetGainFactor:
 2597              	.LFB184:
 875:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 876:../Libraries/XMCLib/src/xmc_vadc.c **** 
 877:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the gain factor of the Sample and hold module*/
 878:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 879:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t gain_value,
 880:../Libraries/XMCLib/src/xmc_vadc.c ****                                        XMC_VADC_GROUP_INDEX_t group_num,
 881:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t ch_num)
 882:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2598              	 .loc 2 882 0
 2599              	 .cfi_startproc
 2600 0000 90B5     	 push {r4,r7,lr}
 2601              	.LCFI115:
 2602              	 .cfi_def_cfa_offset 12
 2603              	 .cfi_offset 4,-12
 2604              	 .cfi_offset 7,-8
 2605              	 .cfi_offset 14,-4
 2606 0002 85B0     	 sub sp,sp,#20
 2607              	.LCFI116:
 2608              	 .cfi_def_cfa_offset 32
 2609 0004 00AF     	 add r7,sp,#0
 2610              	.LCFI117:
 2611              	 .cfi_def_cfa_register 7
 2612 0006 7860     	 str r0,[r7,#4]
 2613 0008 0C1C     	 mov r4,r1
 2614 000a 101C     	 mov r0,r2
 2615 000c 191C     	 mov r1,r3
 2616 000e FB1C     	 add r3,r7,#3
 2617 0010 221C     	 add r2,r4,#0
 2618 0012 1A70     	 strb r2,[r3]
 2619 0014 BB1C     	 add r3,r7,#2
 2620 0016 021C     	 add r2,r0,#0
 2621 0018 1A70     	 strb r2,[r3]
 2622 001a 7B1C     	 add r3,r7,#1
 2623 001c 0A1C     	 add r2,r1,#0
 2624 001e 1A70     	 strb r2,[r3]
 883:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_mask;
 884:../Libraries/XMCLib/src/xmc_vadc.c **** 
 885:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SH
 886:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong Index number",(group_num <= XMC_VADC_GROUP_IN
 887:../Libraries/XMCLib/src/xmc_vadc.c **** 
 888:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Calculate location of channel bit-field*/
 889:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_mask = ((uint32_t)ch_num << (uint32_t)2);
 2625              	 .loc 2 889 0
 2626 0020 7B1C     	 add r3,r7,#1
 2627 0022 1B78     	 ldrb r3,[r3]
 2628 0024 9B00     	 lsl r3,r3,#2
 2629 0026 FB60     	 str r3,[r7,#12]
 890:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 2630              	 .loc 2 890 0
 2631 0028 BB1C     	 add r3,r7,#2
 2632 002a 1B78     	 ldrb r3,[r3]
 2633 002c 002B     	 cmp r3,#0
 2634 002e 1ED1     	 bne .L113
 891:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 892:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 &= ~((uint32_t)SHS_GNCTR00_GAIN0_Msk << ch_mask) ;
 2635              	 .loc 2 892 0
 2636 0030 7A68     	 ldr r2,[r7,#4]
 2637 0032 C023     	 mov r3,#192
 2638 0034 5B00     	 lsl r3,r3,#1
 2639 0036 D358     	 ldr r3,[r2,r3]
 2640 0038 FA68     	 ldr r2,[r7,#12]
 2641 003a 0F21     	 mov r1,#15
 2642 003c 9140     	 lsl r1,r1,r2
 2643 003e 0A1C     	 mov r2,r1
 2644 0040 D243     	 mvn r2,r2
 2645 0042 1A40     	 and r2,r3
 2646 0044 111C     	 mov r1,r2
 2647 0046 7A68     	 ldr r2,[r7,#4]
 2648 0048 C023     	 mov r3,#192
 2649 004a 5B00     	 lsl r3,r3,#1
 2650 004c D150     	 str r1,[r2,r3]
 893:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 |=  ((uint32_t)gain_value << ch_mask);
 2651              	 .loc 2 893 0
 2652 004e 7A68     	 ldr r2,[r7,#4]
 2653 0050 C023     	 mov r3,#192
 2654 0052 5B00     	 lsl r3,r3,#1
 2655 0054 D258     	 ldr r2,[r2,r3]
 2656 0056 FB1C     	 add r3,r7,#3
 2657 0058 1978     	 ldrb r1,[r3]
 2658 005a FB68     	 ldr r3,[r7,#12]
 2659 005c 9940     	 lsl r1,r1,r3
 2660 005e 0B1C     	 mov r3,r1
 2661 0060 1A43     	 orr r2,r3
 2662 0062 111C     	 mov r1,r2
 2663 0064 7A68     	 ldr r2,[r7,#4]
 2664 0066 C023     	 mov r3,#192
 2665 0068 5B00     	 lsl r3,r3,#1
 2666 006a D150     	 str r1,[r2,r3]
 2667 006c 21E0     	 b .L112
 2668              	.L113:
 894:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 895:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 2669              	 .loc 2 895 0
 2670 006e BB1C     	 add r3,r7,#2
 2671 0070 1B78     	 ldrb r3,[r3]
 2672 0072 012B     	 cmp r3,#1
 2673 0074 1DD1     	 bne .L112
 896:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 897:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 &= ~((uint32_t)SHS_GNCTR10_GAIN0_Msk << ch_mask);
 2674              	 .loc 2 897 0
 2675 0076 7A68     	 ldr r2,[r7,#4]
 2676 0078 C823     	 mov r3,#200
 2677 007a 5B00     	 lsl r3,r3,#1
 2678 007c D358     	 ldr r3,[r2,r3]
 2679 007e FA68     	 ldr r2,[r7,#12]
 2680 0080 0F21     	 mov r1,#15
 2681 0082 9140     	 lsl r1,r1,r2
 2682 0084 0A1C     	 mov r2,r1
 2683 0086 D243     	 mvn r2,r2
 2684 0088 1A40     	 and r2,r3
 2685 008a 111C     	 mov r1,r2
 2686 008c 7A68     	 ldr r2,[r7,#4]
 2687 008e C823     	 mov r3,#200
 2688 0090 5B00     	 lsl r3,r3,#1
 2689 0092 D150     	 str r1,[r2,r3]
 898:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 2690              	 .loc 2 898 0
 2691 0094 7A68     	 ldr r2,[r7,#4]
 2692 0096 C823     	 mov r3,#200
 2693 0098 5B00     	 lsl r3,r3,#1
 2694 009a D258     	 ldr r2,[r2,r3]
 2695 009c FB1C     	 add r3,r7,#3
 2696 009e 1978     	 ldrb r1,[r3]
 2697 00a0 FB68     	 ldr r3,[r7,#12]
 2698 00a2 9940     	 lsl r1,r1,r3
 2699 00a4 0B1C     	 mov r3,r1
 2700 00a6 1A43     	 orr r2,r3
 2701 00a8 111C     	 mov r1,r2
 2702 00aa 7A68     	 ldr r2,[r7,#4]
 2703 00ac C823     	 mov r3,#200
 2704 00ae 5B00     	 lsl r3,r3,#1
 2705 00b0 D150     	 str r1,[r2,r3]
 2706              	.L112:
 899:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 900:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 901:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 902:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 903:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 904:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2707              	 .loc 2 904 0
 2708 00b2 BD46     	 mov sp,r7
 2709 00b4 05B0     	 add sp,sp,#20
 2710              	 
 2711 00b6 90BD     	 pop {r4,r7,pc}
 2712              	 .cfi_endproc
 2713              	.LFE184:
 2715              	 .section .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations,"ax",%progbits
 2716              	 .align 2
 2717              	 .global XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations
 2718              	 .code 16
 2719              	 .thumb_func
 2721              	XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:
 2722              	.LFB185:
 905:../Libraries/XMCLib/src/xmc_vadc.c **** 
 906:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 907:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 908:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 909:../Libraries/XMCLib/src/xmc_vadc.c ****                                                          XMC_VADC_GROUP_INDEX_t group_num)
 910:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2723              	 .loc 2 910 0
 2724              	 .cfi_startproc
 2725 0000 80B5     	 push {r7,lr}
 2726              	.LCFI118:
 2727              	 .cfi_def_cfa_offset 8
 2728              	 .cfi_offset 7,-8
 2729              	 .cfi_offset 14,-4
 2730 0002 82B0     	 sub sp,sp,#8
 2731              	.LCFI119:
 2732              	 .cfi_def_cfa_offset 16
 2733 0004 00AF     	 add r7,sp,#0
 2734              	.LCFI120:
 2735              	 .cfi_def_cfa_register 7
 2736 0006 7860     	 str r0,[r7,#4]
 2737 0008 0A1C     	 mov r2,r1
 2738 000a FB1C     	 add r3,r7,#3
 2739 000c 1A70     	 strb r2,[r3]
 911:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong SHS Pointer",
 912:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 913:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong group selected",
 914:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 915:../Libraries/XMCLib/src/xmc_vadc.c **** 
 916:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable gain and offset calibration*/
 917:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2740              	 .loc 2 917 0
 2741 000e FB1C     	 add r3,r7,#3
 2742 0010 1B78     	 ldrb r3,[r3]
 2743 0012 002B     	 cmp r3,#0
 2744 0014 08D1     	 bne .L116
 918:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 919:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 &= ~((uint32_t)SHS_CALOC0_DISCAL_Msk);
 2745              	 .loc 2 919 0
 2746 0016 7B68     	 ldr r3,[r7,#4]
 2747 0018 E022     	 mov r2,#224
 2748 001a 9B58     	 ldr r3,[r3,r2]
 2749 001c 5B00     	 lsl r3,r3,#1
 2750 001e 5A08     	 lsr r2,r3,#1
 2751 0020 7B68     	 ldr r3,[r7,#4]
 2752 0022 E021     	 mov r1,#224
 2753 0024 5A50     	 str r2,[r3,r1]
 2754 0026 0BE0     	 b .L115
 2755              	.L116:
 920:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 921:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2756              	 .loc 2 921 0
 2757 0028 FB1C     	 add r3,r7,#3
 2758 002a 1B78     	 ldrb r3,[r3]
 2759 002c 012B     	 cmp r3,#1
 2760 002e 07D1     	 bne .L115
 922:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 923:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 &= ~((uint32_t)SHS_CALOC1_DISCAL_Msk);
 2761              	 .loc 2 923 0
 2762 0030 7B68     	 ldr r3,[r7,#4]
 2763 0032 E422     	 mov r2,#228
 2764 0034 9B58     	 ldr r3,[r3,r2]
 2765 0036 5B00     	 lsl r3,r3,#1
 2766 0038 5A08     	 lsr r2,r3,#1
 2767 003a 7B68     	 ldr r3,[r7,#4]
 2768 003c E421     	 mov r1,#228
 2769 003e 5A50     	 str r2,[r3,r1]
 2770              	.L115:
 924:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 925:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 926:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 927:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 928:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 929:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2771              	 .loc 2 929 0
 2772 0040 BD46     	 mov sp,r7
 2773 0042 02B0     	 add sp,sp,#8
 2774              	 
 2775 0044 80BD     	 pop {r7,pc}
 2776              	 .cfi_endproc
 2777              	.LFE185:
 2779 0046 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations,"ax",%progbits
 2780              	 .align 2
 2781              	 .global XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations
 2782              	 .code 16
 2783              	 .thumb_func
 2785              	XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:
 2786              	.LFB186:
 930:../Libraries/XMCLib/src/xmc_vadc.c **** 
 931:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 932:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 933:../Libraries/XMCLib/src/xmc_vadc.c ****                                                           XMC_VADC_GROUP_INDEX_t group_num)
 934:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2787              	 .loc 2 934 0
 2788              	 .cfi_startproc
 2789 0000 80B5     	 push {r7,lr}
 2790              	.LCFI121:
 2791              	 .cfi_def_cfa_offset 8
 2792              	 .cfi_offset 7,-8
 2793              	 .cfi_offset 14,-4
 2794 0002 82B0     	 sub sp,sp,#8
 2795              	.LCFI122:
 2796              	 .cfi_def_cfa_offset 16
 2797 0004 00AF     	 add r7,sp,#0
 2798              	.LCFI123:
 2799              	 .cfi_def_cfa_register 7
 2800 0006 7860     	 str r0,[r7,#4]
 2801 0008 0A1C     	 mov r2,r1
 2802 000a FB1C     	 add r3,r7,#3
 2803 000c 1A70     	 strb r2,[r3]
 935:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong SHS Pointer",
 936:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 937:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong group selected",
 938:../Libraries/XMCLib/src/xmc_vadc.c ****             (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 939:../Libraries/XMCLib/src/xmc_vadc.c **** 
 940:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2804              	 .loc 2 940 0
 2805 000e FB1C     	 add r3,r7,#3
 2806 0010 1B78     	 ldrb r3,[r3]
 2807 0012 002B     	 cmp r3,#0
 2808 0014 09D1     	 bne .L119
 941:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 942:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |= (uint32_t)SHS_CALOC0_DISCAL_Msk;
 2809              	 .loc 2 942 0
 2810 0016 7B68     	 ldr r3,[r7,#4]
 2811 0018 E022     	 mov r2,#224
 2812 001a 9B58     	 ldr r3,[r3,r2]
 2813 001c 8022     	 mov r2,#128
 2814 001e 1206     	 lsl r2,r2,#24
 2815 0020 1A43     	 orr r2,r3
 2816 0022 7B68     	 ldr r3,[r7,#4]
 2817 0024 E021     	 mov r1,#224
 2818 0026 5A50     	 str r2,[r3,r1]
 2819 0028 0CE0     	 b .L118
 2820              	.L119:
 943:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 944:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2821              	 .loc 2 944 0
 2822 002a FB1C     	 add r3,r7,#3
 2823 002c 1B78     	 ldrb r3,[r3]
 2824 002e 012B     	 cmp r3,#1
 2825 0030 08D1     	 bne .L118
 945:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 946:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |= (uint32_t)SHS_CALOC1_DISCAL_Msk;
 2826              	 .loc 2 946 0
 2827 0032 7B68     	 ldr r3,[r7,#4]
 2828 0034 E422     	 mov r2,#228
 2829 0036 9B58     	 ldr r3,[r3,r2]
 2830 0038 8022     	 mov r2,#128
 2831 003a 1206     	 lsl r2,r2,#24
 2832 003c 1A43     	 orr r2,r3
 2833 003e 7B68     	 ldr r3,[r7,#4]
 2834 0040 E421     	 mov r1,#228
 2835 0042 5A50     	 str r2,[r3,r1]
 2836              	.L118:
 947:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 948:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 949:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 950:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 951:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 952:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2837              	 .loc 2 952 0
 2838 0044 BD46     	 mov sp,r7
 2839 0046 02B0     	 add sp,sp,#8
 2840              	 
 2841 0048 80BD     	 pop {r7,pc}
 2842              	 .cfi_endproc
 2843              	.LFE186:
 2845 004a C046     	 .section .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue,"ax",%progbits
 2846              	 .align 2
 2847              	 .global XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue
 2848              	 .code 16
 2849              	 .thumb_func
 2851              	XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:
 2852              	.LFB187:
 953:../Libraries/XMCLib/src/xmc_vadc.c **** 
 954:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to get the offset calibration value of the Sample and hold module*/
 955:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 956:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
 957:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level)
 958:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2853              	 .loc 2 958 0
 2854              	 .cfi_startproc
 2855 0000 80B5     	 push {r7,lr}
 2856              	.LCFI124:
 2857              	 .cfi_def_cfa_offset 8
 2858              	 .cfi_offset 7,-8
 2859              	 .cfi_offset 14,-4
 2860 0002 84B0     	 sub sp,sp,#16
 2861              	.LCFI125:
 2862              	 .cfi_def_cfa_offset 24
 2863 0004 00AF     	 add r7,sp,#0
 2864              	.LCFI126:
 2865              	 .cfi_def_cfa_register 7
 2866 0006 7860     	 str r0,[r7,#4]
 2867 0008 081C     	 mov r0,r1
 2868 000a 111C     	 mov r1,r2
 2869 000c FB1C     	 add r3,r7,#3
 2870 000e 021C     	 add r2,r0,#0
 2871 0010 1A70     	 strb r2,[r3]
 2872 0012 BB1C     	 add r3,r7,#2
 2873 0014 0A1C     	 add r2,r1,#0
 2874 0016 1A70     	 strb r2,[r3]
 959:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t calibration_value;
 960:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong SHS Pointer",
 961:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 962:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong Group number selected",
 963:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 964:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong gain level selected",
 965:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 966:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 967:../Libraries/XMCLib/src/xmc_vadc.c **** 
 968:../Libraries/XMCLib/src/xmc_vadc.c ****   calibration_value = 0U;
 2875              	 .loc 2 968 0
 2876 0018 0023     	 mov r3,#0
 2877 001a FB60     	 str r3,[r7,#12]
 969:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2878              	 .loc 2 969 0
 2879 001c FB1C     	 add r3,r7,#3
 2880 001e 1B78     	 ldrb r3,[r3]
 2881 0020 002B     	 cmp r3,#0
 2882 0022 0AD1     	 bne .L122
 970:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 971:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC0 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC0_CALOFFVAL0
 2883              	 .loc 2 971 0
 2884 0024 7B68     	 ldr r3,[r7,#4]
 2885 0026 E022     	 mov r2,#224
 2886 0028 9A58     	 ldr r2,[r3,r2]
 2887 002a BB1C     	 add r3,r7,#2
 2888 002c 1B78     	 ldrb r3,[r3]
 2889 002e DA40     	 lsr r2,r2,r3
 2890 0030 131C     	 mov r3,r2
 2891 0032 7F22     	 mov r2,#127
 2892 0034 1340     	 and r3,r2
 2893 0036 FB60     	 str r3,[r7,#12]
 2894 0038 0DE0     	 b .L123
 2895              	.L122:
 972:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 973:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 2896              	 .loc 2 973 0
 2897 003a FB1C     	 add r3,r7,#3
 2898 003c 1B78     	 ldrb r3,[r3]
 2899 003e 012B     	 cmp r3,#1
 2900 0040 09D1     	 bne .L123
 974:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 975:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC1 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC1_CALOFFVAL0
 2901              	 .loc 2 975 0
 2902 0042 7B68     	 ldr r3,[r7,#4]
 2903 0044 E422     	 mov r2,#228
 2904 0046 9A58     	 ldr r2,[r3,r2]
 2905 0048 BB1C     	 add r3,r7,#2
 2906 004a 1B78     	 ldrb r3,[r3]
 2907 004c DA40     	 lsr r2,r2,r3
 2908 004e 131C     	 mov r3,r2
 2909 0050 7F22     	 mov r2,#127
 2910 0052 1340     	 and r3,r2
 2911 0054 FB60     	 str r3,[r7,#12]
 2912              	.L123:
 976:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 977:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 978:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 979:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 980:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 981:../Libraries/XMCLib/src/xmc_vadc.c ****   return ((uint8_t)calibration_value);
 2913              	 .loc 2 981 0
 2914 0056 FB68     	 ldr r3,[r7,#12]
 2915 0058 DBB2     	 uxtb r3,r3
 982:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2916              	 .loc 2 982 0
 2917 005a 181C     	 mov r0,r3
 2918 005c BD46     	 mov sp,r7
 2919 005e 04B0     	 add sp,sp,#16
 2920              	 
 2921 0060 80BD     	 pop {r7,pc}
 2922              	 .cfi_endproc
 2923              	.LFE187:
 2925 0062 C046     	 .section .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue,"ax",%progbits
 2926              	 .align 2
 2927              	 .global XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue
 2928              	 .code 16
 2929              	 .thumb_func
 2931              	XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:
 2932              	.LFB188:
 983:../Libraries/XMCLib/src/xmc_vadc.c **** 
 984:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the offset calibration value of the Sample and hold module*/
 985:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 986:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
 987:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
 988:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    uint8_t offset_calibration_value)
 989:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2933              	 .loc 2 989 0
 2934              	 .cfi_startproc
 2935 0000 90B5     	 push {r4,r7,lr}
 2936              	.LCFI127:
 2937              	 .cfi_def_cfa_offset 12
 2938              	 .cfi_offset 4,-12
 2939              	 .cfi_offset 7,-8
 2940              	 .cfi_offset 14,-4
 2941 0002 83B0     	 sub sp,sp,#12
 2942              	.LCFI128:
 2943              	 .cfi_def_cfa_offset 24
 2944 0004 00AF     	 add r7,sp,#0
 2945              	.LCFI129:
 2946              	 .cfi_def_cfa_register 7
 2947 0006 7860     	 str r0,[r7,#4]
 2948 0008 0C1C     	 mov r4,r1
 2949 000a 101C     	 mov r0,r2
 2950 000c 191C     	 mov r1,r3
 2951 000e FB1C     	 add r3,r7,#3
 2952 0010 221C     	 add r2,r4,#0
 2953 0012 1A70     	 strb r2,[r3]
 2954 0014 BB1C     	 add r3,r7,#2
 2955 0016 021C     	 add r2,r0,#0
 2956 0018 1A70     	 strb r2,[r3]
 2957 001a 7B1C     	 add r3,r7,#1
 2958 001c 0A1C     	 add r2,r1,#0
 2959 001e 1A70     	 strb r2,[r3]
 990:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong SHS Pointer",
 991:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 992:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong Group number selected",
 993:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 994:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong gain level selected",
 995:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 996:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 997:../Libraries/XMCLib/src/xmc_vadc.c **** 
 998:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 2960              	 .loc 2 998 0
 2961 0020 FB1C     	 add r3,r7,#3
 2962 0022 1B78     	 ldrb r3,[r3]
 2963 0024 002B     	 cmp r3,#0
 2964 0026 20D1     	 bne .L126
 999:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1000:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 = (shs_ptr->CALOC0  & ~((uint32_t)SHS_CALOC0_CALOFFVAL0_Msk << (uint32_t)gain_l
 2965              	 .loc 2 1000 0
 2966 0028 7B68     	 ldr r3,[r7,#4]
 2967 002a E022     	 mov r2,#224
 2968 002c 9B58     	 ldr r3,[r3,r2]
 2969 002e BA1C     	 add r2,r7,#2
 2970 0030 1278     	 ldrb r2,[r2]
 2971 0032 7F21     	 mov r1,#127
 2972 0034 9140     	 lsl r1,r1,r2
 2973 0036 0A1C     	 mov r2,r1
 2974 0038 D243     	 mvn r2,r2
 2975 003a 1340     	 and r3,r2
 2976 003c 8022     	 mov r2,#128
 2977 003e 1202     	 lsl r2,r2,#8
 2978 0040 1A43     	 orr r2,r3
 2979 0042 7B68     	 ldr r3,[r7,#4]
 2980 0044 E021     	 mov r1,#224
 2981 0046 5A50     	 str r2,[r3,r1]
1001:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC0_OFFWC_Msk;
1002:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 2982              	 .loc 2 1002 0
 2983 0048 7B68     	 ldr r3,[r7,#4]
 2984 004a E022     	 mov r2,#224
 2985 004c 9A58     	 ldr r2,[r3,r2]
 2986 004e 7B1C     	 add r3,r7,#1
 2987 0050 1978     	 ldrb r1,[r3]
 2988 0052 BB1C     	 add r3,r7,#2
 2989 0054 1B78     	 ldrb r3,[r3]
 2990 0056 9940     	 lsl r1,r1,r3
 2991 0058 0B1C     	 mov r3,r1
 2992 005a 1343     	 orr r3,r2
 2993 005c 8022     	 mov r2,#128
 2994 005e 1202     	 lsl r2,r2,#8
 2995 0060 1A43     	 orr r2,r3
 2996 0062 7B68     	 ldr r3,[r7,#4]
 2997 0064 E021     	 mov r1,#224
 2998 0066 5A50     	 str r2,[r3,r1]
 2999 0068 23E0     	 b .L125
 3000              	.L126:
1003:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1004:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 3001              	 .loc 2 1004 0
 3002 006a FB1C     	 add r3,r7,#3
 3003 006c 1B78     	 ldrb r3,[r3]
 3004 006e 012B     	 cmp r3,#1
 3005 0070 1FD1     	 bne .L125
1005:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1006:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 = (shs_ptr->CALOC1 & ~((uint32_t)SHS_CALOC1_CALOFFVAL0_Msk << (uint32_t)gain_le
 3006              	 .loc 2 1006 0
 3007 0072 7B68     	 ldr r3,[r7,#4]
 3008 0074 E422     	 mov r2,#228
 3009 0076 9B58     	 ldr r3,[r3,r2]
 3010 0078 BA1C     	 add r2,r7,#2
 3011 007a 1278     	 ldrb r2,[r2]
 3012 007c 7F21     	 mov r1,#127
 3013 007e 9140     	 lsl r1,r1,r2
 3014 0080 0A1C     	 mov r2,r1
 3015 0082 D243     	 mvn r2,r2
 3016 0084 1340     	 and r3,r2
 3017 0086 8022     	 mov r2,#128
 3018 0088 1202     	 lsl r2,r2,#8
 3019 008a 1A43     	 orr r2,r3
 3020 008c 7B68     	 ldr r3,[r7,#4]
 3021 008e E421     	 mov r1,#228
 3022 0090 5A50     	 str r2,[r3,r1]
1007:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
1008:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 3023              	 .loc 2 1008 0
 3024 0092 7B68     	 ldr r3,[r7,#4]
 3025 0094 E422     	 mov r2,#228
 3026 0096 9A58     	 ldr r2,[r3,r2]
 3027 0098 7B1C     	 add r3,r7,#1
 3028 009a 1978     	 ldrb r1,[r3]
 3029 009c BB1C     	 add r3,r7,#2
 3030 009e 1B78     	 ldrb r3,[r3]
 3031 00a0 9940     	 lsl r1,r1,r3
 3032 00a2 0B1C     	 mov r3,r1
 3033 00a4 1343     	 orr r3,r2
 3034 00a6 8022     	 mov r2,#128
 3035 00a8 1202     	 lsl r2,r2,#8
 3036 00aa 1A43     	 orr r2,r3
 3037 00ac 7B68     	 ldr r3,[r7,#4]
 3038 00ae E421     	 mov r1,#228
 3039 00b0 5A50     	 str r2,[r3,r1]
 3040              	.L125:
1009:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1010:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1011:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1012:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
1013:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1014:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3041              	 .loc 2 1014 0
 3042 00b2 BD46     	 mov sp,r7
 3043 00b4 03B0     	 add sp,sp,#12
 3044              	 
 3045 00b6 90BD     	 pop {r4,r7,pc}
 3046              	 .cfi_endproc
 3047              	.LFE188:
 3049              	 .section .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop,"ax",%progbits
 3050              	 .align 2
 3051              	 .global XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop
 3052              	 .code 16
 3053              	 .thumb_func
 3055              	XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:
 3056              	.LFB189:
1015:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1016:../Libraries/XMCLib/src/xmc_vadc.c **** 
1017:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the values of sigma delta loop of the Sample and hold module*/
1018:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1019:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_GROUP_INDEX_t group_num,
1020:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
1021:../Libraries/XMCLib/src/xmc_vadc.c ****                                            uint8_t ch_num)
1022:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3057              	 .loc 2 1022 0
 3058              	 .cfi_startproc
 3059 0000 90B5     	 push {r4,r7,lr}
 3060              	.LCFI130:
 3061              	 .cfi_def_cfa_offset 12
 3062              	 .cfi_offset 4,-12
 3063              	 .cfi_offset 7,-8
 3064              	 .cfi_offset 14,-4
 3065 0002 83B0     	 sub sp,sp,#12
 3066              	.LCFI131:
 3067              	 .cfi_def_cfa_offset 24
 3068 0004 00AF     	 add r7,sp,#0
 3069              	.LCFI132:
 3070              	 .cfi_def_cfa_register 7
 3071 0006 7860     	 str r0,[r7,#4]
 3072 0008 0C1C     	 mov r4,r1
 3073 000a 101C     	 mov r0,r2
 3074 000c 191C     	 mov r1,r3
 3075 000e FB1C     	 add r3,r7,#3
 3076 0010 221C     	 add r2,r4,#0
 3077 0012 1A70     	 strb r2,[r3]
 3078 0014 BB1C     	 add r3,r7,#2
 3079 0016 021C     	 add r2,r0,#0
 3080 0018 1A70     	 strb r2,[r3]
 3081 001a 7B1C     	 add r3,r7,#1
 3082 001c 0A1C     	 add r2,r1,#0
 3083 001e 1A70     	 strb r2,[r3]
1023:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong SHS Pointer",
1024:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1025:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Group number selected",
1026:../Libraries/XMCLib/src/xmc_vadc.c ****                (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
1027:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Delta sigma loop selected",
1028:../Libraries/XMCLib/src/xmc_vadc.c ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
1029:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Channel Number",
1030:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1031:../Libraries/XMCLib/src/xmc_vadc.c **** 
1032:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP &= ~(((uint32_t)SHS_LOOP_LPCH0_Msk | (uint32_t)SHS_LOOP_LPSH0_Msk | (uint32_t)SHS_L
 3084              	 .loc 2 1032 0
 3085 0020 7B68     	 ldr r3,[r7,#4]
 3086 0022 1B6D     	 ldr r3,[r3,#80]
1033:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 3087              	 .loc 2 1033 0
 3088 0024 BA1C     	 add r2,r7,#2
 3089 0026 1278     	 ldrb r2,[r2]
 3090 0028 0C49     	 ldr r1,.L129
 3091 002a 9140     	 lsl r1,r1,r2
 3092 002c 0A1C     	 mov r2,r1
1032:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
 3093              	 .loc 2 1032 0
 3094 002e D243     	 mvn r2,r2
 3095 0030 1A40     	 and r2,r3
 3096 0032 7B68     	 ldr r3,[r7,#4]
 3097 0034 1A65     	 str r2,[r3,#80]
1034:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP |= ((uint32_t)ch_num | ((uint32_t)group_num << (uint32_t)SHS_LOOP_LPSH0_Pos)) << (u
 3098              	 .loc 2 1034 0
 3099 0036 7B68     	 ldr r3,[r7,#4]
 3100 0038 1A6D     	 ldr r2,[r3,#80]
 3101 003a 7B1C     	 add r3,r7,#1
 3102 003c 1978     	 ldrb r1,[r3]
 3103 003e FB1C     	 add r3,r7,#3
 3104 0040 1B78     	 ldrb r3,[r3]
 3105 0042 1B02     	 lsl r3,r3,#8
 3106 0044 1943     	 orr r1,r3
 3107 0046 BB1C     	 add r3,r7,#2
 3108 0048 1B78     	 ldrb r3,[r3]
 3109 004a 9940     	 lsl r1,r1,r3
 3110 004c 0B1C     	 mov r3,r1
 3111 004e 1A43     	 orr r2,r3
 3112 0050 7B68     	 ldr r3,[r7,#4]
 3113 0052 1A65     	 str r2,[r3,#80]
1035:../Libraries/XMCLib/src/xmc_vadc.c **** 
1036:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3114              	 .loc 2 1036 0
 3115 0054 BD46     	 mov sp,r7
 3116 0056 03B0     	 add sp,sp,#12
 3117              	 
 3118 0058 90BD     	 pop {r4,r7,pc}
 3119              	.L130:
 3120 005a C046     	 .align 2
 3121              	.L129:
 3122 005c 1F810000 	 .word 33055
 3123              	 .cfi_endproc
 3124              	.LFE189:
 3126              	 .section .text.XMC_VADC_GROUP_ScanInit,"ax",%progbits
 3127              	 .align 2
 3128              	 .global XMC_VADC_GROUP_ScanInit
 3129              	 .code 16
 3130              	 .thumb_func
 3132              	XMC_VADC_GROUP_ScanInit:
 3133              	.LFB190:
1037:../Libraries/XMCLib/src/xmc_vadc.c **** 
1038:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1039:../Libraries/XMCLib/src/xmc_vadc.c **** 
1040:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)   
1041:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize the group scan hardware of a kernel */
1042:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
1043:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3134              	 .loc 2 1043 0
 3135              	 .cfi_startproc
 3136 0000 80B5     	 push {r7,lr}
 3137              	.LCFI133:
 3138              	 .cfi_def_cfa_offset 8
 3139              	 .cfi_offset 7,-8
 3140              	 .cfi_offset 14,-4
 3141 0002 84B0     	 sub sp,sp,#16
 3142              	.LCFI134:
 3143              	 .cfi_def_cfa_offset 24
 3144 0004 00AF     	 add r7,sp,#0
 3145              	.LCFI135:
 3146              	 .cfi_def_cfa_register 7
 3147 0006 7860     	 str r0,[r7,#4]
 3148 0008 3960     	 str r1,[r7]
1044:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      reg;
1045:../Libraries/XMCLib/src/xmc_vadc.c **** 
1046:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1047:../Libraries/XMCLib/src/xmc_vadc.c **** 
1048:../Libraries/XMCLib/src/xmc_vadc.c ****   /* All configurations have to be performed with the arbitration slot disabled */
1049:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 3149              	 .loc 2 1049 0
 3150 000a 7B68     	 ldr r3,[r7,#4]
 3151 000c 181C     	 mov r0,r3
 3152 000e FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1050:../Libraries/XMCLib/src/xmc_vadc.c ****   
1051:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Read in the existing contents of arbitration priority register */
1052:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 3153              	 .loc 2 1052 0
 3154 0012 7B68     	 ldr r3,[r7,#4]
 3155 0014 8422     	 mov r2,#132
 3156 0016 9B58     	 ldr r3,[r3,r2]
 3157 0018 FB60     	 str r3,[r7,#12]
1053:../Libraries/XMCLib/src/xmc_vadc.c **** 
1054:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the priority of the request source */
1055:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(uint32_t)VADC_G_ARBPR_PRIO1_Msk;
 3158              	 .loc 2 1055 0
 3159 001a FB68     	 ldr r3,[r7,#12]
 3160 001c 3022     	 mov r2,#48
 3161 001e 9343     	 bic r3,r2
 3162 0020 FB60     	 str r3,[r7,#12]
1056:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 3163              	 .loc 2 1056 0
 3164 0022 3B68     	 ldr r3,[r7]
 3165 0024 1B78     	 ldrb r3,[r3]
 3166 0026 1B07     	 lsl r3,r3,#28
 3167 0028 9B0F     	 lsr r3,r3,#30
 3168 002a DBB2     	 uxtb r3,r3
 3169 002c 1B01     	 lsl r3,r3,#4
 3170 002e FA68     	 ldr r2,[r7,#12]
 3171 0030 1343     	 orr r3,r2
 3172 0032 FB60     	 str r3,[r7,#12]
1057:../Libraries/XMCLib/src/xmc_vadc.c ****   
1058:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the start mode */
1059:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3173              	 .loc 2 1059 0
 3174 0034 3B68     	 ldr r3,[r7]
 3175 0036 1B78     	 ldrb r3,[r3]
 3176 0038 0322     	 mov r2,#3
 3177 003a 1340     	 and r3,r2
 3178 003c DBB2     	 uxtb r3,r3
 3179 003e 002B     	 cmp r3,#0
 3180 0040 03D0     	 beq .L132
1060:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1061:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM1_Msk);
 3181              	 .loc 2 1061 0
 3182 0042 FB68     	 ldr r3,[r7,#12]
 3183 0044 8022     	 mov r2,#128
 3184 0046 1343     	 orr r3,r2
 3185 0048 FB60     	 str r3,[r7,#12]
 3186              	.L132:
1062:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1063:../Libraries/XMCLib/src/xmc_vadc.c **** 
1064:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 3187              	 .loc 2 1064 0
 3188 004a 7B68     	 ldr r3,[r7,#4]
 3189 004c 8421     	 mov r1,#132
 3190 004e FA68     	 ldr r2,[r7,#12]
 3191 0050 5A50     	 str r2,[r3,r1]
1065:../Libraries/XMCLib/src/xmc_vadc.c **** 
1066:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL = (uint32_t)(config->asctrl |(VADC_G_ASCTRL_XTWC_Msk) |(VADC_G_ASCTRL_GTWC_Msk)
 3192              	 .loc 2 1066 0
 3193 0052 3B68     	 ldr r3,[r7]
 3194 0054 5B68     	 ldr r3,[r3,#4]
 3195 0056 154A     	 ldr r2,.L134
 3196 0058 1A43     	 orr r2,r3
 3197 005a 111C     	 mov r1,r2
 3198 005c 7A68     	 ldr r2,[r7,#4]
 3199 005e 9023     	 mov r3,#144
 3200 0060 5B00     	 lsl r3,r3,#1
 3201 0062 D150     	 str r1,[r2,r3]
1067:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  (VADC_G_ASCTRL_TMWC_Msk));
1068:../Libraries/XMCLib/src/xmc_vadc.c **** 
1069:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR  = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 3202              	 .loc 2 1069 0
 3203 0064 3B68     	 ldr r3,[r7]
 3204 0066 9B68     	 ldr r3,[r3,#8]
 3205 0068 0122     	 mov r2,#1
 3206 006a 1A43     	 orr r2,r3
 3207 006c 111C     	 mov r1,r2
 3208 006e 7A68     	 ldr r2,[r7,#4]
 3209 0070 9223     	 mov r3,#146
 3210 0072 5B00     	 lsl r3,r3,#1
 3211 0074 D150     	 str r1,[r2,r3]
1070:../Libraries/XMCLib/src/xmc_vadc.c ****   
1071:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3212              	 .loc 2 1071 0
 3213 0076 3B68     	 ldr r3,[r7]
 3214 0078 1B78     	 ldrb r3,[r3]
 3215 007a 0322     	 mov r2,#3
 3216 007c 1340     	 and r3,r2
 3217 007e DBB2     	 uxtb r3,r3
 3218 0080 022B     	 cmp r3,#2
 3219 0082 0BD1     	 bne .L133
1072:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1073:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_RPTDIS_Msk;
 3220              	 .loc 2 1073 0
 3221 0084 7A68     	 ldr r2,[r7,#4]
 3222 0086 9223     	 mov r3,#146
 3223 0088 5B00     	 lsl r3,r3,#1
 3224 008a D358     	 ldr r3,[r2,r3]
 3225 008c 8022     	 mov r2,#128
 3226 008e 5202     	 lsl r2,r2,#9
 3227 0090 1A43     	 orr r2,r3
 3228 0092 111C     	 mov r1,r2
 3229 0094 7A68     	 ldr r2,[r7,#4]
 3230 0096 9223     	 mov r3,#146
 3231 0098 5B00     	 lsl r3,r3,#1
 3232 009a D150     	 str r1,[r2,r3]
 3233              	.L133:
1074:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1075:../Libraries/XMCLib/src/xmc_vadc.c ****   
1076:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot now */
1077:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptr);
 3234              	 .loc 2 1077 0
 3235 009c 7B68     	 ldr r3,[r7,#4]
 3236 009e 181C     	 mov r0,r3
 3237 00a0 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanEnableArbitrationSlot
1078:../Libraries/XMCLib/src/xmc_vadc.c ****   
1079:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3238              	 .loc 2 1079 0
 3239 00a4 BD46     	 mov sp,r7
 3240 00a6 04B0     	 add sp,sp,#16
 3241              	 
 3242 00a8 80BD     	 pop {r7,pc}
 3243              	.L135:
 3244 00aa C046     	 .align 2
 3245              	.L134:
 3246 00ac 00808080 	 .word -2139062272
 3247              	 .cfi_endproc
 3248              	.LFE190:
 3250              	 .section .text.XMC_VADC_GROUP_ScanSelectTrigger,"ax",%progbits
 3251              	 .align 2
 3252              	 .global XMC_VADC_GROUP_ScanSelectTrigger
 3253              	 .code 16
 3254              	 .thumb_func
 3256              	XMC_VADC_GROUP_ScanSelectTrigger:
 3257              	.LFB191:
1080:../Libraries/XMCLib/src/xmc_vadc.c **** 
1081:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger input for Group Scan request source */
1082:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
1083:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3258              	 .loc 2 1083 0
 3259              	 .cfi_startproc
 3260 0000 80B5     	 push {r7,lr}
 3261              	.LCFI136:
 3262              	 .cfi_def_cfa_offset 8
 3263              	 .cfi_offset 7,-8
 3264              	 .cfi_offset 14,-4
 3265 0002 84B0     	 sub sp,sp,#16
 3266              	.LCFI137:
 3267              	 .cfi_def_cfa_offset 24
 3268 0004 00AF     	 add r7,sp,#0
 3269              	.LCFI138:
 3270              	 .cfi_def_cfa_register 7
 3271 0006 7860     	 str r0,[r7,#4]
 3272 0008 0A1C     	 mov r2,r1
 3273 000a FB1C     	 add r3,r7,#3
 3274 000c 1A70     	 strb r2,[r3]
1084:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1085:../Libraries/XMCLib/src/xmc_vadc.c **** 
1086:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1087:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Trigger Port", ((trigger_input)< XMC_VADC_NUM_
1088:../Libraries/XMCLib/src/xmc_vadc.c **** 
1089:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3275              	 .loc 2 1089 0
 3276 000e 7A68     	 ldr r2,[r7,#4]
 3277 0010 9023     	 mov r3,#144
 3278 0012 5B00     	 lsl r3,r3,#1
 3279 0014 D358     	 ldr r3,[r2,r3]
 3280 0016 FB60     	 str r3,[r7,#12]
1090:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 3281              	 .loc 2 1090 0
 3282 0018 FB68     	 ldr r3,[r7,#12]
 3283 001a 8022     	 mov r2,#128
 3284 001c 1202     	 lsl r2,r2,#8
 3285 001e 1343     	 orr r3,r2
 3286 0020 FB60     	 str r3,[r7,#12]
1091:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTSEL_Msk);
 3287              	 .loc 2 1091 0
 3288 0022 FB68     	 ldr r3,[r7,#12]
 3289 0024 084A     	 ldr r2,.L137
 3290 0026 1340     	 and r3,r2
 3291 0028 FB60     	 str r3,[r7,#12]
1092:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_input << VADC_G_ASCTRL_XTSEL_Pos);
 3292              	 .loc 2 1092 0
 3293 002a FB1C     	 add r3,r7,#3
 3294 002c 1B78     	 ldrb r3,[r3]
 3295 002e 1B02     	 lsl r3,r3,#8
 3296 0030 FA68     	 ldr r2,[r7,#12]
 3297 0032 1343     	 orr r3,r2
 3298 0034 FB60     	 str r3,[r7,#12]
1093:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3299              	 .loc 2 1093 0
 3300 0036 7A68     	 ldr r2,[r7,#4]
 3301 0038 9023     	 mov r3,#144
 3302 003a 5B00     	 lsl r3,r3,#1
 3303 003c F968     	 ldr r1,[r7,#12]
 3304 003e D150     	 str r1,[r2,r3]
1094:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3305              	 .loc 2 1094 0
 3306 0040 BD46     	 mov sp,r7
 3307 0042 04B0     	 add sp,sp,#16
 3308              	 
 3309 0044 80BD     	 pop {r7,pc}
 3310              	.L138:
 3311 0046 C046     	 .align 2
 3312              	.L137:
 3313 0048 FFF0FFFF 	 .word -3841
 3314              	 .cfi_endproc
 3315              	.LFE191:
 3317              	 .section .text.XMC_VADC_GROUP_ScanSelectTriggerEdge,"ax",%progbits
 3318              	 .align 2
 3319              	 .global XMC_VADC_GROUP_ScanSelectTriggerEdge
 3320              	 .code 16
 3321              	 .thumb_func
 3323              	XMC_VADC_GROUP_ScanSelectTriggerEdge:
 3324              	.LFB192:
1095:../Libraries/XMCLib/src/xmc_vadc.c **** 
1096:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1097:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
1098:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3325              	 .loc 2 1098 0
 3326              	 .cfi_startproc
 3327 0000 80B5     	 push {r7,lr}
 3328              	.LCFI139:
 3329              	 .cfi_def_cfa_offset 8
 3330              	 .cfi_offset 7,-8
 3331              	 .cfi_offset 14,-4
 3332 0002 84B0     	 sub sp,sp,#16
 3333              	.LCFI140:
 3334              	 .cfi_def_cfa_offset 24
 3335 0004 00AF     	 add r7,sp,#0
 3336              	.LCFI141:
 3337              	 .cfi_def_cfa_register 7
 3338 0006 7860     	 str r0,[r7,#4]
 3339 0008 0A1C     	 mov r2,r1
 3340 000a FB1C     	 add r3,r7,#3
 3341 000c 1A70     	 strb r2,[r3]
1099:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1100:../Libraries/XMCLib/src/xmc_vadc.c **** 
1101:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
1102:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Trigger Port", ((trigger_edge)<= XMC_VADC_
1103:../Libraries/XMCLib/src/xmc_vadc.c **** 
1104:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3342              	 .loc 2 1104 0
 3343 000e 7A68     	 ldr r2,[r7,#4]
 3344 0010 9023     	 mov r3,#144
 3345 0012 5B00     	 lsl r3,r3,#1
 3346 0014 D358     	 ldr r3,[r2,r3]
 3347 0016 FB60     	 str r3,[r7,#12]
1105:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 3348              	 .loc 2 1105 0
 3349 0018 FB68     	 ldr r3,[r7,#12]
 3350 001a 8022     	 mov r2,#128
 3351 001c 1202     	 lsl r2,r2,#8
 3352 001e 1343     	 orr r3,r2
 3353 0020 FB60     	 str r3,[r7,#12]
1106:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTMODE_Msk);
 3354              	 .loc 2 1106 0
 3355 0022 FB68     	 ldr r3,[r7,#12]
 3356 0024 084A     	 ldr r2,.L140
 3357 0026 1340     	 and r3,r2
 3358 0028 FB60     	 str r3,[r7,#12]
1107:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_G_ASCTRL_XTMODE_Pos);
 3359              	 .loc 2 1107 0
 3360 002a FB1C     	 add r3,r7,#3
 3361 002c 1B78     	 ldrb r3,[r3]
 3362 002e 5B03     	 lsl r3,r3,#13
 3363 0030 FA68     	 ldr r2,[r7,#12]
 3364 0032 1343     	 orr r3,r2
 3365 0034 FB60     	 str r3,[r7,#12]
1108:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3366              	 .loc 2 1108 0
 3367 0036 7A68     	 ldr r2,[r7,#4]
 3368 0038 9023     	 mov r3,#144
 3369 003a 5B00     	 lsl r3,r3,#1
 3370 003c F968     	 ldr r1,[r7,#12]
 3371 003e D150     	 str r1,[r2,r3]
1109:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3372              	 .loc 2 1109 0
 3373 0040 BD46     	 mov sp,r7
 3374 0042 04B0     	 add sp,sp,#16
 3375              	 
 3376 0044 80BD     	 pop {r7,pc}
 3377              	.L141:
 3378 0046 C046     	 .align 2
 3379              	.L140:
 3380 0048 FF9FFFFF 	 .word -24577
 3381              	 .cfi_endproc
 3382              	.LFE192:
 3384              	 .section .text.XMC_VADC_GROUP_ScanSelectGating,"ax",%progbits
 3385              	 .align 2
 3386              	 .global XMC_VADC_GROUP_ScanSelectGating
 3387              	 .code 16
 3388              	 .thumb_func
 3390              	XMC_VADC_GROUP_ScanSelectGating:
 3391              	.LFB193:
1110:../Libraries/XMCLib/src/xmc_vadc.c **** 
1111:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gating input for Group Scan request source */
1112:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
1113:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3392              	 .loc 2 1113 0
 3393              	 .cfi_startproc
 3394 0000 80B5     	 push {r7,lr}
 3395              	.LCFI142:
 3396              	 .cfi_def_cfa_offset 8
 3397              	 .cfi_offset 7,-8
 3398              	 .cfi_offset 14,-4
 3399 0002 84B0     	 sub sp,sp,#16
 3400              	.LCFI143:
 3401              	 .cfi_def_cfa_offset 24
 3402 0004 00AF     	 add r7,sp,#0
 3403              	.LCFI144:
 3404              	 .cfi_def_cfa_register 7
 3405 0006 7860     	 str r0,[r7,#4]
 3406 0008 0A1C     	 mov r2,r1
 3407 000a FB1C     	 add r3,r7,#3
 3408 000c 1A70     	 strb r2,[r3]
1114:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1115:../Libraries/XMCLib/src/xmc_vadc.c **** 
1116:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1117:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Gating Port", ((gating_input)< XMC_VADC_NUM_POR
1118:../Libraries/XMCLib/src/xmc_vadc.c **** 
1119:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 3409              	 .loc 2 1119 0
 3410 000e 7A68     	 ldr r2,[r7,#4]
 3411 0010 9023     	 mov r3,#144
 3412 0012 5B00     	 lsl r3,r3,#1
 3413 0014 D358     	 ldr r3,[r2,r3]
 3414 0016 FB60     	 str r3,[r7,#12]
1120:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)VADC_G_ASCTRL_GTWC_Msk;
 3415              	 .loc 2 1120 0
 3416 0018 FB68     	 ldr r3,[r7,#12]
 3417 001a 8022     	 mov r2,#128
 3418 001c 1204     	 lsl r2,r2,#16
 3419 001e 1343     	 orr r3,r2
 3420 0020 FB60     	 str r3,[r7,#12]
1121:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_GTSEL_Msk);
 3421              	 .loc 2 1121 0
 3422 0022 FB68     	 ldr r3,[r7,#12]
 3423 0024 084A     	 ldr r2,.L143
 3424 0026 1340     	 and r3,r2
 3425 0028 FB60     	 str r3,[r7,#12]
1122:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)gating_input << VADC_G_ASCTRL_GTSEL_Pos);
 3426              	 .loc 2 1122 0
 3427 002a FB1C     	 add r3,r7,#3
 3428 002c 1B78     	 ldrb r3,[r3]
 3429 002e 1B04     	 lsl r3,r3,#16
 3430 0030 FA68     	 ldr r2,[r7,#12]
 3431 0032 1343     	 orr r3,r2
 3432 0034 FB60     	 str r3,[r7,#12]
1123:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 3433              	 .loc 2 1123 0
 3434 0036 7A68     	 ldr r2,[r7,#4]
 3435 0038 9023     	 mov r3,#144
 3436 003a 5B00     	 lsl r3,r3,#1
 3437 003c F968     	 ldr r1,[r7,#12]
 3438 003e D150     	 str r1,[r2,r3]
1124:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3439              	 .loc 2 1124 0
 3440 0040 BD46     	 mov sp,r7
 3441 0042 04B0     	 add sp,sp,#16
 3442              	 
 3443 0044 80BD     	 pop {r7,pc}
 3444              	.L144:
 3445 0046 C046     	 .align 2
 3446              	.L143:
 3447 0048 FFFFF0FF 	 .word -983041
 3448              	 .cfi_endproc
 3449              	.LFE193:
 3451              	 .section .text.XMC_VADC_GROUP_ScanSequenceAbort,"ax",%progbits
 3452              	 .align 2
 3453              	 .global XMC_VADC_GROUP_ScanSequenceAbort
 3454              	 .code 16
 3455              	 .thumb_func
 3457              	XMC_VADC_GROUP_ScanSequenceAbort:
 3458              	.LFB194:
1125:../Libraries/XMCLib/src/xmc_vadc.c **** 
1126:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to stop an ongoing conversion of a sequence */
1127:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr)
1128:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3459              	 .loc 2 1128 0
 3460              	 .cfi_startproc
 3461 0000 80B5     	 push {r7,lr}
 3462              	.LCFI145:
 3463              	 .cfi_def_cfa_offset 8
 3464              	 .cfi_offset 7,-8
 3465              	 .cfi_offset 14,-4
 3466 0002 84B0     	 sub sp,sp,#16
 3467              	.LCFI146:
 3468              	 .cfi_def_cfa_offset 24
 3469 0004 00AF     	 add r7,sp,#0
 3470              	.LCFI147:
 3471              	 .cfi_def_cfa_register 7
 3472 0006 7860     	 str r0,[r7,#4]
1129:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t asctrl;
1130:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1131:../Libraries/XMCLib/src/xmc_vadc.c **** 
1132:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSequenceAbort:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1133:../Libraries/XMCLib/src/xmc_vadc.c **** 
1134:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1135:../Libraries/XMCLib/src/xmc_vadc.c ****   asctrl = group_ptr->ASCTRL;
 3473              	 .loc 2 1135 0
 3474 0008 7A68     	 ldr r2,[r7,#4]
 3475 000a 9023     	 mov r3,#144
 3476 000c 5B00     	 lsl r3,r3,#1
 3477 000e D358     	 ldr r3,[r2,r3]
 3478 0010 FB60     	 str r3,[r7,#12]
1136:../Libraries/XMCLib/src/xmc_vadc.c **** 
1137:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(0U | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
 3479              	 .loc 2 1137 0
 3480 0012 7A68     	 ldr r2,[r7,#4]
 3481 0014 9023     	 mov r3,#144
 3482 0016 5B00     	 lsl r3,r3,#1
 3483 0018 1E49     	 ldr r1,.L146
 3484 001a D150     	 str r1,[r2,r3]
1138:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
1139:../Libraries/XMCLib/src/xmc_vadc.c **** 
1140:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable Arbitration before abort*/
1141:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN1_Pos) & 1U);
 3485              	 .loc 2 1141 0
 3486 001c 7B68     	 ldr r3,[r7,#4]
 3487 001e 8422     	 mov r2,#132
 3488 0020 9B58     	 ldr r3,[r3,r2]
 3489 0022 5B0E     	 lsr r3,r3,#25
 3490 0024 0122     	 mov r2,#1
 3491 0026 1A40     	 and r2,r3
 3492 0028 0B23     	 mov r3,#11
 3493 002a FB18     	 add r3,r7,r3
 3494 002c 511E     	 sub r1,r2,#1
 3495 002e 8A41     	 sbc r2,r2,r1
 3496 0030 1A70     	 strb r2,[r3]
1142:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 3497              	 .loc 2 1142 0
 3498 0032 7B68     	 ldr r3,[r7,#4]
 3499 0034 181C     	 mov r0,r3
 3500 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1143:../Libraries/XMCLib/src/xmc_vadc.c **** 
1144:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENGT_Msk);
 3501              	 .loc 2 1144 0
 3502 003a 7A68     	 ldr r2,[r7,#4]
 3503 003c 9223     	 mov r3,#146
 3504 003e 5B00     	 lsl r3,r3,#1
 3505 0040 D358     	 ldr r3,[r2,r3]
 3506 0042 0322     	 mov r2,#3
 3507 0044 9343     	 bic r3,r2
 3508 0046 191C     	 mov r1,r3
 3509 0048 7A68     	 ldr r2,[r7,#4]
 3510 004a 9223     	 mov r3,#146
 3511 004c 5B00     	 lsl r3,r3,#1
 3512 004e D150     	 str r1,[r2,r3]
1145:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 3513              	 .loc 2 1145 0
 3514 0050 7A68     	 ldr r2,[r7,#4]
 3515 0052 9223     	 mov r3,#146
 3516 0054 5B00     	 lsl r3,r3,#1
 3517 0056 D358     	 ldr r3,[r2,r3]
 3518 0058 8022     	 mov r2,#128
 3519 005a 5200     	 lsl r2,r2,#1
 3520 005c 1A43     	 orr r2,r3
 3521 005e 111C     	 mov r1,r2
 3522 0060 7A68     	 ldr r2,[r7,#4]
 3523 0062 9223     	 mov r3,#146
 3524 0064 5B00     	 lsl r3,r3,#1
 3525 0066 D150     	 str r1,[r2,r3]
1146:../Libraries/XMCLib/src/xmc_vadc.c **** 
1147:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Enable the arbitration slot 1*/
1148:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN1_Pos);
 3526              	 .loc 2 1148 0
 3527 0068 7B68     	 ldr r3,[r7,#4]
 3528 006a 8422     	 mov r2,#132
 3529 006c 9A58     	 ldr r2,[r3,r2]
 3530 006e 0B23     	 mov r3,#11
 3531 0070 FB18     	 add r3,r7,r3
 3532 0072 1B78     	 ldrb r3,[r3]
 3533 0074 5B06     	 lsl r3,r3,#25
 3534 0076 1A43     	 orr r2,r3
 3535 0078 7B68     	 ldr r3,[r7,#4]
 3536 007a 8421     	 mov r1,#132
 3537 007c 5A50     	 str r2,[r3,r1]
1149:../Libraries/XMCLib/src/xmc_vadc.c **** 
1150:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1151:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(asctrl | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
1152:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 3538              	 .loc 2 1152 0
 3539 007e FB68     	 ldr r3,[r7,#12]
 3540 0080 044A     	 ldr r2,.L146
 3541 0082 1A43     	 orr r2,r3
 3542 0084 111C     	 mov r1,r2
1151:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 3543              	 .loc 2 1151 0
 3544 0086 7A68     	 ldr r2,[r7,#4]
 3545 0088 9023     	 mov r3,#144
 3546 008a 5B00     	 lsl r3,r3,#1
 3547 008c D150     	 str r1,[r2,r3]
1153:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3548              	 .loc 2 1153 0
 3549 008e BD46     	 mov sp,r7
 3550 0090 04B0     	 add sp,sp,#16
 3551              	 
 3552 0092 80BD     	 pop {r7,pc}
 3553              	.L147:
 3554              	 .align 2
 3555              	.L146:
 3556 0094 00808080 	 .word -2139062272
 3557              	 .cfi_endproc
 3558              	.LFE194:
 3560              	 .section .text.XMC_VADC_GROUP_ScanGetNumChannelsPending,"ax",%progbits
 3561              	 .align 2
 3562              	 .global XMC_VADC_GROUP_ScanGetNumChannelsPending
 3563              	 .code 16
 3564              	 .thumb_func
 3566              	XMC_VADC_GROUP_ScanGetNumChannelsPending:
 3567              	.LFB195:
1154:../Libraries/XMCLib/src/xmc_vadc.c **** 
1155:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to find out number of channels awaiting conversion */
1156:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr)
1157:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3568              	 .loc 2 1157 0
 3569              	 .cfi_startproc
 3570 0000 80B5     	 push {r7,lr}
 3571              	.LCFI148:
 3572              	 .cfi_def_cfa_offset 8
 3573              	 .cfi_offset 7,-8
 3574              	 .cfi_offset 14,-4
 3575 0002 86B0     	 sub sp,sp,#24
 3576              	.LCFI149:
 3577              	 .cfi_def_cfa_offset 32
 3578 0004 00AF     	 add r7,sp,#0
 3579              	.LCFI150:
 3580              	 .cfi_def_cfa_register 7
 3581 0006 7860     	 str r0,[r7,#4]
1158:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1159:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1160:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1161:../Libraries/XMCLib/src/xmc_vadc.c **** 
1162:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanGetNumChannelsPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1163:../Libraries/XMCLib/src/xmc_vadc.c **** 
1164:../Libraries/XMCLib/src/xmc_vadc.c **** 
1165:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 3582              	 .loc 2 1165 0
 3583 0008 0023     	 mov r3,#0
 3584 000a FB60     	 str r3,[r7,#12]
1166:../Libraries/XMCLib/src/xmc_vadc.c **** 
1167:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_ptr->ASPND)
 3585              	 .loc 2 1167 0
 3586 000c 7A68     	 ldr r2,[r7,#4]
 3587 000e 9623     	 mov r3,#150
 3588 0010 5B00     	 lsl r3,r3,#1
 3589 0012 D358     	 ldr r3,[r2,r3]
 3590 0014 002B     	 cmp r3,#0
 3591 0016 17D0     	 beq .L149
1168:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1169:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = group_ptr->ASPND;
 3592              	 .loc 2 1169 0
 3593 0018 7A68     	 ldr r2,[r7,#4]
 3594 001a 9623     	 mov r3,#150
 3595 001c 5B00     	 lsl r3,r3,#1
 3596 001e D358     	 ldr r3,[r2,r3]
 3597 0020 7B61     	 str r3,[r7,#20]
1170:../Libraries/XMCLib/src/xmc_vadc.c **** 
1171:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i=0U;i<XMC_VADC_NUM_CHANNELS_PER_GROUP;i++)
 3598              	 .loc 2 1171 0
 3599 0022 0023     	 mov r3,#0
 3600 0024 3B61     	 str r3,[r7,#16]
 3601 0026 0CE0     	 b .L150
 3602              	.L152:
1172:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1173:../Libraries/XMCLib/src/xmc_vadc.c ****       if (reg & 1U)
 3603              	 .loc 2 1173 0
 3604 0028 7B69     	 ldr r3,[r7,#20]
 3605 002a 0122     	 mov r2,#1
 3606 002c 1340     	 and r3,r2
 3607 002e 02D0     	 beq .L151
1174:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1175:../Libraries/XMCLib/src/xmc_vadc.c ****         count++;
 3608              	 .loc 2 1175 0
 3609 0030 FB68     	 ldr r3,[r7,#12]
 3610 0032 0133     	 add r3,r3,#1
 3611 0034 FB60     	 str r3,[r7,#12]
 3612              	.L151:
1176:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1177:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = (uint32_t)(reg >> (uint32_t)1);
 3613              	 .loc 2 1177 0 discriminator 2
 3614 0036 7B69     	 ldr r3,[r7,#20]
 3615 0038 5B08     	 lsr r3,r3,#1
 3616 003a 7B61     	 str r3,[r7,#20]
1171:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 3617              	 .loc 2 1171 0 discriminator 2
 3618 003c 3B69     	 ldr r3,[r7,#16]
 3619 003e 0133     	 add r3,r3,#1
 3620 0040 3B61     	 str r3,[r7,#16]
 3621              	.L150:
1171:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 3622              	 .loc 2 1171 0 is_stmt 0 discriminator 1
 3623 0042 3B69     	 ldr r3,[r7,#16]
 3624 0044 072B     	 cmp r3,#7
 3625 0046 EFD9     	 bls .L152
 3626              	.L149:
1178:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1179:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1180:../Libraries/XMCLib/src/xmc_vadc.c **** 
1181:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 3627              	 .loc 2 1181 0 is_stmt 1
 3628 0048 FB68     	 ldr r3,[r7,#12]
1182:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3629              	 .loc 2 1182 0
 3630 004a 181C     	 mov r0,r3
 3631 004c BD46     	 mov sp,r7
 3632 004e 06B0     	 add sp,sp,#24
 3633              	 
 3634 0050 80BD     	 pop {r7,pc}
 3635              	 .cfi_endproc
 3636              	.LFE195:
 3638 0052 C046     	 .section .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode,"ax",%progbits
 3639              	 .align 2
 3640              	 .global XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
 3641              	 .code 16
 3642              	 .thumb_func
 3644              	XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:
 3645              	.LFB196:
1183:../Libraries/XMCLib/src/xmc_vadc.c **** 
1184:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for request source event */
1185:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
1186:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3646              	 .loc 2 1186 0
 3647              	 .cfi_startproc
 3648 0000 80B5     	 push {r7,lr}
 3649              	.LCFI151:
 3650              	 .cfi_def_cfa_offset 8
 3651              	 .cfi_offset 7,-8
 3652              	 .cfi_offset 14,-4
 3653 0002 84B0     	 sub sp,sp,#16
 3654              	.LCFI152:
 3655              	 .cfi_def_cfa_offset 24
 3656 0004 00AF     	 add r7,sp,#0
 3657              	.LCFI153:
 3658              	 .cfi_def_cfa_register 7
 3659 0006 7860     	 str r0,[r7,#4]
 3660 0008 0A1C     	 mov r2,r1
 3661 000a FB1C     	 add r3,r7,#3
 3662 000c 1A70     	 strb r2,[r3]
1187:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1188:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 3663              	 .loc 2 1188 0
 3664 000e 7A68     	 ldr r2,[r7,#4]
 3665 0010 E023     	 mov r3,#224
 3666 0012 5B00     	 lsl r3,r3,#1
 3667 0014 D358     	 ldr r3,[r2,r3]
 3668 0016 FB60     	 str r3,[r7,#12]
1189:../Libraries/XMCLib/src/xmc_vadc.c **** 
1190:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_G
1191:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_
1192:../Libraries/XMCLib/src/xmc_vadc.c **** 
1193:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV1NP_Msk);
 3669              	 .loc 2 1193 0
 3670 0018 FB68     	 ldr r3,[r7,#12]
 3671 001a F022     	 mov r2,#240
 3672 001c 9343     	 bic r3,r2
 3673 001e FB60     	 str r3,[r7,#12]
1194:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 3674              	 .loc 2 1194 0
 3675 0020 FB1C     	 add r3,r7,#3
 3676 0022 1B78     	 ldrb r3,[r3]
 3677 0024 1B01     	 lsl r3,r3,#4
 3678 0026 FA68     	 ldr r2,[r7,#12]
 3679 0028 1343     	 orr r3,r2
 3680 002a FB60     	 str r3,[r7,#12]
1195:../Libraries/XMCLib/src/xmc_vadc.c **** 
1196:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 3681              	 .loc 2 1196 0
 3682 002c 7A68     	 ldr r2,[r7,#4]
 3683 002e E023     	 mov r3,#224
 3684 0030 5B00     	 lsl r3,r3,#1
 3685 0032 F968     	 ldr r1,[r7,#12]
 3686 0034 D150     	 str r1,[r2,r3]
1197:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3687              	 .loc 2 1197 0
 3688 0036 BD46     	 mov sp,r7
 3689 0038 04B0     	 add sp,sp,#16
 3690              	 
 3691 003a 80BD     	 pop {r7,pc}
 3692              	 .cfi_endproc
 3693              	.LFE196:
 3695              	 .section .text.XMC_VADC_GROUP_ScanRemoveChannel,"ax",%progbits
 3696              	 .align 2
 3697              	 .global XMC_VADC_GROUP_ScanRemoveChannel
 3698              	 .code 16
 3699              	 .thumb_func
 3701              	XMC_VADC_GROUP_ScanRemoveChannel:
 3702              	.LFB197:
1198:../Libraries/XMCLib/src/xmc_vadc.c **** 
1199:../Libraries/XMCLib/src/xmc_vadc.c **** /* Removes the selected channel from conversion*/
1200:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
1201:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3703              	 .loc 2 1201 0
 3704              	 .cfi_startproc
 3705 0000 80B5     	 push {r7,lr}
 3706              	.LCFI154:
 3707              	 .cfi_def_cfa_offset 8
 3708              	 .cfi_offset 7,-8
 3709              	 .cfi_offset 14,-4
 3710 0002 84B0     	 sub sp,sp,#16
 3711              	.LCFI155:
 3712              	 .cfi_def_cfa_offset 24
 3713 0004 00AF     	 add r7,sp,#0
 3714              	.LCFI156:
 3715              	 .cfi_def_cfa_register 7
 3716 0006 7860     	 str r0,[r7,#4]
 3717 0008 3960     	 str r1,[r7]
1202:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t assel;
1203:../Libraries/XMCLib/src/xmc_vadc.c **** 
1204:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1205:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong channel number", ((channel_num)< XMC_VADC_NUM_
1206:../Libraries/XMCLib/src/xmc_vadc.c **** 
1207:../Libraries/XMCLib/src/xmc_vadc.c ****   assel = group_ptr->ASSEL; 
 3718              	 .loc 2 1207 0
 3719 000a 7A68     	 ldr r2,[r7,#4]
 3720 000c 9423     	 mov r3,#148
 3721 000e 5B00     	 lsl r3,r3,#1
 3722 0010 D358     	 ldr r3,[r2,r3]
 3723 0012 FB60     	 str r3,[r7,#12]
1208:../Libraries/XMCLib/src/xmc_vadc.c ****   assel &= (~( 1 << channel_num));
 3724              	 .loc 2 1208 0
 3725 0014 3B68     	 ldr r3,[r7]
 3726 0016 0122     	 mov r2,#1
 3727 0018 9A40     	 lsl r2,r2,r3
 3728 001a 131C     	 mov r3,r2
 3729 001c DB43     	 mvn r3,r3
 3730 001e 1A1C     	 mov r2,r3
 3731 0020 FB68     	 ldr r3,[r7,#12]
 3732 0022 1340     	 and r3,r2
 3733 0024 FB60     	 str r3,[r7,#12]
1209:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASSEL  = assel;
 3734              	 .loc 2 1209 0
 3735 0026 7A68     	 ldr r2,[r7,#4]
 3736 0028 9423     	 mov r3,#148
 3737 002a 5B00     	 lsl r3,r3,#1
 3738 002c F968     	 ldr r1,[r7,#12]
 3739 002e D150     	 str r1,[r2,r3]
1210:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3740              	 .loc 2 1210 0
 3741 0030 BD46     	 mov sp,r7
 3742 0032 04B0     	 add sp,sp,#16
 3743              	 
 3744 0034 80BD     	 pop {r7,pc}
 3745              	 .cfi_endproc
 3746              	.LFE197:
 3748 0036 C046     	 .section .text.XMC_VADC_GLOBAL_BackgroundInit,"ax",%progbits
 3749              	 .align 2
 3750              	 .global XMC_VADC_GLOBAL_BackgroundInit
 3751              	 .code 16
 3752              	 .thumb_func
 3754              	XMC_VADC_GLOBAL_BackgroundInit:
 3755              	.LFB198:
1211:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1212:../Libraries/XMCLib/src/xmc_vadc.c **** 
1213:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize background scan request source hardware */
1214:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
1215:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3756              	 .loc 2 1215 0
 3757              	 .cfi_startproc
 3758 0000 80B5     	 push {r7,lr}
 3759              	.LCFI157:
 3760              	 .cfi_def_cfa_offset 8
 3761              	 .cfi_offset 7,-8
 3762              	 .cfi_offset 14,-4
 3763 0002 86B0     	 sub sp,sp,#24
 3764              	.LCFI158:
 3765              	 .cfi_def_cfa_offset 32
 3766 0004 00AF     	 add r7,sp,#0
 3767              	.LCFI159:
 3768              	 .cfi_def_cfa_register 7
 3769 0006 7860     	 str r0,[r7,#4]
 3770 0008 3960     	 str r1,[r7]
1216:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1217:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
1218:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1219:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t conv_start_mask;
1220:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   
1222:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))
1223:../Libraries/XMCLib/src/xmc_vadc.c **** 
1224:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1225:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3771              	 .loc 2 1225 0
 3772 000a 1723     	 mov r3,#23
 3773 000c FB18     	 add r3,r7,r3
 3774 000e 0022     	 mov r2,#0
 3775 0010 1A70     	 strb r2,[r3]
 3776 0012 0FE0     	 b .L157
 3777              	.L158:
1226:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1227:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3778              	 .loc 2 1227 0 discriminator 3
 3779 0014 1723     	 mov r3,#23
 3780 0016 FB18     	 add r3,r7,r3
 3781 0018 1A78     	 ldrb r2,[r3]
 3782 001a 4A4B     	 ldr r3,.L165
 3783 001c 9200     	 lsl r2,r2,#2
 3784 001e D358     	 ldr r3,[r2,r3]
 3785 0020 181C     	 mov r0,r3
 3786 0022 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1225:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3787              	 .loc 2 1225 0 discriminator 3
 3788 0026 1723     	 mov r3,#23
 3789 0028 FB18     	 add r3,r7,r3
 3790 002a 1A78     	 ldrb r2,[r3]
 3791 002c 1723     	 mov r3,#23
 3792 002e FB18     	 add r3,r7,r3
 3793 0030 0132     	 add r2,r2,#1
 3794 0032 1A70     	 strb r2,[r3]
 3795              	.L157:
1225:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3796              	 .loc 2 1225 0 is_stmt 0 discriminator 1
 3797 0034 1723     	 mov r3,#23
 3798 0036 FB18     	 add r3,r7,r3
 3799 0038 1B78     	 ldrb r3,[r3]
 3800 003a 012B     	 cmp r3,#1
 3801 003c EAD9     	 bls .L158
1228:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1229:../Libraries/XMCLib/src/xmc_vadc.c ****   
1230:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_start_mask = (uint32_t) 0;
 3802              	 .loc 2 1230 0 is_stmt 1
 3803 003e 0023     	 mov r3,#0
 3804 0040 3B61     	 str r3,[r7,#16]
1231:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 3805              	 .loc 2 1231 0
 3806 0042 3B68     	 ldr r3,[r7]
 3807 0044 1B78     	 ldrb r3,[r3]
 3808 0046 0322     	 mov r2,#3
 3809 0048 1340     	 and r3,r2
 3810 004a DBB2     	 uxtb r3,r3
 3811 004c 002B     	 cmp r3,#0
 3812 004e 02D0     	 beq .L159
1232:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1233:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 3813              	 .loc 2 1233 0
 3814 0050 8023     	 mov r3,#128
 3815 0052 1B01     	 lsl r3,r3,#4
 3816 0054 3B61     	 str r3,[r7,#16]
 3817              	.L159:
1234:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1235:../Libraries/XMCLib/src/xmc_vadc.c ****   
1236:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3818              	 .loc 2 1236 0
 3819 0056 1723     	 mov r3,#23
 3820 0058 FB18     	 add r3,r7,r3
 3821 005a 0022     	 mov r2,#0
 3822 005c 1A70     	 strb r2,[r3]
 3823 005e 29E0     	 b .L160
 3824              	.L161:
1237:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1238:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = g_xmc_vadc_group_array[i]->ARBPR;
 3825              	 .loc 2 1238 0 discriminator 3
 3826 0060 1723     	 mov r3,#23
 3827 0062 FB18     	 add r3,r7,r3
 3828 0064 1A78     	 ldrb r2,[r3]
 3829 0066 374B     	 ldr r3,.L165
 3830 0068 9200     	 lsl r2,r2,#2
 3831 006a D358     	 ldr r3,[r2,r3]
 3832 006c 8422     	 mov r2,#132
 3833 006e 9B58     	 ldr r3,[r3,r2]
 3834 0070 FB60     	 str r3,[r7,#12]
1239:../Libraries/XMCLib/src/xmc_vadc.c **** 
1240:../Libraries/XMCLib/src/xmc_vadc.c ****     reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 3835              	 .loc 2 1240 0 discriminator 3
 3836 0072 FB68     	 ldr r3,[r7,#12]
 3837 0074 344A     	 ldr r2,.L165+4
 3838 0076 1340     	 and r3,r2
 3839 0078 FB60     	 str r3,[r7,#12]
1241:../Libraries/XMCLib/src/xmc_vadc.c **** 
1242:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the priority of the request source */
1243:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 3840              	 .loc 2 1243 0 discriminator 3
 3841 007a 3B68     	 ldr r3,[r7]
 3842 007c 1B78     	 ldrb r3,[r3]
 3843 007e 1B07     	 lsl r3,r3,#28
 3844 0080 9B0F     	 lsr r3,r3,#30
 3845 0082 DBB2     	 uxtb r3,r3
 3846 0084 1B02     	 lsl r3,r3,#8
 3847 0086 FA68     	 ldr r2,[r7,#12]
 3848 0088 1343     	 orr r3,r2
 3849 008a FB60     	 str r3,[r7,#12]
1244:../Libraries/XMCLib/src/xmc_vadc.c ****   
1245:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the start mode */
1246:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= conv_start_mask;
 3850              	 .loc 2 1246 0 discriminator 3
 3851 008c FA68     	 ldr r2,[r7,#12]
 3852 008e 3B69     	 ldr r3,[r7,#16]
 3853 0090 1343     	 orr r3,r2
 3854 0092 FB60     	 str r3,[r7,#12]
1247:../Libraries/XMCLib/src/xmc_vadc.c **** 
1248:../Libraries/XMCLib/src/xmc_vadc.c ****     g_xmc_vadc_group_array[i]->ARBPR = reg;
 3855              	 .loc 2 1248 0 discriminator 3
 3856 0094 1723     	 mov r3,#23
 3857 0096 FB18     	 add r3,r7,r3
 3858 0098 1A78     	 ldrb r2,[r3]
 3859 009a 2A4B     	 ldr r3,.L165
 3860 009c 9200     	 lsl r2,r2,#2
 3861 009e D358     	 ldr r3,[r2,r3]
 3862 00a0 8421     	 mov r1,#132
 3863 00a2 FA68     	 ldr r2,[r7,#12]
 3864 00a4 5A50     	 str r2,[r3,r1]
1236:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3865              	 .loc 2 1236 0 discriminator 3
 3866 00a6 1723     	 mov r3,#23
 3867 00a8 FB18     	 add r3,r7,r3
 3868 00aa 1A78     	 ldrb r2,[r3]
 3869 00ac 1723     	 mov r3,#23
 3870 00ae FB18     	 add r3,r7,r3
 3871 00b0 0132     	 add r2,r2,#1
 3872 00b2 1A70     	 strb r2,[r3]
 3873              	.L160:
1236:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3874              	 .loc 2 1236 0 is_stmt 0 discriminator 1
 3875 00b4 1723     	 mov r3,#23
 3876 00b6 FB18     	 add r3,r7,r3
 3877 00b8 1B78     	 ldrb r3,[r3]
 3878 00ba 012B     	 cmp r3,#1
 3879 00bc D0D9     	 bls .L161
1249:../Libraries/XMCLib/src/xmc_vadc.c ****   
1250:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1251:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1252:../Libraries/XMCLib/src/xmc_vadc.c **** 
1253:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSCTRL register */
1254:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VAD
 3880              	 .loc 2 1254 0 is_stmt 1
 3881 00be 3B68     	 ldr r3,[r7]
 3882 00c0 5B68     	 ldr r3,[r3,#4]
 3883 00c2 224A     	 ldr r2,.L165+8
 3884 00c4 1A43     	 orr r2,r3
 3885 00c6 111C     	 mov r1,r2
 3886 00c8 7A68     	 ldr r2,[r7,#4]
 3887 00ca 8023     	 mov r3,#128
 3888 00cc 9B00     	 lsl r3,r3,#2
 3889 00ce D150     	 str r1,[r2,r3]
1255:../Libraries/XMCLib/src/xmc_vadc.c **** 
1256:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSMR register */
1257:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << V
 3890              	 .loc 2 1257 0
 3891 00d0 3B68     	 ldr r3,[r7]
 3892 00d2 9B68     	 ldr r3,[r3,#8]
 3893 00d4 0122     	 mov r2,#1
 3894 00d6 1A43     	 orr r2,r3
 3895 00d8 111C     	 mov r1,r2
 3896 00da 7A68     	 ldr r2,[r7,#4]
 3897 00dc 8123     	 mov r3,#129
 3898 00de 9B00     	 lsl r3,r3,#2
 3899 00e0 D150     	 str r1,[r2,r3]
1258:../Libraries/XMCLib/src/xmc_vadc.c ****   
1259:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1260:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3900              	 .loc 2 1260 0
 3901 00e2 3B68     	 ldr r3,[r7]
 3902 00e4 1B78     	 ldrb r3,[r3]
 3903 00e6 0322     	 mov r2,#3
 3904 00e8 1340     	 and r3,r2
 3905 00ea DBB2     	 uxtb r3,r3
 3906 00ec 022B     	 cmp r3,#2
 3907 00ee 0BD1     	 bne .L162
1261:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1262:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 3908              	 .loc 2 1262 0
 3909 00f0 7A68     	 ldr r2,[r7,#4]
 3910 00f2 8123     	 mov r3,#129
 3911 00f4 9B00     	 lsl r3,r3,#2
 3912 00f6 D358     	 ldr r3,[r2,r3]
 3913 00f8 8022     	 mov r2,#128
 3914 00fa 5202     	 lsl r2,r2,#9
 3915 00fc 1A43     	 orr r2,r3
 3916 00fe 111C     	 mov r1,r2
 3917 0100 7A68     	 ldr r2,[r7,#4]
 3918 0102 8123     	 mov r3,#129
 3919 0104 9B00     	 lsl r3,r3,#2
 3920 0106 D150     	 str r1,[r2,r3]
 3921              	.L162:
1263:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1264:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1265:../Libraries/XMCLib/src/xmc_vadc.c ****   
1266:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1267:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3922              	 .loc 2 1267 0
 3923 0108 1723     	 mov r3,#23
 3924 010a FB18     	 add r3,r7,r3
 3925 010c 0022     	 mov r2,#0
 3926 010e 1A70     	 strb r2,[r3]
 3927 0110 0FE0     	 b .L163
 3928              	.L164:
1268:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1269:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3929              	 .loc 2 1269 0 discriminator 3
 3930 0112 1723     	 mov r3,#23
 3931 0114 FB18     	 add r3,r7,r3
 3932 0116 1A78     	 ldrb r2,[r3]
 3933 0118 0A4B     	 ldr r3,.L165
 3934 011a 9200     	 lsl r2,r2,#2
 3935 011c D358     	 ldr r3,[r2,r3]
 3936 011e 181C     	 mov r0,r3
 3937 0120 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
1267:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3938              	 .loc 2 1267 0 discriminator 3
 3939 0124 1723     	 mov r3,#23
 3940 0126 FB18     	 add r3,r7,r3
 3941 0128 1A78     	 ldrb r2,[r3]
 3942 012a 1723     	 mov r3,#23
 3943 012c FB18     	 add r3,r7,r3
 3944 012e 0132     	 add r2,r2,#1
 3945 0130 1A70     	 strb r2,[r3]
 3946              	.L163:
1267:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3947              	 .loc 2 1267 0 is_stmt 0 discriminator 1
 3948 0132 1723     	 mov r3,#23
 3949 0134 FB18     	 add r3,r7,r3
 3950 0136 1B78     	 ldrb r3,[r3]
 3951 0138 012B     	 cmp r3,#1
 3952 013a EAD9     	 bls .L164
1270:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1271:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1272:../Libraries/XMCLib/src/xmc_vadc.c ****   
1273:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3953              	 .loc 2 1273 0 is_stmt 1
 3954 013c BD46     	 mov sp,r7
 3955 013e 06B0     	 add sp,sp,#24
 3956              	 
 3957 0140 80BD     	 pop {r7,pc}
 3958              	.L166:
 3959 0142 C046     	 .align 2
 3960              	.L165:
 3961 0144 00000000 	 .word g_xmc_vadc_group_array
 3962 0148 FFFCFFFF 	 .word -769
 3963 014c 00808000 	 .word 8421376
 3964              	 .cfi_endproc
 3965              	.LFE198:
 3967              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger,"ax",%progbits
 3968              	 .align 2
 3969              	 .global XMC_VADC_GLOBAL_BackgroundSelectTrigger
 3970              	 .code 16
 3971              	 .thumb_func
 3973              	XMC_VADC_GLOBAL_BackgroundSelectTrigger:
 3974              	.LFB199:
1274:../Libraries/XMCLib/src/xmc_vadc.c **** 
1275:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger for background scan request source */
1276:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
1277:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3975              	 .loc 2 1277 0
 3976              	 .cfi_startproc
 3977 0000 80B5     	 push {r7,lr}
 3978              	.LCFI160:
 3979              	 .cfi_def_cfa_offset 8
 3980              	 .cfi_offset 7,-8
 3981              	 .cfi_offset 14,-4
 3982 0002 84B0     	 sub sp,sp,#16
 3983              	.LCFI161:
 3984              	 .cfi_def_cfa_offset 24
 3985 0004 00AF     	 add r7,sp,#0
 3986              	.LCFI162:
 3987              	 .cfi_def_cfa_register 7
 3988 0006 7860     	 str r0,[r7,#4]
 3989 0008 3960     	 str r1,[r7]
1278:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1279:../Libraries/XMCLib/src/xmc_vadc.c **** 
1280:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("VADC_BCKGND_SelectTriggerInput:Wrong Module Pointer", (global_ptr == VADC))
1281:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_N
1282:../Libraries/XMCLib/src/xmc_vadc.c **** 
1283:../Libraries/XMCLib/src/xmc_vadc.c ****   
1284:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 3990              	 .loc 2 1284 0
 3991 000a 7A68     	 ldr r2,[r7,#4]
 3992 000c 8023     	 mov r3,#128
 3993 000e 9B00     	 lsl r3,r3,#2
 3994 0010 D358     	 ldr r3,[r2,r3]
 3995 0012 FB60     	 str r3,[r7,#12]
1285:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_XTWC_Msk;
 3996              	 .loc 2 1285 0
 3997 0014 FB68     	 ldr r3,[r7,#12]
 3998 0016 8022     	 mov r2,#128
 3999 0018 1202     	 lsl r2,r2,#8
 4000 001a 1343     	 orr r3,r2
 4001 001c FB60     	 str r3,[r7,#12]
1286:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_XTSEL_Msk);
 4002              	 .loc 2 1286 0
 4003 001e FB68     	 ldr r3,[r7,#12]
 4004 0020 074A     	 ldr r2,.L168
 4005 0022 1340     	 and r3,r2
 4006 0024 FB60     	 str r3,[r7,#12]
1287:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_XTSEL_Pos);
 4007              	 .loc 2 1287 0
 4008 0026 3B68     	 ldr r3,[r7]
 4009 0028 1B02     	 lsl r3,r3,#8
 4010 002a FA68     	 ldr r2,[r7,#12]
 4011 002c 1343     	 orr r3,r2
 4012 002e FB60     	 str r3,[r7,#12]
1288:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4013              	 .loc 2 1288 0
 4014 0030 7A68     	 ldr r2,[r7,#4]
 4015 0032 8023     	 mov r3,#128
 4016 0034 9B00     	 lsl r3,r3,#2
 4017 0036 F968     	 ldr r1,[r7,#12]
 4018 0038 D150     	 str r1,[r2,r3]
1289:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4019              	 .loc 2 1289 0
 4020 003a BD46     	 mov sp,r7
 4021 003c 04B0     	 add sp,sp,#16
 4022              	 
 4023 003e 80BD     	 pop {r7,pc}
 4024              	.L169:
 4025              	 .align 2
 4026              	.L168:
 4027 0040 FFF0FFFF 	 .word -3841
 4028              	 .cfi_endproc
 4029              	.LFE199:
 4031              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge,"ax",%progbits
 4032              	 .align 2
 4033              	 .global XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
 4034              	 .code 16
 4035              	 .thumb_func
 4037              	XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:
 4038              	.LFB200:
1290:../Libraries/XMCLib/src/xmc_vadc.c **** 
1291:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1292:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr,
1293:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
1294:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4039              	 .loc 2 1294 0
 4040              	 .cfi_startproc
 4041 0000 80B5     	 push {r7,lr}
 4042              	.LCFI163:
 4043              	 .cfi_def_cfa_offset 8
 4044              	 .cfi_offset 7,-8
 4045              	 .cfi_offset 14,-4
 4046 0002 84B0     	 sub sp,sp,#16
 4047              	.LCFI164:
 4048              	 .cfi_def_cfa_offset 24
 4049 0004 00AF     	 add r7,sp,#0
 4050              	.LCFI165:
 4051              	 .cfi_def_cfa_register 7
 4052 0006 7860     	 str r0,[r7,#4]
 4053 0008 0A1C     	 mov r2,r1
 4054 000a FB1C     	 add r3,r7,#3
 4055 000c 1A70     	 strb r2,[r3]
1295:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1296:../Libraries/XMCLib/src/xmc_vadc.c **** 
1297:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Global Pointer", (global_ptr == VAD
1298:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Trigger Port",
1299:../Libraries/XMCLib/src/xmc_vadc.c ****             ((trigger_edge)<= XMC_VADC_TRIGGER_EDGE_ANY))
1300:../Libraries/XMCLib/src/xmc_vadc.c **** 
1301:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = global_ptr->BRSCTRL;
 4056              	 .loc 2 1301 0
 4057 000e 7A68     	 ldr r2,[r7,#4]
 4058 0010 8023     	 mov r3,#128
 4059 0012 9B00     	 lsl r3,r3,#2
 4060 0014 D358     	 ldr r3,[r2,r3]
 4061 0016 FB60     	 str r3,[r7,#12]
1302:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_BRSCTRL_XTWC_Msk;
 4062              	 .loc 2 1302 0
 4063 0018 FB68     	 ldr r3,[r7,#12]
 4064 001a 8022     	 mov r2,#128
 4065 001c 1202     	 lsl r2,r2,#8
 4066 001e 1343     	 orr r3,r2
 4067 0020 FB60     	 str r3,[r7,#12]
1303:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_BRSCTRL_XTMODE_Msk);
 4068              	 .loc 2 1303 0
 4069 0022 FB68     	 ldr r3,[r7,#12]
 4070 0024 084A     	 ldr r2,.L171
 4071 0026 1340     	 and r3,r2
 4072 0028 FB60     	 str r3,[r7,#12]
1304:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_BRSCTRL_XTMODE_Pos);
 4073              	 .loc 2 1304 0
 4074 002a FB1C     	 add r3,r7,#3
 4075 002c 1B78     	 ldrb r3,[r3]
 4076 002e 5B03     	 lsl r3,r3,#13
 4077 0030 FA68     	 ldr r2,[r7,#12]
 4078 0032 1343     	 orr r3,r2
 4079 0034 FB60     	 str r3,[r7,#12]
1305:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4080              	 .loc 2 1305 0
 4081 0036 7A68     	 ldr r2,[r7,#4]
 4082 0038 8023     	 mov r3,#128
 4083 003a 9B00     	 lsl r3,r3,#2
 4084 003c F968     	 ldr r1,[r7,#12]
 4085 003e D150     	 str r1,[r2,r3]
1306:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4086              	 .loc 2 1306 0
 4087 0040 BD46     	 mov sp,r7
 4088 0042 04B0     	 add sp,sp,#16
 4089              	 
 4090 0044 80BD     	 pop {r7,pc}
 4091              	.L172:
 4092 0046 C046     	 .align 2
 4093              	.L171:
 4094 0048 FF9FFFFF 	 .word -24577
 4095              	 .cfi_endproc
 4096              	.LFE200:
 4098              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectGating,"ax",%progbits
 4099              	 .align 2
 4100              	 .global XMC_VADC_GLOBAL_BackgroundSelectGating
 4101              	 .code 16
 4102              	 .thumb_func
 4104              	XMC_VADC_GLOBAL_BackgroundSelectGating:
 4105              	.LFB201:
1307:../Libraries/XMCLib/src/xmc_vadc.c **** 
1308:../Libraries/XMCLib/src/xmc_vadc.c **** 
1309:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gate for background scan request source */
1310:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
1311:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4106              	 .loc 2 1311 0
 4107              	 .cfi_startproc
 4108 0000 80B5     	 push {r7,lr}
 4109              	.LCFI166:
 4110              	 .cfi_def_cfa_offset 8
 4111              	 .cfi_offset 7,-8
 4112              	 .cfi_offset 14,-4
 4113 0002 84B0     	 sub sp,sp,#16
 4114              	.LCFI167:
 4115              	 .cfi_def_cfa_offset 24
 4116 0004 00AF     	 add r7,sp,#0
 4117              	.LCFI168:
 4118              	 .cfi_def_cfa_register 7
 4119 0006 7860     	 str r0,[r7,#4]
 4120 0008 3960     	 str r1,[r7]
1312:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1313:../Libraries/XMCLib/src/xmc_vadc.c **** 
1314:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Module Pointer", (global_ptr == VADC))
1315:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM
1316:../Libraries/XMCLib/src/xmc_vadc.c **** 
1317:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 4121              	 .loc 2 1317 0
 4122 000a 7A68     	 ldr r2,[r7,#4]
 4123 000c 8023     	 mov r3,#128
 4124 000e 9B00     	 lsl r3,r3,#2
 4125 0010 D358     	 ldr r3,[r2,r3]
 4126 0012 FB60     	 str r3,[r7,#12]
1318:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_GTWC_Msk;
 4127              	 .loc 2 1318 0
 4128 0014 FB68     	 ldr r3,[r7,#12]
 4129 0016 8022     	 mov r2,#128
 4130 0018 1204     	 lsl r2,r2,#16
 4131 001a 1343     	 orr r3,r2
 4132 001c FB60     	 str r3,[r7,#12]
1319:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_GTSEL_Msk);
 4133              	 .loc 2 1319 0
 4134 001e FB68     	 ldr r3,[r7,#12]
 4135 0020 074A     	 ldr r2,.L174
 4136 0022 1340     	 and r3,r2
 4137 0024 FB60     	 str r3,[r7,#12]
1320:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_GTSEL_Pos);
 4138              	 .loc 2 1320 0
 4139 0026 3B68     	 ldr r3,[r7]
 4140 0028 1B04     	 lsl r3,r3,#16
 4141 002a FA68     	 ldr r2,[r7,#12]
 4142 002c 1343     	 orr r3,r2
 4143 002e FB60     	 str r3,[r7,#12]
1321:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 4144              	 .loc 2 1321 0
 4145 0030 7A68     	 ldr r2,[r7,#4]
 4146 0032 8023     	 mov r3,#128
 4147 0034 9B00     	 lsl r3,r3,#2
 4148 0036 F968     	 ldr r1,[r7,#12]
 4149 0038 D150     	 str r1,[r2,r3]
1322:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4150              	 .loc 2 1322 0
 4151 003a BD46     	 mov sp,r7
 4152 003c 04B0     	 add sp,sp,#16
 4153              	 
 4154 003e 80BD     	 pop {r7,pc}
 4155              	.L175:
 4156              	 .align 2
 4157              	.L174:
 4158 0040 FFFFF0FF 	 .word -983041
 4159              	 .cfi_endproc
 4160              	.LFE201:
 4162              	 .section .text.XMC_VADC_GLOBAL_BackgroundAbortSequence,"ax",%progbits
 4163              	 .align 2
 4164              	 .global XMC_VADC_GLOBAL_BackgroundAbortSequence
 4165              	 .code 16
 4166              	 .thumb_func
 4168              	XMC_VADC_GLOBAL_BackgroundAbortSequence:
 4169              	.LFB202:
1323:../Libraries/XMCLib/src/xmc_vadc.c **** 
1324:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a sequence */
1325:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr)
1326:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4170              	 .loc 2 1326 0
 4171              	 .cfi_startproc
 4172 0000 80B5     	 push {r7,lr}
 4173              	.LCFI169:
 4174              	 .cfi_def_cfa_offset 8
 4175              	 .cfi_offset 7,-8
 4176              	 .cfi_offset 14,-4
 4177 0002 86B0     	 sub sp,sp,#24
 4178              	.LCFI170:
 4179              	 .cfi_def_cfa_offset 32
 4180 0004 00AF     	 add r7,sp,#0
 4181              	.LCFI171:
 4182              	 .cfi_def_cfa_register 7
 4183 0006 7860     	 str r0,[r7,#4]
1327:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t brsctrl;
1328:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1329:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1330:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t grp_asen2_flag[XMC_VADC_MAXIMUM_NUM_GROUPS];
1331:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1332:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAbortSequence:Wrong Module Pointer", (global_ptr == VADC))
1333:../Libraries/XMCLib/src/xmc_vadc.c **** 
1334:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1335:../Libraries/XMCLib/src/xmc_vadc.c ****   brsctrl = global_ptr->BRSCTRL;
 4184              	 .loc 2 1335 0
 4185 0008 7A68     	 ldr r2,[r7,#4]
 4186 000a 8023     	 mov r3,#128
 4187 000c 9B00     	 lsl r3,r3,#2
 4188 000e D358     	 ldr r3,[r2,r3]
 4189 0010 3B61     	 str r3,[r7,#16]
1336:../Libraries/XMCLib/src/xmc_vadc.c **** 
1337:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(0U | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 4190              	 .loc 2 1337 0
 4191 0012 7A68     	 ldr r2,[r7,#4]
 4192 0014 8023     	 mov r3,#128
 4193 0016 9B00     	 lsl r3,r3,#2
 4194 0018 2649     	 ldr r1,.L182
 4195 001a D150     	 str r1,[r2,r3]
1338:../Libraries/XMCLib/src/xmc_vadc.c **** 
1339:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable Background Request source */
1340:../Libraries/XMCLib/src/xmc_vadc.c **** 
1341:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1342:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4196              	 .loc 2 1342 0
 4197 001c 0023     	 mov r3,#0
 4198 001e 7B61     	 str r3,[r7,#20]
 4199 0020 17E0     	 b .L177
 4200              	.L178:
1343:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1344:../Libraries/XMCLib/src/xmc_vadc.c ****     grp_asen2_flag[i] = (uint8_t)(g_xmc_vadc_group_array[i]->ARBPR >> VADC_G_ARBPR_ASEN2_Pos);
 4201              	 .loc 2 1344 0 discriminator 3
 4202 0022 254B     	 ldr r3,.L182+4
 4203 0024 7A69     	 ldr r2,[r7,#20]
 4204 0026 9200     	 lsl r2,r2,#2
 4205 0028 D358     	 ldr r3,[r2,r3]
 4206 002a 8422     	 mov r2,#132
 4207 002c 9B58     	 ldr r3,[r3,r2]
 4208 002e 9B0E     	 lsr r3,r3,#26
 4209 0030 D9B2     	 uxtb r1,r3
 4210 0032 0C23     	 mov r3,#12
 4211 0034 FA18     	 add r2,r7,r3
 4212 0036 7B69     	 ldr r3,[r7,#20]
 4213 0038 D318     	 add r3,r2,r3
 4214 003a 0A1C     	 add r2,r1,#0
 4215 003c 1A70     	 strb r2,[r3]
1345:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 4216              	 .loc 2 1345 0 discriminator 3
 4217 003e 1E4B     	 ldr r3,.L182+4
 4218 0040 7A69     	 ldr r2,[r7,#20]
 4219 0042 9200     	 lsl r2,r2,#2
 4220 0044 D358     	 ldr r3,[r2,r3]
 4221 0046 181C     	 mov r0,r3
 4222 0048 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1342:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4223              	 .loc 2 1342 0 discriminator 3
 4224 004c 7B69     	 ldr r3,[r7,#20]
 4225 004e 0133     	 add r3,r3,#1
 4226 0050 7B61     	 str r3,[r7,#20]
 4227              	.L177:
1342:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4228              	 .loc 2 1342 0 is_stmt 0 discriminator 1
 4229 0052 7B69     	 ldr r3,[r7,#20]
 4230 0054 012B     	 cmp r3,#1
 4231 0056 E4D9     	 bls .L178
1346:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1347:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1348:../Libraries/XMCLib/src/xmc_vadc.c **** 
1349:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Abort the ongoing sequence */
1350:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_CLRPND_Msk;
 4232              	 .loc 2 1350 0 is_stmt 1
 4233 0058 7A68     	 ldr r2,[r7,#4]
 4234 005a 8123     	 mov r3,#129
 4235 005c 9B00     	 lsl r3,r3,#2
 4236 005e D358     	 ldr r3,[r2,r3]
 4237 0060 8022     	 mov r2,#128
 4238 0062 5200     	 lsl r2,r2,#1
 4239 0064 1A43     	 orr r2,r3
 4240 0066 111C     	 mov r1,r2
 4241 0068 7A68     	 ldr r2,[r7,#4]
 4242 006a 8123     	 mov r3,#129
 4243 006c 9B00     	 lsl r3,r3,#2
 4244 006e D150     	 str r1,[r2,r3]
1351:../Libraries/XMCLib/src/xmc_vadc.c **** 
1352:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1353:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable Background Request source */
1354:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4245              	 .loc 2 1354 0
 4246 0070 0023     	 mov r3,#0
 4247 0072 7B61     	 str r3,[r7,#20]
 4248 0074 10E0     	 b .L179
 4249              	.L181:
1355:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1356:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint8_t)1 == grp_asen2_flag[i])
 4250              	 .loc 2 1356 0
 4251 0076 0C23     	 mov r3,#12
 4252 0078 FA18     	 add r2,r7,r3
 4253 007a 7B69     	 ldr r3,[r7,#20]
 4254 007c D318     	 add r3,r2,r3
 4255 007e 1B78     	 ldrb r3,[r3]
 4256 0080 012B     	 cmp r3,#1
 4257 0082 06D1     	 bne .L180
1357:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1358:../Libraries/XMCLib/src/xmc_vadc.c ****       XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t*)g_xmc_vadc_group_array[i]);
 4258              	 .loc 2 1358 0
 4259 0084 0C4B     	 ldr r3,.L182+4
 4260 0086 7A69     	 ldr r2,[r7,#20]
 4261 0088 9200     	 lsl r2,r2,#2
 4262 008a D358     	 ldr r3,[r2,r3]
 4263 008c 181C     	 mov r0,r3
 4264 008e FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
 4265              	.L180:
1354:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4266              	 .loc 2 1354 0 discriminator 2
 4267 0092 7B69     	 ldr r3,[r7,#20]
 4268 0094 0133     	 add r3,r3,#1
 4269 0096 7B61     	 str r3,[r7,#20]
 4270              	.L179:
1354:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4271              	 .loc 2 1354 0 is_stmt 0 discriminator 1
 4272 0098 7B69     	 ldr r3,[r7,#20]
 4273 009a 012B     	 cmp r3,#1
 4274 009c EBD9     	 bls .L181
1359:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1360:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1361:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1362:../Libraries/XMCLib/src/xmc_vadc.c **** 
1363:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Re-enable any disabled trigger and gating*/
1364:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(brsctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk
 4275              	 .loc 2 1364 0 is_stmt 1
 4276 009e 3B69     	 ldr r3,[r7,#16]
 4277 00a0 044A     	 ldr r2,.L182
 4278 00a2 1A43     	 orr r2,r3
 4279 00a4 111C     	 mov r1,r2
 4280 00a6 7A68     	 ldr r2,[r7,#4]
 4281 00a8 8023     	 mov r3,#128
 4282 00aa 9B00     	 lsl r3,r3,#2
 4283 00ac D150     	 str r1,[r2,r3]
1365:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4284              	 .loc 2 1365 0
 4285 00ae BD46     	 mov sp,r7
 4286 00b0 06B0     	 add sp,sp,#24
 4287              	 
 4288 00b2 80BD     	 pop {r7,pc}
 4289              	.L183:
 4290              	 .align 2
 4291              	.L182:
 4292 00b4 00808000 	 .word 8421376
 4293 00b8 00000000 	 .word g_xmc_vadc_group_array
 4294              	 .cfi_endproc
 4295              	.LFE202:
 4297              	 .section .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending,"ax",%progbits
 4298              	 .align 2
 4299              	 .global XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
 4300              	 .code 16
 4301              	 .thumb_func
 4303              	XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:
 4304              	.LFB203:
1366:../Libraries/XMCLib/src/xmc_vadc.c **** 
1367:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine how many channels are awaiting conversion */
1368:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr)
1369:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4305              	 .loc 2 1369 0
 4306              	 .cfi_startproc
 4307 0000 80B5     	 push {r7,lr}
 4308              	.LCFI172:
 4309              	 .cfi_def_cfa_offset 8
 4310              	 .cfi_offset 7,-8
 4311              	 .cfi_offset 14,-4
 4312 0002 86B0     	 sub sp,sp,#24
 4313              	.LCFI173:
 4314              	 .cfi_def_cfa_offset 32
 4315 0004 00AF     	 add r7,sp,#0
 4316              	.LCFI174:
 4317              	 .cfi_def_cfa_register 7
 4318 0006 7860     	 str r0,[r7,#4]
1370:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1371:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1372:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t j;
1373:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1374:../Libraries/XMCLib/src/xmc_vadc.c **** 
1375:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:Wrong Module Pointer", (global_ptr ==
1376:../Libraries/XMCLib/src/xmc_vadc.c **** 
1377:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 4319              	 .loc 2 1377 0
 4320 0008 0023     	 mov r3,#0
 4321 000a BB60     	 str r3,[r7,#8]
1378:../Libraries/XMCLib/src/xmc_vadc.c ****   
1379:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop through all groups and find out who is awaiting conversion */
1380:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 4322              	 .loc 2 1380 0
 4323 000c 0023     	 mov r3,#0
 4324 000e 3B61     	 str r3,[r7,#16]
 4325 0010 22E0     	 b .L185
 4326              	.L190:
1381:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1382:../Libraries/XMCLib/src/xmc_vadc.c ****     if (global_ptr->BRSSEL[i])
 4327              	 .loc 2 1382 0
 4328 0012 7B68     	 ldr r3,[r7,#4]
 4329 0014 3A69     	 ldr r2,[r7,#16]
 4330 0016 6032     	 add r2,r2,#96
 4331 0018 9200     	 lsl r2,r2,#2
 4332 001a D358     	 ldr r3,[r2,r3]
 4333 001c 002B     	 cmp r3,#0
 4334 001e 18D0     	 beq .L186
1383:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1384:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = global_ptr->BRSPND[i];
 4335              	 .loc 2 1384 0
 4336 0020 7B68     	 ldr r3,[r7,#4]
 4337 0022 3A69     	 ldr r2,[r7,#16]
 4338 0024 7032     	 add r2,r2,#112
 4339 0026 9200     	 lsl r2,r2,#2
 4340 0028 D358     	 ldr r3,[r2,r3]
 4341 002a 7B61     	 str r3,[r7,#20]
1385:../Libraries/XMCLib/src/xmc_vadc.c **** 
1386:../Libraries/XMCLib/src/xmc_vadc.c ****       for(j=0U;j<XMC_VADC_NUM_CHANNELS_PER_GROUP;j++)
 4342              	 .loc 2 1386 0
 4343 002c 0023     	 mov r3,#0
 4344 002e FB60     	 str r3,[r7,#12]
 4345 0030 0CE0     	 b .L187
 4346              	.L189:
1387:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1388:../Libraries/XMCLib/src/xmc_vadc.c ****         if (reg & 1U)
 4347              	 .loc 2 1388 0
 4348 0032 7B69     	 ldr r3,[r7,#20]
 4349 0034 0122     	 mov r2,#1
 4350 0036 1340     	 and r3,r2
 4351 0038 02D0     	 beq .L188
1389:../Libraries/XMCLib/src/xmc_vadc.c ****         {
1390:../Libraries/XMCLib/src/xmc_vadc.c ****           count++;
 4352              	 .loc 2 1390 0
 4353 003a BB68     	 ldr r3,[r7,#8]
 4354 003c 0133     	 add r3,r3,#1
 4355 003e BB60     	 str r3,[r7,#8]
 4356              	.L188:
1391:../Libraries/XMCLib/src/xmc_vadc.c ****         }
1392:../Libraries/XMCLib/src/xmc_vadc.c **** 
1393:../Libraries/XMCLib/src/xmc_vadc.c ****         reg = reg >> 1U;
 4357              	 .loc 2 1393 0 discriminator 2
 4358 0040 7B69     	 ldr r3,[r7,#20]
 4359 0042 5B08     	 lsr r3,r3,#1
 4360 0044 7B61     	 str r3,[r7,#20]
1386:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 4361              	 .loc 2 1386 0 discriminator 2
 4362 0046 FB68     	 ldr r3,[r7,#12]
 4363 0048 0133     	 add r3,r3,#1
 4364 004a FB60     	 str r3,[r7,#12]
 4365              	.L187:
1386:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 4366              	 .loc 2 1386 0 is_stmt 0 discriminator 1
 4367 004c FB68     	 ldr r3,[r7,#12]
 4368 004e 072B     	 cmp r3,#7
 4369 0050 EFD9     	 bls .L189
 4370              	.L186:
1380:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4371              	 .loc 2 1380 0 is_stmt 1 discriminator 2
 4372 0052 3B69     	 ldr r3,[r7,#16]
 4373 0054 0133     	 add r3,r3,#1
 4374 0056 3B61     	 str r3,[r7,#16]
 4375              	.L185:
1380:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 4376              	 .loc 2 1380 0 is_stmt 0 discriminator 1
 4377 0058 3B69     	 ldr r3,[r7,#16]
 4378 005a 012B     	 cmp r3,#1
 4379 005c D9D9     	 bls .L190
1394:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1395:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1396:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1397:../Libraries/XMCLib/src/xmc_vadc.c **** 
1398:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 4380              	 .loc 2 1398 0 is_stmt 1
 4381 005e BB68     	 ldr r3,[r7,#8]
1399:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4382              	 .loc 2 1399 0
 4383 0060 181C     	 mov r0,r3
 4384 0062 BD46     	 mov sp,r7
 4385 0064 06B0     	 add sp,sp,#24
 4386              	 
 4387 0066 80BD     	 pop {r7,pc}
 4388              	 .cfi_endproc
 4389              	.LFE203:
 4391              	 .section .text.XMC_VADC_GROUP_QueueInit,"ax",%progbits
 4392              	 .align 2
 4393              	 .global XMC_VADC_GROUP_QueueInit
 4394              	 .code 16
 4395              	 .thumb_func
 4397              	XMC_VADC_GROUP_QueueInit:
 4398              	.LFB204:
1400:../Libraries/XMCLib/src/xmc_vadc.c **** 
1401:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
1402:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize queue request source */
1403:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
1404:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4399              	 .loc 2 1404 0
 4400              	 .cfi_startproc
 4401 0000 80B5     	 push {r7,lr}
 4402              	.LCFI175:
 4403              	 .cfi_def_cfa_offset 8
 4404              	 .cfi_offset 7,-8
 4405              	 .cfi_offset 14,-4
 4406 0002 84B0     	 sub sp,sp,#16
 4407              	.LCFI176:
 4408              	 .cfi_def_cfa_offset 24
 4409 0004 00AF     	 add r7,sp,#0
 4410              	.LCFI177:
 4411              	 .cfi_def_cfa_register 7
 4412 0006 7860     	 str r0,[r7,#4]
 4413 0008 3960     	 str r1,[r7]
1405:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t          reg;
1406:../Libraries/XMCLib/src/xmc_vadc.c **** 
1407:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1408:../Libraries/XMCLib/src/xmc_vadc.c **** 
1409:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable arbitration slot of the queue request source */
1410:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4414              	 .loc 2 1410 0
 4415 000a 7B68     	 ldr r3,[r7,#4]
 4416 000c 181C     	 mov r0,r3
 4417 000e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1411:../Libraries/XMCLib/src/xmc_vadc.c ****   
1412:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 4418              	 .loc 2 1412 0
 4419 0012 7B68     	 ldr r3,[r7,#4]
 4420 0014 8422     	 mov r2,#132
 4421 0016 9B58     	 ldr r3,[r3,r2]
 4422 0018 FB60     	 str r3,[r7,#12]
1413:../Libraries/XMCLib/src/xmc_vadc.c **** 
1414:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Request Source priority */
1415:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 4423              	 .loc 2 1415 0
 4424 001a FB68     	 ldr r3,[r7,#12]
 4425 001c 0322     	 mov r2,#3
 4426 001e 9343     	 bic r3,r2
 4427 0020 FB60     	 str r3,[r7,#12]
1416:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 4428              	 .loc 2 1416 0
 4429 0022 3B68     	 ldr r3,[r7]
 4430 0024 1B78     	 ldrb r3,[r3]
 4431 0026 1B07     	 lsl r3,r3,#28
 4432 0028 9B0F     	 lsr r3,r3,#30
 4433 002a DBB2     	 uxtb r3,r3
 4434 002c 1A1C     	 mov r2,r3
 4435 002e FB68     	 ldr r3,[r7,#12]
 4436 0030 1343     	 orr r3,r2
 4437 0032 FB60     	 str r3,[r7,#12]
1417:../Libraries/XMCLib/src/xmc_vadc.c **** 
1418:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Conversion Start mode */
1419:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 4438              	 .loc 2 1419 0
 4439 0034 3B68     	 ldr r3,[r7]
 4440 0036 1B78     	 ldrb r3,[r3]
 4441 0038 0322     	 mov r2,#3
 4442 003a 1340     	 and r3,r2
 4443 003c DBB2     	 uxtb r3,r3
 4444 003e 002B     	 cmp r3,#0
 4445 0040 03D0     	 beq .L193
1420:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1421:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 4446              	 .loc 2 1421 0
 4447 0042 FB68     	 ldr r3,[r7,#12]
 4448 0044 0822     	 mov r2,#8
 4449 0046 1343     	 orr r3,r2
 4450 0048 FB60     	 str r3,[r7,#12]
 4451              	.L193:
1422:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1423:../Libraries/XMCLib/src/xmc_vadc.c **** 
1424:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 4452              	 .loc 2 1424 0
 4453 004a 7B68     	 ldr r3,[r7,#4]
 4454 004c 8421     	 mov r1,#132
 4455 004e FA68     	 ldr r2,[r7,#12]
 4456 0050 5A50     	 str r2,[r3,r1]
1425:../Libraries/XMCLib/src/xmc_vadc.c **** 
1426:../Libraries/XMCLib/src/xmc_vadc.c **** 
1427:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 4457              	 .loc 2 1427 0
 4458 0052 3B68     	 ldr r3,[r7]
 4459 0054 5B68     	 ldr r3,[r3,#4]
 4460 0056 154A     	 ldr r2,.L195
 4461 0058 1A43     	 orr r2,r3
 4462 005a 111C     	 mov r1,r2
 4463 005c 7A68     	 ldr r2,[r7,#4]
 4464 005e 8023     	 mov r3,#128
 4465 0060 5B00     	 lsl r3,r3,#1
 4466 0062 D150     	 str r1,[r2,r3]
1428:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
1429:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));
1430:../Libraries/XMCLib/src/xmc_vadc.c **** 
1431:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Gating mode */
1432:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 4467              	 .loc 2 1432 0
 4468 0064 3B68     	 ldr r3,[r7]
 4469 0066 9B68     	 ldr r3,[r3,#8]
 4470 0068 0122     	 mov r2,#1
 4471 006a 1A43     	 orr r2,r3
 4472 006c 111C     	 mov r1,r2
 4473 006e 7A68     	 ldr r2,[r7,#4]
 4474 0070 8223     	 mov r3,#130
 4475 0072 5B00     	 lsl r3,r3,#1
 4476 0074 D150     	 str r1,[r2,r3]
1433:../Libraries/XMCLib/src/xmc_vadc.c **** 
1434:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 4477              	 .loc 2 1434 0
 4478 0076 3B68     	 ldr r3,[r7]
 4479 0078 1B78     	 ldrb r3,[r3]
 4480 007a 0322     	 mov r2,#3
 4481 007c 1340     	 and r3,r2
 4482 007e DBB2     	 uxtb r3,r3
 4483 0080 022B     	 cmp r3,#2
 4484 0082 0BD1     	 bne .L194
1435:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1436:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 4485              	 .loc 2 1436 0
 4486 0084 7A68     	 ldr r2,[r7,#4]
 4487 0086 8223     	 mov r3,#130
 4488 0088 5B00     	 lsl r3,r3,#1
 4489 008a D358     	 ldr r3,[r2,r3]
 4490 008c 8022     	 mov r2,#128
 4491 008e 5202     	 lsl r2,r2,#9
 4492 0090 1A43     	 orr r2,r3
 4493 0092 111C     	 mov r1,r2
 4494 0094 7A68     	 ldr r2,[r7,#4]
 4495 0096 8223     	 mov r3,#130
 4496 0098 5B00     	 lsl r3,r3,#1
 4497 009a D150     	 str r1,[r2,r3]
 4498              	.L194:
1437:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1438:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot for the queue request source */
1439:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 4499              	 .loc 2 1439 0
 4500 009c 7B68     	 ldr r3,[r7,#4]
 4501 009e 181C     	 mov r0,r3
 4502 00a0 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueEnableArbitrationSlot
1440:../Libraries/XMCLib/src/xmc_vadc.c **** 
1441:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4503              	 .loc 2 1441 0
 4504 00a4 BD46     	 mov sp,r7
 4505 00a6 04B0     	 add sp,sp,#16
 4506              	 
 4507 00a8 80BD     	 pop {r7,pc}
 4508              	.L196:
 4509 00aa C046     	 .align 2
 4510              	.L195:
 4511 00ac 00808080 	 .word -2139062272
 4512              	 .cfi_endproc
 4513              	.LFE204:
 4515              	 .section .text.XMC_VADC_GROUP_QueueSelectTrigger,"ax",%progbits
 4516              	 .align 2
 4517              	 .global XMC_VADC_GROUP_QueueSelectTrigger
 4518              	 .code 16
 4519              	 .thumb_func
 4521              	XMC_VADC_GROUP_QueueSelectTrigger:
 4522              	.LFB205:
1442:../Libraries/XMCLib/src/xmc_vadc.c **** 
1443:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible triggers as a conversion trigger for queue request source *
1444:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
1445:../Libraries/XMCLib/src/xmc_vadc.c ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num)
1446:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4523              	 .loc 2 1446 0
 4524              	 .cfi_startproc
 4525 0000 80B5     	 push {r7,lr}
 4526              	.LCFI178:
 4527              	 .cfi_def_cfa_offset 8
 4528              	 .cfi_offset 7,-8
 4529              	 .cfi_offset 14,-4
 4530 0002 84B0     	 sub sp,sp,#16
 4531              	.LCFI179:
 4532              	 .cfi_def_cfa_offset 24
 4533 0004 00AF     	 add r7,sp,#0
 4534              	.LCFI180:
 4535              	 .cfi_def_cfa_register 7
 4536 0006 7860     	 str r0,[r7,#4]
 4537 0008 0A1C     	 mov r2,r1
 4538 000a FB1C     	 add r3,r7,#3
 4539 000c 1A70     	 strb r2,[r3]
1447:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    qctrl;
1448:../Libraries/XMCLib/src/xmc_vadc.c ****   
1449:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1450:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_NUM_POR
1451:../Libraries/XMCLib/src/xmc_vadc.c **** 
1452:../Libraries/XMCLib/src/xmc_vadc.c ****   
1453:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the conversion trigger */
1454:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4540              	 .loc 2 1454 0
 4541 000e 7A68     	 ldr r2,[r7,#4]
 4542 0010 8023     	 mov r3,#128
 4543 0012 5B00     	 lsl r3,r3,#1
 4544 0014 D358     	 ldr r3,[r2,r3]
 4545 0016 FB60     	 str r3,[r7,#12]
1455:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 4546              	 .loc 2 1455 0
 4547 0018 FB68     	 ldr r3,[r7,#12]
 4548 001a 8022     	 mov r2,#128
 4549 001c 1202     	 lsl r2,r2,#8
 4550 001e 1343     	 orr r3,r2
 4551 0020 FB60     	 str r3,[r7,#12]
1456:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTSEL_Msk);
 4552              	 .loc 2 1456 0
 4553 0022 FB68     	 ldr r3,[r7,#12]
 4554 0024 084A     	 ldr r2,.L198
 4555 0026 1340     	 and r3,r2
 4556 0028 FB60     	 str r3,[r7,#12]
1457:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_XTSEL_Pos);
 4557              	 .loc 2 1457 0
 4558 002a FB1C     	 add r3,r7,#3
 4559 002c 1B78     	 ldrb r3,[r3]
 4560 002e 1B02     	 lsl r3,r3,#8
 4561 0030 FA68     	 ldr r2,[r7,#12]
 4562 0032 1343     	 orr r3,r2
 4563 0034 FB60     	 str r3,[r7,#12]
1458:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4564              	 .loc 2 1458 0
 4565 0036 7A68     	 ldr r2,[r7,#4]
 4566 0038 8023     	 mov r3,#128
 4567 003a 5B00     	 lsl r3,r3,#1
 4568 003c F968     	 ldr r1,[r7,#12]
 4569 003e D150     	 str r1,[r2,r3]
1459:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4570              	 .loc 2 1459 0
 4571 0040 BD46     	 mov sp,r7
 4572 0042 04B0     	 add sp,sp,#16
 4573              	 
 4574 0044 80BD     	 pop {r7,pc}
 4575              	.L199:
 4576 0046 C046     	 .align 2
 4577              	.L198:
 4578 0048 FFF0FFFF 	 .word -3841
 4579              	 .cfi_endproc
 4580              	.LFE205:
 4582              	 .section .text.XMC_VADC_GROUP_QueueSelectTriggerEdge,"ax",%progbits
 4583              	 .align 2
 4584              	 .global XMC_VADC_GROUP_QueueSelectTriggerEdge
 4585              	 .code 16
 4586              	 .thumb_func
 4588              	XMC_VADC_GROUP_QueueSelectTriggerEdge:
 4589              	.LFB206:
1460:../Libraries/XMCLib/src/xmc_vadc.c **** 
1461:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1462:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
1463:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4590              	 .loc 2 1463 0
 4591              	 .cfi_startproc
 4592 0000 80B5     	 push {r7,lr}
 4593              	.LCFI181:
 4594              	 .cfi_def_cfa_offset 8
 4595              	 .cfi_offset 7,-8
 4596              	 .cfi_offset 14,-4
 4597 0002 84B0     	 sub sp,sp,#16
 4598              	.LCFI182:
 4599              	 .cfi_def_cfa_offset 24
 4600 0004 00AF     	 add r7,sp,#0
 4601              	.LCFI183:
 4602              	 .cfi_def_cfa_register 7
 4603 0006 7860     	 str r0,[r7,#4]
 4604 0008 0A1C     	 mov r2,r1
 4605 000a FB1C     	 add r3,r7,#3
 4606 000c 1A70     	 strb r2,[r3]
1464:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1465:../Libraries/XMCLib/src/xmc_vadc.c **** 
1466:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1467:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Gating Port", ((trigger_edge)<= XMC_VADC_
1468:../Libraries/XMCLib/src/xmc_vadc.c **** 
1469:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1470:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4607              	 .loc 2 1470 0
 4608 000e 7A68     	 ldr r2,[r7,#4]
 4609 0010 8023     	 mov r3,#128
 4610 0012 5B00     	 lsl r3,r3,#1
 4611 0014 D358     	 ldr r3,[r2,r3]
 4612 0016 FB60     	 str r3,[r7,#12]
1471:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 4613              	 .loc 2 1471 0
 4614 0018 FB68     	 ldr r3,[r7,#12]
 4615 001a 8022     	 mov r2,#128
 4616 001c 1202     	 lsl r2,r2,#8
 4617 001e 1343     	 orr r3,r2
 4618 0020 FB60     	 str r3,[r7,#12]
1472:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTMODE_Msk);
 4619              	 .loc 2 1472 0
 4620 0022 FB68     	 ldr r3,[r7,#12]
 4621 0024 084A     	 ldr r2,.L201
 4622 0026 1340     	 and r3,r2
 4623 0028 FB60     	 str r3,[r7,#12]
1473:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)trigger_edge << VADC_G_QCTRL0_XTMODE_Pos);
 4624              	 .loc 2 1473 0
 4625 002a FB1C     	 add r3,r7,#3
 4626 002c 1B78     	 ldrb r3,[r3]
 4627 002e 5B03     	 lsl r3,r3,#13
 4628 0030 FA68     	 ldr r2,[r7,#12]
 4629 0032 1343     	 orr r3,r2
 4630 0034 FB60     	 str r3,[r7,#12]
1474:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4631              	 .loc 2 1474 0
 4632 0036 7A68     	 ldr r2,[r7,#4]
 4633 0038 8023     	 mov r3,#128
 4634 003a 5B00     	 lsl r3,r3,#1
 4635 003c F968     	 ldr r1,[r7,#12]
 4636 003e D150     	 str r1,[r2,r3]
1475:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4637              	 .loc 2 1475 0
 4638 0040 BD46     	 mov sp,r7
 4639 0042 04B0     	 add sp,sp,#16
 4640              	 
 4641 0044 80BD     	 pop {r7,pc}
 4642              	.L202:
 4643 0046 C046     	 .align 2
 4644              	.L201:
 4645 0048 FF9FFFFF 	 .word -24577
 4646              	 .cfi_endproc
 4647              	.LFE206:
 4649              	 .section .text.XMC_VADC_GROUP_QueueSelectGating,"ax",%progbits
 4650              	 .align 2
 4651              	 .global XMC_VADC_GROUP_QueueSelectGating
 4652              	 .code 16
 4653              	 .thumb_func
 4655              	XMC_VADC_GROUP_QueueSelectGating:
 4656              	.LFB207:
1476:../Libraries/XMCLib/src/xmc_vadc.c **** 
1477:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible trigger gates as a trigger gating signal for queue request 
1478:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
1479:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4657              	 .loc 2 1479 0
 4658              	 .cfi_startproc
 4659 0000 80B5     	 push {r7,lr}
 4660              	.LCFI184:
 4661              	 .cfi_def_cfa_offset 8
 4662              	 .cfi_offset 7,-8
 4663              	 .cfi_offset 14,-4
 4664 0002 84B0     	 sub sp,sp,#16
 4665              	.LCFI185:
 4666              	 .cfi_def_cfa_offset 24
 4667 0004 00AF     	 add r7,sp,#0
 4668              	.LCFI186:
 4669              	 .cfi_def_cfa_register 7
 4670 0006 7860     	 str r0,[r7,#4]
 4671 0008 0A1C     	 mov r2,r1
 4672 000a FB1C     	 add r3,r7,#3
 4673 000c 1A70     	 strb r2,[r3]
1480:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1481:../Libraries/XMCLib/src/xmc_vadc.c **** 
1482:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1483:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM_PORTS
1484:../Libraries/XMCLib/src/xmc_vadc.c ****   
1485:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1486:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 4674              	 .loc 2 1486 0
 4675 000e 7A68     	 ldr r2,[r7,#4]
 4676 0010 8023     	 mov r3,#128
 4677 0012 5B00     	 lsl r3,r3,#1
 4678 0014 D358     	 ldr r3,[r2,r3]
 4679 0016 FB60     	 str r3,[r7,#12]
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_GTWC_Msk;
 4680              	 .loc 2 1487 0
 4681 0018 FB68     	 ldr r3,[r7,#12]
 4682 001a 8022     	 mov r2,#128
 4683 001c 1204     	 lsl r2,r2,#16
 4684 001e 1343     	 orr r3,r2
 4685 0020 FB60     	 str r3,[r7,#12]
1488:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_GTSEL_Msk);
 4686              	 .loc 2 1488 0
 4687 0022 FB68     	 ldr r3,[r7,#12]
 4688 0024 084A     	 ldr r2,.L204
 4689 0026 1340     	 and r3,r2
 4690 0028 FB60     	 str r3,[r7,#12]
1489:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_GTSEL_Pos);
 4691              	 .loc 2 1489 0
 4692 002a FB1C     	 add r3,r7,#3
 4693 002c 1B78     	 ldrb r3,[r3]
 4694 002e 1B04     	 lsl r3,r3,#16
 4695 0030 FA68     	 ldr r2,[r7,#12]
 4696 0032 1343     	 orr r3,r2
 4697 0034 FB60     	 str r3,[r7,#12]
1490:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 4698              	 .loc 2 1490 0
 4699 0036 7A68     	 ldr r2,[r7,#4]
 4700 0038 8023     	 mov r3,#128
 4701 003a 5B00     	 lsl r3,r3,#1
 4702 003c F968     	 ldr r1,[r7,#12]
 4703 003e D150     	 str r1,[r2,r3]
1491:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4704              	 .loc 2 1491 0
 4705 0040 BD46     	 mov sp,r7
 4706 0042 04B0     	 add sp,sp,#16
 4707              	 
 4708 0044 80BD     	 pop {r7,pc}
 4709              	.L205:
 4710 0046 C046     	 .align 2
 4711              	.L204:
 4712 0048 FFFFF0FF 	 .word -983041
 4713              	 .cfi_endproc
 4714              	.LFE207:
 4716              	 .section .text.XMC_VADC_GROUP_QueueGetLength,"ax",%progbits
 4717              	 .align 2
 4718              	 .global XMC_VADC_GROUP_QueueGetLength
 4719              	 .code 16
 4720              	 .thumb_func
 4722              	XMC_VADC_GROUP_QueueGetLength:
 4723              	.LFB208:
1492:../Libraries/XMCLib/src/xmc_vadc.c **** 
1493:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine the number of channels in the queue (length includes the valid channel in the B
1494:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr)
1495:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4724              	 .loc 2 1495 0
 4725              	 .cfi_startproc
 4726 0000 80B5     	 push {r7,lr}
 4727              	.LCFI187:
 4728              	 .cfi_def_cfa_offset 8
 4729              	 .cfi_offset 7,-8
 4730              	 .cfi_offset 14,-4
 4731 0002 86B0     	 sub sp,sp,#24
 4732              	.LCFI188:
 4733              	 .cfi_def_cfa_offset 32
 4734 0004 00AF     	 add r7,sp,#0
 4735              	.LCFI189:
 4736              	 .cfi_def_cfa_register 7
 4737 0006 7860     	 str r0,[r7,#4]
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qsr;
1497:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qbur0;
1498:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        length;
1499:../Libraries/XMCLib/src/xmc_vadc.c **** 
1500:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetLength:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
1501:../Libraries/XMCLib/src/xmc_vadc.c **** 
1502:../Libraries/XMCLib/src/xmc_vadc.c ****   qsr = group_ptr->QSR0;
 4738              	 .loc 2 1502 0
 4739 0008 7A68     	 ldr r2,[r7,#4]
 4740 000a 8423     	 mov r3,#132
 4741 000c 5B00     	 lsl r3,r3,#1
 4742 000e D358     	 ldr r3,[r2,r3]
 4743 0010 3B61     	 str r3,[r7,#16]
1503:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 4744              	 .loc 2 1503 0
 4745 0012 7A68     	 ldr r2,[r7,#4]
 4746 0014 8823     	 mov r3,#136
 4747 0016 5B00     	 lsl r3,r3,#1
 4748 0018 D358     	 ldr r3,[r2,r3]
 4749 001a FB60     	 str r3,[r7,#12]
1504:../Libraries/XMCLib/src/xmc_vadc.c **** 
1505:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qsr & (uint32_t)VADC_G_QSR0_EMPTY_Msk)
 4750              	 .loc 2 1505 0
 4751 001c 3B69     	 ldr r3,[r7,#16]
 4752 001e 2022     	 mov r2,#32
 4753 0020 1340     	 and r3,r2
 4754 0022 02D0     	 beq .L207
1506:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1507:../Libraries/XMCLib/src/xmc_vadc.c ****     length = 0U;
 4755              	 .loc 2 1507 0
 4756 0024 0023     	 mov r3,#0
 4757 0026 7B61     	 str r3,[r7,#20]
 4758 0028 04E0     	 b .L208
 4759              	.L207:
1508:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1509:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1510:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1511:../Libraries/XMCLib/src/xmc_vadc.c ****     length = (qsr & (uint32_t)VADC_G_QSR0_FILL_Msk) + 1U;
 4760              	 .loc 2 1511 0
 4761 002a 3B69     	 ldr r3,[r7,#16]
 4762 002c 0F22     	 mov r2,#15
 4763 002e 1340     	 and r3,r2
 4764 0030 0133     	 add r3,r3,#1
 4765 0032 7B61     	 str r3,[r7,#20]
 4766              	.L208:
1512:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1513:../Libraries/XMCLib/src/xmc_vadc.c ****   
1514:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qbur0 & (uint32_t)VADC_G_QBUR0_V_Msk )
 4767              	 .loc 2 1514 0
 4768 0034 FA68     	 ldr r2,[r7,#12]
 4769 0036 8023     	 mov r3,#128
 4770 0038 5B00     	 lsl r3,r3,#1
 4771 003a 1340     	 and r3,r2
 4772 003c 02D0     	 beq .L209
1515:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1516:../Libraries/XMCLib/src/xmc_vadc.c ****     length++;
 4773              	 .loc 2 1516 0
 4774 003e 7B69     	 ldr r3,[r7,#20]
 4775 0040 0133     	 add r3,r3,#1
 4776 0042 7B61     	 str r3,[r7,#20]
 4777              	.L209:
1517:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1518:../Libraries/XMCLib/src/xmc_vadc.c **** 
1519:../Libraries/XMCLib/src/xmc_vadc.c ****   return length;
 4778              	 .loc 2 1519 0
 4779 0044 7B69     	 ldr r3,[r7,#20]
1520:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4780              	 .loc 2 1520 0
 4781 0046 181C     	 mov r0,r3
 4782 0048 BD46     	 mov sp,r7
 4783 004a 06B0     	 add sp,sp,#24
 4784              	 
 4785 004c 80BD     	 pop {r7,pc}
 4786              	 .cfi_endproc
 4787              	.LFE208:
 4789 004e C046     	 .section .text.XMC_VADC_GROUP_QueueAbortSequence,"ax",%progbits
 4790              	 .align 2
 4791              	 .global XMC_VADC_GROUP_QueueAbortSequence
 4792              	 .code 16
 4793              	 .thumb_func
 4795              	XMC_VADC_GROUP_QueueAbortSequence:
 4796              	.LFB209:
1521:../Libraries/XMCLib/src/xmc_vadc.c **** 
1522:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a channel sequence */
1523:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr)
1524:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4797              	 .loc 2 1524 0
 4798              	 .cfi_startproc
 4799 0000 80B5     	 push {r7,lr}
 4800              	.LCFI190:
 4801              	 .cfi_def_cfa_offset 8
 4802              	 .cfi_offset 7,-8
 4803              	 .cfi_offset 14,-4
 4804 0002 84B0     	 sub sp,sp,#16
 4805              	.LCFI191:
 4806              	 .cfi_def_cfa_offset 24
 4807 0004 00AF     	 add r7,sp,#0
 4808              	.LCFI192:
 4809              	 .cfi_def_cfa_register 7
 4810 0006 7860     	 str r0,[r7,#4]
1525:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1526:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1527:../Libraries/XMCLib/src/xmc_vadc.c **** 
1528:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueAbortSequence:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1529:../Libraries/XMCLib/src/xmc_vadc.c **** 
1530:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1531:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0 = group_ptr->QCTRL0;
 4811              	 .loc 2 1531 0
 4812 0008 7A68     	 ldr r2,[r7,#4]
 4813 000a 8023     	 mov r3,#128
 4814 000c 5B00     	 lsl r3,r3,#1
 4815 000e D358     	 ldr r3,[r2,r3]
 4816 0010 FB60     	 str r3,[r7,#12]
1532:../Libraries/XMCLib/src/xmc_vadc.c **** 
1533:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 4817              	 .loc 2 1533 0
 4818 0012 7A68     	 ldr r2,[r7,#4]
 4819 0014 8023     	 mov r3,#128
 4820 0016 5B00     	 lsl r3,r3,#1
 4821 0018 1549     	 ldr r1,.L212
 4822 001a D150     	 str r1,[r2,r3]
1534:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1535:../Libraries/XMCLib/src/xmc_vadc.c ****   
1536:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1537:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 4823              	 .loc 2 1537 0
 4824 001c 7B68     	 ldr r3,[r7,#4]
 4825 001e 8422     	 mov r2,#132
 4826 0020 9B58     	 ldr r3,[r3,r2]
 4827 0022 1B0E     	 lsr r3,r3,#24
 4828 0024 0122     	 mov r2,#1
 4829 0026 1A40     	 and r2,r3
 4830 0028 0B23     	 mov r3,#11
 4831 002a FB18     	 add r3,r7,r3
 4832 002c 511E     	 sub r1,r2,#1
 4833 002e 8A41     	 sbc r2,r2,r1
 4834 0030 1A70     	 strb r2,[r3]
1538:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4835              	 .loc 2 1538 0
 4836 0032 7B68     	 ldr r3,[r7,#4]
 4837 0034 181C     	 mov r0,r3
 4838 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1539:../Libraries/XMCLib/src/xmc_vadc.c ****    
1540:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Flush the Entries from queue*/
1541:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueFlushEntries(group_ptr);
 4839              	 .loc 2 1541 0
 4840 003a 7B68     	 ldr r3,[r7,#4]
 4841 003c 181C     	 mov r0,r3
 4842 003e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueFlushEntries
1542:../Libraries/XMCLib/src/xmc_vadc.c ****   
1543:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1544:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 4843              	 .loc 2 1544 0
 4844 0042 7B68     	 ldr r3,[r7,#4]
 4845 0044 8422     	 mov r2,#132
 4846 0046 9A58     	 ldr r2,[r3,r2]
 4847 0048 0B23     	 mov r3,#11
 4848 004a FB18     	 add r3,r7,r3
 4849 004c 1B78     	 ldrb r3,[r3]
 4850 004e 1B06     	 lsl r3,r3,#24
 4851 0050 1A43     	 orr r2,r3
 4852 0052 7B68     	 ldr r3,[r7,#4]
 4853 0054 8421     	 mov r1,#132
 4854 0056 5A50     	 str r2,[r3,r1]
1545:../Libraries/XMCLib/src/xmc_vadc.c ****   
1546:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1547:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1548:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4855              	 .loc 2 1548 0
 4856 0058 FB68     	 ldr r3,[r7,#12]
 4857 005a 054A     	 ldr r2,.L212
 4858 005c 1A43     	 orr r2,r3
 4859 005e 111C     	 mov r1,r2
1547:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4860              	 .loc 2 1547 0
 4861 0060 7A68     	 ldr r2,[r7,#4]
 4862 0062 8023     	 mov r3,#128
 4863 0064 5B00     	 lsl r3,r3,#1
 4864 0066 D150     	 str r1,[r2,r3]
1549:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4865              	 .loc 2 1549 0
 4866 0068 BD46     	 mov sp,r7
 4867 006a 04B0     	 add sp,sp,#16
 4868              	 
 4869 006c 80BD     	 pop {r7,pc}
 4870              	.L213:
 4871 006e C046     	 .align 2
 4872              	.L212:
 4873 0070 00808080 	 .word -2139062272
 4874              	 .cfi_endproc
 4875              	.LFE209:
 4877              	 .section .text.XMC_VADC_GROUP_QueueRemoveChannel,"ax",%progbits
 4878              	 .align 2
 4879              	 .global XMC_VADC_GROUP_QueueRemoveChannel
 4880              	 .code 16
 4881              	 .thumb_func
 4883              	XMC_VADC_GROUP_QueueRemoveChannel:
 4884              	.LFB210:
1550:../Libraries/XMCLib/src/xmc_vadc.c **** 
1551:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort conversion of the channel queued up next */
1552:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr)
1553:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4885              	 .loc 2 1553 0
 4886              	 .cfi_startproc
 4887 0000 80B5     	 push {r7,lr}
 4888              	.LCFI193:
 4889              	 .cfi_def_cfa_offset 8
 4890              	 .cfi_offset 7,-8
 4891              	 .cfi_offset 14,-4
 4892 0002 86B0     	 sub sp,sp,#24
 4893              	.LCFI194:
 4894              	 .cfi_def_cfa_offset 32
 4895 0004 00AF     	 add r7,sp,#0
 4896              	.LCFI195:
 4897              	 .cfi_def_cfa_register 7
 4898 0006 7860     	 str r0,[r7,#4]
1554:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_before_abort;
1555:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_after_abort;
1556:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1557:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1558:../Libraries/XMCLib/src/xmc_vadc.c **** 
1559:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1560:../Libraries/XMCLib/src/xmc_vadc.c ****   
1561:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1562:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0= group_ptr->QCTRL0;
 4899              	 .loc 2 1562 0
 4900 0008 7A68     	 ldr r2,[r7,#4]
 4901 000a 8023     	 mov r3,#128
 4902 000c 5B00     	 lsl r3,r3,#1
 4903 000e D358     	 ldr r3,[r2,r3]
 4904 0010 3B61     	 str r3,[r7,#16]
1563:../Libraries/XMCLib/src/xmc_vadc.c **** 
1564:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 4905              	 .loc 2 1564 0
 4906 0012 7A68     	 ldr r2,[r7,#4]
 4907 0014 8023     	 mov r3,#128
 4908 0016 5B00     	 lsl r3,r3,#1
 4909 0018 2649     	 ldr r1,.L218
 4910 001a D150     	 str r1,[r2,r3]
1565:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1566:../Libraries/XMCLib/src/xmc_vadc.c ****   
1567:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1568:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 4911              	 .loc 2 1568 0
 4912 001c 7B68     	 ldr r3,[r7,#4]
 4913 001e 8422     	 mov r2,#132
 4914 0020 9B58     	 ldr r3,[r3,r2]
 4915 0022 1B0E     	 lsr r3,r3,#24
 4916 0024 0122     	 mov r2,#1
 4917 0026 1A40     	 and r2,r3
 4918 0028 0F23     	 mov r3,#15
 4919 002a FB18     	 add r3,r7,r3
 4920 002c 511E     	 sub r1,r2,#1
 4921 002e 8A41     	 sbc r2,r2,r1
 4922 0030 1A70     	 strb r2,[r3]
1569:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 4923              	 .loc 2 1569 0
 4924 0032 7B68     	 ldr r3,[r7,#4]
 4925 0034 181C     	 mov r0,r3
 4926 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1570:../Libraries/XMCLib/src/xmc_vadc.c **** 
1571:../Libraries/XMCLib/src/xmc_vadc.c ****   length_before_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4927              	 .loc 2 1571 0
 4928 003a 7B68     	 ldr r3,[r7,#4]
 4929 003c 181C     	 mov r0,r3
 4930 003e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4931 0042 031C     	 mov r3,r0
 4932 0044 BB60     	 str r3,[r7,#8]
1572:../Libraries/XMCLib/src/xmc_vadc.c **** 
1573:../Libraries/XMCLib/src/xmc_vadc.c ****   if (length_before_abort)
 4933              	 .loc 2 1573 0
 4934 0046 BB68     	 ldr r3,[r7,#8]
 4935 0048 002B     	 cmp r3,#0
 4936 004a 1CD0     	 beq .L215
1574:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1575:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Remove the first entry of the queue */
1576:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_CLRV_Msk;
 4937              	 .loc 2 1576 0
 4938 004c 7A68     	 ldr r2,[r7,#4]
 4939 004e 8223     	 mov r3,#130
 4940 0050 5B00     	 lsl r3,r3,#1
 4941 0052 D358     	 ldr r3,[r2,r3]
 4942 0054 8022     	 mov r2,#128
 4943 0056 5200     	 lsl r2,r2,#1
 4944 0058 1A43     	 orr r2,r3
 4945 005a 111C     	 mov r1,r2
 4946 005c 7A68     	 ldr r2,[r7,#4]
 4947 005e 8223     	 mov r3,#130
 4948 0060 5B00     	 lsl r3,r3,#1
 4949 0062 D150     	 str r1,[r2,r3]
1577:../Libraries/XMCLib/src/xmc_vadc.c **** 
1578:../Libraries/XMCLib/src/xmc_vadc.c ****     length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4950              	 .loc 2 1578 0
 4951 0064 7B68     	 ldr r3,[r7,#4]
 4952 0066 181C     	 mov r0,r3
 4953 0068 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4954 006c 031C     	 mov r3,r0
 4955 006e 7B61     	 str r3,[r7,#20]
1579:../Libraries/XMCLib/src/xmc_vadc.c **** 
1580:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Loop until a reduction in queue length is assessed */
1581:../Libraries/XMCLib/src/xmc_vadc.c ****     while(length_after_abort == length_before_abort)
 4956              	 .loc 2 1581 0
 4957 0070 05E0     	 b .L216
 4958              	.L217:
1582:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1583:../Libraries/XMCLib/src/xmc_vadc.c ****       length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4959              	 .loc 2 1583 0
 4960 0072 7B68     	 ldr r3,[r7,#4]
 4961 0074 181C     	 mov r0,r3
 4962 0076 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4963 007a 031C     	 mov r3,r0
 4964 007c 7B61     	 str r3,[r7,#20]
 4965              	.L216:
1581:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 4966              	 .loc 2 1581 0
 4967 007e 7A69     	 ldr r2,[r7,#20]
 4968 0080 BB68     	 ldr r3,[r7,#8]
 4969 0082 9A42     	 cmp r2,r3
 4970 0084 F5D0     	 beq .L217
 4971              	.L215:
1584:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1585:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1586:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1587:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 4972              	 .loc 2 1587 0
 4973 0086 7B68     	 ldr r3,[r7,#4]
 4974 0088 8422     	 mov r2,#132
 4975 008a 9A58     	 ldr r2,[r3,r2]
 4976 008c 0F23     	 mov r3,#15
 4977 008e FB18     	 add r3,r7,r3
 4978 0090 1B78     	 ldrb r3,[r3]
 4979 0092 1B06     	 lsl r3,r3,#24
 4980 0094 1A43     	 orr r2,r3
 4981 0096 7B68     	 ldr r3,[r7,#4]
 4982 0098 8421     	 mov r1,#132
 4983 009a 5A50     	 str r2,[r3,r1]
1588:../Libraries/XMCLib/src/xmc_vadc.c ****   
1589:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1590:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1591:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4984              	 .loc 2 1591 0
 4985 009c 3B69     	 ldr r3,[r7,#16]
 4986 009e 054A     	 ldr r2,.L218
 4987 00a0 1A43     	 orr r2,r3
 4988 00a2 111C     	 mov r1,r2
1590:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4989              	 .loc 2 1590 0
 4990 00a4 7A68     	 ldr r2,[r7,#4]
 4991 00a6 8023     	 mov r3,#128
 4992 00a8 5B00     	 lsl r3,r3,#1
 4993 00aa D150     	 str r1,[r2,r3]
1592:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4994              	 .loc 2 1592 0
 4995 00ac BD46     	 mov sp,r7
 4996 00ae 06B0     	 add sp,sp,#24
 4997              	 
 4998 00b0 80BD     	 pop {r7,pc}
 4999              	.L219:
 5000 00b2 C046     	 .align 2
 5001              	.L218:
 5002 00b4 00808080 	 .word -2139062272
 5003              	 .cfi_endproc
 5004              	.LFE210:
 5006              	 .section .text.XMC_VADC_GROUP_QueueGetNextChannel,"ax",%progbits
 5007              	 .align 2
 5008              	 .global XMC_VADC_GROUP_QueueGetNextChannel
 5009              	 .code 16
 5010              	 .thumb_func
 5012              	XMC_VADC_GROUP_QueueGetNextChannel:
 5013              	.LFB211:
1593:../Libraries/XMCLib/src/xmc_vadc.c **** 
1594:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get details of channel meant to be converted right after the ongoing conversion */
1595:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr)
1596:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5014              	 .loc 2 1596 0
 5015              	 .cfi_startproc
 5016 0000 80B5     	 push {r7,lr}
 5017              	.LCFI196:
 5018              	 .cfi_def_cfa_offset 8
 5019              	 .cfi_offset 7,-8
 5020              	 .cfi_offset 14,-4
 5021 0002 84B0     	 sub sp,sp,#16
 5022              	.LCFI197:
 5023              	 .cfi_def_cfa_offset 24
 5024 0004 00AF     	 add r7,sp,#0
 5025              	.LCFI198:
 5026              	 .cfi_def_cfa_register 7
 5027 0006 7860     	 str r0,[r7,#4]
1597:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1598:../Libraries/XMCLib/src/xmc_vadc.c **** 
1599:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetNextChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1600:../Libraries/XMCLib/src/xmc_vadc.c ****   
1601:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1602:../Libraries/XMCLib/src/xmc_vadc.c ****    * Check if there is something in the backup stage. If not, read queue-0
1603:../Libraries/XMCLib/src/xmc_vadc.c ****    * entry.
1604:../Libraries/XMCLib/src/xmc_vadc.c ****    */
1605:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 5028              	 .loc 2 1605 0
 5029 0008 7A68     	 ldr r2,[r7,#4]
 5030 000a 8823     	 mov r3,#136
 5031 000c 5B00     	 lsl r3,r3,#1
 5032 000e D258     	 ldr r2,[r2,r3]
 5033 0010 8023     	 mov r3,#128
 5034 0012 5B00     	 lsl r3,r3,#1
 5035 0014 1340     	 and r3,r2
 5036 0016 08D0     	 beq .L221
1606:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1607:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 5037              	 .loc 2 1607 0
 5038 0018 7A68     	 ldr r2,[r7,#4]
 5039 001a 8823     	 mov r3,#136
 5040 001c 5B00     	 lsl r3,r3,#1
 5041 001e D358     	 ldr r3,[r2,r3]
 5042 0020 1A1C     	 mov r2,r3
 5043 0022 1F23     	 mov r3,#31
 5044 0024 1340     	 and r3,r2
 5045 0026 FB60     	 str r3,[r7,#12]
 5046 0028 13E0     	 b .L222
 5047              	.L221:
1608:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1609:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( (group_ptr->Q0R0) & (uint32_t)VADC_G_Q0R0_V_Msk)
 5048              	 .loc 2 1609 0
 5049 002a 7A68     	 ldr r2,[r7,#4]
 5050 002c 8623     	 mov r3,#134
 5051 002e 5B00     	 lsl r3,r3,#1
 5052 0030 D258     	 ldr r2,[r2,r3]
 5053 0032 8023     	 mov r3,#128
 5054 0034 5B00     	 lsl r3,r3,#1
 5055 0036 1340     	 and r3,r2
 5056 0038 08D0     	 beq .L223
1610:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1611:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->Q0R0 & (uint32_t)VADC_G_Q0R0_REQCHNR_Msk);
 5057              	 .loc 2 1611 0
 5058 003a 7A68     	 ldr r2,[r7,#4]
 5059 003c 8623     	 mov r3,#134
 5060 003e 5B00     	 lsl r3,r3,#1
 5061 0040 D358     	 ldr r3,[r2,r3]
 5062 0042 1A1C     	 mov r2,r3
 5063 0044 1F23     	 mov r3,#31
 5064 0046 1340     	 and r3,r2
 5065 0048 FB60     	 str r3,[r7,#12]
 5066 004a 02E0     	 b .L222
 5067              	.L223:
1612:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1613:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1614:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1615:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Nothing is pending */
1616:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 5068              	 .loc 2 1616 0
 5069 004c 0123     	 mov r3,#1
 5070 004e 5B42     	 neg r3,r3
 5071 0050 FB60     	 str r3,[r7,#12]
 5072              	.L222:
1617:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1618:../Libraries/XMCLib/src/xmc_vadc.c **** 
1619:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 5073              	 .loc 2 1619 0
 5074 0052 FB68     	 ldr r3,[r7,#12]
1620:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5075              	 .loc 2 1620 0
 5076 0054 181C     	 mov r0,r3
 5077 0056 BD46     	 mov sp,r7
 5078 0058 04B0     	 add sp,sp,#16
 5079              	 
 5080 005a 80BD     	 pop {r7,pc}
 5081              	 .cfi_endproc
 5082              	.LFE211:
 5084              	 .section .text.XMC_VADC_GROUP_QueueGetInterruptedChannel,"ax",%progbits
 5085              	 .align 2
 5086              	 .global XMC_VADC_GROUP_QueueGetInterruptedChannel
 5087              	 .code 16
 5088              	 .thumb_func
 5090              	XMC_VADC_GROUP_QueueGetInterruptedChannel:
 5091              	.LFB212:
1621:../Libraries/XMCLib/src/xmc_vadc.c **** 
1622:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get the channel number of the channel whose conversion had been interrupted */
1623:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr)
1624:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5092              	 .loc 2 1624 0
 5093              	 .cfi_startproc
 5094 0000 80B5     	 push {r7,lr}
 5095              	.LCFI199:
 5096              	 .cfi_def_cfa_offset 8
 5097              	 .cfi_offset 7,-8
 5098              	 .cfi_offset 14,-4
 5099 0002 84B0     	 sub sp,sp,#16
 5100              	.LCFI200:
 5101              	 .cfi_def_cfa_offset 24
 5102 0004 00AF     	 add r7,sp,#0
 5103              	.LCFI201:
 5104              	 .cfi_def_cfa_register 7
 5105 0006 7860     	 str r0,[r7,#4]
1625:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1626:../Libraries/XMCLib/src/xmc_vadc.c **** 
1627:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetInterruptedChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1628:../Libraries/XMCLib/src/xmc_vadc.c ****   
1629:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 5106              	 .loc 2 1629 0
 5107 0008 7A68     	 ldr r2,[r7,#4]
 5108 000a 8823     	 mov r3,#136
 5109 000c 5B00     	 lsl r3,r3,#1
 5110 000e D258     	 ldr r2,[r2,r3]
 5111 0010 8023     	 mov r3,#128
 5112 0012 5B00     	 lsl r3,r3,#1
 5113 0014 1340     	 and r3,r2
 5114 0016 08D0     	 beq .L226
1630:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1631:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 5115              	 .loc 2 1631 0
 5116 0018 7A68     	 ldr r2,[r7,#4]
 5117 001a 8823     	 mov r3,#136
 5118 001c 5B00     	 lsl r3,r3,#1
 5119 001e D358     	 ldr r3,[r2,r3]
 5120 0020 1A1C     	 mov r2,r3
 5121 0022 1F23     	 mov r3,#31
 5122 0024 1340     	 and r3,r2
 5123 0026 FB60     	 str r3,[r7,#12]
 5124 0028 02E0     	 b .L227
 5125              	.L226:
1632:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1633:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1634:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1635:../Libraries/XMCLib/src/xmc_vadc.c ****     /* No such channel */
1636:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 5126              	 .loc 2 1636 0
 5127 002a 0123     	 mov r3,#1
 5128 002c 5B42     	 neg r3,r3
 5129 002e FB60     	 str r3,[r7,#12]
 5130              	.L227:
1637:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1638:../Libraries/XMCLib/src/xmc_vadc.c **** 
1639:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 5131              	 .loc 2 1639 0
 5132 0030 FB68     	 ldr r3,[r7,#12]
1640:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5133              	 .loc 2 1640 0
 5134 0032 181C     	 mov r0,r3
 5135 0034 BD46     	 mov sp,r7
 5136 0036 04B0     	 add sp,sp,#16
 5137              	 
 5138 0038 80BD     	 pop {r7,pc}
 5139              	 .cfi_endproc
 5140              	.LFE212:
 5142 003a C046     	 .section .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode,"ax",%progbits
 5143              	 .align 2
 5144              	 .global XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
 5145              	 .code 16
 5146              	 .thumb_func
 5148              	XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:
 5149              	.LFB213:
1641:../Libraries/XMCLib/src/xmc_vadc.c **** 
1642:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a Service Request line for the request source event */
1643:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
1644:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5150              	 .loc 2 1644 0
 5151              	 .cfi_startproc
 5152 0000 80B5     	 push {r7,lr}
 5153              	.LCFI202:
 5154              	 .cfi_def_cfa_offset 8
 5155              	 .cfi_offset 7,-8
 5156              	 .cfi_offset 14,-4
 5157 0002 84B0     	 sub sp,sp,#16
 5158              	.LCFI203:
 5159              	 .cfi_def_cfa_offset 24
 5160 0004 00AF     	 add r7,sp,#0
 5161              	.LCFI204:
 5162              	 .cfi_def_cfa_register 7
 5163 0006 7860     	 str r0,[r7,#4]
 5164 0008 0A1C     	 mov r2,r1
 5165 000a FB1C     	 add r3,r7,#3
 5166 000c 1A70     	 strb r2,[r3]
1645:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1646:../Libraries/XMCLib/src/xmc_vadc.c **** 
1647:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_
1648:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC
1649:../Libraries/XMCLib/src/xmc_vadc.c **** 
1650:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 5167              	 .loc 2 1650 0
 5168 000e 7A68     	 ldr r2,[r7,#4]
 5169 0010 E023     	 mov r3,#224
 5170 0012 5B00     	 lsl r3,r3,#1
 5171 0014 D358     	 ldr r3,[r2,r3]
 5172 0016 FB60     	 str r3,[r7,#12]
1651:../Libraries/XMCLib/src/xmc_vadc.c **** 
1652:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 5173              	 .loc 2 1652 0
 5174 0018 FB68     	 ldr r3,[r7,#12]
 5175 001a 0F22     	 mov r2,#15
 5176 001c 9343     	 bic r3,r2
 5177 001e FB60     	 str r3,[r7,#12]
1653:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 5178              	 .loc 2 1653 0
 5179 0020 FB1C     	 add r3,r7,#3
 5180 0022 1B78     	 ldrb r3,[r3]
 5181 0024 FA68     	 ldr r2,[r7,#12]
 5182 0026 1343     	 orr r3,r2
 5183 0028 FB60     	 str r3,[r7,#12]
1654:../Libraries/XMCLib/src/xmc_vadc.c **** 
1655:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 5184              	 .loc 2 1655 0
 5185 002a 7A68     	 ldr r2,[r7,#4]
 5186 002c E023     	 mov r3,#224
 5187 002e 5B00     	 lsl r3,r3,#1
 5188 0030 F968     	 ldr r1,[r7,#12]
 5189 0032 D150     	 str r1,[r2,r3]
1656:../Libraries/XMCLib/src/xmc_vadc.c **** 
1657:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5190              	 .loc 2 1657 0
 5191 0034 BD46     	 mov sp,r7
 5192 0036 04B0     	 add sp,sp,#16
 5193              	 
 5194 0038 80BD     	 pop {r7,pc}
 5195              	 .cfi_endproc
 5196              	.LFE213:
 5198 003a C046     	 .section .text.XMC_VADC_GROUP_ChannelInit,"ax",%progbits
 5199              	 .align 2
 5200              	 .global XMC_VADC_GROUP_ChannelInit
 5201              	 .code 16
 5202              	 .thumb_func
 5204              	XMC_VADC_GROUP_ChannelInit:
 5205              	.LFB214:
1658:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1659:../Libraries/XMCLib/src/xmc_vadc.c **** 
1660:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1661:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize a channel unit */
1662:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
1663:../Libraries/XMCLib/src/xmc_vadc.c ****                                         const XMC_VADC_CHANNEL_CONFIG_t *config)
1664:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5206              	 .loc 2 1664 0
 5207              	 .cfi_startproc
 5208 0000 80B5     	 push {r7,lr}
 5209              	.LCFI205:
 5210              	 .cfi_def_cfa_offset 8
 5211              	 .cfi_offset 7,-8
 5212              	 .cfi_offset 14,-4
 5213 0002 88B0     	 sub sp,sp,#32
 5214              	.LCFI206:
 5215              	 .cfi_def_cfa_offset 40
 5216 0004 00AF     	 add r7,sp,#0
 5217              	.LCFI207:
 5218              	 .cfi_def_cfa_register 7
 5219 0006 F860     	 str r0,[r7,#12]
 5220 0008 B960     	 str r1,[r7,#8]
 5221 000a 7A60     	 str r2,[r7,#4]
1665:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t prio;
1666:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_assign;
1667:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1668:../Libraries/XMCLib/src/xmc_vadc.c **** 
1669:../Libraries/XMCLib/src/xmc_vadc.c **** 
1670:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1671:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_P
1672:../Libraries/XMCLib/src/xmc_vadc.c ****   
1673:../Libraries/XMCLib/src/xmc_vadc.c ****   prio  = (uint32_t)config->channel_priority;
 5222              	 .loc 2 1673 0
 5223 000c 7B68     	 ldr r3,[r7,#4]
 5224 000e 1B7B     	 ldrb r3,[r3,#12]
 5225 0010 BB61     	 str r3,[r7,#24]
1674:../Libraries/XMCLib/src/xmc_vadc.c **** 
1675:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Priority channel */
1676:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign  = group_ptr->CHASS;
 5226              	 .loc 2 1676 0
 5227 0012 FB68     	 ldr r3,[r7,#12]
 5228 0014 8822     	 mov r2,#136
 5229 0016 9B58     	 ldr r3,[r3,r2]
 5230 0018 7B61     	 str r3,[r7,#20]
1677:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 5231              	 .loc 2 1677 0
 5232 001a BB68     	 ldr r3,[r7,#8]
 5233 001c 0122     	 mov r2,#1
 5234 001e 9A40     	 lsl r2,r2,r3
 5235 0020 131C     	 mov r3,r2
 5236 0022 DA43     	 mvn r2,r3
 5237 0024 7B69     	 ldr r3,[r7,#20]
 5238 0026 1340     	 and r3,r2
 5239 0028 7B61     	 str r3,[r7,#20]
1678:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign |= (uint32_t)(prio << ch_num);
 5240              	 .loc 2 1678 0
 5241 002a BB68     	 ldr r3,[r7,#8]
 5242 002c BA69     	 ldr r2,[r7,#24]
 5243 002e 9A40     	 lsl r2,r2,r3
 5244 0030 131C     	 mov r3,r2
 5245 0032 7A69     	 ldr r2,[r7,#20]
 5246 0034 1343     	 orr r3,r2
 5247 0036 7B61     	 str r3,[r7,#20]
1679:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHASS = ch_assign;
 5248              	 .loc 2 1679 0
 5249 0038 FB68     	 ldr r3,[r7,#12]
 5250 003a 8821     	 mov r1,#136
 5251 003c 7A69     	 ldr r2,[r7,#20]
 5252 003e 5A50     	 str r2,[r3,r1]
1680:../Libraries/XMCLib/src/xmc_vadc.c **** 
1681:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Alias channel */
1682:../Libraries/XMCLib/src/xmc_vadc.c ****   if (config->alias_channel >= (int32_t)0)
 5253              	 .loc 2 1682 0
 5254 0040 7B68     	 ldr r3,[r7,#4]
 5255 0042 5B7B     	 ldrb r3,[r3,#13]
 5256 0044 5BB2     	 sxtb r3,r3
 5257 0046 002B     	 cmp r3,#0
 5258 0048 2ADB     	 blt .L231
1683:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1684:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)0;
 5259              	 .loc 2 1684 0
 5260 004a 0023     	 mov r3,#0
 5261 004c FB61     	 str r3,[r7,#28]
1685:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint32_t)1 == ch_num)
 5262              	 .loc 2 1685 0
 5263 004e BB68     	 ldr r3,[r7,#8]
 5264 0050 012B     	 cmp r3,#1
 5265 0052 0AD1     	 bne .L232
1686:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1687:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS1_Pos;
 5266              	 .loc 2 1687 0
 5267 0054 0823     	 mov r3,#8
 5268 0056 FB61     	 str r3,[r7,#28]
1688:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 5269              	 .loc 2 1688 0
 5270 0058 FB68     	 ldr r3,[r7,#12]
 5271 005a B022     	 mov r2,#176
 5272 005c 9B58     	 ldr r3,[r3,r2]
 5273 005e 1E4A     	 ldr r2,.L234
 5274 0060 1A40     	 and r2,r3
 5275 0062 FB68     	 ldr r3,[r7,#12]
 5276 0064 B021     	 mov r1,#176
 5277 0066 5A50     	 str r2,[r3,r1]
 5278 0068 0DE0     	 b .L233
 5279              	.L232:
1689:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1690:../Libraries/XMCLib/src/xmc_vadc.c ****     else if ((uint32_t)0 == ch_num)
 5280              	 .loc 2 1690 0
 5281 006a BB68     	 ldr r3,[r7,#8]
 5282 006c 002B     	 cmp r3,#0
 5283 006e 0AD1     	 bne .L233
1691:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1692:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS0_Pos;
 5284              	 .loc 2 1692 0
 5285 0070 0023     	 mov r3,#0
 5286 0072 FB61     	 str r3,[r7,#28]
1693:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 5287              	 .loc 2 1693 0
 5288 0074 FB68     	 ldr r3,[r7,#12]
 5289 0076 B022     	 mov r2,#176
 5290 0078 9B58     	 ldr r3,[r3,r2]
 5291 007a 1F22     	 mov r2,#31
 5292 007c 9343     	 bic r3,r2
 5293 007e 1A1C     	 mov r2,r3
 5294 0080 FB68     	 ldr r3,[r7,#12]
 5295 0082 B021     	 mov r1,#176
 5296 0084 5A50     	 str r2,[r3,r1]
 5297              	.L233:
1694:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1695:../Libraries/XMCLib/src/xmc_vadc.c **** 
1696:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 5298              	 .loc 2 1696 0
 5299 0086 FB68     	 ldr r3,[r7,#12]
 5300 0088 B022     	 mov r2,#176
 5301 008a 9B58     	 ldr r3,[r3,r2]
 5302 008c 7A68     	 ldr r2,[r7,#4]
 5303 008e 527B     	 ldrb r2,[r2,#13]
 5304 0090 51B2     	 sxtb r1,r2
 5305 0092 FA69     	 ldr r2,[r7,#28]
 5306 0094 9140     	 lsl r1,r1,r2
 5307 0096 0A1C     	 mov r2,r1
 5308 0098 1A43     	 orr r2,r3
 5309 009a FB68     	 ldr r3,[r7,#12]
 5310 009c B021     	 mov r1,#176
 5311 009e 5A50     	 str r2,[r3,r1]
 5312              	.L231:
1697:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1698:../Libraries/XMCLib/src/xmc_vadc.c **** 
1699:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFL |= config->bfl;
 5313              	 .loc 2 1699 0
 5314 00a0 FB68     	 ldr r3,[r7,#12]
 5315 00a2 C822     	 mov r2,#200
 5316 00a4 9A58     	 ldr r2,[r3,r2]
 5317 00a6 7B68     	 ldr r3,[r7,#4]
 5318 00a8 5B68     	 ldr r3,[r3,#4]
 5319 00aa 1A43     	 orr r2,r3
 5320 00ac FB68     	 ldr r3,[r7,#12]
 5321 00ae C821     	 mov r1,#200
 5322 00b0 5A50     	 str r2,[r3,r1]
1700:../Libraries/XMCLib/src/xmc_vadc.c **** 
1701:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
1702:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLC |= config->bflc;
 5323              	 .loc 2 1702 0
 5324 00b2 FB68     	 ldr r3,[r7,#12]
 5325 00b4 D022     	 mov r2,#208
 5326 00b6 9A58     	 ldr r2,[r3,r2]
 5327 00b8 7B68     	 ldr r3,[r7,#4]
 5328 00ba 9B68     	 ldr r3,[r3,#8]
 5329 00bc 1A43     	 orr r2,r3
 5330 00be FB68     	 ldr r3,[r7,#12]
 5331 00c0 D021     	 mov r1,#208
 5332 00c2 5A50     	 str r2,[r3,r1]
1703:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1704:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the CHCTR register */
1705:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = config->chctr;
 5333              	 .loc 2 1705 0
 5334 00c4 7B68     	 ldr r3,[r7,#4]
 5335 00c6 1968     	 ldr r1,[r3]
 5336 00c8 FB68     	 ldr r3,[r7,#12]
 5337 00ca BA68     	 ldr r2,[r7,#8]
 5338 00cc 8032     	 add r2,r2,#128
 5339 00ce 9200     	 lsl r2,r2,#2
 5340 00d0 D150     	 str r1,[r2,r3]
1706:../Libraries/XMCLib/src/xmc_vadc.c **** 
1707:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5341              	 .loc 2 1707 0
 5342 00d2 BD46     	 mov sp,r7
 5343 00d4 08B0     	 add sp,sp,#32
 5344              	 
 5345 00d6 80BD     	 pop {r7,pc}
 5346              	.L235:
 5347              	 .align 2
 5348              	.L234:
 5349 00d8 FFE0FFFF 	 .word -7937
 5350              	 .cfi_endproc
 5351              	.LFE214:
 5353              	 .section .text.XMC_VADC_GROUP_SetChannelAlias,"ax",%progbits
 5354              	 .align 2
 5355              	 .global XMC_VADC_GROUP_SetChannelAlias
 5356              	 .code 16
 5357              	 .thumb_func
 5359              	XMC_VADC_GROUP_SetChannelAlias:
 5360              	.LFB215:
1708:../Libraries/XMCLib/src/xmc_vadc.c **** 
1709:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an alias channel for channels numbered 2 through 7 */
1710:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
1711:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t src_ch_num,
1712:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t alias_ch_num)
1713:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5361              	 .loc 2 1713 0
 5362              	 .cfi_startproc
 5363 0000 80B5     	 push {r7,lr}
 5364              	.LCFI208:
 5365              	 .cfi_def_cfa_offset 8
 5366              	 .cfi_offset 7,-8
 5367              	 .cfi_offset 14,-4
 5368 0002 88B0     	 sub sp,sp,#32
 5369              	.LCFI209:
 5370              	 .cfi_def_cfa_offset 40
 5371 0004 00AF     	 add r7,sp,#0
 5372              	.LCFI210:
 5373              	 .cfi_def_cfa_register 7
 5374 0006 F860     	 str r0,[r7,#12]
 5375 0008 B960     	 str r1,[r7,#8]
 5376 000a 7A60     	 str r2,[r7,#4]
1714:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t alias;
1715:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1716:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
1717:../Libraries/XMCLib/src/xmc_vadc.c **** 
1718:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1719:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Alias Channel", ((alias_ch_num == 0)|| (alias_ch
1720:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Aliased Channel", ((src_ch_num < 8U)))
1721:../Libraries/XMCLib/src/xmc_vadc.c **** 
1722:../Libraries/XMCLib/src/xmc_vadc.c ****   alias = group_ptr->ALIAS;
 5377              	 .loc 2 1722 0
 5378 000c FB68     	 ldr r3,[r7,#12]
 5379 000e B022     	 mov r2,#176
 5380 0010 9B58     	 ldr r3,[r3,r2]
 5381 0012 7B61     	 str r3,[r7,#20]
1723:../Libraries/XMCLib/src/xmc_vadc.c **** 
1724:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == alias_ch_num)
 5382              	 .loc 2 1724 0
 5383 0014 7B68     	 ldr r3,[r7,#4]
 5384 0016 002B     	 cmp r3,#0
 5385 0018 04D1     	 bne .L237
1725:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1726:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS0_Msk;
 5386              	 .loc 2 1726 0
 5387 001a 1F23     	 mov r3,#31
 5388 001c FB61     	 str r3,[r7,#28]
1727:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS0_Pos;
 5389              	 .loc 2 1727 0
 5390 001e 0023     	 mov r3,#0
 5391 0020 BB61     	 str r3,[r7,#24]
 5392 0022 04E0     	 b .L238
 5393              	.L237:
1728:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1729:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1730:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1731:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS1_Msk;
 5394              	 .loc 2 1731 0
 5395 0024 F823     	 mov r3,#248
 5396 0026 5B01     	 lsl r3,r3,#5
 5397 0028 FB61     	 str r3,[r7,#28]
1732:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS1_Pos;
 5398              	 .loc 2 1732 0
 5399 002a 0823     	 mov r3,#8
 5400 002c BB61     	 str r3,[r7,#24]
 5401              	.L238:
1733:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1734:../Libraries/XMCLib/src/xmc_vadc.c ****   alias &= ~mask;
 5402              	 .loc 2 1734 0
 5403 002e FB69     	 ldr r3,[r7,#28]
 5404 0030 DA43     	 mvn r2,r3
 5405 0032 7B69     	 ldr r3,[r7,#20]
 5406 0034 1340     	 and r3,r2
 5407 0036 7B61     	 str r3,[r7,#20]
1735:../Libraries/XMCLib/src/xmc_vadc.c ****   alias |= (uint32_t)(src_ch_num << pos);
 5408              	 .loc 2 1735 0
 5409 0038 BB69     	 ldr r3,[r7,#24]
 5410 003a BA68     	 ldr r2,[r7,#8]
 5411 003c 9A40     	 lsl r2,r2,r3
 5412 003e 131C     	 mov r3,r2
 5413 0040 7A69     	 ldr r2,[r7,#20]
 5414 0042 1343     	 orr r3,r2
 5415 0044 7B61     	 str r3,[r7,#20]
1736:../Libraries/XMCLib/src/xmc_vadc.c **** 
1737:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ALIAS = alias;
 5416              	 .loc 2 1737 0
 5417 0046 FB68     	 ldr r3,[r7,#12]
 5418 0048 B021     	 mov r1,#176
 5419 004a 7A69     	 ldr r2,[r7,#20]
 5420 004c 5A50     	 str r2,[r3,r1]
1738:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5421              	 .loc 2 1738 0
 5422 004e BD46     	 mov sp,r7
 5423 0050 08B0     	 add sp,sp,#32
 5424              	 
 5425 0052 80BD     	 pop {r7,pc}
 5426              	 .cfi_endproc
 5427              	.LFE215:
 5429              	 .section .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds,"ax",%progbits
 5430              	 .align 2
 5431              	 .global XMC_VADC_GROUP_ChannelIsResultOutOfBounds
 5432              	 .code 16
 5433              	 .thumb_func
 5435              	XMC_VADC_GROUP_ChannelIsResultOutOfBounds:
 5436              	.LFB216:
1739:../Libraries/XMCLib/src/xmc_vadc.c **** 
1740:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine whether input to a channel has violated boundary conditions */
1741:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
1742:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5437              	 .loc 2 1742 0
 5438              	 .cfi_startproc
 5439 0000 80B5     	 push {r7,lr}
 5440              	.LCFI211:
 5441              	 .cfi_def_cfa_offset 8
 5442              	 .cfi_offset 7,-8
 5443              	 .cfi_offset 14,-4
 5444 0002 86B0     	 sub sp,sp,#24
 5445              	.LCFI212:
 5446              	 .cfi_def_cfa_offset 32
 5447 0004 00AF     	 add r7,sp,#0
 5448              	.LCFI213:
 5449              	 .cfi_def_cfa_register 7
 5450 0006 7860     	 str r0,[r7,#4]
 5451 0008 3960     	 str r1,[r7]
1743:../Libraries/XMCLib/src/xmc_vadc.c ****   bool retval;
1744:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    chctr;
1745:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    ceflag;
1746:../Libraries/XMCLib/src/xmc_vadc.c **** 
1747:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1748:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Channel Number",
1749:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1750:../Libraries/XMCLib/src/xmc_vadc.c **** 
1751:../Libraries/XMCLib/src/xmc_vadc.c ****   retval = (bool)false;
 5452              	 .loc 2 1751 0
 5453 000a 1723     	 mov r3,#23
 5454 000c FB18     	 add r3,r7,r3
 5455 000e 0022     	 mov r2,#0
 5456 0010 1A70     	 strb r2,[r3]
1752:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1753:../Libraries/XMCLib/src/xmc_vadc.c ****     Check if the Channel event is configured to be generated in the event of
1754:../Libraries/XMCLib/src/xmc_vadc.c ****     boundary violation and if affirmative, check if the channel event is set.
1755:../Libraries/XMCLib/src/xmc_vadc.c ****   */
1756:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CHEVMODE for requested channel */
1757:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 5457              	 .loc 2 1757 0
 5458 0012 7B68     	 ldr r3,[r7,#4]
 5459 0014 3A68     	 ldr r2,[r7]
 5460 0016 8032     	 add r2,r2,#128
 5461 0018 9200     	 lsl r2,r2,#2
 5462 001a D358     	 ldr r3,[r2,r3]
 5463 001c 3B61     	 str r3,[r7,#16]
1758:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
 5464              	 .loc 2 1758 0
 5465 001e 3B69     	 ldr r3,[r7,#16]
 5466 0020 1B0A     	 lsr r3,r3,#8
 5467 0022 0322     	 mov r2,#3
 5468 0024 1340     	 and r3,r2
 5469 0026 3B61     	 str r3,[r7,#16]
1759:../Libraries/XMCLib/src/xmc_vadc.c **** 
1760:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CEFLAG for the requested channel */
1761:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = group_ptr->CEFLAG;
 5470              	 .loc 2 1761 0
 5471 0028 7A68     	 ldr r2,[r7,#4]
 5472 002a C023     	 mov r3,#192
 5473 002c 5B00     	 lsl r3,r3,#1
 5474 002e D358     	 ldr r3,[r2,r3]
 5475 0030 FB60     	 str r3,[r7,#12]
1762:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
 5476              	 .loc 2 1762 0
 5477 0032 3B68     	 ldr r3,[r7]
 5478 0034 0122     	 mov r2,#1
 5479 0036 9A40     	 lsl r2,r2,r3
 5480 0038 FB68     	 ldr r3,[r7,#12]
 5481 003a 1340     	 and r3,r2
 5482 003c FB60     	 str r3,[r7,#12]
1763:../Libraries/XMCLib/src/xmc_vadc.c **** 
1764:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Check what was the channel event generation criteria */
1765:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (( (uint32_t)XMC_VADC_CHANNEL_EVGEN_INBOUND == chctr) \
 5483              	 .loc 2 1765 0
 5484 003e 3B69     	 ldr r3,[r7,#16]
 5485 0040 012B     	 cmp r3,#1
 5486 0042 02D0     	 beq .L240
1766:../Libraries/XMCLib/src/xmc_vadc.c ****       || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 5487              	 .loc 2 1766 0
 5488 0044 3B69     	 ldr r3,[r7,#16]
 5489 0046 022B     	 cmp r3,#2
 5490 0048 06D1     	 bne .L241
 5491              	.L240:
 5492              	 .loc 2 1766 0 is_stmt 0 discriminator 1
 5493 004a FB68     	 ldr r3,[r7,#12]
 5494 004c 002B     	 cmp r3,#0
 5495 004e 03D0     	 beq .L241
1767:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1768:../Libraries/XMCLib/src/xmc_vadc.c ****     retval = (bool)true;
 5496              	 .loc 2 1768 0 is_stmt 1
 5497 0050 1723     	 mov r3,#23
 5498 0052 FB18     	 add r3,r7,r3
 5499 0054 0122     	 mov r2,#1
 5500 0056 1A70     	 strb r2,[r3]
 5501              	.L241:
1769:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1770:../Libraries/XMCLib/src/xmc_vadc.c **** 
1771:../Libraries/XMCLib/src/xmc_vadc.c ****   return retval;
 5502              	 .loc 2 1771 0
 5503 0058 1723     	 mov r3,#23
 5504 005a FB18     	 add r3,r7,r3
 5505 005c 1B78     	 ldrb r3,[r3]
1772:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5506              	 .loc 2 1772 0
 5507 005e 181C     	 mov r0,r3
 5508 0060 BD46     	 mov sp,r7
 5509 0062 06B0     	 add sp,sp,#24
 5510              	 
 5511 0064 80BD     	 pop {r7,pc}
 5512              	 .cfi_endproc
 5513              	.LFE216:
 5515 0066 C046     	 .section .text.XMC_VADC_GROUP_ChannelSetInputReference,"ax",%progbits
 5516              	 .align 2
 5517              	 .global XMC_VADC_GROUP_ChannelSetInputReference
 5518              	 .code 16
 5519              	 .thumb_func
 5521              	XMC_VADC_GROUP_ChannelSetInputReference:
 5522              	.LFB217:
1773:../Libraries/XMCLib/src/xmc_vadc.c **** 
1774:../Libraries/XMCLib/src/xmc_vadc.c **** /* Set a reference voltage for conversion */
1775:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr,
1776:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1777:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const XMC_VADC_CHANNEL_REF_t ref)
1778:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5523              	 .loc 2 1778 0
 5524              	 .cfi_startproc
 5525 0000 80B5     	 push {r7,lr}
 5526              	.LCFI214:
 5527              	 .cfi_def_cfa_offset 8
 5528              	 .cfi_offset 7,-8
 5529              	 .cfi_offset 14,-4
 5530 0002 86B0     	 sub sp,sp,#24
 5531              	.LCFI215:
 5532              	 .cfi_def_cfa_offset 32
 5533 0004 00AF     	 add r7,sp,#0
 5534              	.LCFI216:
 5535              	 .cfi_def_cfa_register 7
 5536 0006 F860     	 str r0,[r7,#12]
 5537 0008 B960     	 str r1,[r7,#8]
 5538 000a FB1D     	 add r3,r7,#7
 5539 000c 1A70     	 strb r2,[r3]
1779:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1780:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1781:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Channel Number", ((ch_num) < XMC_VADC_N
1782:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Voltage Reference", ((ref)<= XMC_VADC_C
1783:../Libraries/XMCLib/src/xmc_vadc.c **** 
1784:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5540              	 .loc 2 1784 0
 5541 000e FB68     	 ldr r3,[r7,#12]
 5542 0010 BA68     	 ldr r2,[r7,#8]
 5543 0012 8032     	 add r2,r2,#128
 5544 0014 9200     	 lsl r2,r2,#2
 5545 0016 D358     	 ldr r3,[r2,r3]
 5546 0018 7B61     	 str r3,[r7,#20]
1785:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 5547              	 .loc 2 1785 0
 5548 001a 7B69     	 ldr r3,[r7,#20]
 5549 001c 084A     	 ldr r2,.L244
 5550 001e 1340     	 and r3,r2
 5551 0020 7B61     	 str r3,[r7,#20]
1786:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)ref <<  VADC_G_CHCTR_REFSEL_Pos);
 5552              	 .loc 2 1786 0
 5553 0022 FB1D     	 add r3,r7,#7
 5554 0024 1B78     	 ldrb r3,[r3]
 5555 0026 DB02     	 lsl r3,r3,#11
 5556 0028 7A69     	 ldr r2,[r7,#20]
 5557 002a 1343     	 orr r3,r2
 5558 002c 7B61     	 str r3,[r7,#20]
1787:../Libraries/XMCLib/src/xmc_vadc.c **** 
1788:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5559              	 .loc 2 1788 0
 5560 002e FB68     	 ldr r3,[r7,#12]
 5561 0030 BA68     	 ldr r2,[r7,#8]
 5562 0032 8032     	 add r2,r2,#128
 5563 0034 9200     	 lsl r2,r2,#2
 5564 0036 7969     	 ldr r1,[r7,#20]
 5565 0038 D150     	 str r1,[r2,r3]
1789:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5566              	 .loc 2 1789 0
 5567 003a BD46     	 mov sp,r7
 5568 003c 06B0     	 add sp,sp,#24
 5569              	 
 5570 003e 80BD     	 pop {r7,pc}
 5571              	.L245:
 5572              	 .align 2
 5573              	.L244:
 5574 0040 FFF7FFFF 	 .word -2049
 5575              	 .cfi_endproc
 5576              	.LFE217:
 5578              	 .section .text.XMC_VADC_GROUP_ChannelSetResultRegister,"ax",%progbits
 5579              	 .align 2
 5580              	 .global XMC_VADC_GROUP_ChannelSetResultRegister
 5581              	 .code 16
 5582              	 .thumb_func
 5584              	XMC_VADC_GROUP_ChannelSetResultRegister:
 5585              	.LFB218:
1790:../Libraries/XMCLib/src/xmc_vadc.c **** 
1791:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 16 registers for storing the channel result */
1792:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
1793:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1794:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t result_reg_num)
1795:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5586              	 .loc 2 1795 0
 5587              	 .cfi_startproc
 5588 0000 80B5     	 push {r7,lr}
 5589              	.LCFI217:
 5590              	 .cfi_def_cfa_offset 8
 5591              	 .cfi_offset 7,-8
 5592              	 .cfi_offset 14,-4
 5593 0002 86B0     	 sub sp,sp,#24
 5594              	.LCFI218:
 5595              	 .cfi_def_cfa_offset 32
 5596 0004 00AF     	 add r7,sp,#0
 5597              	.LCFI219:
 5598              	 .cfi_def_cfa_register 7
 5599 0006 F860     	 str r0,[r7,#12]
 5600 0008 B960     	 str r1,[r7,#8]
 5601 000a 7A60     	 str r2,[r7,#4]
1796:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1797:../Libraries/XMCLib/src/xmc_vadc.c **** 
1798:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1799:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Channel Number",
1800:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1801:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Result Register",
1802:../Libraries/XMCLib/src/xmc_vadc.c ****              ((result_reg_num) < XMC_VADC_NUM_RESULT_REGISTERS))
1803:../Libraries/XMCLib/src/xmc_vadc.c **** 
1804:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5602              	 .loc 2 1804 0
 5603 000c FB68     	 ldr r3,[r7,#12]
 5604 000e BA68     	 ldr r2,[r7,#8]
 5605 0010 8032     	 add r2,r2,#128
 5606 0012 9200     	 lsl r2,r2,#2
 5607 0014 D358     	 ldr r3,[r2,r3]
 5608 0016 7B61     	 str r3,[r7,#20]
1805:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_RESREG_Msk);
 5609              	 .loc 2 1805 0
 5610 0018 7B69     	 ldr r3,[r7,#20]
 5611 001a 084A     	 ldr r2,.L247
 5612 001c 1340     	 and r3,r2
 5613 001e 7B61     	 str r3,[r7,#20]
1806:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)(result_reg_num <<  VADC_G_CHCTR_RESREG_Pos);
 5614              	 .loc 2 1806 0
 5615 0020 7B68     	 ldr r3,[r7,#4]
 5616 0022 1B04     	 lsl r3,r3,#16
 5617 0024 7A69     	 ldr r2,[r7,#20]
 5618 0026 1343     	 orr r3,r2
 5619 0028 7B61     	 str r3,[r7,#20]
1807:../Libraries/XMCLib/src/xmc_vadc.c **** 
1808:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5620              	 .loc 2 1808 0
 5621 002a FB68     	 ldr r3,[r7,#12]
 5622 002c BA68     	 ldr r2,[r7,#8]
 5623 002e 8032     	 add r2,r2,#128
 5624 0030 9200     	 lsl r2,r2,#2
 5625 0032 7969     	 ldr r1,[r7,#20]
 5626 0034 D150     	 str r1,[r2,r3]
1809:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5627              	 .loc 2 1809 0
 5628 0036 BD46     	 mov sp,r7
 5629 0038 06B0     	 add sp,sp,#24
 5630              	 
 5631 003a 80BD     	 pop {r7,pc}
 5632              	.L248:
 5633              	 .align 2
 5634              	.L247:
 5635 003c FFFFF0FF 	 .word -983041
 5636              	 .cfi_endproc
 5637              	.LFE218:
 5639              	 .section .text.XMC_VADC_GROUP_ChannelSetIclass,"ax",%progbits
 5640              	 .align 2
 5641              	 .global XMC_VADC_GROUP_ChannelSetIclass
 5642              	 .code 16
 5643              	 .thumb_func
 5645              	XMC_VADC_GROUP_ChannelSetIclass:
 5646              	.LFB219:
1810:../Libraries/XMCLib/src/xmc_vadc.c **** 
1811:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 4 class conversion */
1812:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
1813:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const uint32_t ch_num,
1814:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class)
1815:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5647              	 .loc 2 1815 0
 5648              	 .cfi_startproc
 5649 0000 80B5     	 push {r7,lr}
 5650              	.LCFI220:
 5651              	 .cfi_def_cfa_offset 8
 5652              	 .cfi_offset 7,-8
 5653              	 .cfi_offset 14,-4
 5654 0002 86B0     	 sub sp,sp,#24
 5655              	.LCFI221:
 5656              	 .cfi_def_cfa_offset 32
 5657 0004 00AF     	 add r7,sp,#0
 5658              	.LCFI222:
 5659              	 .cfi_def_cfa_register 7
 5660 0006 F860     	 str r0,[r7,#12]
 5661 0008 B960     	 str r1,[r7,#8]
 5662 000a FB1D     	 add r3,r7,#7
 5663 000c 1A70     	 strb r2,[r3]
1816:../Libraries/XMCLib/src/xmc_vadc.c **** 
1817:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1818:../Libraries/XMCLib/src/xmc_vadc.c **** 
1819:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1820:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Channel Number",
1821:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1822:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong input class ",
1823:../Libraries/XMCLib/src/xmc_vadc.c ****              (XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1 >= conversion_class))
1824:../Libraries/XMCLib/src/xmc_vadc.c **** 
1825:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 5664              	 .loc 2 1825 0
 5665 000e FB68     	 ldr r3,[r7,#12]
 5666 0010 BA68     	 ldr r2,[r7,#8]
 5667 0012 8032     	 add r2,r2,#128
 5668 0014 9200     	 lsl r2,r2,#2
 5669 0016 D358     	 ldr r3,[r2,r3]
 5670 0018 7B61     	 str r3,[r7,#20]
1826:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_ICLSEL_Msk);
 5671              	 .loc 2 1826 0
 5672 001a 7B69     	 ldr r3,[r7,#20]
 5673 001c 0322     	 mov r2,#3
 5674 001e 9343     	 bic r3,r2
 5675 0020 7B61     	 str r3,[r7,#20]
1827:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
 5676              	 .loc 2 1827 0
 5677 0022 FB1D     	 add r3,r7,#7
 5678 0024 1B78     	 ldrb r3,[r3]
 5679 0026 7A69     	 ldr r2,[r7,#20]
 5680 0028 1343     	 orr r3,r2
 5681 002a 7B61     	 str r3,[r7,#20]
1828:../Libraries/XMCLib/src/xmc_vadc.c **** 
1829:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5682              	 .loc 2 1829 0
 5683 002c FB68     	 ldr r3,[r7,#12]
 5684 002e BA68     	 ldr r2,[r7,#8]
 5685 0030 8032     	 add r2,r2,#128
 5686 0032 9200     	 lsl r2,r2,#2
 5687 0034 7969     	 ldr r1,[r7,#20]
 5688 0036 D150     	 str r1,[r2,r3]
1830:../Libraries/XMCLib/src/xmc_vadc.c **** 
1831:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5689              	 .loc 2 1831 0
 5690 0038 BD46     	 mov sp,r7
 5691 003a 06B0     	 add sp,sp,#24
 5692              	 
 5693 003c 80BD     	 pop {r7,pc}
 5694              	 .cfi_endproc
 5695              	.LFE219:
 5697 003e C046     	 .section .text.XMC_VADC_GROUP_ChannelGetResultRegister,"ax",%progbits
 5698              	 .align 2
 5699              	 .global XMC_VADC_GROUP_ChannelGetResultRegister
 5700              	 .code 16
 5701              	 .thumb_func
 5703              	XMC_VADC_GROUP_ChannelGetResultRegister:
 5704              	.LFB220:
1832:../Libraries/XMCLib/src/xmc_vadc.c **** 
1833:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result register bound with specified channel */
1834:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
1835:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5705              	 .loc 2 1835 0
 5706              	 .cfi_startproc
 5707 0000 80B5     	 push {r7,lr}
 5708              	.LCFI223:
 5709              	 .cfi_def_cfa_offset 8
 5710              	 .cfi_offset 7,-8
 5711              	 .cfi_offset 14,-4
 5712 0002 84B0     	 sub sp,sp,#16
 5713              	.LCFI224:
 5714              	 .cfi_def_cfa_offset 24
 5715 0004 00AF     	 add r7,sp,#0
 5716              	.LCFI225:
 5717              	 .cfi_def_cfa_register 7
 5718 0006 7860     	 str r0,[r7,#4]
 5719 0008 3960     	 str r1,[r7]
1836:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t resreg;
1837:../Libraries/XMCLib/src/xmc_vadc.c **** 
1838:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1839:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Channel Number",
1840:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1841:../Libraries/XMCLib/src/xmc_vadc.c **** 
1842:../Libraries/XMCLib/src/xmc_vadc.c ****   resreg = (uint8_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESREG_Msk) >> VADC_G_CHCTR
 5720              	 .loc 2 1842 0
 5721 000a 7B68     	 ldr r3,[r7,#4]
 5722 000c 3A68     	 ldr r2,[r7]
 5723 000e 8032     	 add r2,r2,#128
 5724 0010 9200     	 lsl r2,r2,#2
 5725 0012 D258     	 ldr r2,[r2,r3]
 5726 0014 F023     	 mov r3,#240
 5727 0016 1B03     	 lsl r3,r3,#12
 5728 0018 1340     	 and r3,r2
 5729 001a 1A0C     	 lsr r2,r3,#16
 5730 001c 0F23     	 mov r3,#15
 5731 001e FB18     	 add r3,r7,r3
 5732 0020 1A70     	 strb r2,[r3]
1843:../Libraries/XMCLib/src/xmc_vadc.c **** 
1844:../Libraries/XMCLib/src/xmc_vadc.c ****   return resreg;
 5733              	 .loc 2 1844 0
 5734 0022 0F23     	 mov r3,#15
 5735 0024 FB18     	 add r3,r7,r3
 5736 0026 1B78     	 ldrb r3,[r3]
1845:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5737              	 .loc 2 1845 0
 5738 0028 181C     	 mov r0,r3
 5739 002a BD46     	 mov sp,r7
 5740 002c 04B0     	 add sp,sp,#16
 5741              	 
 5742 002e 80BD     	 pop {r7,pc}
 5743              	 .cfi_endproc
 5744              	.LFE220:
 5746              	 .section .text.XMC_VADC_GROUP_ChannelTriggerEvent,"ax",%progbits
 5747              	 .align 2
 5748              	 .global XMC_VADC_GROUP_ChannelTriggerEvent
 5749              	 .code 16
 5750              	 .thumb_func
 5752              	XMC_VADC_GROUP_ChannelTriggerEvent:
 5753              	.LFB221:
1846:../Libraries/XMCLib/src/xmc_vadc.c **** 
1847:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to manually assert channel event */
1848:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
1849:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5754              	 .loc 2 1849 0
 5755              	 .cfi_startproc
 5756 0000 80B5     	 push {r7,lr}
 5757              	.LCFI226:
 5758              	 .cfi_def_cfa_offset 8
 5759              	 .cfi_offset 7,-8
 5760              	 .cfi_offset 14,-4
 5761 0002 84B0     	 sub sp,sp,#16
 5762              	.LCFI227:
 5763              	 .cfi_def_cfa_offset 24
 5764 0004 00AF     	 add r7,sp,#0
 5765              	.LCFI228:
 5766              	 .cfi_def_cfa_register 7
 5767 0006 7860     	 str r0,[r7,#4]
 5768 0008 3960     	 str r1,[r7]
1850:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ceflag;
1851:../Libraries/XMCLib/src/xmc_vadc.c **** 
1852:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1853:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CH
1854:../Libraries/XMCLib/src/xmc_vadc.c **** 
1855:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag  = group_ptr->CEFLAG;
 5769              	 .loc 2 1855 0
 5770 000a 7A68     	 ldr r2,[r7,#4]
 5771 000c C023     	 mov r3,#192
 5772 000e 5B00     	 lsl r3,r3,#1
 5773 0010 D358     	 ldr r3,[r2,r3]
 5774 0012 FB60     	 str r3,[r7,#12]
1856:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 5775              	 .loc 2 1856 0
 5776 0014 3B68     	 ldr r3,[r7]
 5777 0016 0122     	 mov r2,#1
 5778 0018 9A40     	 lsl r2,r2,r3
 5779 001a 131C     	 mov r3,r2
 5780 001c FA68     	 ldr r2,[r7,#12]
 5781 001e 1343     	 orr r3,r2
 5782 0020 FB60     	 str r3,[r7,#12]
1857:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEFLAG = ceflag;
 5783              	 .loc 2 1857 0
 5784 0022 7A68     	 ldr r2,[r7,#4]
 5785 0024 C023     	 mov r3,#192
 5786 0026 5B00     	 lsl r3,r3,#1
 5787 0028 F968     	 ldr r1,[r7,#12]
 5788 002a D150     	 str r1,[r2,r3]
1858:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5789              	 .loc 2 1858 0
 5790 002c BD46     	 mov sp,r7
 5791 002e 04B0     	 add sp,sp,#16
 5792              	 
 5793 0030 80BD     	 pop {r7,pc}
 5794              	 .cfi_endproc
 5795              	.LFE221:
 5797 0032 C046     	 .section .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode,"ax",%progbits
 5798              	 .align 2
 5799              	 .global XMC_VADC_GROUP_ChannelSetEventInterruptNode
 5800              	 .code 16
 5801              	 .thumb_func
 5803              	XMC_VADC_GROUP_ChannelSetEventInterruptNode:
 5804              	.LFB222:
1859:../Libraries/XMCLib/src/xmc_vadc.c **** 
1860:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind channel event with a service request (NVIC Node) */
1861:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1862:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1863:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_SR_t sr)
1864:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5805              	 .loc 2 1864 0
 5806              	 .cfi_startproc
 5807 0000 80B5     	 push {r7,lr}
 5808              	.LCFI229:
 5809              	 .cfi_def_cfa_offset 8
 5810              	 .cfi_offset 7,-8
 5811              	 .cfi_offset 14,-4
 5812 0002 86B0     	 sub sp,sp,#24
 5813              	.LCFI230:
 5814              	 .cfi_def_cfa_offset 32
 5815 0004 00AF     	 add r7,sp,#0
 5816              	.LCFI231:
 5817              	 .cfi_def_cfa_register 7
 5818 0006 F860     	 str r0,[r7,#12]
 5819 0008 B960     	 str r1,[r7,#8]
 5820 000a FB1D     	 add r3,r7,#7
 5821 000c 1A70     	 strb r2,[r3]
1865:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1866:../Libraries/XMCLib/src/xmc_vadc.c **** 
1867:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROU
1868:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Channel Number",
1869:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1870:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VAD
1871:../Libraries/XMCLib/src/xmc_vadc.c **** 
1872:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask  = group_ptr->CEVNP0;
 5822              	 .loc 2 1872 0
 5823 000e FA68     	 ldr r2,[r7,#12]
 5824 0010 D023     	 mov r3,#208
 5825 0012 5B00     	 lsl r3,r3,#1
 5826 0014 D358     	 ldr r3,[r2,r3]
 5827 0016 7B61     	 str r3,[r7,#20]
1873:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 5828              	 .loc 2 1873 0
 5829 0018 BB68     	 ldr r3,[r7,#8]
 5830 001a 9B00     	 lsl r3,r3,#2
 5831 001c 1A1C     	 mov r2,r3
 5832 001e 0F23     	 mov r3,#15
 5833 0020 9340     	 lsl r3,r3,r2
 5834 0022 DA43     	 mvn r2,r3
 5835 0024 7B69     	 ldr r3,[r7,#20]
 5836 0026 1340     	 and r3,r2
 5837 0028 7B61     	 str r3,[r7,#20]
1874:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 5838              	 .loc 2 1874 0
 5839 002a FB1D     	 add r3,r7,#7
 5840 002c 1B78     	 ldrb r3,[r3]
 5841 002e BA68     	 ldr r2,[r7,#8]
 5842 0030 9200     	 lsl r2,r2,#2
 5843 0032 9340     	 lsl r3,r3,r2
 5844 0034 7A69     	 ldr r2,[r7,#20]
 5845 0036 1343     	 orr r3,r2
 5846 0038 7B61     	 str r3,[r7,#20]
1875:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEVNP0 = route_mask;
 5847              	 .loc 2 1875 0
 5848 003a FA68     	 ldr r2,[r7,#12]
 5849 003c D023     	 mov r3,#208
 5850 003e 5B00     	 lsl r3,r3,#1
 5851 0040 7969     	 ldr r1,[r7,#20]
 5852 0042 D150     	 str r1,[r2,r3]
1876:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5853              	 .loc 2 1876 0
 5854 0044 BD46     	 mov sp,r7
 5855 0046 06B0     	 add sp,sp,#24
 5856              	 
 5857 0048 80BD     	 pop {r7,pc}
 5858              	 .cfi_endproc
 5859              	.LFE222:
 5861 004a C046     	 .section .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria,"ax",%progbits
 5862              	 .align 2
 5863              	 .global XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
 5864              	 .code 16
 5865              	 .thumb_func
 5867              	XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:
 5868              	.LFB223:
1877:../Libraries/XMCLib/src/xmc_vadc.c **** 
1878:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure conditions for generation of channel event */
1879:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria( XMC_VADC_GROUP_t *const group_ptr,
1880:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const uint32_t ch_num,
1881:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const XMC_VADC_CHANNEL_EVGEN_t criteria)
1882:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5869              	 .loc 2 1882 0
 5870              	 .cfi_startproc
 5871 0000 80B5     	 push {r7,lr}
 5872              	.LCFI232:
 5873              	 .cfi_def_cfa_offset 8
 5874              	 .cfi_offset 7,-8
 5875              	 .cfi_offset 14,-4
 5876 0002 86B0     	 sub sp,sp,#24
 5877              	.LCFI233:
 5878              	 .cfi_def_cfa_offset 32
 5879 0004 00AF     	 add r7,sp,#0
 5880              	.LCFI234:
 5881              	 .cfi_def_cfa_register 7
 5882 0006 F860     	 str r0,[r7,#12]
 5883 0008 B960     	 str r1,[r7,#8]
 5884 000a FB1D     	 add r3,r7,#7
 5885 000c 1A70     	 strb r2,[r3]
1883:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1884:../Libraries/XMCLib/src/xmc_vadc.c **** 
1885:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Group Pointer", XMC_VADC_CHECK_GR
1886:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Channel Number",
1887:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1888:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Event Generation Criteria",
1889:../Libraries/XMCLib/src/xmc_vadc.c ****              ((criteria) <= XMC_VADC_CHANNEL_EVGEN_ALWAYS))
1890:../Libraries/XMCLib/src/xmc_vadc.c **** 
1891:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 5886              	 .loc 2 1891 0
 5887 000e FB68     	 ldr r3,[r7,#12]
 5888 0010 BA68     	 ldr r2,[r7,#8]
 5889 0012 8032     	 add r2,r2,#128
 5890 0014 9200     	 lsl r2,r2,#2
 5891 0016 D358     	 ldr r3,[r2,r3]
 5892 0018 7B61     	 str r3,[r7,#20]
1892:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_CHEVMODE_Msk);
 5893              	 .loc 2 1892 0
 5894 001a 7B69     	 ldr r3,[r7,#20]
 5895 001c 084A     	 ldr r2,.L255
 5896 001e 1340     	 and r3,r2
 5897 0020 7B61     	 str r3,[r7,#20]
1893:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)criteria << VADC_G_CHCTR_CHEVMODE_Pos);
 5898              	 .loc 2 1893 0
 5899 0022 FB1D     	 add r3,r7,#7
 5900 0024 1B78     	 ldrb r3,[r3]
 5901 0026 1B02     	 lsl r3,r3,#8
 5902 0028 7A69     	 ldr r2,[r7,#20]
 5903 002a 1343     	 orr r3,r2
 5904 002c 7B61     	 str r3,[r7,#20]
1894:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 5905              	 .loc 2 1894 0
 5906 002e FB68     	 ldr r3,[r7,#12]
 5907 0030 BA68     	 ldr r2,[r7,#8]
 5908 0032 8032     	 add r2,r2,#128
 5909 0034 9200     	 lsl r2,r2,#2
 5910 0036 7969     	 ldr r1,[r7,#20]
 5911 0038 D150     	 str r1,[r2,r3]
1895:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5912              	 .loc 2 1895 0
 5913 003a BD46     	 mov sp,r7
 5914 003c 06B0     	 add sp,sp,#24
 5915              	 
 5916 003e 80BD     	 pop {r7,pc}
 5917              	.L256:
 5918              	 .align 2
 5919              	.L255:
 5920 0040 FFFCFFFF 	 .word -769
 5921              	 .cfi_endproc
 5922              	.LFE223:
 5924              	 .section .text.XMC_VADC_GROUP_ChannelSetBoundarySelection,"ax",%progbits
 5925              	 .align 2
 5926              	 .global XMC_VADC_GROUP_ChannelSetBoundarySelection
 5927              	 .code 16
 5928              	 .thumb_func
 5930              	XMC_VADC_GROUP_ChannelSetBoundarySelection:
 5931              	.LFB224:
1896:../Libraries/XMCLib/src/xmc_vadc.c **** 
1897:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure the boundary selection */
1898:../Libraries/XMCLib/src/xmc_vadc.c **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
1899:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1900:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
1901:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_CHANNEL_BOUNDARY_t selection)
1902:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5932              	 .loc 2 1902 0
 5933              	 .cfi_startproc
 5934 0000 80B5     	 push {r7,lr}
 5935              	.LCFI235:
 5936              	 .cfi_def_cfa_offset 8
 5937              	 .cfi_offset 7,-8
 5938              	 .cfi_offset 14,-4
 5939 0002 84B0     	 sub sp,sp,#16
 5940              	.LCFI236:
 5941              	 .cfi_def_cfa_offset 24
 5942 0004 00AF     	 add r7,sp,#0
 5943              	.LCFI237:
 5944              	 .cfi_def_cfa_register 7
 5945 0006 F860     	 str r0,[r7,#12]
 5946 0008 B960     	 str r1,[r7,#8]
 5947 000a 191C     	 mov r1,r3
 5948 000c FB1D     	 add r3,r7,#7
 5949 000e 1A70     	 strb r2,[r3]
 5950 0010 BB1D     	 add r3,r7,#6
 5951 0012 0A1C     	 add r2,r1,#0
 5952 0014 1A70     	 strb r2,[r3]
1903:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
1904:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Channel Number",
1905:../Libraries/XMCLib/src/xmc_vadc.c ****               ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1906:../Libraries/XMCLib/src/xmc_vadc.c **** 
1907:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_BNDSELL_Msk << boundary_sel);
 5953              	 .loc 2 1907 0
 5954 0016 FB68     	 ldr r3,[r7,#12]
 5955 0018 BA68     	 ldr r2,[r7,#8]
 5956 001a 8032     	 add r2,r2,#128
 5957 001c 9200     	 lsl r2,r2,#2
 5958 001e D358     	 ldr r3,[r2,r3]
 5959 0020 FA1D     	 add r2,r7,#7
 5960 0022 1278     	 ldrb r2,[r2]
 5961 0024 3021     	 mov r1,#48
 5962 0026 9140     	 lsl r1,r1,r2
 5963 0028 0A1C     	 mov r2,r1
 5964 002a D243     	 mvn r2,r2
 5965 002c 1A40     	 and r2,r3
 5966 002e 111C     	 mov r1,r2
 5967 0030 FB68     	 ldr r3,[r7,#12]
 5968 0032 BA68     	 ldr r2,[r7,#8]
 5969 0034 8032     	 add r2,r2,#128
 5970 0036 9200     	 lsl r2,r2,#2
 5971 0038 D150     	 str r1,[r2,r3]
1908:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 5972              	 .loc 2 1908 0
 5973 003a FB68     	 ldr r3,[r7,#12]
 5974 003c BA68     	 ldr r2,[r7,#8]
 5975 003e 8032     	 add r2,r2,#128
 5976 0040 9200     	 lsl r2,r2,#2
 5977 0042 D358     	 ldr r3,[r2,r3]
 5978 0044 BA1D     	 add r2,r7,#6
 5979 0046 1278     	 ldrb r2,[r2]
 5980 0048 F91D     	 add r1,r7,#7
 5981 004a 0978     	 ldrb r1,[r1]
 5982 004c 0431     	 add r1,r1,#4
 5983 004e 8A40     	 lsl r2,r2,r1
 5984 0050 1343     	 orr r3,r2
 5985 0052 191C     	 mov r1,r3
 5986 0054 FB68     	 ldr r3,[r7,#12]
 5987 0056 BA68     	 ldr r2,[r7,#8]
 5988 0058 8032     	 add r2,r2,#128
 5989 005a 9200     	 lsl r2,r2,#2
 5990 005c D150     	 str r1,[r2,r3]
1909:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5991              	 .loc 2 1909 0
 5992 005e BD46     	 mov sp,r7
 5993 0060 04B0     	 add sp,sp,#16
 5994              	 
 5995 0062 80BD     	 pop {r7,pc}
 5996              	 .cfi_endproc
 5997              	.LFE224:
 5999              	 .section .text.XMC_VADC_GROUP_AddResultToFifo,"ax",%progbits
 6000              	 .align 2
 6001              	 .global XMC_VADC_GROUP_AddResultToFifo
 6002              	 .code 16
 6003              	 .thumb_func
 6005              	XMC_VADC_GROUP_AddResultToFifo:
 6006              	.LFB225:
1910:../Libraries/XMCLib/src/xmc_vadc.c **** 
1911:../Libraries/XMCLib/src/xmc_vadc.c **** /* Make the specified result register part of Result FIFO */ 
1912:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
1913:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6007              	 .loc 2 1913 0
 6008              	 .cfi_startproc
 6009 0000 80B5     	 push {r7,lr}
 6010              	.LCFI238:
 6011              	 .cfi_def_cfa_offset 8
 6012              	 .cfi_offset 7,-8
 6013              	 .cfi_offset 14,-4
 6014 0002 84B0     	 sub sp,sp,#16
 6015              	.LCFI239:
 6016              	 .cfi_def_cfa_offset 24
 6017 0004 00AF     	 add r7,sp,#0
 6018              	.LCFI240:
 6019              	 .cfi_def_cfa_register 7
 6020 0006 7860     	 str r0,[r7,#4]
 6021 0008 3960     	 str r1,[r7]
1914:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t fen;
1915:../Libraries/XMCLib/src/xmc_vadc.c **** 
1916:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1917:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESU
1918:../Libraries/XMCLib/src/xmc_vadc.c **** 
1919:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract and clear the FIFO enable field */
1920:../Libraries/XMCLib/src/xmc_vadc.c ****   fen = group_ptr->RCR[res_reg];
 6022              	 .loc 2 1920 0
 6023 000a 7B68     	 ldr r3,[r7,#4]
 6024 000c 3A68     	 ldr r2,[r7]
 6025 000e A032     	 add r2,r2,#160
 6026 0010 9200     	 lsl r2,r2,#2
 6027 0012 D358     	 ldr r3,[r2,r3]
 6028 0014 FB60     	 str r3,[r7,#12]
1921:../Libraries/XMCLib/src/xmc_vadc.c ****   fen &= ~((uint32_t)VADC_G_RCR_FEN_Msk);
 6029              	 .loc 2 1921 0
 6030 0016 FB68     	 ldr r3,[r7,#12]
 6031 0018 084A     	 ldr r2,.L259
 6032 001a 1340     	 and r3,r2
 6033 001c FB60     	 str r3,[r7,#12]
1922:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set this register up as a FIFO member */
1923:../Libraries/XMCLib/src/xmc_vadc.c ****   fen |= (uint32_t)((uint32_t)1 << VADC_G_RCR_FEN_Pos);
 6034              	 .loc 2 1923 0
 6035 001e FB68     	 ldr r3,[r7,#12]
 6036 0020 8022     	 mov r2,#128
 6037 0022 9204     	 lsl r2,r2,#18
 6038 0024 1343     	 orr r3,r2
 6039 0026 FB60     	 str r3,[r7,#12]
1924:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RCR[res_reg] = fen;
 6040              	 .loc 2 1924 0
 6041 0028 7B68     	 ldr r3,[r7,#4]
 6042 002a 3A68     	 ldr r2,[r7]
 6043 002c A032     	 add r2,r2,#160
 6044 002e 9200     	 lsl r2,r2,#2
 6045 0030 F968     	 ldr r1,[r7,#12]
 6046 0032 D150     	 str r1,[r2,r3]
1925:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6047              	 .loc 2 1925 0
 6048 0034 BD46     	 mov sp,r7
 6049 0036 04B0     	 add sp,sp,#16
 6050              	 
 6051 0038 80BD     	 pop {r7,pc}
 6052              	.L260:
 6053 003a C046     	 .align 2
 6054              	.L259:
 6055 003c FFFFFFF9 	 .word -100663297
 6056              	 .cfi_endproc
 6057              	.LFE225:
 6059              	 .section .text.XMC_VADC_GROUP_SetResultFastCompareValue,"ax",%progbits
 6060              	 .align 2
 6061              	 .global XMC_VADC_GROUP_SetResultFastCompareValue
 6062              	 .code 16
 6063              	 .thumb_func
 6065              	XMC_VADC_GROUP_SetResultFastCompareValue:
 6066              	.LFB226:
1926:../Libraries/XMCLib/src/xmc_vadc.c **** 
1927:../Libraries/XMCLib/src/xmc_vadc.c **** 
1928:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1929:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultFastCompareValue(XMC_VADC_GROUP_t *const group_ptr,
1930:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint32_t res_reg,
1931:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const XMC_VADC_RESULT_SIZE_t compare_val)
1932:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6067              	 .loc 2 1932 0
 6068              	 .cfi_startproc
 6069 0000 80B5     	 push {r7,lr}
 6070              	.LCFI241:
 6071              	 .cfi_def_cfa_offset 8
 6072              	 .cfi_offset 7,-8
 6073              	 .cfi_offset 14,-4
 6074 0002 86B0     	 sub sp,sp,#24
 6075              	.LCFI242:
 6076              	 .cfi_def_cfa_offset 32
 6077 0004 00AF     	 add r7,sp,#0
 6078              	.LCFI243:
 6079              	 .cfi_def_cfa_register 7
 6080 0006 F860     	 str r0,[r7,#12]
 6081 0008 B960     	 str r1,[r7,#8]
 6082 000a BB1D     	 add r3,r7,#6
 6083 000c 1A80     	 strh r2,[r3]
1933:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res = group_ptr->RES[res_reg];
 6084              	 .loc 2 1933 0
 6085 000e FB68     	 ldr r3,[r7,#12]
 6086 0010 BA68     	 ldr r2,[r7,#8]
 6087 0012 C032     	 add r2,r2,#192
 6088 0014 9200     	 lsl r2,r2,#2
 6089 0016 D358     	 ldr r3,[r2,r3]
 6090 0018 7B61     	 str r3,[r7,#20]
1934:../Libraries/XMCLib/src/xmc_vadc.c **** 
1935:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1936:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Result Register",
1937:../Libraries/XMCLib/src/xmc_vadc.c ****             ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
1938:../Libraries/XMCLib/src/xmc_vadc.c **** 
1939:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 6091              	 .loc 2 1939 0
 6092 001a 7B69     	 ldr r3,[r7,#20]
 6093 001c 1B0C     	 lsr r3,r3,#16
 6094 001e 1B04     	 lsl r3,r3,#16
 6095 0020 7B61     	 str r3,[r7,#20]
1940:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 6096              	 .loc 2 1940 0
 6097 0022 BB1D     	 add r3,r7,#6
 6098 0024 1B88     	 ldrh r3,[r3]
 6099 0026 9B00     	 lsl r3,r3,#2
 6100 0028 7A69     	 ldr r2,[r7,#20]
 6101 002a 1343     	 orr r3,r2
 6102 002c 7B61     	 str r3,[r7,#20]
1941:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[res_reg] = res;
 6103              	 .loc 2 1941 0
 6104 002e FB68     	 ldr r3,[r7,#12]
 6105 0030 BA68     	 ldr r2,[r7,#8]
 6106 0032 C032     	 add r2,r2,#192
 6107 0034 9200     	 lsl r2,r2,#2
 6108 0036 7969     	 ldr r1,[r7,#20]
 6109 0038 D150     	 str r1,[r2,r3]
1942:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6110              	 .loc 2 1942 0
 6111 003a BD46     	 mov sp,r7
 6112 003c 06B0     	 add sp,sp,#24
 6113              	 
 6114 003e 80BD     	 pop {r7,pc}
 6115              	 .cfi_endproc
 6116              	.LFE226:
 6118              	 .section .text.XMC_VADC_GROUP_GetFastCompareResult,"ax",%progbits
 6119              	 .align 2
 6120              	 .global XMC_VADC_GROUP_GetFastCompareResult
 6121              	 .code 16
 6122              	 .thumb_func
 6124              	XMC_VADC_GROUP_GetFastCompareResult:
 6125              	.LFB227:
1943:../Libraries/XMCLib/src/xmc_vadc.c **** 
1944:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of fast mode comparison */
1945:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GROUP_GetFastCompareResult(XMC_VADC_GROUP_t *const group_ptr, cons
1946:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6126              	 .loc 2 1946 0
 6127              	 .cfi_startproc
 6128 0000 80B5     	 push {r7,lr}
 6129              	.LCFI244:
 6130              	 .cfi_def_cfa_offset 8
 6131              	 .cfi_offset 7,-8
 6132              	 .cfi_offset 14,-4
 6133 0002 84B0     	 sub sp,sp,#16
 6134              	.LCFI245:
 6135              	 .cfi_def_cfa_offset 24
 6136 0004 00AF     	 add r7,sp,#0
 6137              	.LCFI246:
 6138              	 .cfi_def_cfa_register 7
 6139 0006 7860     	 str r0,[r7,#4]
 6140 0008 3960     	 str r1,[r7]
1947:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
1948:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1949:../Libraries/XMCLib/src/xmc_vadc.c **** 
1950:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
1951:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM
1952:../Libraries/XMCLib/src/xmc_vadc.c **** 
1953:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[res_reg];
 6141              	 .loc 2 1953 0
 6142 000a 7B68     	 ldr r3,[r7,#4]
 6143 000c 3A68     	 ldr r2,[r7]
 6144 000e C032     	 add r2,r2,#192
 6145 0010 9200     	 lsl r2,r2,#2
 6146 0012 D358     	 ldr r3,[r2,r3]
 6147 0014 BB60     	 str r3,[r7,#8]
1954:../Libraries/XMCLib/src/xmc_vadc.c **** 
1955:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_G_RES_VF_Msk)
 6148              	 .loc 2 1955 0
 6149 0016 BB68     	 ldr r3,[r7,#8]
 6150 0018 002B     	 cmp r3,#0
 6151 001a 08DA     	 bge .L263
1956:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1957:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_G_RES_FCR_Pos) & (uint32_t)
 6152              	 .loc 2 1957 0
 6153 001c BB68     	 ldr r3,[r7,#8]
 6154 001e 9B0F     	 lsr r3,r3,#30
 6155 0020 DAB2     	 uxtb r2,r3
 6156 0022 0F23     	 mov r3,#15
 6157 0024 FB18     	 add r3,r7,r3
 6158 0026 0121     	 mov r1,#1
 6159 0028 0A40     	 and r2,r1
 6160 002a 1A70     	 strb r2,[r3]
 6161 002c 03E0     	 b .L264
 6162              	.L263:
1958:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1959:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1960:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1961:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 6163              	 .loc 2 1961 0
 6164 002e 0F23     	 mov r3,#15
 6165 0030 FB18     	 add r3,r7,r3
 6166 0032 0222     	 mov r2,#2
 6167 0034 1A70     	 strb r2,[r3]
 6168              	.L264:
1962:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1963:../Libraries/XMCLib/src/xmc_vadc.c **** 
1964:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 6169              	 .loc 2 1964 0
 6170 0036 0F23     	 mov r3,#15
 6171 0038 FB18     	 add r3,r7,r3
 6172 003a 1B78     	 ldrb r3,[r3]
1965:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6173              	 .loc 2 1965 0
 6174 003c 181C     	 mov r0,r3
 6175 003e BD46     	 mov sp,r7
 6176 0040 04B0     	 add sp,sp,#16
 6177              	 
 6178 0042 80BD     	 pop {r7,pc}
 6179              	 .cfi_endproc
 6180              	.LFE227:
 6182              	 .section .text.XMC_VADC_GROUP_SetResultSubtractionValue,"ax",%progbits
 6183              	 .align 2
 6184              	 .global XMC_VADC_GROUP_SetResultSubtractionValue
 6185              	 .code 16
 6186              	 .thumb_func
 6188              	XMC_VADC_GROUP_SetResultSubtractionValue:
 6189              	.LFB228:
1966:../Libraries/XMCLib/src/xmc_vadc.c **** 
1967:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1968:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultSubtractionValue(XMC_VADC_GROUP_t *const group_ptr,
1969:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint16_t subtraction_val)
1970:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6190              	 .loc 2 1970 0
 6191              	 .cfi_startproc
 6192 0000 80B5     	 push {r7,lr}
 6193              	.LCFI247:
 6194              	 .cfi_def_cfa_offset 8
 6195              	 .cfi_offset 7,-8
 6196              	 .cfi_offset 14,-4
 6197 0002 84B0     	 sub sp,sp,#16
 6198              	.LCFI248:
 6199              	 .cfi_def_cfa_offset 24
 6200 0004 00AF     	 add r7,sp,#0
 6201              	.LCFI249:
 6202              	 .cfi_def_cfa_register 7
 6203 0006 7860     	 str r0,[r7,#4]
 6204 0008 0A1C     	 mov r2,r1
 6205 000a BB1C     	 add r3,r7,#2
 6206 000c 1A80     	 strh r2,[r3]
1971:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1972:../Libraries/XMCLib/src/xmc_vadc.c **** 
1973:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultSubtractionValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1974:../Libraries/XMCLib/src/xmc_vadc.c **** 
1975:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[0];
 6207              	 .loc 2 1975 0
 6208 000e 7A68     	 ldr r2,[r7,#4]
 6209 0010 C023     	 mov r3,#192
 6210 0012 9B00     	 lsl r3,r3,#2
 6211 0014 D358     	 ldr r3,[r2,r3]
 6212 0016 FB60     	 str r3,[r7,#12]
1976:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 6213              	 .loc 2 1976 0
 6214 0018 FB68     	 ldr r3,[r7,#12]
 6215 001a 1B0C     	 lsr r3,r3,#16
 6216 001c 1B04     	 lsl r3,r3,#16
 6217 001e FB60     	 str r3,[r7,#12]
1977:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)subtraction_val;
 6218              	 .loc 2 1977 0
 6219 0020 BB1C     	 add r3,r7,#2
 6220 0022 1B88     	 ldrh r3,[r3]
 6221 0024 FA68     	 ldr r2,[r7,#12]
 6222 0026 1343     	 orr r3,r2
 6223 0028 FB60     	 str r3,[r7,#12]
1978:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[0] = res;
 6224              	 .loc 2 1978 0
 6225 002a 7A68     	 ldr r2,[r7,#4]
 6226 002c C023     	 mov r3,#192
 6227 002e 9B00     	 lsl r3,r3,#2
 6228 0030 F968     	 ldr r1,[r7,#12]
 6229 0032 D150     	 str r1,[r2,r3]
1979:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6230              	 .loc 2 1979 0
 6231 0034 BD46     	 mov sp,r7
 6232 0036 04B0     	 add sp,sp,#16
 6233              	 
 6234 0038 80BD     	 pop {r7,pc}
 6235              	 .cfi_endproc
 6236              	.LFE228:
 6238 003a C046     	 .section .text.XMC_VADC_GROUP_SetResultInterruptNode,"ax",%progbits
 6239              	 .align 2
 6240              	 .global XMC_VADC_GROUP_SetResultInterruptNode
 6241              	 .code 16
 6242              	 .thumb_func
 6244              	XMC_VADC_GROUP_SetResultInterruptNode:
 6245              	.LFB229:
1980:../Libraries/XMCLib/src/xmc_vadc.c **** 
1981:../Libraries/XMCLib/src/xmc_vadc.c **** 
1982:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for result event of specified unit of result ha
1983:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1984:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint32_t res_reg,
1985:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_SR_t sr)
1986:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6246              	 .loc 2 1986 0
 6247              	 .cfi_startproc
 6248 0000 80B5     	 push {r7,lr}
 6249              	.LCFI250:
 6250              	 .cfi_def_cfa_offset 8
 6251              	 .cfi_offset 7,-8
 6252              	 .cfi_offset 14,-4
 6253 0002 86B0     	 sub sp,sp,#24
 6254              	.LCFI251:
 6255              	 .cfi_def_cfa_offset 32
 6256 0004 00AF     	 add r7,sp,#0
 6257              	.LCFI252:
 6258              	 .cfi_def_cfa_register 7
 6259 0006 F860     	 str r0,[r7,#12]
 6260 0008 B960     	 str r1,[r7,#8]
 6261 000a FB1D     	 add r3,r7,#7
 6262 000c 1A70     	 strb r2,[r3]
1987:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1988:../Libraries/XMCLib/src/xmc_vadc.c **** 
1989:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1990:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_N
1991:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_S
1992:../Libraries/XMCLib/src/xmc_vadc.c **** 
1993:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res_reg <= 7U)
 6263              	 .loc 2 1993 0
 6264 000e BB68     	 ldr r3,[r7,#8]
 6265 0010 072B     	 cmp r3,#7
 6266 0012 1BD8     	 bhi .L268
1994:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1995:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask  = group_ptr->REVNP0;
 6267              	 .loc 2 1995 0
 6268 0014 FA68     	 ldr r2,[r7,#12]
 6269 0016 D823     	 mov r3,#216
 6270 0018 5B00     	 lsl r3,r3,#1
 6271 001a D358     	 ldr r3,[r2,r3]
 6272 001c 7B61     	 str r3,[r7,#20]
1996:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 6273              	 .loc 2 1996 0
 6274 001e BB68     	 ldr r3,[r7,#8]
 6275 0020 9B00     	 lsl r3,r3,#2
 6276 0022 1A1C     	 mov r2,r3
 6277 0024 0F23     	 mov r3,#15
 6278 0026 9340     	 lsl r3,r3,r2
 6279 0028 DA43     	 mvn r2,r3
 6280 002a 7B69     	 ldr r3,[r7,#20]
 6281 002c 1340     	 and r3,r2
 6282 002e 7B61     	 str r3,[r7,#20]
1997:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 6283              	 .loc 2 1997 0
 6284 0030 FB1D     	 add r3,r7,#7
 6285 0032 1B78     	 ldrb r3,[r3]
 6286 0034 BA68     	 ldr r2,[r7,#8]
 6287 0036 9200     	 lsl r2,r2,#2
 6288 0038 9340     	 lsl r3,r3,r2
 6289 003a 7A69     	 ldr r2,[r7,#20]
 6290 003c 1343     	 orr r3,r2
 6291 003e 7B61     	 str r3,[r7,#20]
1998:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP0 = route_mask;
 6292              	 .loc 2 1998 0
 6293 0040 FA68     	 ldr r2,[r7,#12]
 6294 0042 D823     	 mov r3,#216
 6295 0044 5B00     	 lsl r3,r3,#1
 6296 0046 7969     	 ldr r1,[r7,#20]
 6297 0048 D150     	 str r1,[r2,r3]
 6298 004a 20E0     	 b .L267
 6299              	.L268:
1999:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2000:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2001:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2002:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask = group_ptr->REVNP1;
 6300              	 .loc 2 2002 0
 6301 004c FA68     	 ldr r2,[r7,#12]
 6302 004e DA23     	 mov r3,#218
 6303 0050 5B00     	 lsl r3,r3,#1
 6304 0052 D358     	 ldr r3,[r2,r3]
 6305 0054 7B61     	 str r3,[r7,#20]
2003:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 6306              	 .loc 2 2003 0
 6307 0056 BB68     	 ldr r3,[r7,#8]
 6308 0058 0E4A     	 ldr r2,.L270
 6309 005a 9446     	 mov ip,r2
 6310 005c 6344     	 add r3,r3,ip
 6311 005e 9B00     	 lsl r3,r3,#2
 6312 0060 1A1C     	 mov r2,r3
 6313 0062 0F23     	 mov r3,#15
 6314 0064 9340     	 lsl r3,r3,r2
 6315 0066 DA43     	 mvn r2,r3
 6316 0068 7B69     	 ldr r3,[r7,#20]
 6317 006a 1340     	 and r3,r2
 6318 006c 7B61     	 str r3,[r7,#20]
2004:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 6319              	 .loc 2 2004 0
 6320 006e FB1D     	 add r3,r7,#7
 6321 0070 1B78     	 ldrb r3,[r3]
 6322 0072 BA68     	 ldr r2,[r7,#8]
 6323 0074 0749     	 ldr r1,.L270
 6324 0076 8C46     	 mov ip,r1
 6325 0078 6244     	 add r2,r2,ip
 6326 007a 9200     	 lsl r2,r2,#2
 6327 007c 9340     	 lsl r3,r3,r2
 6328 007e 7A69     	 ldr r2,[r7,#20]
 6329 0080 1343     	 orr r3,r2
 6330 0082 7B61     	 str r3,[r7,#20]
2005:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 6331              	 .loc 2 2005 0
 6332 0084 FA68     	 ldr r2,[r7,#12]
 6333 0086 DA23     	 mov r3,#218
 6334 0088 5B00     	 lsl r3,r3,#1
 6335 008a 7969     	 ldr r1,[r7,#20]
 6336 008c D150     	 str r1,[r2,r3]
 6337              	.L267:
2006:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2007:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6338              	 .loc 2 2007 0
 6339 008e BD46     	 mov sp,r7
 6340 0090 06B0     	 add sp,sp,#24
 6341              	 
 6342 0092 80BD     	 pop {r7,pc}
 6343              	.L271:
 6344              	 .align 2
 6345              	.L270:
 6346 0094 F8FFFF3F 	 .word 1073741816
 6347              	 .cfi_endproc
 6348              	.LFE229:
 6350              	 .section .text.XMC_VADC_GROUP_GetResultFifoTail,"ax",%progbits
 6351              	 .align 2
 6352              	 .global XMC_VADC_GROUP_GetResultFifoTail
 6353              	 .code 16
 6354              	 .thumb_func
 6356              	XMC_VADC_GROUP_GetResultFifoTail:
 6357              	.LFB230:
2008:../Libraries/XMCLib/src/xmc_vadc.c **** 
2009:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the tail of the fifo which the specified result register is a part of */
2010:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoTail(XMC_VADC_GROUP_t *const group_ptr, uint32_t res_reg)
2011:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6358              	 .loc 2 2011 0
 6359              	 .cfi_startproc
 6360 0000 80B5     	 push {r7,lr}
 6361              	.LCFI253:
 6362              	 .cfi_def_cfa_offset 8
 6363              	 .cfi_offset 7,-8
 6364              	 .cfi_offset 14,-4
 6365 0002 86B0     	 sub sp,sp,#24
 6366              	.LCFI254:
 6367              	 .cfi_def_cfa_offset 32
 6368 0004 00AF     	 add r7,sp,#0
 6369              	.LCFI255:
 6370              	 .cfi_def_cfa_register 7
 6371 0006 7860     	 str r0,[r7,#4]
 6372 0008 3960     	 str r1,[r7]
2012:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t tail;
2013:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2014:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t i;
2015:../Libraries/XMCLib/src/xmc_vadc.c ****   bool exit_flag;
2016:../Libraries/XMCLib/src/xmc_vadc.c **** 
2017:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2018:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2019:../Libraries/XMCLib/src/xmc_vadc.c **** 
2020:../Libraries/XMCLib/src/xmc_vadc.c ****   tail = 0U;
 6373              	 .loc 2 2020 0
 6374 000a 0023     	 mov r3,#0
 6375 000c 7B61     	 str r3,[r7,#20]
2021:../Libraries/XMCLib/src/xmc_vadc.c ****   exit_flag= (bool)false;
 6376              	 .loc 2 2021 0
 6377 000e 0F23     	 mov r3,#15
 6378 0010 FB18     	 add r3,r7,r3
 6379 0012 0022     	 mov r2,#0
 6380 0014 1A70     	 strb r2,[r3]
2022:../Libraries/XMCLib/src/xmc_vadc.c **** 
2023:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 6381              	 .loc 2 2023 0
 6382 0016 7A68     	 ldr r2,[r7,#4]
 6383 0018 3B68     	 ldr r3,[r7]
 6384 001a 101C     	 mov r0,r2
 6385 001c 191C     	 mov r1,r3
 6386 001e FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 6387 0022 031E     	 sub r3,r0,#0
 6388 0024 02D0     	 beq .L273
2024:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2025:../Libraries/XMCLib/src/xmc_vadc.c ****     res_reg = res_reg - 1U;
 6389              	 .loc 2 2025 0
 6390 0026 3B68     	 ldr r3,[r7]
 6391 0028 013B     	 sub r3,r3,#1
 6392 002a 3B60     	 str r3,[r7]
 6393              	.L273:
2026:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2027:../Libraries/XMCLib/src/xmc_vadc.c **** 
2028:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Border condition */
2029:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == res_reg)
 6394              	 .loc 2 2029 0
 6395 002c 3B68     	 ldr r3,[r7]
 6396 002e 002B     	 cmp r3,#0
 6397 0030 02D1     	 bne .L274
2030:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2031:../Libraries/XMCLib/src/xmc_vadc.c ****     tail = 0U;
 6398              	 .loc 2 2031 0
 6399 0032 0023     	 mov r3,#0
 6400 0034 7B61     	 str r3,[r7,#20]
 6401 0036 2DE0     	 b .L275
 6402              	.L274:
2032:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2033:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2034:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2035:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Stop either at a node that does not have FEN set or at Node-0 */
2036:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = (int32_t)res_reg; i >= (int32_t)0; i--)
 6403              	 .loc 2 2036 0
 6404 0038 3B68     	 ldr r3,[r7]
 6405 003a 3B61     	 str r3,[r7,#16]
 6406 003c 27E0     	 b .L276
 6407              	.L281:
2037:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2038:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr = group_ptr->RCR[i];
 6408              	 .loc 2 2038 0
 6409 003e 7B68     	 ldr r3,[r7,#4]
 6410 0040 3A69     	 ldr r2,[r7,#16]
 6411 0042 A032     	 add r2,r2,#160
 6412 0044 9200     	 lsl r2,r2,#2
 6413 0046 D358     	 ldr r3,[r2,r3]
 6414 0048 BB60     	 str r3,[r7,#8]
2039:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6415              	 .loc 2 2039 0
 6416 004a BA68     	 ldr r2,[r7,#8]
 6417 004c C023     	 mov r3,#192
 6418 004e DB04     	 lsl r3,r3,#19
 6419 0050 1340     	 and r3,r2
 6420 0052 BB60     	 str r3,[r7,#8]
2040:../Libraries/XMCLib/src/xmc_vadc.c **** 
2041:../Libraries/XMCLib/src/xmc_vadc.c ****        if (rcr)
 6421              	 .loc 2 2041 0
 6422 0054 BB68     	 ldr r3,[r7,#8]
 6423 0056 002B     	 cmp r3,#0
 6424 0058 09D0     	 beq .L277
2042:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2043:../Libraries/XMCLib/src/xmc_vadc.c ****          if ((int32_t)0 == i)
 6425              	 .loc 2 2043 0
 6426 005a 3B69     	 ldr r3,[r7,#16]
 6427 005c 002B     	 cmp r3,#0
 6428 005e 0DD1     	 bne .L279
2044:../Libraries/XMCLib/src/xmc_vadc.c ****          {
2045:../Libraries/XMCLib/src/xmc_vadc.c ****           /* No more nodes. Stop here */
2046:../Libraries/XMCLib/src/xmc_vadc.c ****           tail = (uint32_t)0;
 6429              	 .loc 2 2046 0
 6430 0060 0023     	 mov r3,#0
 6431 0062 7B61     	 str r3,[r7,#20]
2047:../Libraries/XMCLib/src/xmc_vadc.c ****           exit_flag = (bool)true;
 6432              	 .loc 2 2047 0
 6433 0064 0F23     	 mov r3,#15
 6434 0066 FB18     	 add r3,r7,r3
 6435 0068 0122     	 mov r2,#1
 6436 006a 1A70     	 strb r2,[r3]
 6437 006c 06E0     	 b .L279
 6438              	.L277:
2048:../Libraries/XMCLib/src/xmc_vadc.c ****          }
2049:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2050:../Libraries/XMCLib/src/xmc_vadc.c ****        else
2051:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2052:../Libraries/XMCLib/src/xmc_vadc.c ****          /* The preceding register forms the tail of the FIFO */
2053:../Libraries/XMCLib/src/xmc_vadc.c ****          tail = (uint32_t)i + (uint32_t)1;
 6439              	 .loc 2 2053 0
 6440 006e 3B69     	 ldr r3,[r7,#16]
 6441 0070 0133     	 add r3,r3,#1
 6442 0072 7B61     	 str r3,[r7,#20]
2054:../Libraries/XMCLib/src/xmc_vadc.c ****          exit_flag = (bool)true;
 6443              	 .loc 2 2054 0
 6444 0074 0F23     	 mov r3,#15
 6445 0076 FB18     	 add r3,r7,r3
 6446 0078 0122     	 mov r2,#1
 6447 007a 1A70     	 strb r2,[r3]
 6448              	.L279:
2055:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2056:../Libraries/XMCLib/src/xmc_vadc.c ****        if (exit_flag)
 6449              	 .loc 2 2056 0
 6450 007c 0F23     	 mov r3,#15
 6451 007e FB18     	 add r3,r7,r3
 6452 0080 1B78     	 ldrb r3,[r3]
 6453 0082 002B     	 cmp r3,#0
 6454 0084 00D0     	 beq .L280
2057:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2058:../Libraries/XMCLib/src/xmc_vadc.c ****          break;
 6455              	 .loc 2 2058 0
 6456 0086 05E0     	 b .L275
 6457              	.L280:
2036:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6458              	 .loc 2 2036 0 discriminator 2
 6459 0088 3B69     	 ldr r3,[r7,#16]
 6460 008a 013B     	 sub r3,r3,#1
 6461 008c 3B61     	 str r3,[r7,#16]
 6462              	.L276:
2036:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6463              	 .loc 2 2036 0 is_stmt 0 discriminator 1
 6464 008e 3B69     	 ldr r3,[r7,#16]
 6465 0090 002B     	 cmp r3,#0
 6466 0092 D4DA     	 bge .L281
 6467              	.L275:
2059:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2060:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2061:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2062:../Libraries/XMCLib/src/xmc_vadc.c ****   return tail;
 6468              	 .loc 2 2062 0 is_stmt 1
 6469 0094 7B69     	 ldr r3,[r7,#20]
2063:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6470              	 .loc 2 2063 0
 6471 0096 181C     	 mov r0,r3
 6472 0098 BD46     	 mov sp,r7
 6473 009a 06B0     	 add sp,sp,#24
 6474              	 
 6475 009c 80BD     	 pop {r7,pc}
 6476              	 .cfi_endproc
 6477              	.LFE230:
 6479 009e C046     	 .section .text.XMC_VADC_GROUP_GetResultFifoHead,"ax",%progbits
 6480              	 .align 2
 6481              	 .global XMC_VADC_GROUP_GetResultFifoHead
 6482              	 .code 16
 6483              	 .thumb_func
 6485              	XMC_VADC_GROUP_GetResultFifoHead:
 6486              	.LFB231:
2064:../Libraries/XMCLib/src/xmc_vadc.c **** 
2065:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the head of the fifo which the specified result register is a part of */
2066:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg
2067:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6487              	 .loc 2 2067 0
 6488              	 .cfi_startproc
 6489 0000 80B5     	 push {r7,lr}
 6490              	.LCFI256:
 6491              	 .cfi_def_cfa_offset 8
 6492              	 .cfi_offset 7,-8
 6493              	 .cfi_offset 14,-4
 6494 0002 86B0     	 sub sp,sp,#24
 6495              	.LCFI257:
 6496              	 .cfi_def_cfa_offset 32
 6497 0004 00AF     	 add r7,sp,#0
 6498              	.LCFI258:
 6499              	 .cfi_def_cfa_register 7
 6500 0006 7860     	 str r0,[r7,#4]
 6501 0008 3960     	 str r1,[r7]
2068:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t head;
2069:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2070:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
2071:../Libraries/XMCLib/src/xmc_vadc.c **** 
2072:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2073:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2074:../Libraries/XMCLib/src/xmc_vadc.c **** 
2075:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 6502              	 .loc 2 2075 0
 6503 000a 7A68     	 ldr r2,[r7,#4]
 6504 000c 3B68     	 ldr r3,[r7]
 6505 000e 101C     	 mov r0,r2
 6506 0010 191C     	 mov r1,r3
 6507 0012 FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 6508 0016 031E     	 sub r3,r0,#0
 6509 0018 02D0     	 beq .L284
2076:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2077:../Libraries/XMCLib/src/xmc_vadc.c ****       head = res_reg;
 6510              	 .loc 2 2077 0
 6511 001a 3B68     	 ldr r3,[r7]
 6512 001c 7B61     	 str r3,[r7,#20]
 6513 001e 1BE0     	 b .L285
 6514              	.L284:
2078:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2079:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2080:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2081:../Libraries/XMCLib/src/xmc_vadc.c ****     head = XMC_VADC_NUM_RESULT_REGISTERS - (uint32_t)1;
 6515              	 .loc 2 2081 0
 6516 0020 0F23     	 mov r3,#15
 6517 0022 7B61     	 str r3,[r7,#20]
2082:../Libraries/XMCLib/src/xmc_vadc.c **** 
2083:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = res_reg; i < XMC_VADC_NUM_RESULT_REGISTERS ; i++)
 6518              	 .loc 2 2083 0
 6519 0024 3B68     	 ldr r3,[r7]
 6520 0026 3B61     	 str r3,[r7,#16]
 6521 0028 13E0     	 b .L286
 6522              	.L288:
2084:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2085:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr = group_ptr->RCR[i];
 6523              	 .loc 2 2085 0
 6524 002a 7B68     	 ldr r3,[r7,#4]
 6525 002c 3A69     	 ldr r2,[r7,#16]
 6526 002e A032     	 add r2,r2,#160
 6527 0030 9200     	 lsl r2,r2,#2
 6528 0032 D358     	 ldr r3,[r2,r3]
 6529 0034 FB60     	 str r3,[r7,#12]
2086:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6530              	 .loc 2 2086 0
 6531 0036 FA68     	 ldr r2,[r7,#12]
 6532 0038 C023     	 mov r3,#192
 6533 003a DB04     	 lsl r3,r3,#19
 6534 003c 1340     	 and r3,r2
 6535 003e FB60     	 str r3,[r7,#12]
2087:../Libraries/XMCLib/src/xmc_vadc.c **** 
2088:../Libraries/XMCLib/src/xmc_vadc.c ****       if (!rcr)
 6536              	 .loc 2 2088 0
 6537 0040 FB68     	 ldr r3,[r7,#12]
 6538 0042 002B     	 cmp r3,#0
 6539 0044 02D1     	 bne .L287
2089:../Libraries/XMCLib/src/xmc_vadc.c ****       {
2090:../Libraries/XMCLib/src/xmc_vadc.c ****         /* This node forms the head of the FIFO */
2091:../Libraries/XMCLib/src/xmc_vadc.c ****         head = i ;
 6540              	 .loc 2 2091 0
 6541 0046 3B69     	 ldr r3,[r7,#16]
 6542 0048 7B61     	 str r3,[r7,#20]
2092:../Libraries/XMCLib/src/xmc_vadc.c ****         break;
 6543              	 .loc 2 2092 0
 6544 004a 05E0     	 b .L285
 6545              	.L287:
2083:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6546              	 .loc 2 2083 0 discriminator 2
 6547 004c 3B69     	 ldr r3,[r7,#16]
 6548 004e 0133     	 add r3,r3,#1
 6549 0050 3B61     	 str r3,[r7,#16]
 6550              	.L286:
2083:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 6551              	 .loc 2 2083 0 is_stmt 0 discriminator 1
 6552 0052 3B69     	 ldr r3,[r7,#16]
 6553 0054 0F2B     	 cmp r3,#15
 6554 0056 E8D9     	 bls .L288
 6555              	.L285:
2093:../Libraries/XMCLib/src/xmc_vadc.c ****       }
2094:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2095:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2096:../Libraries/XMCLib/src/xmc_vadc.c ****   return head;
 6556              	 .loc 2 2096 0 is_stmt 1
 6557 0058 7B69     	 ldr r3,[r7,#20]
2097:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6558              	 .loc 2 2097 0
 6559 005a 181C     	 mov r0,r3
 6560 005c BD46     	 mov sp,r7
 6561 005e 06B0     	 add sp,sp,#24
 6562              	 
 6563 0060 80BD     	 pop {r7,pc}
 6564              	 .cfi_endproc
 6565              	.LFE231:
 6567 0062 C046     	 .section .text.XMC_VADC_GROUP_IsResultRegisterFifoHead,"ax",%progbits
 6568              	 .align 2
 6569              	 .global XMC_VADC_GROUP_IsResultRegisterFifoHead
 6570              	 .code 16
 6571              	 .thumb_func
 6573              	XMC_VADC_GROUP_IsResultRegisterFifoHead:
 6574              	.LFB232:
2098:../Libraries/XMCLib/src/xmc_vadc.c **** 
2099:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine if the specified result register is the head of a result fifo */
2100:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_IsResultRegisterFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_
2101:../Libraries/XMCLib/src/xmc_vadc.c **** {
 6575              	 .loc 2 2101 0
 6576              	 .cfi_startproc
 6577 0000 80B5     	 push {r7,lr}
 6578              	.LCFI259:
 6579              	 .cfi_def_cfa_offset 8
 6580              	 .cfi_offset 7,-8
 6581              	 .cfi_offset 14,-4
 6582 0002 86B0     	 sub sp,sp,#24
 6583              	.LCFI260:
 6584              	 .cfi_def_cfa_offset 32
 6585 0004 00AF     	 add r7,sp,#0
 6586              	.LCFI261:
 6587              	 .cfi_def_cfa_register 7
 6588 0006 7860     	 str r0,[r7,#4]
 6589 0008 3960     	 str r1,[r7]
2102:../Libraries/XMCLib/src/xmc_vadc.c ****   bool ret_val;
2103:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_head;
2104:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_next;
2105:../Libraries/XMCLib/src/xmc_vadc.c **** 
2106:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2107:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Result Register",
2108:../Libraries/XMCLib/src/xmc_vadc.c ****              ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
2109:../Libraries/XMCLib/src/xmc_vadc.c **** 
2110:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head = group_ptr->RCR[res_reg];
 6590              	 .loc 2 2110 0
 6591 000a 7B68     	 ldr r3,[r7,#4]
 6592 000c 3A68     	 ldr r2,[r7]
 6593 000e A032     	 add r2,r2,#160
 6594 0010 9200     	 lsl r2,r2,#2
 6595 0012 D358     	 ldr r3,[r2,r3]
 6596 0014 3B61     	 str r3,[r7,#16]
2111:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6597              	 .loc 2 2111 0
 6598 0016 3A69     	 ldr r2,[r7,#16]
 6599 0018 C023     	 mov r3,#192
 6600 001a DB04     	 lsl r3,r3,#19
 6601 001c 1340     	 and r3,r2
 6602 001e 3B61     	 str r3,[r7,#16]
2112:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 6603              	 .loc 2 2112 0
 6604 0020 3B68     	 ldr r3,[r7]
 6605 0022 5A1E     	 sub r2,r3,#1
 6606 0024 7B68     	 ldr r3,[r7,#4]
 6607 0026 A032     	 add r2,r2,#160
 6608 0028 9200     	 lsl r2,r2,#2
 6609 002a D358     	 ldr r3,[r2,r3]
 6610 002c FB60     	 str r3,[r7,#12]
2113:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
 6611              	 .loc 2 2113 0
 6612 002e FA68     	 ldr r2,[r7,#12]
 6613 0030 C023     	 mov r3,#192
 6614 0032 DB04     	 lsl r3,r3,#19
 6615 0034 1340     	 and r3,r2
 6616 0036 FB60     	 str r3,[r7,#12]
2114:../Libraries/XMCLib/src/xmc_vadc.c **** 
2115:../Libraries/XMCLib/src/xmc_vadc.c ****   if (rcr_head)
 6617              	 .loc 2 2115 0
 6618 0038 3B69     	 ldr r3,[r7,#16]
 6619 003a 002B     	 cmp r3,#0
 6620 003c 04D0     	 beq .L291
2116:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2117:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 6621              	 .loc 2 2117 0
 6622 003e 1723     	 mov r3,#23
 6623 0040 FB18     	 add r3,r7,r3
 6624 0042 0022     	 mov r2,#0
 6625 0044 1A70     	 strb r2,[r3]
 6626 0046 0BE0     	 b .L292
 6627              	.L291:
2118:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2119:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (rcr_next)
 6628              	 .loc 2 2119 0
 6629 0048 FB68     	 ldr r3,[r7,#12]
 6630 004a 002B     	 cmp r3,#0
 6631 004c 04D0     	 beq .L293
2120:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2121:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)true;
 6632              	 .loc 2 2121 0
 6633 004e 1723     	 mov r3,#23
 6634 0050 FB18     	 add r3,r7,r3
 6635 0052 0122     	 mov r2,#1
 6636 0054 1A70     	 strb r2,[r3]
 6637 0056 03E0     	 b .L292
 6638              	.L293:
2122:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2123:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2124:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2125:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 6639              	 .loc 2 2125 0
 6640 0058 1723     	 mov r3,#23
 6641 005a FB18     	 add r3,r7,r3
 6642 005c 0022     	 mov r2,#0
 6643 005e 1A70     	 strb r2,[r3]
 6644              	.L292:
2126:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2127:../Libraries/XMCLib/src/xmc_vadc.c **** 
2128:../Libraries/XMCLib/src/xmc_vadc.c ****   return ret_val;
 6645              	 .loc 2 2128 0
 6646 0060 1723     	 mov r3,#23
 6647 0062 FB18     	 add r3,r7,r3
 6648 0064 1B78     	 ldrb r3,[r3]
2129:../Libraries/XMCLib/src/xmc_vadc.c **** }
 6649              	 .loc 2 2129 0
 6650 0066 181C     	 mov r0,r3
 6651 0068 BD46     	 mov sp,r7
 6652 006a 06B0     	 add sp,sp,#24
 6653              	 
 6654 006c 80BD     	 pop {r7,pc}
 6655              	 .cfi_endproc
 6656              	.LFE232:
 6658 006e C046     	 .text
 6659              	.Letext0:
 6660              	 .file 3 "n:\\eecs 473\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 6661              	 .file 4 "n:\\eecs 473\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 6662              	 .file 5 "N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 6663              	 .file 6 "N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc/xmc1_scu.h"
 6664              	 .file 7 "N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_vadc.c
    {standard input}:18     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 $t
    {standard input}:22     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 XMC_VADC_GROUP_ExternalMuxControlInit
    {standard input}:123    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 $t
    {standard input}:127    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanEnableArbitrationSlot
    {standard input}:162    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 $t
    {standard input}:166    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanDisableArbitrationSlot
    {standard input}:199    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000020 $d
    {standard input}:204    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 $t
    {standard input}:208    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
    {standard input}:243    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 $t
    {standard input}:247    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
    {standard input}:280    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000020 $d
    {standard input}:285    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 $t
    {standard input}:289    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueEnableArbitrationSlot
    {standard input}:324    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 $t
    {standard input}:328    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueDisableArbitrationSlot
    {standard input}:361    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000020 $d
    {standard input}:366    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 $t
    {standard input}:370    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 XMC_VADC_GROUP_QueueFlushEntries
    {standard input}:419    .rodata.g_xmc_vadc_group_array:00000000 $d
    {standard input}:422    .rodata.g_xmc_vadc_group_array:00000000 g_xmc_vadc_group_array
    {standard input}:426    .text.XMC_VADC_GLOBAL_EnableModule:00000000 $t
    {standard input}:431    .text.XMC_VADC_GLOBAL_EnableModule:00000000 XMC_VADC_GLOBAL_EnableModule
    {standard input}:458    .text.XMC_VADC_GLOBAL_EnableModule:00000014 $d
    {standard input}:463    .text.XMC_VADC_GLOBAL_DisableModule:00000000 $t
    {standard input}:468    .text.XMC_VADC_GLOBAL_DisableModule:00000000 XMC_VADC_GLOBAL_DisableModule
    {standard input}:491    .text.XMC_VADC_GLOBAL_Init:00000000 $t
    {standard input}:496    .text.XMC_VADC_GLOBAL_Init:00000000 XMC_VADC_GLOBAL_Init
    {standard input}:563    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 $t
    {standard input}:568    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 XMC_VADC_GLOBAL_InputClassInit
    {standard input}:624    .text.XMC_VADC_GLOBAL_InputClassInit:00000044 $d
    {standard input}:630    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 $t
    {standard input}:635    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 XMC_VADC_GLOBAL_StartupCalibration
    {standard input}:725    .text.XMC_VADC_GLOBAL_StartupCalibration:00000070 $d
    {standard input}:730    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 $t
    {standard input}:735    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 XMC_VADC_GLOBAL_SetBoundaries
    {standard input}:781    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 $t
    {standard input}:786    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 XMC_VADC_GLOBAL_SetIndividualBoundary
    {standard input}:864    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000068 $d
    {standard input}:869    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 $t
    {standard input}:874    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 XMC_VADC_GLOBAL_SetCompareValue
    {standard input}:927    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 $t
    {standard input}:932    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 XMC_VADC_GLOBAL_GetCompareResult
    {standard input}:989    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 $t
    {standard input}:994    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 XMC_VADC_GLOBAL_BindGroupToEMux
    {standard input}:1068   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 $t
    {standard input}:1073   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 XMC_VADC_GLOBAL_SetResultEventInterruptNode
    {standard input}:1142   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:0000005c $d
    {standard input}:1147   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:1152   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
    {standard input}:1221   .text.XMC_VADC_GROUP_Init:00000000 $t
    {standard input}:1226   .text.XMC_VADC_GROUP_Init:00000000 XMC_VADC_GROUP_Init
    {standard input}:1312   .text.XMC_VADC_GROUP_InputClassInit:00000000 XMC_VADC_GROUP_InputClassInit
    {standard input}:1307   .text.XMC_VADC_GROUP_InputClassInit:00000000 $t
    {standard input}:1456   .text.XMC_VADC_GROUP_SetPowerMode:00000000 $t
    {standard input}:1461   .text.XMC_VADC_GROUP_SetPowerMode:00000000 XMC_VADC_GROUP_SetPowerMode
    {standard input}:1510   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 $t
    {standard input}:1515   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 XMC_VADC_GROUP_SetSyncSlave
    {standard input}:1572   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 $t
    {standard input}:1577   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 XMC_VADC_GROUP_SetSyncMaster
    {standard input}:1617   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 $t
    {standard input}:1622   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 XMC_VADC_GROUP_CheckSlaveReadiness
    {standard input}:1699   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000060 $d
    {standard input}:1704   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 $t
    {standard input}:1709   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 XMC_VADC_GROUP_IgnoreSlaveReadiness
    {standard input}:1787   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000060 $d
    {standard input}:1792   .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:00000000 $t
    {standard input}:1797   .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:00000000 XMC_VADC_GROUP_SetSyncSlaveReadySignal
    {standard input}:1847   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 $t
    {standard input}:1852   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 XMC_VADC_GROUP_EnableChannelSyncRequest
    {standard input}:1904   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 $t
    {standard input}:1909   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 XMC_VADC_GROUP_DisableChannelSyncRequest
    {standard input}:1959   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:0000003c $d
    {standard input}:1964   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 $t
    {standard input}:1969   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 XMC_VADC_GROUP_IsConverterBusy
    {standard input}:2013   .text.XMC_VADC_GROUP_SetBoundaries:00000000 $t
    {standard input}:2018   .text.XMC_VADC_GROUP_SetBoundaries:00000000 XMC_VADC_GROUP_SetBoundaries
    {standard input}:2075   .text.XMC_VADC_GROUP_SetBoundaries:00000044 $d
    {standard input}:2080   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 $t
    {standard input}:2085   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 XMC_VADC_GROUP_SetIndividualBoundary
    {standard input}:2163   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000068 $d
    {standard input}:2168   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 $t
    {standard input}:2173   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 XMC_VADC_GROUP_TriggerServiceRequest
    {standard input}:2238   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 $t
    {standard input}:2243   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 XMC_VADC_GROUP_SetBoundaryEventInterruptNode
    {standard input}:2307   .text.XMC_VADC_GLOBAL_SHS_Init:00000000 $t
    {standard input}:2312   .text.XMC_VADC_GLOBAL_SHS_Init:00000000 XMC_VADC_GLOBAL_SHS_Init
    {standard input}:2366   .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:00000000 $t
    {standard input}:2371   .text.XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:00000000 XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
    {standard input}:2430   .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:00000000 $t
    {standard input}:2435   .text.XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:00000000 XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode
    {standard input}:2496   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000000 $t
    {standard input}:2501   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000000 XMC_VADC_GLOBAL_SHS_SetShortSampleTime
    {standard input}:2586   .text.XMC_VADC_GLOBAL_SHS_SetShortSampleTime:00000078 $d
    {standard input}:2591   .text.XMC_VADC_GLOBAL_SHS_SetGainFactor:00000000 $t
    {standard input}:2596   .text.XMC_VADC_GLOBAL_SHS_SetGainFactor:00000000 XMC_VADC_GLOBAL_SHS_SetGainFactor
    {standard input}:2716   .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:00000000 $t
    {standard input}:2721   .text.XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:00000000 XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations
    {standard input}:2780   .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:00000000 $t
    {standard input}:2785   .text.XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:00000000 XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations
    {standard input}:2846   .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:00000000 $t
    {standard input}:2851   .text.XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:00000000 XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue
    {standard input}:2926   .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:00000000 $t
    {standard input}:2931   .text.XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:00000000 XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue
    {standard input}:3050   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:00000000 $t
    {standard input}:3055   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:00000000 XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop
    {standard input}:3122   .text.XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:0000005c $d
    {standard input}:3127   .text.XMC_VADC_GROUP_ScanInit:00000000 $t
    {standard input}:3132   .text.XMC_VADC_GROUP_ScanInit:00000000 XMC_VADC_GROUP_ScanInit
    {standard input}:3246   .text.XMC_VADC_GROUP_ScanInit:000000ac $d
    {standard input}:3251   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 $t
    {standard input}:3256   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 XMC_VADC_GROUP_ScanSelectTrigger
    {standard input}:3313   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000048 $d
    {standard input}:3318   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 $t
    {standard input}:3323   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 XMC_VADC_GROUP_ScanSelectTriggerEdge
    {standard input}:3380   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000048 $d
    {standard input}:3385   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 $t
    {standard input}:3390   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 XMC_VADC_GROUP_ScanSelectGating
    {standard input}:3447   .text.XMC_VADC_GROUP_ScanSelectGating:00000048 $d
    {standard input}:3452   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 $t
    {standard input}:3457   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 XMC_VADC_GROUP_ScanSequenceAbort
    {standard input}:3556   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000094 $d
    {standard input}:3561   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 $t
    {standard input}:3566   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 XMC_VADC_GROUP_ScanGetNumChannelsPending
    {standard input}:3639   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:3644   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
    {standard input}:3696   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 $t
    {standard input}:3701   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 XMC_VADC_GROUP_ScanRemoveChannel
    {standard input}:3749   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 $t
    {standard input}:3754   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 XMC_VADC_GLOBAL_BackgroundInit
    {standard input}:3961   .text.XMC_VADC_GLOBAL_BackgroundInit:00000144 $d
    {standard input}:3968   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 $t
    {standard input}:3973   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 XMC_VADC_GLOBAL_BackgroundSelectTrigger
    {standard input}:4027   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000040 $d
    {standard input}:4032   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 $t
    {standard input}:4037   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
    {standard input}:4094   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000048 $d
    {standard input}:4099   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 $t
    {standard input}:4104   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 XMC_VADC_GLOBAL_BackgroundSelectGating
    {standard input}:4158   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000040 $d
    {standard input}:4163   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 $t
    {standard input}:4168   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 XMC_VADC_GLOBAL_BackgroundAbortSequence
    {standard input}:4292   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:000000b4 $d
    {standard input}:4298   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 $t
    {standard input}:4303   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
    {standard input}:4392   .text.XMC_VADC_GROUP_QueueInit:00000000 $t
    {standard input}:4397   .text.XMC_VADC_GROUP_QueueInit:00000000 XMC_VADC_GROUP_QueueInit
    {standard input}:4511   .text.XMC_VADC_GROUP_QueueInit:000000ac $d
    {standard input}:4516   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 $t
    {standard input}:4521   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 XMC_VADC_GROUP_QueueSelectTrigger
    {standard input}:4578   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000048 $d
    {standard input}:4583   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 $t
    {standard input}:4588   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 XMC_VADC_GROUP_QueueSelectTriggerEdge
    {standard input}:4645   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000048 $d
    {standard input}:4650   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 $t
    {standard input}:4655   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 XMC_VADC_GROUP_QueueSelectGating
    {standard input}:4712   .text.XMC_VADC_GROUP_QueueSelectGating:00000048 $d
    {standard input}:4717   .text.XMC_VADC_GROUP_QueueGetLength:00000000 $t
    {standard input}:4722   .text.XMC_VADC_GROUP_QueueGetLength:00000000 XMC_VADC_GROUP_QueueGetLength
    {standard input}:4790   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 $t
    {standard input}:4795   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 XMC_VADC_GROUP_QueueAbortSequence
    {standard input}:4873   .text.XMC_VADC_GROUP_QueueAbortSequence:00000070 $d
    {standard input}:4878   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 $t
    {standard input}:4883   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 XMC_VADC_GROUP_QueueRemoveChannel
    {standard input}:5002   .text.XMC_VADC_GROUP_QueueRemoveChannel:000000b4 $d
    {standard input}:5007   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 $t
    {standard input}:5012   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 XMC_VADC_GROUP_QueueGetNextChannel
    {standard input}:5085   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 $t
    {standard input}:5090   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 XMC_VADC_GROUP_QueueGetInterruptedChannel
    {standard input}:5143   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:5148   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
    {standard input}:5199   .text.XMC_VADC_GROUP_ChannelInit:00000000 $t
    {standard input}:5204   .text.XMC_VADC_GROUP_ChannelInit:00000000 XMC_VADC_GROUP_ChannelInit
    {standard input}:5349   .text.XMC_VADC_GROUP_ChannelInit:000000d8 $d
    {standard input}:5354   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 $t
    {standard input}:5359   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 XMC_VADC_GROUP_SetChannelAlias
    {standard input}:5430   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 $t
    {standard input}:5435   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 XMC_VADC_GROUP_ChannelIsResultOutOfBounds
    {standard input}:5516   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 $t
    {standard input}:5521   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 XMC_VADC_GROUP_ChannelSetInputReference
    {standard input}:5574   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000040 $d
    {standard input}:5579   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 $t
    {standard input}:5584   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 XMC_VADC_GROUP_ChannelSetResultRegister
    {standard input}:5635   .text.XMC_VADC_GROUP_ChannelSetResultRegister:0000003c $d
    {standard input}:5640   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 $t
    {standard input}:5645   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 XMC_VADC_GROUP_ChannelSetIclass
    {standard input}:5698   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 $t
    {standard input}:5703   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 XMC_VADC_GROUP_ChannelGetResultRegister
    {standard input}:5747   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 $t
    {standard input}:5752   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 XMC_VADC_GROUP_ChannelTriggerEvent
    {standard input}:5798   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 $t
    {standard input}:5803   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 XMC_VADC_GROUP_ChannelSetEventInterruptNode
    {standard input}:5862   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 $t
    {standard input}:5867   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
    {standard input}:5920   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000040 $d
    {standard input}:5925   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 $t
    {standard input}:5930   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 XMC_VADC_GROUP_ChannelSetBoundarySelection
    {standard input}:6000   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 $t
    {standard input}:6005   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 XMC_VADC_GROUP_AddResultToFifo
    {standard input}:6055   .text.XMC_VADC_GROUP_AddResultToFifo:0000003c $d
    {standard input}:6060   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 $t
    {standard input}:6065   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 XMC_VADC_GROUP_SetResultFastCompareValue
    {standard input}:6119   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 $t
    {standard input}:6124   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 XMC_VADC_GROUP_GetFastCompareResult
    {standard input}:6183   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 $t
    {standard input}:6188   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 XMC_VADC_GROUP_SetResultSubtractionValue
    {standard input}:6239   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 $t
    {standard input}:6244   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 XMC_VADC_GROUP_SetResultInterruptNode
    {standard input}:6346   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000094 $d
    {standard input}:6351   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 $t
    {standard input}:6356   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 XMC_VADC_GROUP_GetResultFifoTail
    {standard input}:6573   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 XMC_VADC_GROUP_IsResultRegisterFifoHead
    {standard input}:6480   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 $t
    {standard input}:6485   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 XMC_VADC_GROUP_GetResultFifoHead
    {standard input}:6568   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_CLOCK_GatePeripheralClock
