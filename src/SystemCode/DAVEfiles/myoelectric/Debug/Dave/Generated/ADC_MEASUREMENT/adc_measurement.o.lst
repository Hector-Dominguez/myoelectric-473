   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "adc_measurement.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.__NVIC_EnableIRQ,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	__NVIC_EnableIRQ:
  23              	.LFB25:
  24              	 .file 1 "N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include/core_cm0.h"
   1:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**************************************************************************//**
   2:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * @file     core_cm0.h
   3:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * @version  V5.0.5
   5:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * @date     28. May 2018
   6:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
   7:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /*
   8:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  *
  10:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  *
  12:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * not use this file except in compliance with the License.
  14:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * You may obtain a copy of the License at
  15:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  *
  16:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  *
  18:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * See the License for the specific language governing permissions and
  22:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  * limitations under the License.
  23:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
  24:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  25:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #if   defined ( __ICCARM__ )
  26:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #elif defined (__clang__)
  28:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #endif
  30:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  31:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  34:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #include <stdint.h>
  35:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  36:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
  37:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  extern "C" {
  38:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #endif
  39:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  40:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
  41:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  44:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  47:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****      Unions are used for effective representation of core registers.
  49:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  50:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
  53:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  54:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  55:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
  56:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  *                 CMSIS definitions
  57:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
  58:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
  59:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup Cortex_M0
  60:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   @{
  61:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
  62:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  63:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #include "cmsis_version.h"
  64:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  
  65:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /*  CMSIS CM0 definitions */
  66:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  71:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  73:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     This core does not support an FPU at all
  75:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** */
  76:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define __FPU_USED       0U
  77:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  78:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #if defined ( __CC_ARM )
  79:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  82:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  83:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  87:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  88:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __GNUC__ )
  89:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  92:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  93:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __ICCARM__ )
  94:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __ARMVFP__
  95:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #endif
  97:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
  98:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 102:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 103:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __TASKING__ )
 104:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #if defined __FPU_VFP__
 105:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 107:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 108:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #elif defined ( __CSMC__ )
 109:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 112:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 113:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #endif
 114:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 115:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 117:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 118:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 119:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** }
 120:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #endif
 121:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 122:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 124:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 126:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 129:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 130:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  extern "C" {
 131:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #endif
 132:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 133:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* check device defines and use defaults */
 134:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __CM0_REV
 136:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #define __CM0_REV               0x0000U
 137:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 139:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 140:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 144:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 145:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 149:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #endif
 150:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 151:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 153:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 155:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     \li to specify the access to peripheral variables.
 157:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** */
 159:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #ifdef __cplusplus
 160:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #else
 162:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #endif
 164:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 167:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* following defines should be used for structure members */
 168:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 172:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group Cortex_M0 */
 173:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 174:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 175:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 176:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
 177:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  *                 Register Abstraction
 178:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   Core Register contain:
 179:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   - Core Register
 180:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   - Core NVIC Register
 181:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   - Core SCB Register
 182:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   - Core SysTick Register
 183:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 184:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 185:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** */
 188:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 189:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 190:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 191:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Core Register type definitions.
 193:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   @{
 194:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 195:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 196:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 197:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 199:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 200:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** {
 201:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   struct
 202:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   {
 203:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** } APSR_Type;
 211:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 212:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* APSR Register Definitions */
 213:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 216:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 219:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 222:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 225:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 226:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 227:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 229:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 230:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** {
 231:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   struct
 232:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   {
 233:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** } IPSR_Type;
 238:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 239:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* IPSR Register Definitions */
 240:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 243:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 244:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 245:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 247:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 248:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** {
 249:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   struct
 250:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   {
 251:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** } xPSR_Type;
 262:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 263:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* xPSR Register Definitions */
 264:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 267:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 270:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 273:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 276:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 279:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 282:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 283:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 284:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 286:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** typedef union
 287:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** {
 288:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   struct
 289:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   {
 290:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** } CONTROL_Type;
 296:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 297:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* CONTROL Register Definitions */
 298:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 301:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 303:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 304:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 305:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 306:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   @{
 309:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 310:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 311:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 312:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 314:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 315:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** {
 316:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED0[31U];
 318:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RSERVED1[31U];
 320:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED2[31U];
 322:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED3[31U];
 324:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED4[64U];
 325:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** }  NVIC_Type;
 327:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 328:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 330:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 331:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 332:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 333:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   @{
 336:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 337:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 338:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 339:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 341:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 342:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** {
 343:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED0;
 346:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****         uint32_t RESERVED1;
 350:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** } SCB_Type;
 353:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 354:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* SCB CPUID Register Definitions */
 355:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 358:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 361:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 364:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 367:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 370:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 374:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 377:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 380:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 383:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 386:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 389:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 392:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 395:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 398:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 402:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 405:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 408:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 411:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 414:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* SCB System Control Register Definitions */
 415:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 418:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 421:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 424:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 428:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 431:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 435:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 437:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 438:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 439:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 440:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   @{
 443:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 444:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 445:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 446:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 448:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** typedef struct
 449:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** {
 450:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** } SysTick_Type;
 455:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 456:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 460:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 463:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 466:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 469:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Reload Register Definitions */
 470:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 473:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Current Register Definitions */
 474:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 477:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 481:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 484:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 487:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 489:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 490:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 491:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_core_register
 492:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   @{
 496:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 497:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 499:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 500:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 501:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 502:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   @{
 505:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 506:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 507:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 508:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \return           Masked and shifted value.
 512:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** */
 513:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 515:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 516:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \return           Masked and shifted bit field value.
 520:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** */
 521:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 523:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 525:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 526:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 527:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup    CMSIS_core_register
 528:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   @{
 531:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 532:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 533:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* Memory mapping of Core Hardware */
 534:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 539:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 543:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 544:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /*@} */
 545:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 546:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 547:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 548:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /*******************************************************************************
 549:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  *                Hardware Abstraction Layer
 550:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   Core Function Interface contains:
 551:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   - Core NVIC Functions
 552:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   - Core SysTick Functions
 553:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   - Core Register Access Functions
 554:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  ******************************************************************************/
 555:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 556:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** */
 558:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 559:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 560:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 561:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 563:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   @{
 567:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 568:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 569:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 573:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #else
 575:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 589:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #endif
 593:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #else
 595:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 599:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 601:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 602:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 607:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 608:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 614:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 617:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 618:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Enable Interrupt
 619:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 622:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 623:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 624:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** {
  25              	 .loc 1 624 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 021C     	 mov r2,r0
  39 0008 FB1D     	 add r3,r7,#7
  40 000a 1A70     	 strb r2,[r3]
 625:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
  41              	 .loc 1 625 0
  42 000c FB1D     	 add r3,r7,#7
  43 000e 1B78     	 ldrb r3,[r3]
  44 0010 7F2B     	 cmp r3,#127
  45 0012 09D8     	 bhi .L1
 626:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   {
 627:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  46              	 .loc 1 627 0
  47 0014 064B     	 ldr r3,.L3
  48 0016 FA1D     	 add r2,r7,#7
  49 0018 1278     	 ldrb r2,[r2]
  50 001a 111C     	 mov r1,r2
  51 001c 1F22     	 mov r2,#31
  52 001e 0A40     	 and r2,r1
  53 0020 0121     	 mov r1,#1
  54 0022 9140     	 lsl r1,r1,r2
  55 0024 0A1C     	 mov r2,r1
  56 0026 1A60     	 str r2,[r3]
  57              	.L1:
 628:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   }
 629:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** }
  58              	 .loc 1 629 0
  59 0028 BD46     	 mov sp,r7
  60 002a 02B0     	 add sp,sp,#8
  61              	 
  62 002c 80BD     	 pop {r7,pc}
  63              	.L4:
  64 002e C046     	 .align 2
  65              	.L3:
  66 0030 00E100E0 	 .word -536813312
  67              	 .cfi_endproc
  68              	.LFE25:
  70              	 .section .text.__NVIC_SetPriority,"ax",%progbits
  71              	 .align 2
  72              	 .code 16
  73              	 .thumb_func
  75              	__NVIC_SetPriority:
  76              	.LFB31:
 630:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 631:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 632:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 633:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Interrupt Enable status
 634:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \return             1  Interrupt is enabled.
 638:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 639:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 640:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** {
 642:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   {
 644:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   }
 646:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   else
 647:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   {
 648:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     return(0U);
 649:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   }
 650:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** }
 651:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 652:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 653:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 654:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Disable Interrupt
 655:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 658:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 659:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** {
 661:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   {
 663:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     __DSB();
 665:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     __ISB();
 666:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   }
 667:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** }
 668:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 669:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 670:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 671:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Get Pending Interrupt
 672:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \return             1  Interrupt status is pending.
 676:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 677:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 678:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** {
 680:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   {
 682:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   }
 684:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   else
 685:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   {
 686:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     return(0U);
 687:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   }
 688:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** }
 689:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 690:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 691:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 692:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Pending Interrupt
 693:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 696:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 697:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** {
 699:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   {
 701:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   }
 703:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** }
 704:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 705:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 706:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 707:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Clear Pending Interrupt
 708:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \note    IRQn must not be negative.
 711:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 712:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** {
 714:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   {
 716:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   }
 718:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** }
 719:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 720:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** 
 721:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** /**
 722:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \brief   Set Interrupt Priority
 723:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****            or negative to specify a processor exception.
 726:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \param [in]  priority  Priority to set.
 728:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****  */
 730:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 731:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** {
  77              	 .loc 1 731 0
  78              	 .cfi_startproc
  79 0000 B0B5     	 push {r4,r5,r7,lr}
  80              	.LCFI3:
  81              	 .cfi_def_cfa_offset 16
  82              	 .cfi_offset 4,-16
  83              	 .cfi_offset 5,-12
  84              	 .cfi_offset 7,-8
  85              	 .cfi_offset 14,-4
  86 0002 82B0     	 sub sp,sp,#8
  87              	.LCFI4:
  88              	 .cfi_def_cfa_offset 24
  89 0004 00AF     	 add r7,sp,#0
  90              	.LCFI5:
  91              	 .cfi_def_cfa_register 7
  92 0006 021C     	 mov r2,r0
  93 0008 3960     	 str r1,[r7]
  94 000a FB1D     	 add r3,r7,#7
  95 000c 1A70     	 strb r2,[r3]
 732:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
  96              	 .loc 1 732 0
  97 000e FB1D     	 add r3,r7,#7
  98 0010 1B78     	 ldrb r3,[r3]
  99 0012 7F2B     	 cmp r3,#127
 100 0014 27D8     	 bhi .L6
 733:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   {
 734:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 101              	 .loc 1 734 0
 102 0016 2D4C     	 ldr r4,.L8
 103 0018 FB1D     	 add r3,r7,#7
 104 001a 1B78     	 ldrb r3,[r3]
 105 001c 5BB2     	 sxtb r3,r3
 106 001e 9B08     	 lsr r3,r3,#2
 107 0020 2A49     	 ldr r1,.L8
 108 0022 FA1D     	 add r2,r7,#7
 109 0024 1278     	 ldrb r2,[r2]
 110 0026 52B2     	 sxtb r2,r2
 111 0028 9208     	 lsr r2,r2,#2
 112 002a C032     	 add r2,r2,#192
 113 002c 9200     	 lsl r2,r2,#2
 114 002e 5258     	 ldr r2,[r2,r1]
 115 0030 F91D     	 add r1,r7,#7
 116 0032 0978     	 ldrb r1,[r1]
 117 0034 081C     	 mov r0,r1
 118 0036 0321     	 mov r1,#3
 119 0038 0140     	 and r1,r0
 120 003a C900     	 lsl r1,r1,#3
 121 003c 081C     	 mov r0,r1
 122 003e FF21     	 mov r1,#255
 123 0040 8140     	 lsl r1,r1,r0
 124 0042 C943     	 mvn r1,r1
 125 0044 1140     	 and r1,r2
 735:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 126              	 .loc 1 735 0
 127 0046 3A68     	 ldr r2,[r7]
 128 0048 9201     	 lsl r2,r2,#6
 129 004a FF20     	 mov r0,#255
 130 004c 0240     	 and r2,r0
 131 004e F81D     	 add r0,r7,#7
 132 0050 0078     	 ldrb r0,[r0]
 133 0052 051C     	 mov r5,r0
 134 0054 0320     	 mov r0,#3
 135 0056 2840     	 and r0,r5
 136 0058 C000     	 lsl r0,r0,#3
 137 005a 8240     	 lsl r2,r2,r0
 734:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 138              	 .loc 1 734 0
 139 005c 0A43     	 orr r2,r1
 140 005e C033     	 add r3,r3,#192
 141 0060 9B00     	 lsl r3,r3,#2
 142 0062 1A51     	 str r2,[r3,r4]
 143 0064 2EE0     	 b .L5
 144              	.L6:
 736:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   }
 737:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   else
 738:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   {
 739:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 145              	 .loc 1 739 0
 146 0066 1A4C     	 ldr r4,.L8+4
 147 0068 FB1D     	 add r3,r7,#7
 148 006a 1B78     	 ldrb r3,[r3]
 149 006c 1A1C     	 mov r2,r3
 150 006e 0F23     	 mov r3,#15
 151 0070 1340     	 and r3,r2
 152 0072 083B     	 sub r3,r3,#8
 153 0074 9908     	 lsr r1,r3,#2
 154 0076 164A     	 ldr r2,.L8+4
 155 0078 FB1D     	 add r3,r7,#7
 156 007a 1B78     	 ldrb r3,[r3]
 157 007c 181C     	 mov r0,r3
 158 007e 0F23     	 mov r3,#15
 159 0080 0340     	 and r3,r0
 160 0082 083B     	 sub r3,r3,#8
 161 0084 9B08     	 lsr r3,r3,#2
 162 0086 0633     	 add r3,r3,#6
 163 0088 9B00     	 lsl r3,r3,#2
 164 008a D318     	 add r3,r2,r3
 165 008c 5B68     	 ldr r3,[r3,#4]
 166 008e FA1D     	 add r2,r7,#7
 167 0090 1278     	 ldrb r2,[r2]
 168 0092 101C     	 mov r0,r2
 169 0094 0322     	 mov r2,#3
 170 0096 0240     	 and r2,r0
 171 0098 D200     	 lsl r2,r2,#3
 172 009a 101C     	 mov r0,r2
 173 009c FF22     	 mov r2,#255
 174 009e 8240     	 lsl r2,r2,r0
 175 00a0 D243     	 mvn r2,r2
 176 00a2 1A40     	 and r2,r3
 740:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 177              	 .loc 1 740 0
 178 00a4 3B68     	 ldr r3,[r7]
 179 00a6 9B01     	 lsl r3,r3,#6
 180 00a8 FF20     	 mov r0,#255
 181 00aa 0340     	 and r3,r0
 182 00ac F81D     	 add r0,r7,#7
 183 00ae 0078     	 ldrb r0,[r0]
 184 00b0 051C     	 mov r5,r0
 185 00b2 0320     	 mov r0,#3
 186 00b4 2840     	 and r0,r5
 187 00b6 C000     	 lsl r0,r0,#3
 188 00b8 8340     	 lsl r3,r3,r0
 739:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 189              	 .loc 1 739 0
 190 00ba 1A43     	 orr r2,r3
 191 00bc 8B1D     	 add r3,r1,#6
 192 00be 9B00     	 lsl r3,r3,#2
 193 00c0 E318     	 add r3,r4,r3
 194 00c2 5A60     	 str r2,[r3,#4]
 195              	.L5:
 741:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h ****   }
 742:N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Include\core_cm0.h **** }
 196              	 .loc 1 742 0
 197 00c4 BD46     	 mov sp,r7
 198 00c6 02B0     	 add sp,sp,#8
 199              	 
 200 00c8 B0BD     	 pop {r4,r5,r7,pc}
 201              	.L9:
 202 00ca C046     	 .align 2
 203              	.L8:
 204 00cc 00E100E0 	 .word -536813312
 205 00d0 00ED00E0 	 .word -536810240
 206              	 .cfi_endproc
 207              	.LFE31:
 209              	 .section .text.XMC_VADC_GLOBAL_BackgroundTriggerConversion,"ax",%progbits
 210              	 .align 2
 211              	 .code 16
 212              	 .thumb_func
 214              	XMC_VADC_GLOBAL_BackgroundTriggerConversion:
 215              	.LFB113:
 216              	 .file 2 "N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc/xmc_vadc.h"
   1:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2017-08-14
   4:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
   7:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.                        
  11:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                             
  12:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * following conditions are met:   
  14:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  15:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer.                        
  17:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  18:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  21:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  24:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  32:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
  35:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  37:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  38:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  39:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  40:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  41:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *      
  42:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  43:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   
  45:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  46:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  51:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  52:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  54:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  57:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  61:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  70:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  71:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  72:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  73:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  74:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  75:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  80:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  81:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  82:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  87:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  88:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  89:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  90:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  91:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  92:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR. 
  93:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  94:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-06-17:
  95:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
  96:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  97:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs added are:
  98:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  99:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-02-06:
 107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new functions to remove channels from background request source, XMC_VADC_GLOBAL_Bac
 108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-06-24:
 110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new function XMC_VADC_GLOBAL_SHS_SetAnalogReference() for XMC1 family
 111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-08-14:
 113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GLOBAL_DETAILED_RESULT_t
 114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *       You can cast the return of XMC_VADC_GLOBAL_GetDetailedResult() to a varible of type XMC_VA
 115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_SetAnalogReference() to update AREF bitfield correctly
 116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond 
 118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
 122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_common.h>
 128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_scu.h>
 129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
 130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
 146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   
 386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   
 413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 634:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 635:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 636:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 637:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 638:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 639:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 640:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 641:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 642:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 643:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 644:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 645:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 646:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 647:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 648:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 649:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 650:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 651:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 652:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 653:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 654:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 655:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 656:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 657:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 658:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 659:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 660:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 661:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 662:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 663:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 664:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 665:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 666:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 667:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 668:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 669:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 670:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 671:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 672:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 673:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 674:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 675:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 676:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 677:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 678:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 679:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 680:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 681:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 682:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 683:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 684:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 685:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 686:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 687:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 688:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 689:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 690:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 691:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 692:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 693:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 694:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 695:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 696:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 697:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 698:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** */
 699:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 700:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 701:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 704:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 705:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 706:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 707:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 708:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 709:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 710:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 711:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 712:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 713:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 714:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 715:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
 716:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 717:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_AREF
 718:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 719:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_EXTERNAL_VDD_UPPER_RANGE = 0 << SHS_SHSCFG_AREF_Pos, /**< External refer
 720:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_UPPER_RANGE = 2 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 721:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_LOWER_RANGE = 3 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 722:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_AREF_t;
 723:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 724:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 725:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 726:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 727:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 728:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 729:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 730:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 731:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 732:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 733:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 734:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 735:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 736:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 737:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 738:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 739:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 740:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 741:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 742:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 743:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 744:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 745:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 746:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 747:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 748:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 749:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 750:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 751:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 752:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 753:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 754:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 755:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 756:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 757:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 758:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 759:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 760:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 761:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 762:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 763:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 764:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 765:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 766:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 767:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 768:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 769:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 770:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 771:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 772:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 773:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 774:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 775:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the ready signal selection
 776:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 777:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 778:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 779:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 780:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 781:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 782:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 783:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 784:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SYNCTR_EVAL_t;
 785:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 786:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 787:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 788:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 789:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 790:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 791:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma push
 792:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma anon_unions
 793:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 794:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning 586
 795:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 796:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 797:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 798:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 799:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 800:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 801:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 802:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 803:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 804:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 805:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 806:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 807:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 808:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 809:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 810:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 811:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 812:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 813:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 814:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 815:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 816:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 817:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 818:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 819:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 820:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 821:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 822:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 823:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 824:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 825:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 826:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 827:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 828:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 829:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 830:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 831:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 832:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 833:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asctrl;
 834:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 835:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 836:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 837:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 838:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 839:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 2;
 840:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 841:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 842:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 843:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 844:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 845:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 26;
 846:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 847:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asmr;
 848:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 849:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 850:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 851:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 852:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 853:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 854:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 855:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 856:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 857:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 858:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 859:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 860:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 861:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 862:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 863:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 864:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 865:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 866:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 2;
 867:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 868:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 869:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 870:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 871:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 872:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 873:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 874:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 875:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 876:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 4;
 877:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 878:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 879:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 880:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 881:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 6;
 882:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 883:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 884:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 885:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 886:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t chctr;
 887:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 888:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 889:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 890:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 891:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 892:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 8;
 893:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 894:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 895:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 896:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 897:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 898:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 899:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 900:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 901:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 902:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 903:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 904:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 905:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 906:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 907:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 908:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 909:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 910:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 911:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 912:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 913:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 914:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 915:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 916:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 917:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 918:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 12;
 919:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 920:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bfl;
 921:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 922:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 923:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 924:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 925:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 926:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 927:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 928:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 929:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 930:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 931:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 932:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 933:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 934:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 935:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t                           : 16;
 936:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 937:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bflc;
 938:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 939:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 940:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 941:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 942:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 943:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 944:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 945:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 946:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 947:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 948:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 949:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 950:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 951:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 952:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 953:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 954:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 955:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 956:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 957:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 958:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 959:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 24;
 960:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 961:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 962:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qinr0;
 963:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 964:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 965:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 966:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 967:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 968:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 969:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 970:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 971:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 972:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 973:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 974:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 975:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 976:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 977:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 978:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 979:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 980:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 981:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 982:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 983:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 984:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 985:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 986:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 987:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 988:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 989:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 990:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 991:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 992:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 993:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 994:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 995:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 996:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
 997:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 998:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 999:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qctrl0;
1000:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1001:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1002:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1003:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1004:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1005:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 2;
1006:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
1007:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 29;
1008:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1009:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qmr0;
1010:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1011:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
1012:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1013:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1014:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1015:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
1016:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1017:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1018:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
1019:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1020:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1021:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1022:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1023:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1024:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1025:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1026:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1027:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1028:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1029:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1030:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1031:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1032:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1033:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1034:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1035:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1036:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1037:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1038:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 16;
1039:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1040:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1041:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globiclass;
1042:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1043:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1044:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1045:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1046:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1047:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1048:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1049:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1050:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1051:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1052:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1053:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1054:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1055:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1056:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
1057:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 2;
1058:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
1059:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
1060:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 5;
1061:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 17;
1062:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1063:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globcfg;
1064:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1065:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1066:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1067:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1068:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1069:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1070:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1071:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1072:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1073:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1074:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1075:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1076:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1077:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1078:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1079:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1080:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1081:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1082:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1083:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globbound;
1084:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1085:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1086:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1087:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1088:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1089:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1090:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1091:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1092:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1093:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1094:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1095:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1096:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1097:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1098:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1099:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 6;
1100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globrcr;
1103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 2;
1110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 28;
1112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t clc;
1114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_iclass0;
1142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 13;
1159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 5;
1164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 1;
1173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 2;
1175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_bound;
1201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 4;
1207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 1;
1209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 24;
1212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 2;
1234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_rcr;
1240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :6;
1296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :10;
1298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif      
1299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :20;
1301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed global result structure
1313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_DETAILED_RESULT
1315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t group_number             :4;   /**< Indicates the group to which the channel_number 
1322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_DETAILED_RESULT_t;
1332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed channel result structure
1335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_DETAILED_RESULT
1337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DETAILED_RESULT_t;
1354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
1355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma pop
1359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning restore
1361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
1591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1634:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1635:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1636:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1637:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1638:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1639:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1640:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1641:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1642:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1643:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1644:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1645:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1646:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1647:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1648:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1649:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1650:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1651:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1652:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1653:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1654:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1655:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1656:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1657:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1658:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1659:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1660:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1661:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1662:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1663:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1664:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1665:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1666:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1667:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1668:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1669:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1670:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1671:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1672:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1673:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1674:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1675:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1676:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1677:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1678:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1679:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1680:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1681:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1682:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1683:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1684:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1685:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1686:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1687:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1688:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1689:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1690:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1691:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1692:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1693:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1694:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1695:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1696:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1697:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1698:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1699:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1700:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1701:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1704:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1705:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1706:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1707:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1708:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1709:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1710:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1711:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1712:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1713:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1714:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1715:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1716:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1717:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1718:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1719:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
1720:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1721:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1722:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1723:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1724:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1725:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1726:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1727:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const uint16_t boundary_value); 
1728:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1729:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1730:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1731:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1732:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1733:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1734:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1735:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1736:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1737:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1738:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1739:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1740:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1741:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1742:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1743:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b emuxif.
1744:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1745:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1746:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1747:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1748:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1749:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1750:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1751:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1752:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1753:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1754:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1755:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1756:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1757:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1758:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1759:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1760:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1761:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1762:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @note You can cast the return to a varible of type XMC_VADC_GLOBAL_DETAILED_RESULT_t to easily a
1763:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1764:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1765:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1766:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1767:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1768:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1769:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1770:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1771:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  return(global_ptr->GLOBRES);
1772:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1773:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1774:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1775:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1776:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1777:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1778:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1779:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1780:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1781:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1782:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1783:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1784:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1785:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1786:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1787:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1788:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1789:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1790:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1791:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1792:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1793:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1794:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1795:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1796:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1797:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1798:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1799:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1800:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1801:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1802:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1803:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1804:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1805:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1806:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1807:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1808:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1809:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1810:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1811:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1812:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1813:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1814:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1815:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1816:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1817:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1818:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1819:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1820:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1821:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1822:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1823:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1824:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1825:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1826:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1827:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1828:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1829:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1830:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1831:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1832:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1833:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1834:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1835:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1836:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1837:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1838:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1839:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1840:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1841:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \a event_type.
1842:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1843:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1844:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1845:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1846:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1847:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1848:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1849:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1850:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1851:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1852:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1853:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1854:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1855:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1856:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1857:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1858:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1859:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1860:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1861:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1862:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1863:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1864:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1865:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1866:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1867:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1868:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1869:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1870:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1871:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1872:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1873:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1874:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1875:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1876:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1877:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1878:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1879:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1880:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1881:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1882:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1883:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1884:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1885:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1886:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1887:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1888:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1889:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1890:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1891:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1892:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1893:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1894:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1895:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1896:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1897:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1898:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1899:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1900:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1901:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1902:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1903:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1904:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1905:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1906:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * corresponding \a sr line.
1907:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1908:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1909:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1910:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1911:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1912:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1913:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1914:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1915:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1916:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1917:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1918:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1919:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1920:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1921:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1922:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1923:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1924:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1925:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1926:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1927:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1928:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1929:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1930:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1931:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1932:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param aref    Analog reference used for conversions. Refer @ref XMC_VADC_GLOBAL_SHS_AREF_t enum
1933:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1934:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1935:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1936:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1937:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
1938:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1939:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1940:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1941:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1942:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetAnalogReference(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1943:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             const XMC_VADC_GLOBAL_SHS_AREF_t aref)
1944:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1945:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1946:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1947:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1948:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref | SHS_SHS
1949:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1950:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1951:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1952:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1953:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1954:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1955:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1956:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return None
1957:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1958:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1959:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1960:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1961:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * The stepper sequence is configured using this API.
1962:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1963:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1964:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1965:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1966:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1967:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1968:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1969:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1970:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1971:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1972:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1973:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1974:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1975:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1976:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1977:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1978:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1979:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1980:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1981:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1982:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *              returns false if the analog converter is powered down
1983:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1984:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1985:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the converter status.<BR>\n
1986:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1987:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1988:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1989:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1990:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1991:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1992:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1993:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1994:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1995:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
1996:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1997:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1998:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1999:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2000:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2001:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2002:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2003:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2004:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2005:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2006:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2007:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2008:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
2009:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2010:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2011:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2012:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2013:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2014:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
2015:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2016:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2017:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2018:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
2019:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2020:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2021:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2022:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2023:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2024:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
2025:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2026:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2027:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2028:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2029:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2030:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
2031:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2032:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2033:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2034:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2035:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
2036:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
2037:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2038:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2039:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2040:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2041:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
2042:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2043:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
2044:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
2045:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2046:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2047:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2048:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2049:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2050:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
2051:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint8_t sst_value);
2052:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2053:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2054:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2055:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2056:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
2057:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
2058:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2059:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2060:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2061:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
2062:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
2063:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the Sample and hold converter.
2064:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2065:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2066:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2067:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2068:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
2069:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2070:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
2071:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2072:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
2073:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
2074:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2075:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
2076:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
2077:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2078:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2079:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2080:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2081:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_value gain value possible
2082:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
2083:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2084:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
2085:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2086:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2087:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2088:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
2089:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
2090:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2091:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2092:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2093:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2094:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2095:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t gain_value,
2096:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
2097:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t ch_num);
2098:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2099:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
2103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
2104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
2108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
2109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
2110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
2111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        uint32_t max_calibration_time)
2117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          XMC_VADC_GROUP_INDEX_t group_num);
2140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                           XMC_VADC_GROUP_INDEX_t group_num);
2155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
2172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
2190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    uint8_t offset_calibration_value);
2192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_GROUP_INDEX_t group_num,
2212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
2213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                            uint8_t ch_num);
2214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               XMC_VADC_SHS_LOOP_CH_t loop_select)
2230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                XMC_VADC_SHS_LOOP_CH_t loop_select)
2254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  program.
2279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter must be turned on.
2345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * in these channels.
2403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group waiting for ready signal
2412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_waiting_group  The VADC Group which expects a ready signal to start it's conversion.
2413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_origin_group  The VADC Group from which the eval_waiting_group will expect a ready s
2414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets the ready signal in the eval_waiting_group .<BR>\n
2418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion all the slaves participating need to configure the ready signal.
2419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A slave group will also need to configure the ready signals coming from the other slave groups.
2420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync.slave's EVAL Bits (GxSYNCTR.EVALy).
2421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
2426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_waiting_group,
2427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_origin_group);
2428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *         uint32_t EVAL bits for the group
2434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Get the Eval bits of the group.<BR>\n
2437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would return the Sync EVAL Bits (GxSYNCTR.EVALy) which can be used to set in 
2439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr)
2444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return( group_ptr->SYNCTR & eval_mask);
2454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_mask  mask to configure the eval bits
2459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Use XMC_VADC_SYNCTR_EVAL_t to create the mask.
2460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the Eval bits of the group.<BR>\n
2464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync EVAL Bits (GxSYNCTR.EVALy).
2466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_SetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr, uint32_t 
2471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR &= ~(eval_mask);
2481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR |= mask;
2482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the slaves.
2497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sampling + converting.
2527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, 
2555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary0, 
2556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
2569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint16_t boundary_value); 
2576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr, 
2593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint32_t sr_num, 
2594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_IRQ_t type);
2595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                            const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t   emux_config;
2615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
2619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
2620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
2622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
2623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
2624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
2625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
2628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
2630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2634:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2635:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2636:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2637:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2638:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param node    Service Request node Id
2639:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2640:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2641:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2642:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2643:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2644:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2645:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2646:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2647:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2648:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2649:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2650:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2651:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2652:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const uint8_t boundary_flag_num,
2653:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const XMC_VADC_BOUNDARY_NODE_t node);
2654:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2655:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2656:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2657:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2658:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2659:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2660:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2661:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2662:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2663:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2664:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2665:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2666:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2667:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2668:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2669:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2670:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2671:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2672:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2673:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2674:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2675:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2676:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2677:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2678:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2679:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2680:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2681:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2682:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2683:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2684:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2685:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2686:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2687:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2688:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const XMC_VADC_CHANNEL_CONV_t c
2689:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2690:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2691:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2692:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected", 
2693:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2694:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2695:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2696:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2697:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
2698:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2699:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   }
2700:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2701:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return (input_value);
2702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2704:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2705:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2706:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2707:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2708:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2709:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2710:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2711:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2712:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2713:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2714:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2715:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2716:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2717:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2718:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2719:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2720:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2721:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2722:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2723:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2724:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2725:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2726:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2727:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2728:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2729:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2730:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2731:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2732:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2733:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2734:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2735:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2736:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2737:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2738:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2739:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2740:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2741:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2742:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2743:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2744:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
2745:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2746:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2747:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2748:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2749:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2750:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2751:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2752:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2753:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2754:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2755:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2756:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2757:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2758:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2759:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2760:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2761:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2762:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2763:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2764:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2765:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
2766:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2767:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2768:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2769:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2770:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2771:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2772:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2773:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2774:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2775:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2776:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2777:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2778:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2779:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2780:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2781:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2782:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2783:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2784:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2785:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2786:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2787:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2788:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2789:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2790:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2791:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2792:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2793:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2794:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2795:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2796:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2797:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2798:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2799:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2800:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2801:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2802:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2803:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2804:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2805:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2806:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2807:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2808:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2809:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2810:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2811:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2812:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2813:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2814:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2815:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2816:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2817:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2818:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2819:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2820:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2821:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2822:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2823:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2824:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2825:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2826:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2827:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2828:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2829:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2830:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2831:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2832:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2833:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2834:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2835:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2836:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2837:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2838:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2839:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2840:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2841:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2842:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2843:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2844:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2845:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2846:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2847:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2848:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2849:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2850:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2851:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2852:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2853:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2854:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2855:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2856:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2857:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2858:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2859:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2860:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2861:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2862:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2863:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2864:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2865:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2866:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2867:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2868:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
2869:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2870:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2871:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2872:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2873:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2874:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2875:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2876:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2877:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2878:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2879:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2880:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2881:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2882:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2883:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2884:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2885:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2886:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2887:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2888:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2889:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2890:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2891:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2892:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2893:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2894:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2895:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2896:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2897:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2898:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2899:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2900:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2901:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2902:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2903:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2904:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2905:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2906:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2907:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2908:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2909:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2910:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2911:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2912:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2913:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2914:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2915:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2916:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2917:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2918:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2919:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2920:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2921:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2922:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2923:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2924:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2925:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2926:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2927:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2928:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2929:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2930:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2931:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2932:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2933:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2934:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2935:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2936:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2937:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2938:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2939:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2940:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2941:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2942:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2943:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2944:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2945:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2946:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2947:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2948:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2949:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2950:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2951:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2952:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2953:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2954:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2955:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2956:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2957:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2958:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2959:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2960:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2961:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2962:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2963:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
2964:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
2965:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
2966:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2967:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2968:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2969:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
2970:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2971:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
2972:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
2973:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
2974:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number", 
2975:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
2976:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
2977:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
2978:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2979:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2980:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2981:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
2982:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
2983:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
2984:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
2985:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
2986:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2987:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2988:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2989:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2990:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
2991:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
2992:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
2993:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2994:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2995:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2996:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
2997:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2998:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
2999:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3000:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
3001:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
3002:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3003:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3004:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3005:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3006:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3007:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3008:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3009:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3010:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3011:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3012:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
3013:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3014:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3015:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3016:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
3017:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3018:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3019:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
3020:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3021:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
3022:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3023:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3024:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3025:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
3026:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3027:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
3028:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3029:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3030:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3031:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
3032:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return  <BR>
3033:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3034:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
3035:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3036:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3037:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
3038:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3039:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3040:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3041:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
3042:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3043:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3044:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
3045:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3046:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
3047:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3048:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3049:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3050:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3051:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3052:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3053:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3054:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3055:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
3056:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3057:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3058:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3059:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3060:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3061:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3062:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3063:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3064:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3065:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
3066:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3067:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3068:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3069:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3070:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3071:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3072:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3073:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3074:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
3075:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3076:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3077:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3078:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3079:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
3080:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3081:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3082:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3083:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3084:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
3085:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3086:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3087:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3088:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3089:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3090:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3091:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3092:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3093:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3094:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3095:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
3096:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
3097:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3098:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3099:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
3102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
3104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
3105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr    Service Request Id
3110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
3115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
3116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
3117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
3118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
3123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
3131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
3132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
3133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
3134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
3137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
3141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
3143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
3152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
3153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
3154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
3155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
3156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
3159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
3165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
3170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
3175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
3176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
3177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
3178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
3183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the scan request source event .<BR>
3191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the scan request source.
3192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableEvent(XMC_VADC_GROUP_t *const group_ptr)
3199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
3201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= ((uint32_t)VADC_G_ASMR_ENSI_Msk);
3203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the scan request source event .<BR>
3212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the scan request source.
3213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableEvent(XMC_VADC_GROUP_t *const group_ptr)
3220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
3222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENSI_Msk);
3224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
3229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
3233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
3234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
3235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
3236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  conversion request from background request source
3248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
3266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     from background request source
3271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
3288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             XMC_VADC_GATEMODE_t mode_sel)
3367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 217              	 .loc 2 3439 0
 218              	 .cfi_startproc
 219 0000 80B5     	 push {r7,lr}
 220              	.LCFI6:
 221              	 .cfi_def_cfa_offset 8
 222              	 .cfi_offset 7,-8
 223              	 .cfi_offset 14,-4
 224 0002 82B0     	 sub sp,sp,#8
 225              	.LCFI7:
 226              	 .cfi_def_cfa_offset 16
 227 0004 00AF     	 add r7,sp,#0
 228              	.LCFI8:
 229              	 .cfi_def_cfa_register 7
 230 0006 7860     	 str r0,[r7,#4]
3440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 231              	 .loc 2 3441 0
 232 0008 7A68     	 ldr r2,[r7,#4]
 233 000a 8123     	 mov r3,#129
 234 000c 9B00     	 lsl r3,r3,#2
 235 000e D358     	 ldr r3,[r2,r3]
 236 0010 8022     	 mov r2,#128
 237 0012 9200     	 lsl r2,r2,#2
 238 0014 1A43     	 orr r2,r3
 239 0016 111C     	 mov r1,r2
 240 0018 7A68     	 ldr r2,[r7,#4]
 241 001a 8123     	 mov r3,#129
 242 001c 9B00     	 lsl r3,r3,#2
 243 001e D150     	 str r1,[r2,r3]
3442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
 244              	 .loc 2 3442 0
 245 0020 BD46     	 mov sp,r7
 246 0022 02B0     	 add sp,sp,#8
 247              	 
 248 0024 80BD     	 pop {r7,pc}
 249              	 .cfi_endproc
 250              	.LFE113:
 252 0026 C046     	 .section .text.XMC_VADC_GLOBAL_BackgroundAddChannelToSequence,"ax",%progbits
 253              	 .align 2
 254              	 .code 16
 255              	 .thumb_func
 257              	XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:
 258              	.LFB114:
3443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * current scan sequence.
3456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t grp_num,
3482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t ch_num)
3483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 259              	 .loc 2 3483 0
 260              	 .cfi_startproc
 261 0000 80B5     	 push {r7,lr}
 262              	.LCFI9:
 263              	 .cfi_def_cfa_offset 8
 264              	 .cfi_offset 7,-8
 265              	 .cfi_offset 14,-4
 266 0002 84B0     	 sub sp,sp,#16
 267              	.LCFI10:
 268              	 .cfi_def_cfa_offset 24
 269 0004 00AF     	 add r7,sp,#0
 270              	.LCFI11:
 271              	 .cfi_def_cfa_register 7
 272 0006 F860     	 str r0,[r7,#12]
 273 0008 B960     	 str r1,[r7,#8]
 274 000a 7A60     	 str r2,[r7,#4]
3484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 275              	 .loc 2 3489 0
 276 000c FB68     	 ldr r3,[r7,#12]
 277 000e BA68     	 ldr r2,[r7,#8]
 278 0010 6032     	 add r2,r2,#96
 279 0012 9200     	 lsl r2,r2,#2
 280 0014 D258     	 ldr r2,[r2,r3]
 281 0016 7B68     	 ldr r3,[r7,#4]
 282 0018 0121     	 mov r1,#1
 283 001a 9940     	 lsl r1,r1,r3
 284 001c 0B1C     	 mov r3,r1
 285 001e 1A43     	 orr r2,r3
 286 0020 111C     	 mov r1,r2
 287 0022 FB68     	 ldr r3,[r7,#12]
 288 0024 BA68     	 ldr r2,[r7,#8]
 289 0026 6032     	 add r2,r2,#96
 290 0028 9200     	 lsl r2,r2,#2
 291 002a D150     	 str r1,[r2,r3]
3490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
 292              	 .loc 2 3490 0
 293 002c BD46     	 mov sp,r7
 294 002e 04B0     	 add sp,sp,#16
 295              	 
 296 0030 80BD     	 pop {r7,pc}
 297              	 .cfi_endproc
 298              	.LFE114:
 300 0032 C046     	 .section .text.XMC_VADC_GROUP_ResultInit,"ax",%progbits
 301              	 .align 2
 302              	 .code 16
 303              	 .thumb_func
 305              	XMC_VADC_GROUP_ResultInit:
 306              	.LFB142:
3491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_mask)
3515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel to the background scan sequence.<BR>\n
3532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundRemoveChannelFromSequence(XMC_VADC_GLOBAL_t *const g
3540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                          const uint32_t grp_num,
3541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                          const uint32_t ch_num)
3542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~((uint32_t)1 << ch_num);
3549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes multiple channels to the scan sequence.<BR>\n
3564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndRemoveMultipleChannels(XMC_VADC_GLOBAL_t *const global_
3572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                    const uint32_t grp_num,
3573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                    const uint32_t ch_mask)
3574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] &= (uint32_t)~ch_mask;
3578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_num)
3601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return  <BR>
3613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3634:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3635:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3636:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3637:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3638:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3639:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3640:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3641:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3642:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3643:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3644:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3645:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3646:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3647:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3648:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3649:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3650:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3651:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3652:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3653:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3654:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3655:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3656:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3657:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3658:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3659:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3660:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3661:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3662:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3663:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3664:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3665:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3666:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3667:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3668:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3669:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3670:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3671:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3672:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3673:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3674:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3675:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3676:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3677:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3678:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3679:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3680:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3681:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3682:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3683:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3684:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3685:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3686:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3687:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3688:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3689:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3690:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3691:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3692:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3693:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3694:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3695:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3696:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3697:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3698:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3699:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3700:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3701:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3704:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Module Pointer", (global_ptr ==
3705:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3706:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3707:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3708:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3709:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3710:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3711:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3712:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3713:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3714:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3715:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3716:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3717:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3718:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3719:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3720:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3721:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3722:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3723:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3724:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3725:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3726:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Module Pointer", (global_ptr =
3727:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3728:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3729:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3730:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3731:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3732:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3733:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3734:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3735:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3736:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3737:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the background scan request source event .<BR>
3738:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the background scan request sou
3739:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3740:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3741:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3742:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3743:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptN
3744:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3745:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3746:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3747:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableEvent:Wrong Module Pointer", (global_ptr == VADC))
3748:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3749:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= ((uint32_t)VADC_BRSMR_ENSI_Msk);
3750:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3751:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3752:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3753:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr     Pointer to the VADC module
3754:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3755:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3756:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3757:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3758:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the background scan request source event .<BR>
3759:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the background scan request s
3760:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3761:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3762:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3763:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3764:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNo
3765:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3766:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3767:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3768:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableEvent:Wrong Module Pointer", (global_ptr == VADC))
3769:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3770:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENSI_Msk);
3771:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3772:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3773:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3774:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3775:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3776:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3777:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3778:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3779:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3780:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3781:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3782:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3783:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3784:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3785:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3786:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3787:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3788:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * source.
3789:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3790:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3791:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3792:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3793:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3794:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3795:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3796:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3797:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3798:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3799:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3800:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3801:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3802:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3803:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3804:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3805:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3806:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3807:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3808:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3809:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3810:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3811:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3812:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3813:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3814:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
3815:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3816:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3817:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3818:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3819:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3820:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3821:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3822:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3823:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3824:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3825:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3826:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3827:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3828:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3829:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3830:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3831:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3832:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3833:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3834:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3835:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
3836:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3837:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3838:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3839:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3840:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3841:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3842:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3843:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3844:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3845:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3846:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3847:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3848:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3849:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3850:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3851:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3852:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3853:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3854:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3855:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3856:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3857:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3858:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3859:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3860:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3861:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3862:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3863:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3864:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3865:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3866:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3867:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3868:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3869:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3870:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3871:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3872:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3873:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3874:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3875:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3876:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3877:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3878:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, 
3879:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3880:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3881:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3882:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3883:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3884:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3885:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3886:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3887:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3888:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3889:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3890:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3891:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3892:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3893:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3894:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3895:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3896:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3897:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3898:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3899:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3900:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3901:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3902:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3903:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3904:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3905:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3906:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3907:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3908:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3909:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3910:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3911:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3912:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3913:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3914:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3915:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3916:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3917:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3918:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3919:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3920:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3921:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3922:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3923:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3924:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3925:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3926:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3927:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3928:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3929:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3930:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3931:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3932:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3933:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3934:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3935:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3936:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3937:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3938:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3939:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3940:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3941:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
3942:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3943:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3944:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3945:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3946:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3947:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3948:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3949:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3950:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3951:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3952:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3953:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3954:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3955:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3956:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3957:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3958:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3959:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3960:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3961:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <ul>
3962:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3963:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
3964:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * </ul>
3965:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3966:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3967:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3968:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3969:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
3970:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
3971:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3972:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
3973:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
3974:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3975:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3976:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3977:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3978:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
3979:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3980:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3981:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3982:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
3983:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
3984:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
3985:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
3986:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
3987:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to determine the queue length.
3988:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3989:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3990:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3991:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3992:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
3993:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
3994:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3995:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3996:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3997:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3998:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3999:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4000:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
4001:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
4002:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4003:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
4004:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue sequence.
4005:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4006:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4007:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
4008:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4009:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
4010:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4011:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4012:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4013:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4014:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4015:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4016:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4017:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
4018:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
4019:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
4020:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
4021:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * all the entries are removed from the queue.
4022:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4023:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4024:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
4025:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4026:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
4027:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
4028:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
4029:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
4030:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4031:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
4032:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
4033:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     /* Wait until the queue is indeed flushed */
4034:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   }
4035:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
4036:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4037:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4038:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4039:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4040:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4041:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4042:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4043:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4044:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the next valid channel in the queue buffer.<BR>\n
4045:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue entry lined up for conversion can be removed and replaced by its successor. The call to 
4046:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * first check if a valid queue entry is present in the queue backup register if present would clea
4047:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If no valid queue entries are present in the backup then the first channel
4048:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * present in the queue buffer would be cleared.
4049:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to clear a
4050:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel from the queue.
4051:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4052:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4053:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
4054:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4055:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr);
4056:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4057:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4058:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4059:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4060:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param entry      Details of the node being added
4061:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4062:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4063:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4064:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4065:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Inserts a queue entry to the tail of the queue buffer.<BR>\n
4066:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will insert a new channel into the queue buffer. The Queue will start conversion of
4067:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the channels from the head of the buffer. This Insert will place the entry after the last valid 
4068:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If no valid entries are present then this API will place the Queue entry at the head of the buff
4069:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Then the successive call to the insert will place the new entry after the last entry.
4070:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxQINR0 for a single queue entry.
4071:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4072:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4073:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
4074:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4075:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
4076:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        const XMC_VADC_QUEUE_ENTRY_t entry)
4077:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
4078:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
4079:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Insert the channel physically and get the length of the queue*/
4080:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QINR0 = entry.qinr0;
4081:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
4082:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4083:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4084:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4085:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4086:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     int32_t Returns -1 if there are no channels for conversion
4087:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *             Else would return the next valid channel for conversion.
4088:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
4089:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4090:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4091:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the next entry in the queue request source for conversion.<BR>\n
4092:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Identifies the channel in the queue lined up for conversion next.
4093:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * API will return a valid queue entry from the queue buffer. First checks for the valid channel en
4094:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * in the backup register and returns if present. If the valid entry has not been found in the back
4095:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * then the queue buffer is searched for a valid entry. A call to this API would access the registe
4096:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * GxQBUR0 to determine the next channel.
4097:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4098:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4099:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueInsertChannel()<BR>
4100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr);
4102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     int32_t Returns -1 if there is no channel that have been interrupted.
4107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *             Else would return the channel that is interrupted.
4108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
4109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Identifies the channel whose conversion was suspended.<BR>\n
4112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * When using cancel inject repeat mode the canceled conversion will be placed in the backup regist
4113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the valid queue channel number from the backup register. This happens when 
4114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * there is a high priority conversion interrupts the conversion of queue request source. This forc
4115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to goto the backup register. A call to this API would access the register GxQBUR0 to determine t
4116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * interrupted channel.
4117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr);
4122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
4130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for queue. This will trigger a interrupt if the
4131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
4132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV0.
4133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueClearReqSrcEvent()<BR>
4136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
4138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
4139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
4140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG |= 1U;
4141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
4142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the conversion complete request source event.<BR>\n
4150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
4151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFCLR.SEV0.
4152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueTriggerReqSrcEvent()<BR>
4155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
4157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
4158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
4159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR = (uint32_t)VADC_G_SEFCLR_SEV0_Msk;
4160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
4161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
4166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
4167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
4170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the queue request source event. Will return a true
4171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for queue. A call to this API would acces the register bit field  GxSE
4172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
4177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
4178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetReqSrcEventStatus:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
4180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV0_Msk);
4181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
4182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr     The service request line (Common SR lines, Group specific SR lines)
4186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the event to the SR line of VADC.<BR>\n
4191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a queue request source event. Hence to get a
4192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node. A call to this API would configur
4193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxSEVNP.SEVNP0.
4194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
4199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for queue request source.<BR>\n
4207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the queue request source. The trigger signal
4208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the QCTRL register. The Selection of a input will be done by
4209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectTrigger(). A call to this API would configure the register bit field G
4210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueDisableExternalTrigger()<BR>
4213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
4215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
4216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
4217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_ENTR_Msk;
4219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
4220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for queue request source.<BR>
4228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the queue request source.
4229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the queue request source. If any configuration was
4230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxQCTRL0 will be not be effected.  A call to this API would confi
4231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field GxQMR0.ENTR
4232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
4235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
4237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
4238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
4239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= ~((uint32_t)VADC_G_QMR0_ENTR_Msk);
4241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
4242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
4243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
4245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
4247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  The channel being initialized
4248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to initialization data
4250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the ADC channel for conversion.<BR>\n
4255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will do the channel related initializations. This includes configuration of the CHCTR s
4256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * and boundary flag settings. This must be called in the application in order to enable the conver
4257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * a channel. After a request source has been initialized this API has to be called for each channe
4258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * has to be converted.  A call to this API would configure the registers GxCHCTR GxBFL GxALIAS GxC
4259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * GxBFLC(depending on device) in order to configure the channel.
4260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
4265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                         const XMC_VADC_CHANNEL_CONFIG_t *config);
4266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr    Constant pointer to the VADC group
4269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param src_ch_num   Channel which will be converted by \b alias_ch_num, when called by the reque
4270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range:[0x0 to 0x7]
4271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param alias_ch_num This is the alias channel (Ch-0 or Ch-1)
4272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range:[0x0, 0x1]
4273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets the Alias channel(\b alias_ch_num) to convert from the source channel(\b src_ch_num).<BR>\n
4278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a alias configuration takes place the request source(queue/scan/background) will not call c
4279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Request sources will call the channel \b alias_ch_num , this would invoke the conversion of
4280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the pin associated with \b src_ch_num. The configuration of the alias channel (\b alias_ch_num) 
4281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * for the conversion.\n
4282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * When an alias channel (Ch-0 or Ch-1) receives a trigger, it converts the aliased channel (\b src
4283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The properties of Ch-0 or Ch-1 (as indicated in \b alias_ch_num ) apply when \b src_ch_num is co
4284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  A call to this API would configure the register GxALIAS.
4285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
4287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Alias Channel (\b alias_ch_num) and the source channel (\b src_ch_num) cannot be the same.
4288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * If they are, that alias feature is not used for the conversion. In order to Reset the alias
4289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * feature that was previously selected this method can be used.
4290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
4295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                     const uint32_t src_ch_num,
4296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                     const uint32_t alias_ch_num);
4297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr    Constant pointer to the VADC group
4300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose input was converted
4301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool  Returns true if there was violation w.r.t the specified boundaries.
4304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the result of the channel confines with the specified boundaries.<BR>\n
4307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * An application may not necessarily always need to know the exact value of the converted result, 
4308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * an indication if the generated result is within stipulated boundaries. Generation of Channel eve
4309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to channel event generation criteria (Generate always, Never generate, Generate if result is out
4310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generate if result is within bounds). When interrupts are not enabled, this API can be used to d
4311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * nature of the result.  A call to this API would access the registers GxCHCTR and GxCEFLAG in ord
4312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if a violation has occured.
4313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
4316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
4318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr    Constant pointer to the VADC group
4321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose input is to be converted
4322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ref     Reference voltage
4324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the reference voltage for conversion.<BR>\n
4329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * An internal voltage reference (VARef) or an external voltage reference fed to Ch-0 can serve as 
4330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * for conversions.  A call to this API would configure the register bit field GxCHCTR.REFSEL.
4331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
4336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_REF_t ref);
4337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose i/p is to be converted
4341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param result_reg_num  Result Register associated with this channel
4343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the target result register.<BR>\n
4348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are upto 16 result registers which a channel can choose from to store the results of conve
4349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This selects only the group related result registers. A call to this API would configure the reg
4350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxCHCTR.RESREG.
4351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
4356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                              const uint32_t ch_num,
4357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                              const uint32_t result_reg_num);
4358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose conversion class is to be configured
4362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conversion_class  conversion property to be associated with this channel
4364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the conversion class registers.<BR>\n
4369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * It configures the channel to have a particular conversion class properties like sampling
4370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * time and resolution.  A call to this API would configure the register
4371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxCHCTR.ICLSEL.
4372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelGetInputClass().
4375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
4377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                      const uint32_t ch_num,
4378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class); 
4379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose result alignment is to be returned
4383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_RESULT_ALIGN_LEFT if the result are aligned to the left
4386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_RESULT_ALIGN_RIGHT if the result are aligned to the right
4387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the channel result alignment.<BR>\n
4390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The results are aligned either to the left or to the right. A left aligned 10bit resolution has 
4391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * at bit2 where as a left aligned 8bit resolution starts at bit4. A call to this API would return 
4392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * configured alignment value.
4393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxCHCTR.RESPOS.
4394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_ALIGN_t XMC_VADC_GROUP_ChannelGetResultAlignment(XMC_VADC_GROUP_t *
4399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                      const uint32_t ch_num) 
4400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
4401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultAlignment:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
4402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultAlignment:Wrong Channel Number",
4403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
4404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_ALIGN_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESPOS_Msk) 
4406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 		  (uint32_t)VADC_G_CHCTR_RESPOS_Pos) );
4407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
4408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose result alignment is to be returned
4413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_CHANNEL_CONV_t Returns the configured input class for the \b ch_num
4416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the channel's input class for conversion for the required channel.<BR>\n
4419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The sampling time and resolution can be taken from any of the 4 possible Input class registers.
4420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would return the input class register that is taken up by \b ch_num for conversion.
4421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxCHCTR.RESPOS.
4422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelSetIclass().
4425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_CHANNEL_CONV_t XMC_VADC_GROUP_ChannelGetInputClass(XMC_VADC_GROUP_t *const
4427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                      const uint32_t ch_num) 
4428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
4429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
4430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetInputClass:Wrong Channel Number",
4431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
4432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_CHANNEL_CONV_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_ICLSEL_Msk) 
4434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 		  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos) );
4435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
4436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose associated result register is to be found
4441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  uint8_t  returns the Group result register to which it is linked to.
4444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           <BR>Range: [0x0 to 0xF]
4445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Returns the result register associated with this channel.<br>\n
4448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  There are upto 16 result registers which a channel can choose from to store the results of conv
4449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  This returns only the group related result registers.  A call to this API would access the regi
4450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxCHCTR.RESREG.
4451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
4456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is to be asserted
4460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts a Channel event.<BR>\n
4466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * It is merely the channel event which is asserted. For this asserted event to lead to an interrup
4467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * have been bound to an SR and that SR must have been enabled. It can potentially lead to an inter
4468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * SR line is connected to an NVIC node.  A call to this API would configure the register bit field
4469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelClearEvent().
4472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num);
4474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *      uint32_t returns the asserted channel events
4479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the Channel event flag register.<BR>\n
4482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The return is merely the channel events which are asserted.
4483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit fields of GxCEFLAG.
4484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelClearEvent().
4487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_ChannelGetAssertedEvents(XMC_VADC_GROUP_t *const group_ptr)
4489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
4490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetAssertedEvents:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
4491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return(group_ptr->CEFLAG);
4492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
4493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is to be acknowledged
4497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges a Channel event.<BR>\n
4503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a channel event is raised after the conversion of that channel, it has to be cleared. This 
4504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the Channel event of a particular channel if it has occurred.  A call to this API would configur
4505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit fields of GxCEFCLR.
4506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelTriggerEvent().
4509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ChannelClearEvent(XMC_VADC_GROUP_t *const group_ptr, const uint
4511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
4512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelClearEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
4514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelClearEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHAN
4515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->CEFCLR = (uint32_t)((uint32_t)1 << ch_num);
4516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
4517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is to be connected to a service request line
4521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr       The service request line to which the channel event is to be connected
4523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a channel event to a requested Service Request line.<BR>\n
4528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The channel event is connected to a service request line. For an event to result in an interrupt
4529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request line must be enabled in VADC and the NVIC node which this service request line is connec
4530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * interrupt generation enabled.  A call to this API would configure the register bit fields of GxC
4531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelTriggerEvent()<BR> XMC_VADC_GROUP_ChannelClearEvent()
4534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
4536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  const uint32_t ch_num,
4537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  const XMC_VADC_SR_t sr);
4538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is being configured
4542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param criteria The condition under which the channel may assert its channel event
4544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conditions under which a channel may assert its channel event.<BR>\n
4549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The channel event can be generated under the following conditions - Always, Never, Result Out of
4550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * inside the boundaries.  A call to this API would configure the register bit field GxCHCTR.CHEVMO
4551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelTriggerEvent()<BR> XMC_VADC_GROUP_ChannelClearEvent()<BR>
4554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelSetEventInterruptNode()<BR>
4555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria(XMC_VADC_GROUP_t *const group_ptr,
4557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    const uint32_t ch_num,
4558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    const XMC_VADC_CHANNEL_EVGEN_t criteria);
4559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is being configured
4564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_sel Select the upper/lower boundary configuration .
4566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_sel.
4567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the boundary selection for the given channel<BR>\n
4572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The channel event can be generated under the following conditions - Always, Never, Result Out of
4573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * inside the boundaries. The boundary values to which results are compared can be selected from se
4574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxCHCTR.BNDSELL or GxCHCTR.BNDSELU  .
4575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
4580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  const uint32_t ch_num,
4581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
4582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  XMC_VADC_CHANNEL_BOUNDARY_t selection);
4583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group
4586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg_num  Result register which is intended to be initialized
4587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0xF]
4588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config       Pointer to initialization data
4589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes a Group Result Register.<BR>
4594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Various options needed for the working of the result result will be configured with this API.
4595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This would determine the result handling of the group registers. This API must be called after
4596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the channel Init (XMC_VADC_GROUP_ChannelInit())to initialize the result register that is selecte
4597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would also determine if the result register that is being configured has to a part of a
4598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * In this API one can also configure the various result handling options line FIR/IIR filters and 
4599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Also configures the Data reduction to accumulate 2/3/4 results need to be done. This API will al
4600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result event generation.  A call to this API would configure the register GxRCR with the \b 
4601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_Disab
4604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
4606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                const uint32_t res_reg_num,
4607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                const XMC_VADC_RESULT_CONFIG_t *config)
4608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 307              	 .loc 2 4608 0
 308              	 .cfi_startproc
 309 0000 80B5     	 push {r7,lr}
 310              	.LCFI12:
 311              	 .cfi_def_cfa_offset 8
 312              	 .cfi_offset 7,-8
 313              	 .cfi_offset 14,-4
 314 0002 84B0     	 sub sp,sp,#16
 315              	.LCFI13:
 316              	 .cfi_def_cfa_offset 24
 317 0004 00AF     	 add r7,sp,#0
 318              	.LCFI14:
 319              	 .cfi_def_cfa_register 7
 320 0006 F860     	 str r0,[r7,#12]
 321 0008 B960     	 str r1,[r7,#8]
 322 000a 7A60     	 str r2,[r7,#4]
4609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
4610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->RCR[res_reg_num] = config->g_rcr;
 323              	 .loc 2 4610 0
 324 000c 7B68     	 ldr r3,[r7,#4]
 325 000e 1968     	 ldr r1,[r3]
 326 0010 FB68     	 ldr r3,[r7,#12]
 327 0012 BA68     	 ldr r2,[r7,#8]
 328 0014 A032     	 add r2,r2,#160
 329 0016 9200     	 lsl r2,r2,#2
 330 0018 D150     	 str r1,[r2,r3]
4611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
 331              	 .loc 2 4612 0
 332 001a BD46     	 mov sp,r7
 333 001c 04B0     	 add sp,sp,#16
 334              	 
 335 001e 80BD     	 pop {r7,pc}
 336              	 .cfi_endproc
 337              	.LFE142:
 339              	 .section .text.XMC_VADC_GROUP_GetDetailedResult,"ax",%progbits
 340              	 .align 2
 341              	 .code 16
 342              	 .thumb_func
 344              	XMC_VADC_GROUP_GetDetailedResult:
 345              	.LFB145:
4613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Register which is required to be a part of results FIFO
4618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Adds result register to Result FIFO.<BR>\n
4624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sometimes, the rate of consumption of results by application software may not match the rate at 
4625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * results are produced. A Result FIFO thus helps a slow consumer to read out results without loss 
4626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a result register is added to fifo, it is in fact chained to its higher numbered neighbor. 
4627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Result Register-5 is to be added to FIFO, it gets chained to Result Register-6. Results are writ
4628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * while the same can be read out of Register-5 leisurely by software.
4629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxRCR.FEN.
4630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
4632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The FIFO is always read by the software with the lowest numbered result register.
4633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The hardware will write the results from the highest numbered result register.
4634:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4635:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4636:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4637:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4638:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg);
4639:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4640:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4641:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4642:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register for which event generation is to be enabled
4643:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4644:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4645:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4646:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4647:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4648:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables result event generation.<BR>\n
4649:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Once the results of conversion are available, the result event (which is being enabled in this f
4650:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if connected to a service request line(Group or Shared service request) can lead to an interrupt
4651:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * not only necessary to enable the event, but also to connect it to a service request line. The
4652:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * service request generation capability must also be enabled and so should the corresponding NVIC 
4653:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxRCR.SRGEN.
4654:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4655:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4656:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetResultInterruptNode().
4657:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4658:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_EnableResultEvent(XMC_VADC_GROUP_t *const group_ptr, const uint
4659:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
4660:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4661:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_EnableResultEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
4662:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_EnableResultEvent:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
4663:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->RCR[res_reg] |= (uint32_t)VADC_G_RCR_SRGEN_Msk;
4664:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
4665:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4666:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4667:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4668:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register for which event generation is to be disabled
4669:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4670:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4671:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4672:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4673:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4674:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable result event generation.<BR>\n
4675:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This would just disable the event. It would not alter anything w.r.t the SR line if it was confi
4676:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxRCR.SRGEN.
4677:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4678:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4679:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableResultEvent().
4680:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4681:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_DisableResultEvent(XMC_VADC_GROUP_t *const group_ptr, const uin
4682:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
4683:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_DisableResultEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
4684:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_DisableResultEvent:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_R
4685:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->RCR[res_reg] &= ~((uint32_t)VADC_G_RCR_SRGEN_Msk);
4686:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
4687:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4688:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4689:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4690:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register from which the result of conversion is to be read out
4691:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4692:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4693:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t  returns the complete result register GxRESy.
4694:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4695:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4696:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the result register completely (result of conversion as well as other info).<BR>\n
4697:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Result register will have information regarding the channel that is requesting the conversio
4698:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the result is valid, if the fast compare bit, Data Reduction Counter, and the request source 
4699:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * All these information will be returned back. And if the user is polling for the result he can us
4700:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * result if the valid bit is set. A call to this API would return the complete register GxRES.
4701:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @note You can cast the return to a varible of type XMC_VADC_DETAILED_RESULT_t to easily access t
4703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4704:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4705:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_GetResult().
4706:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4707:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetDetailedResult(XMC_VADC_GROUP_t *const group_ptr, const 
4708:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 346              	 .loc 2 4708 0
 347              	 .cfi_startproc
 348 0000 80B5     	 push {r7,lr}
 349              	.LCFI15:
 350              	 .cfi_def_cfa_offset 8
 351              	 .cfi_offset 7,-8
 352              	 .cfi_offset 14,-4
 353 0002 82B0     	 sub sp,sp,#8
 354              	.LCFI16:
 355              	 .cfi_def_cfa_offset 16
 356 0004 00AF     	 add r7,sp,#0
 357              	.LCFI17:
 358              	 .cfi_def_cfa_register 7
 359 0006 7860     	 str r0,[r7,#4]
 360 0008 3960     	 str r1,[r7]
4709:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetDetailedResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
4710:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetDetailedResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
4711:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return(group_ptr->RES[res_reg]);
 361              	 .loc 2 4711 0
 362 000a 7B68     	 ldr r3,[r7,#4]
 363 000c 3A68     	 ldr r2,[r7]
 364 000e C032     	 add r2,r2,#192
 365 0010 9200     	 lsl r2,r2,#2
 366 0012 D358     	 ldr r3,[r2,r3]
4712:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
 367              	 .loc 2 4712 0
 368 0014 181C     	 mov r0,r3
 369 0016 BD46     	 mov sp,r7
 370 0018 02B0     	 add sp,sp,#8
 371              	 
 372 001a 80BD     	 pop {r7,pc}
 373              	 .cfi_endproc
 374              	.LFE145:
 376              	 .section .text.XMC_VADC_GROUP_GetResult,"ax",%progbits
 377              	 .align 2
 378              	 .code 16
 379              	 .thumb_func
 381              	XMC_VADC_GROUP_GetResult:
 382              	.LFB146:
4713:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4714:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4715:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4716:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register from which the result of conversion is to be read out
4717:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4718:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4719:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_RESULT_SIZE_t Result register values.
4720:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range:[ 0x0 to 0xFFF] (Result of single conversion. Accumulated results not c
4721:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4722:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4723:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the result of the conversion.<BR>\n
4724:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will only return the result of the conversion and will strip out the other information 
4725:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * in the result register. A call to this API would access the register bit field GxRES.RESULT.
4726:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4727:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4728:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_GetDetailedResult().
4729:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4730:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
4731:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t res_reg)
4732:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 383              	 .loc 2 4732 0
 384              	 .cfi_startproc
 385 0000 80B5     	 push {r7,lr}
 386              	.LCFI18:
 387              	 .cfi_def_cfa_offset 8
 388              	 .cfi_offset 7,-8
 389              	 .cfi_offset 14,-4
 390 0002 82B0     	 sub sp,sp,#8
 391              	.LCFI19:
 392              	 .cfi_def_cfa_offset 16
 393 0004 00AF     	 add r7,sp,#0
 394              	.LCFI20:
 395              	 .cfi_def_cfa_register 7
 396 0006 7860     	 str r0,[r7,#4]
 397 0008 3960     	 str r1,[r7]
4733:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
4734:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REG
4735:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
4736:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 398              	 .loc 2 4736 0
 399 000a 7B68     	 ldr r3,[r7,#4]
 400 000c 3A68     	 ldr r2,[r7]
 401 000e C032     	 add r2,r2,#192
 402 0010 9200     	 lsl r2,r2,#2
 403 0012 D358     	 ldr r3,[r2,r3]
 404 0014 9BB2     	 uxth r3,r3
4737:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
 405              	 .loc 2 4737 0
 406 0016 181C     	 mov r0,r3
 407 0018 BD46     	 mov sp,r7
 408 001a 02B0     	 add sp,sp,#8
 409              	 
 410 001c 80BD     	 pop {r7,pc}
 411              	 .cfi_endproc
 412              	.LFE146:
 414 001e C046     	 .section .text.ADC_MEASUREMENT_GetAppVersion,"ax",%progbits
 415              	 .align 2
 416              	 .global ADC_MEASUREMENT_GetAppVersion
 417              	 .code 16
 418              	 .thumb_func
 420              	ADC_MEASUREMENT_GetAppVersion:
 421              	.LFB153:
 422              	 .file 3 "../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c"
   1:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /**
   2:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * @file adc_measurement.c
   3:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * @date 2016-08-18
   4:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
   5:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * NOTE:
   6:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
   8:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * @cond
   9:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  **************************************************************************************************
  10:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * ADC_MEASUREMENT v4.1.22 - Incorporates analog to digital conversion for the required measurement
  11:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  12:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  13:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * All rights reserved.
  14:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  15:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * following conditions are met:
  17:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  18:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *   disclaimer.
  20:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  21:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  24:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  27:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  35:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  **************************************************************************************************
  38:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  39:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * Change History
  40:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * --------------
  41:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  42:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * 2015-02-16:
  43:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Initial version for DAVEv4.<BR>
  44:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  45:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * 2015-02-19:
  46:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Added GetResult APIs for XMC1100 devices.
  47:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  48:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * 2015-05-14:
  49:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Optimized the Manifest.<BR>
  50:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Modified the structure ADC_MEASUREMENT_channel_t to ADC_MEASUREMENT_CHANNEL_t.<BR>
  51:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  52:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * 2015-06-26:
  53:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Added input class resource consumption.<BR>
  54:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  55:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * 2015-07-09:
  56:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Documentation updated.<BR>
  57:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  58:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * 2015-07-31:
  59:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Updated the APP to support new devices.<BR>
  60:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  61:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * 2015-10-01:
  62:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Updated the APP to support the interrupt control in XMC14.<BR>
  63:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  64:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * 2015-10-08:
  65:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Added support for XMC4700/XMC4800 devices.<BR>
  66:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  67:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * 2015-10-20:
  68:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Documentation updated.<BR>
  69:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  70:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * 2015-12-03:
  71:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Added support for XMC4300 device.<BR>
  72:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  73:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * 2016-02-09:
  74:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Updated the APP for the minimum required ANALOG_IO APP version.<BR>
  75:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  76:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * 2016-03-18:
  77:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Maximum number of channels for XMC41/42 increased to 9.<BR>
  78:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Added Post calibration time for XMC1x series in Total conversion Time.<BR>
  79:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Fixed the ADC_MEASUREMENT_Init() for ANALOG_IO initialization.<BR>
  80:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - For XMC1100 series only: Deprecated the API ADC_MEASUREMENT_GetResult() and
  81:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *       ADC_MEASUREMENT_GetDetailedResult().<BR>
  82:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - For XMC1100 series only: Added new API ADC_MEASUREMENT_GetGlobalResult() and
  83:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *       ADC_MEASUREMENT_GetGlobalDetailedResult().<BR>
  84:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  85:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * 2016-08-18:
  86:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *     - Minimum sample time at low frequencies changed to incorporate Errata ADC_AI.H006 and ADC_A
  87:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  88:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * @endcond
  89:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  *
  90:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  */
  91:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
  92:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /**************************************************************************************************
  93:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * HEADER FILES
  94:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  **************************************************************************************************
  95:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #include "adc_measurement.h"
  96:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
  97:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /**************************************************************************************************
  98:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * MACROS
  99:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  **************************************************************************************************
 100:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 101:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /**************************************************************************************************
 102:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * LOCAL DATA
 103:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  **************************************************************************************************
 104:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 105:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /**************************************************************************************************
 106:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * LOCAL ROUTINES
 107:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  **************************************************************************************************
 108:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 109:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /**************************************************************************************************
 110:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  * API IMPLEMENTATION
 111:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****  **************************************************************************************************
 112:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 113:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /*This function returns the version of the ADC_MEASUREMENT App*/
 114:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** DAVE_APP_VERSION_t ADC_MEASUREMENT_GetAppVersion(void)
 115:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** {
 423              	 .loc 3 115 0
 424              	 .cfi_startproc
 425 0000 80B5     	 push {r7,lr}
 426              	.LCFI21:
 427              	 .cfi_def_cfa_offset 8
 428              	 .cfi_offset 7,-8
 429              	 .cfi_offset 14,-4
 430 0002 82B0     	 sub sp,sp,#8
 431              	.LCFI22:
 432              	 .cfi_def_cfa_offset 16
 433 0004 00AF     	 add r7,sp,#0
 434              	.LCFI23:
 435              	 .cfi_def_cfa_register 7
 116:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   DAVE_APP_VERSION_t version;
 117:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 118:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   version.major = (uint8_t) ADC_MEASUREMENT_MAJOR_VERSION;
 436              	 .loc 3 118 0
 437 0006 3B1C     	 mov r3,r7
 438 0008 0422     	 mov r2,#4
 439 000a 1A70     	 strb r2,[r3]
 119:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   version.minor = (uint8_t) ADC_MEASUREMENT_MINOR_VERSION;
 440              	 .loc 3 119 0
 441 000c 3B1C     	 mov r3,r7
 442 000e 0122     	 mov r2,#1
 443 0010 5A70     	 strb r2,[r3,#1]
 120:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   version.patch = (uint8_t) ADC_MEASUREMENT_PATCH_VERSION;
 444              	 .loc 3 120 0
 445 0012 3B1C     	 mov r3,r7
 446 0014 1622     	 mov r2,#22
 447 0016 9A70     	 strb r2,[r3,#2]
 121:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 122:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   return version;
 448              	 .loc 3 122 0
 449 0018 3B1D     	 add r3,r7,#4
 450 001a 3A1C     	 mov r2,r7
 451 001c 1188     	 ldrh r1,[r2]
 452 001e 1980     	 strh r1,[r3]
 453 0020 9278     	 ldrb r2,[r2,#2]
 454 0022 9A70     	 strb r2,[r3,#2]
 455 0024 3A1D     	 add r2,r7,#4
 456 0026 0023     	 mov r3,#0
 457 0028 1178     	 ldrb r1,[r2]
 458 002a FF20     	 mov r0,#255
 459 002c 0140     	 and r1,r0
 460 002e FF20     	 mov r0,#255
 461 0030 8343     	 bic r3,r0
 462 0032 0B43     	 orr r3,r1
 463 0034 5178     	 ldrb r1,[r2,#1]
 464 0036 FF20     	 mov r0,#255
 465 0038 0140     	 and r1,r0
 466 003a 0902     	 lsl r1,r1,#8
 467 003c 0648     	 ldr r0,.L19
 468 003e 0340     	 and r3,r0
 469 0040 0B43     	 orr r3,r1
 470 0042 9278     	 ldrb r2,[r2,#2]
 471 0044 FF21     	 mov r1,#255
 472 0046 0A40     	 and r2,r1
 473 0048 1204     	 lsl r2,r2,#16
 474 004a 0449     	 ldr r1,.L19+4
 475 004c 0B40     	 and r3,r1
 476 004e 1343     	 orr r3,r2
 123:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** }
 477              	 .loc 3 123 0
 478 0050 181C     	 mov r0,r3
 479 0052 BD46     	 mov sp,r7
 480 0054 02B0     	 add sp,sp,#8
 481              	 
 482 0056 80BD     	 pop {r7,pc}
 483              	.L20:
 484              	 .align 2
 485              	.L19:
 486 0058 FF00FFFF 	 .word -65281
 487 005c FFFF00FF 	 .word -16711681
 488              	 .cfi_endproc
 489              	.LFE153:
 491              	 .section .text.ADC_MEASUREMENT_Init,"ax",%progbits
 492              	 .align 2
 493              	 .global ADC_MEASUREMENT_Init
 494              	 .code 16
 495              	 .thumb_func
 497              	ADC_MEASUREMENT_Init:
 498              	.LFB154:
 124:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 125:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 126:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /* Initialization routine to call ADC LLD API's */
 127:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
 128:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** {
 499              	 .loc 3 128 0
 500              	 .cfi_startproc
 501 0000 90B5     	 push {r4,r7,lr}
 502              	.LCFI24:
 503              	 .cfi_def_cfa_offset 12
 504              	 .cfi_offset 4,-12
 505              	 .cfi_offset 7,-8
 506              	 .cfi_offset 14,-4
 507 0002 85B0     	 sub sp,sp,#20
 508              	.LCFI25:
 509              	 .cfi_def_cfa_offset 32
 510 0004 00AF     	 add r7,sp,#0
 511              	.LCFI26:
 512              	 .cfi_def_cfa_register 7
 513 0006 7860     	 str r0,[r7,#4]
 129:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   const ADC_MEASUREMENT_CHANNEL_t *indexed;
 130:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   uint8_t j;
 131:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   ADC_MEASUREMENT_STATUS_t status;
 132:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 133:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))
 134:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 135:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 514              	 .loc 3 135 0
 515 0008 7B68     	 ldr r3,[r7,#4]
 516 000a 1B7E     	 ldrb r3,[r3,#24]
 517 000c 022B     	 cmp r3,#2
 518 000e 00D0     	 beq .LCB463
 519 0010 9BE0     	 b .L22
 520              	.LCB463:
 136:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   {
 137:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     /* Call the function to initialise Clock and ADC global functional units*/
 138:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 521              	 .loc 3 138 0
 522 0012 7B68     	 ldr r3,[r7,#4]
 523 0014 DB68     	 ldr r3,[r3,#12]
 524 0016 0E22     	 mov r2,#14
 525 0018 BC18     	 add r4,r7,r2
 526 001a 181C     	 mov r0,r3
 527 001c FFF7FEFF 	 bl GLOBAL_ADC_Init
 528 0020 031C     	 mov r3,r0
 529 0022 2370     	 strb r3,[r4]
 139:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   
 140:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     /*Initialize the Global Conversion class 0*/
 141:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config
 530              	 .loc 3 141 0
 531 0024 7B68     	 ldr r3,[r7,#4]
 532 0026 DB68     	 ldr r3,[r3,#12]
 533 0028 DA68     	 ldr r2,[r3,#12]
 534 002a 7B68     	 ldr r3,[r7,#4]
 535 002c 9B68     	 ldr r3,[r3,#8]
 536 002e 1B68     	 ldr r3,[r3]
 537 0030 101C     	 mov r0,r2
 538 0032 191C     	 mov r1,r3
 539 0034 0022     	 mov r2,#0
 540 0036 0023     	 mov r3,#0
 541 0038 FFF7FEFF 	 bl XMC_VADC_GLOBAL_InputClassInit
 142:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM);
 143:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #if (UC_SERIES == XMC11)
 144:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     /*Initialize the Global Conversion class 1*/
 145:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config
 146:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
 147:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #endif
 148:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   
 149:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     /* Initialize the Background Scan hardware */
 150:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_confi
 542              	 .loc 3 150 0
 543 003c 7B68     	 ldr r3,[r7,#4]
 544 003e DB68     	 ldr r3,[r3,#12]
 545 0040 DA68     	 ldr r2,[r3,#12]
 546 0042 7B68     	 ldr r3,[r7,#4]
 547 0044 5B68     	 ldr r3,[r3,#4]
 548 0046 101C     	 mov r0,r2
 549 0048 191C     	 mov r1,r3
 550 004a FFF7FEFF 	 bl XMC_VADC_GLOBAL_BackgroundInit
 151:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   
 152:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 153:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     /* Initialize the global result register */
 154:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle)
 155:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #endif
 156:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 157:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 551              	 .loc 3 157 0
 552 004e 0F23     	 mov r3,#15
 553 0050 FB18     	 add r3,r7,r3
 554 0052 0022     	 mov r2,#0
 555 0054 1A70     	 strb r2,[r3]
 556 0056 34E0     	 b .L23
 557              	.L24:
 158:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     {
 159:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       indexed = handle_ptr->array->channel_array[j];
 558              	 .loc 3 159 0 discriminator 3
 559 0058 7B68     	 ldr r3,[r7,#4]
 560 005a 1B68     	 ldr r3,[r3]
 561 005c 0F22     	 mov r2,#15
 562 005e BA18     	 add r2,r7,r2
 563 0060 1278     	 ldrb r2,[r2]
 564 0062 9200     	 lsl r2,r2,#2
 565 0064 D358     	 ldr r3,[r2,r3]
 566 0066 BB60     	 str r3,[r7,#8]
 160:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 161:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       /* Initialize for configured channels*/
 162:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handl
 567              	 .loc 3 162 0 discriminator 3
 568 0068 BB68     	 ldr r3,[r7,#8]
 569 006a 9A68     	 ldr r2,[r3,#8]
 570 006c BB68     	 ldr r3,[r7,#8]
 571 006e 5B7B     	 ldrb r3,[r3,#13]
 572 0070 191C     	 mov r1,r3
 573 0072 BB68     	 ldr r3,[r7,#8]
 574 0074 1B68     	 ldr r3,[r3]
 575 0076 101C     	 mov r0,r2
 576 0078 1A1C     	 mov r2,r3
 577 007a FFF7FEFF 	 bl XMC_VADC_GROUP_ChannelInit
 163:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   
 164:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       /* Initialize for configured result registers */
 165:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_num
 578              	 .loc 3 165 0 discriminator 3
 579 007e BB68     	 ldr r3,[r7,#8]
 580 0080 9A68     	 ldr r2,[r3,#8]
 581 0082 BB68     	 ldr r3,[r7,#8]
 582 0084 1B68     	 ldr r3,[r3]
 583 0086 9B78     	 ldrb r3,[r3,#2]
 584 0088 1B07     	 lsl r3,r3,#28
 585 008a 1B0F     	 lsr r3,r3,#28
 586 008c DBB2     	 uxtb r3,r3
 587 008e 191C     	 mov r1,r3
 166:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****                                 indexed->res_handle);
 588              	 .loc 3 166 0 discriminator 3
 589 0090 BB68     	 ldr r3,[r7,#8]
 590 0092 5B68     	 ldr r3,[r3,#4]
 165:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****                                 indexed->res_handle);
 591              	 .loc 3 165 0 discriminator 3
 592 0094 101C     	 mov r0,r2
 593 0096 1A1C     	 mov r2,r3
 594 0098 FFF7FEFF 	 bl XMC_VADC_GROUP_ResultInit
 167:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #endif
 168:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       /* Add all channels into the Background Request Source Channel Select Register */
 169:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 595              	 .loc 3 169 0 discriminator 3
 596 009c 7B68     	 ldr r3,[r7,#4]
 597 009e DB68     	 ldr r3,[r3,#12]
 598 00a0 DA68     	 ldr r2,[r3,#12]
 170:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****                                                      (uint32_t)indexed->group_index, (uint32_t)inde
 599              	 .loc 3 170 0 discriminator 3
 600 00a2 BB68     	 ldr r3,[r7,#8]
 601 00a4 1B7B     	 ldrb r3,[r3,#12]
 169:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****                                                      (uint32_t)indexed->group_index, (uint32_t)inde
 602              	 .loc 3 169 0 discriminator 3
 603 00a6 191C     	 mov r1,r3
 604              	 .loc 3 170 0 discriminator 3
 605 00a8 BB68     	 ldr r3,[r7,#8]
 606 00aa 5B7B     	 ldrb r3,[r3,#13]
 169:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****                                                      (uint32_t)indexed->group_index, (uint32_t)inde
 607              	 .loc 3 169 0 discriminator 3
 608 00ac 101C     	 mov r0,r2
 609 00ae 1A1C     	 mov r2,r3
 610 00b0 FFF7FEFF 	 bl XMC_VADC_GLOBAL_BackgroundAddChannelToSequence
 157:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     {
 611              	 .loc 3 157 0 discriminator 3
 612 00b4 0F23     	 mov r3,#15
 613 00b6 FB18     	 add r3,r7,r3
 614 00b8 1A78     	 ldrb r2,[r3]
 615 00ba 0F23     	 mov r3,#15
 616 00bc FB18     	 add r3,r7,r3
 617 00be 0132     	 add r2,r2,#1
 618 00c0 1A70     	 strb r2,[r3]
 619              	.L23:
 157:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     {
 620              	 .loc 3 157 0 is_stmt 0 discriminator 1
 621 00c2 0F23     	 mov r3,#15
 622 00c4 FB18     	 add r3,r7,r3
 623 00c6 1B78     	 ldrb r3,[r3]
 624 00c8 032B     	 cmp r3,#3
 625 00ca C5D9     	 bls .L24
 171:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 172:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #ifdef ADC_MEASUREMENT_ANALOG_IO_USED
 173:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       /* ANALOG_IO initialization for the channel*/
 174:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       if(indexed->analog_io_config != NULL)
 175:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       {
 176:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****         status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
 177:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       }
 178:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #endif
 179:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     }
 180:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #if(UC_SERIES != XMC11)
 181:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle 
 626              	 .loc 3 181 0 is_stmt 1
 627 00cc 7B68     	 ldr r3,[r7,#4]
 628 00ce 5B68     	 ldr r3,[r3,#4]
 629 00d0 1B7A     	 ldrb r3,[r3,#8]
 630 00d2 0822     	 mov r2,#8
 631 00d4 1340     	 and r3,r2
 632 00d6 DBB2     	 uxtb r3,r3
 633 00d8 002B     	 cmp r3,#0
 634 00da 20D0     	 beq .L25
 635              	 .loc 3 181 0 is_stmt 0 discriminator 1
 636 00dc 7B68     	 ldr r3,[r7,#4]
 637 00de 1B69     	 ldr r3,[r3,#16]
 638 00e0 002B     	 cmp r3,#0
 639 00e2 1CD0     	 beq .L25
 182:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     {
 183:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #if (UC_FAMILY == XMC1)
 184:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 640              	 .loc 3 184 0 is_stmt 1
 641 00e4 7B68     	 ldr r3,[r7,#4]
 642 00e6 1B69     	 ldr r3,[r3,#16]
 643 00e8 1B68     	 ldr r3,[r3]
 644 00ea DAB2     	 uxtb r2,r3
 185:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****                         handle_ptr->req_src_intr_handle->priority);
 645              	 .loc 3 185 0
 646 00ec 7B68     	 ldr r3,[r7,#4]
 647 00ee 1B69     	 ldr r3,[r3,#16]
 184:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****                         handle_ptr->req_src_intr_handle->priority);
 648              	 .loc 3 184 0
 649 00f0 5B68     	 ldr r3,[r3,#4]
 650 00f2 52B2     	 sxtb r2,r2
 651 00f4 101C     	 mov r0,r2
 652 00f6 191C     	 mov r1,r3
 653 00f8 FFF7FEFF 	 bl __NVIC_SetPriority
 186:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #else
 187:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 188:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****                         NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 189:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****                         handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle-
 190:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #endif
 191:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       /* Connect background Request Source Event to NVIC node */
 192:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 654              	 .loc 3 192 0
 655 00fc 7B68     	 ldr r3,[r7,#4]
 656 00fe DB68     	 ldr r3,[r3,#12]
 657 0100 DA68     	 ldr r2,[r3,#12]
 658 0102 7B68     	 ldr r3,[r7,#4]
 659 0104 5B7E     	 ldrb r3,[r3,#25]
 660 0106 101C     	 mov r0,r2
 661 0108 191C     	 mov r1,r3
 662 010a FFF7FEFF 	 bl XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
 193:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
 194:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     
 195:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       /* Enable Background Scan Request source IRQ */
 196:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 663              	 .loc 3 196 0
 664 010e 7B68     	 ldr r3,[r7,#4]
 665 0110 1B69     	 ldr r3,[r3,#16]
 666 0112 1B68     	 ldr r3,[r3]
 667 0114 DBB2     	 uxtb r3,r3
 668 0116 5BB2     	 sxtb r3,r3
 669 0118 181C     	 mov r0,r3
 670 011a FFF7FEFF 	 bl __NVIC_EnableIRQ
 671              	.L25:
 197:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #ifdef ADC_MEASUREMENT_NON_DEFAULT_IRQ_SOURCE_SELECTED
 198:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   XMC_SCU_SetInterruptControl(handle_ptr->req_src_intr_handle->node_id,
 199:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****                               ((handle_ptr->req_src_intr_handle->node_id << 8) | handle_ptr->req_sr
 200:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #endif
 201:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     }
 202:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #else /* Selected device is XMC11*/
 203:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     XMC_VADC_GLOBAL_SetResultEventInterruptNode(handle_ptr->global_handle->module_ptr, handle_ptr->
 204:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #ifdef ADC_MEASUREMENT_CPU_1X /* End of single measurement is enabled*/
 205:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     NVIC_SetPriority((IRQn_Type)handle_ptr->result_intr_handle->node_id,
 206:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****                             handle_ptr->result_intr_handle->priority);
 207:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 208:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     /* Enable Background Scan Request source IRQ */
 209:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
 210:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #endif
 211:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #endif
 212:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     /* Mux Configuration is done*/
 213:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     if (handle_ptr->mux_config != NULL)
 672              	 .loc 3 213 0
 673 011e 7B68     	 ldr r3,[r7,#4]
 674 0120 5B69     	 ldr r3,[r3,#20]
 675 0122 002B     	 cmp r3,#0
 676 0124 02D0     	 beq .L26
 214:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     {
 215:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     	(handle_ptr->mux_config)();
 677              	 .loc 3 215 0
 678 0126 7B68     	 ldr r3,[r7,#4]
 679 0128 5B69     	 ldr r3,[r3,#20]
 680 012a 9847     	 blx r3
 681              	.L26:
 216:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     }
 217:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   
 218:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     if (handle_ptr->start_conversion != (bool)false)
 682              	 .loc 3 218 0
 683 012c 7B68     	 ldr r3,[r7,#4]
 684 012e 9B7E     	 ldrb r3,[r3,#26]
 685 0130 002B     	 cmp r3,#0
 686 0132 05D0     	 beq .L27
 219:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     {
 220:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       /* Start conversion manually using load event trigger*/
 221:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****       XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 687              	 .loc 3 221 0
 688 0134 7B68     	 ldr r3,[r7,#4]
 689 0136 DB68     	 ldr r3,[r3,#12]
 690 0138 DB68     	 ldr r3,[r3,#12]
 691 013a 181C     	 mov r0,r3
 692 013c FFF7FEFF 	 bl XMC_VADC_GLOBAL_BackgroundTriggerConversion
 693              	.L27:
 222:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     }
 223:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****     handle_ptr->init_state = status;
 694              	 .loc 3 223 0
 695 0140 7B68     	 ldr r3,[r7,#4]
 696 0142 0E22     	 mov r2,#14
 697 0144 BA18     	 add r2,r7,r2
 698 0146 1278     	 ldrb r2,[r2]
 699 0148 1A76     	 strb r2,[r3,#24]
 700              	.L22:
 224:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   }
 225:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   return (handle_ptr->init_state);
 701              	 .loc 3 225 0
 702 014a 7B68     	 ldr r3,[r7,#4]
 703 014c 1B7E     	 ldrb r3,[r3,#24]
 226:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** }
 704              	 .loc 3 226 0
 705 014e 181C     	 mov r0,r3
 706 0150 BD46     	 mov sp,r7
 707 0152 05B0     	 add sp,sp,#20
 708              	 
 709 0154 90BD     	 pop {r4,r7,pc}
 710              	 .cfi_endproc
 711              	.LFE154:
 713 0156 C046     	 .section .text.ADC_MEASUREMENT_StartConversion,"ax",%progbits
 714              	 .align 2
 715              	 .global ADC_MEASUREMENT_StartConversion
 716              	 .code 16
 717              	 .thumb_func
 719              	ADC_MEASUREMENT_StartConversion:
 720              	.LFB155:
 227:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 228:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 229:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /* This API will Software trigger ADC Background request source and starts conversion*/
 230:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** void ADC_MEASUREMENT_StartConversion(ADC_MEASUREMENT_t *const handle_ptr)
 231:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** {
 721              	 .loc 3 231 0
 722              	 .cfi_startproc
 723 0000 80B5     	 push {r7,lr}
 724              	.LCFI27:
 725              	 .cfi_def_cfa_offset 8
 726              	 .cfi_offset 7,-8
 727              	 .cfi_offset 14,-4
 728 0002 82B0     	 sub sp,sp,#8
 729              	.LCFI28:
 730              	 .cfi_def_cfa_offset 16
 731 0004 00AF     	 add r7,sp,#0
 732              	.LCFI29:
 733              	 .cfi_def_cfa_register 7
 734 0006 7860     	 str r0,[r7,#4]
 232:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   XMC_ASSERT("ADC_MEASUREMENT_Start:Invalid handle_ptr", (handle_ptr != NULL))
 233:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 234:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   /* Generate a load event to start background request source conversion*/
 235:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 735              	 .loc 3 235 0
 736 0008 7B68     	 ldr r3,[r7,#4]
 737 000a DB68     	 ldr r3,[r3,#12]
 738 000c DB68     	 ldr r3,[r3,#12]
 739 000e 181C     	 mov r0,r3
 740 0010 FFF7FEFF 	 bl XMC_VADC_GLOBAL_BackgroundTriggerConversion
 236:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** }
 741              	 .loc 3 236 0
 742 0014 BD46     	 mov sp,r7
 743 0016 02B0     	 add sp,sp,#8
 744              	 
 745 0018 80BD     	 pop {r7,pc}
 746              	 .cfi_endproc
 747              	.LFE155:
 749 001a C046     	 .section .text.ADC_MEASUREMENT_GetResult,"ax",%progbits
 750              	 .align 2
 751              	 .global ADC_MEASUREMENT_GetResult
 752              	 .code 16
 753              	 .thumb_func
 755              	ADC_MEASUREMENT_GetResult:
 756              	.LFB156:
 237:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 238:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 239:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /* This API will get the result of a conversion for a specific channel*/
 240:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
 241:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** {
 757              	 .loc 3 241 0
 758              	 .cfi_startproc
 759 0000 90B5     	 push {r4,r7,lr}
 760              	.LCFI30:
 761              	 .cfi_def_cfa_offset 12
 762              	 .cfi_offset 4,-12
 763              	 .cfi_offset 7,-8
 764              	 .cfi_offset 14,-4
 765 0002 85B0     	 sub sp,sp,#20
 766              	.LCFI31:
 767              	 .cfi_def_cfa_offset 32
 768 0004 00AF     	 add r7,sp,#0
 769              	.LCFI32:
 770              	 .cfi_def_cfa_register 7
 771 0006 7860     	 str r0,[r7,#4]
 242:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   XMC_VADC_RESULT_SIZE_t result;
 243:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 244:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))
 245:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 246:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_num
 772              	 .loc 3 246 0
 773 0008 7B68     	 ldr r3,[r7,#4]
 774 000a 9A68     	 ldr r2,[r3,#8]
 775 000c 7B68     	 ldr r3,[r7,#4]
 776 000e 1B68     	 ldr r3,[r3]
 777 0010 9B78     	 ldrb r3,[r3,#2]
 778 0012 1B07     	 lsl r3,r3,#28
 779 0014 1B0F     	 lsr r3,r3,#28
 780 0016 DBB2     	 uxtb r3,r3
 781 0018 0E21     	 mov r1,#14
 782 001a 7C18     	 add r4,r7,r1
 783 001c 101C     	 mov r0,r2
 784 001e 191C     	 mov r1,r3
 785 0020 FFF7FEFF 	 bl XMC_VADC_GROUP_GetResult
 786 0024 031C     	 mov r3,r0
 787 0026 2380     	 strh r3,[r4]
 247:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 248:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   return (result);
 788              	 .loc 3 248 0
 789 0028 0E23     	 mov r3,#14
 790 002a FB18     	 add r3,r7,r3
 791 002c 1B88     	 ldrh r3,[r3]
 249:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** }
 792              	 .loc 3 249 0
 793 002e 181C     	 mov r0,r3
 794 0030 BD46     	 mov sp,r7
 795 0032 05B0     	 add sp,sp,#20
 796              	 
 797 0034 90BD     	 pop {r4,r7,pc}
 798              	 .cfi_endproc
 799              	.LFE156:
 801 0036 C046     	 .section .text.ADC_MEASUREMENT_GetDetailedResult,"ax",%progbits
 802              	 .align 2
 803              	 .global ADC_MEASUREMENT_GetDetailedResult
 804              	 .code 16
 805              	 .thumb_func
 807              	ADC_MEASUREMENT_GetDetailedResult:
 808              	.LFB157:
 250:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 251:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 252:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** /* This API will get the result of a conversion for a specific channel. It will return the complete
 253:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** uint32_t ADC_MEASUREMENT_GetDetailedResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
 254:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** {
 809              	 .loc 3 254 0
 810              	 .cfi_startproc
 811 0000 80B5     	 push {r7,lr}
 812              	.LCFI33:
 813              	 .cfi_def_cfa_offset 8
 814              	 .cfi_offset 7,-8
 815              	 .cfi_offset 14,-4
 816 0002 84B0     	 sub sp,sp,#16
 817              	.LCFI34:
 818              	 .cfi_def_cfa_offset 24
 819 0004 00AF     	 add r7,sp,#0
 820              	.LCFI35:
 821              	 .cfi_def_cfa_register 7
 822 0006 7860     	 str r0,[r7,#4]
 255:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   uint32_t result;
 256:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 257:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   XMC_ASSERT("ADC_MEASUREMENT_GetDetailedResult:Invalid handle_ptr", (handle_ptr != NULL))
 258:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 259:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   result = XMC_VADC_GROUP_GetDetailedResult(handle_ptr->group_handle, handle_ptr->ch_handle->result
 823              	 .loc 3 259 0
 824 0008 7B68     	 ldr r3,[r7,#4]
 825 000a 9A68     	 ldr r2,[r3,#8]
 826 000c 7B68     	 ldr r3,[r7,#4]
 827 000e 1B68     	 ldr r3,[r3]
 828 0010 9B78     	 ldrb r3,[r3,#2]
 829 0012 1B07     	 lsl r3,r3,#28
 830 0014 1B0F     	 lsr r3,r3,#28
 831 0016 DBB2     	 uxtb r3,r3
 832 0018 101C     	 mov r0,r2
 833 001a 191C     	 mov r1,r3
 834 001c FFF7FEFF 	 bl XMC_VADC_GROUP_GetDetailedResult
 835 0020 031C     	 mov r3,r0
 836 0022 FB60     	 str r3,[r7,#12]
 260:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** 
 261:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c ****   return (result);
 837              	 .loc 3 261 0
 838 0024 FB68     	 ldr r3,[r7,#12]
 262:../Dave/Generated/ADC_MEASUREMENT/adc_measurement.c **** }
 839              	 .loc 3 262 0
 840 0026 181C     	 mov r0,r3
 841 0028 BD46     	 mov sp,r7
 842 002a 04B0     	 add sp,sp,#16
 843              	 
 844 002c 80BD     	 pop {r7,pc}
 845              	 .cfi_endproc
 846              	.LFE157:
 848 002e C046     	 .text
 849              	.Letext0:
 850              	 .file 4 "n:\\eecs 473\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 851              	 .file 5 "n:\\eecs 473\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 852              	 .file 6 "N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 853              	 .file 7 "N:/EECS 473/Myoelectric/myoelectric/Dave/Generated/DAVE_Common.h"
 854              	 .file 8 "N:/EECS 473/Myoelectric/myoelectric/Dave/Generated/GLOBAL_ADC/global_adc.h"
 855              	 .file 9 "../Dave/Generated/ADC_MEASUREMENT/adc_measurement.h"
 856              	 .file 10 "N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 adc_measurement.c
    {standard input}:18     .text.__NVIC_EnableIRQ:00000000 $t
    {standard input}:22     .text.__NVIC_EnableIRQ:00000000 __NVIC_EnableIRQ
    {standard input}:66     .text.__NVIC_EnableIRQ:00000030 $d
    {standard input}:71     .text.__NVIC_SetPriority:00000000 $t
    {standard input}:75     .text.__NVIC_SetPriority:00000000 __NVIC_SetPriority
    {standard input}:204    .text.__NVIC_SetPriority:000000cc $d
    {standard input}:210    .text.XMC_VADC_GLOBAL_BackgroundTriggerConversion:00000000 $t
    {standard input}:214    .text.XMC_VADC_GLOBAL_BackgroundTriggerConversion:00000000 XMC_VADC_GLOBAL_BackgroundTriggerConversion
    {standard input}:253    .text.XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:00000000 $t
    {standard input}:257    .text.XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:00000000 XMC_VADC_GLOBAL_BackgroundAddChannelToSequence
    {standard input}:301    .text.XMC_VADC_GROUP_ResultInit:00000000 $t
    {standard input}:305    .text.XMC_VADC_GROUP_ResultInit:00000000 XMC_VADC_GROUP_ResultInit
    {standard input}:340    .text.XMC_VADC_GROUP_GetDetailedResult:00000000 $t
    {standard input}:344    .text.XMC_VADC_GROUP_GetDetailedResult:00000000 XMC_VADC_GROUP_GetDetailedResult
    {standard input}:377    .text.XMC_VADC_GROUP_GetResult:00000000 $t
    {standard input}:381    .text.XMC_VADC_GROUP_GetResult:00000000 XMC_VADC_GROUP_GetResult
    {standard input}:415    .text.ADC_MEASUREMENT_GetAppVersion:00000000 $t
    {standard input}:420    .text.ADC_MEASUREMENT_GetAppVersion:00000000 ADC_MEASUREMENT_GetAppVersion
    {standard input}:486    .text.ADC_MEASUREMENT_GetAppVersion:00000058 $d
    {standard input}:492    .text.ADC_MEASUREMENT_Init:00000000 $t
    {standard input}:497    .text.ADC_MEASUREMENT_Init:00000000 ADC_MEASUREMENT_Init
    {standard input}:714    .text.ADC_MEASUREMENT_StartConversion:00000000 $t
    {standard input}:719    .text.ADC_MEASUREMENT_StartConversion:00000000 ADC_MEASUREMENT_StartConversion
    {standard input}:750    .text.ADC_MEASUREMENT_GetResult:00000000 $t
    {standard input}:755    .text.ADC_MEASUREMENT_GetResult:00000000 ADC_MEASUREMENT_GetResult
    {standard input}:802    .text.ADC_MEASUREMENT_GetDetailedResult:00000000 $t
    {standard input}:807    .text.ADC_MEASUREMENT_GetDetailedResult:00000000 ADC_MEASUREMENT_GetDetailedResult
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
GLOBAL_ADC_Init
XMC_VADC_GLOBAL_InputClassInit
XMC_VADC_GLOBAL_BackgroundInit
XMC_VADC_GROUP_ChannelInit
XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
