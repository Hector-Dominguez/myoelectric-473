   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "global_adc.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_VADC_GLOBAL_DisablePostCalibration,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_VADC_GLOBAL_DisablePostCalibration:
  23              	.LFB73:
  24              	 .file 1 "N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc/xmc_vadc.h"
   1:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2017-08-14
   4:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
   7:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.                        
  11:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                             
  12:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * following conditions are met:   
  14:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  15:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer.                        
  17:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  18:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  21:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  24:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  32:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
  35:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  37:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  38:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  39:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  40:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  41:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *      
  42:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  43:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   
  45:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  46:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  51:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  52:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  54:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  57:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  61:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  70:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  71:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  72:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  73:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  74:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  75:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  80:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  81:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  82:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  87:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  88:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  89:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  90:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  91:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  92:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR. 
  93:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  94:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-06-17:
  95:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
  96:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  97:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs added are:
  98:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  99:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-02-06:
 107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new functions to remove channels from background request source, XMC_VADC_GLOBAL_Bac
 108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-06-24:
 110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new function XMC_VADC_GLOBAL_SHS_SetAnalogReference() for XMC1 family
 111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2017-08-14:
 113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added XMC_VADC_GLOBAL_DETAILED_RESULT_t
 114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *       You can cast the return of XMC_VADC_GLOBAL_GetDetailedResult() to a varible of type XMC_VA
 115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_SetAnalogReference() to update AREF bitfield correctly
 116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond 
 118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
 122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_common.h>
 128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_scu.h>
 129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
 130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
 146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   
 386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   
 413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
 561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 634:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 635:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 636:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 637:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 638:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 639:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 640:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 641:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 642:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 643:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 644:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 645:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 646:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 647:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 648:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 649:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 650:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 651:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 652:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 653:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 654:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 655:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 656:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 657:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 658:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 659:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 660:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 661:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 662:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 663:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 664:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 665:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 666:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 667:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 668:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 669:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 670:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 671:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 672:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 673:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 674:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 675:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 676:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 677:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 678:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 679:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 680:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 681:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 682:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 683:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 684:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 685:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 686:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 687:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 688:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 689:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 690:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 691:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 692:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 693:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 694:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 695:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 696:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 697:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 698:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** */
 699:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 700:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 701:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 704:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 705:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 706:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 707:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 708:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 709:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 710:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 711:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 712:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 713:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 714:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 715:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
 716:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 717:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_AREF
 718:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 719:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_EXTERNAL_VDD_UPPER_RANGE = 0 << SHS_SHSCFG_AREF_Pos, /**< External refer
 720:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_UPPER_RANGE = 2 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 721:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_LOWER_RANGE = 3 << SHS_SHSCFG_AREF_Pos, /**< Internal refer
 722:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_SHS_AREF_t;
 723:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 724:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 725:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 726:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 727:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 728:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 729:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 730:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 731:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 732:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 733:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 734:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 735:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 736:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 737:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 738:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 739:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 740:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 741:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 742:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 743:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 744:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 745:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 746:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 747:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 748:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 749:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 750:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 751:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 752:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 753:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 754:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 755:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 756:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 757:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 758:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 759:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 760:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 761:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 762:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 763:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 764:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 765:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 766:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 767:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 768:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 769:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 770:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 771:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 772:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 773:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 774:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 775:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the ready signal selection
 776:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 777:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 778:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 779:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 780:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 781:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 782:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 783:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 784:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SYNCTR_EVAL_t;
 785:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 786:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 787:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 788:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 789:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 790:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 791:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma push
 792:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma anon_unions
 793:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 794:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning 586
 795:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 796:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 797:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 798:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 799:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 800:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 801:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 802:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 803:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 804:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 805:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 806:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 807:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 808:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 809:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 810:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 811:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 812:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 813:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 814:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 815:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 816:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 817:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 818:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 819:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 820:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 821:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 822:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 823:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 824:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 825:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 826:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 827:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 828:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 829:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 830:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 831:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 832:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 833:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asctrl;
 834:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 835:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 836:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 837:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 838:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 839:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 2;
 840:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 841:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 842:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 843:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 844:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 845:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 26;
 846:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 847:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asmr;
 848:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 849:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 850:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 851:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 852:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 853:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 854:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 855:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 856:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 857:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 858:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 859:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 860:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 861:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 862:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 863:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 864:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 865:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 866:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 2;
 867:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 868:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 869:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 870:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 871:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 872:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 873:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 874:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 875:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 876:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 4;
 877:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 878:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 879:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 880:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 881:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 6;
 882:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 883:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 884:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 885:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 886:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t chctr;
 887:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 888:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 889:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 890:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 891:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 892:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 8;
 893:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 894:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 895:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 896:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 897:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 898:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 899:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 900:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 901:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 902:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 903:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 904:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 905:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 906:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 907:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 908:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 909:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 910:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 911:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 912:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 913:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 914:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 915:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 916:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 917:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 918:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 12;
 919:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 920:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bfl;
 921:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 922:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 923:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 924:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 925:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 926:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 927:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 928:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 929:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 930:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 931:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 932:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 933:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 934:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 935:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t                           : 16;
 936:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 937:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bflc;
 938:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 939:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 940:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 941:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 942:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 943:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 944:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 945:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 946:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 947:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 948:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 949:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 950:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 951:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 952:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 953:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 954:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 955:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 956:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 957:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 958:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 959:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 24;
 960:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 961:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 962:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qinr0;
 963:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 964:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 965:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
 966:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 967:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 968:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 969:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 970:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 971:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 972:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 973:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 974:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 975:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 976:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 977:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 978:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 979:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 980:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 981:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 982:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 983:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 984:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 985:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 986:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 987:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 988:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 989:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 990:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 991:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 992:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 993:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 994:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 995:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 996:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
 997:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 998:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 999:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qctrl0;
1000:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1001:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1002:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1003:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1004:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1005:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 2;
1006:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
1007:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 29;
1008:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1009:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qmr0;
1010:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1011:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
1012:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1013:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1014:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1015:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
1016:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1017:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1018:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
1019:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1020:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1021:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1022:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1023:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1024:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1025:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1026:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1027:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1028:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1029:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1030:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1031:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1032:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1033:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1034:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1035:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1036:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1037:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1038:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 16;
1039:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1040:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1041:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globiclass;
1042:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1043:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1044:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1045:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1046:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1047:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1048:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1049:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1050:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1051:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1052:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1053:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1054:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1055:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1056:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
1057:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 2;
1058:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
1059:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
1060:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 5;
1061:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 17;
1062:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1063:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globcfg;
1064:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1065:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1066:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1067:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1068:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1069:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1070:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1071:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1072:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1073:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1074:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1075:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1076:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1077:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1078:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1079:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1080:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1081:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1082:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1083:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globbound;
1084:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1085:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1086:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1087:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1088:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1089:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1090:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1091:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1092:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1093:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1094:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1095:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1096:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1097:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1098:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1099:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 6;
1100:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1101:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1102:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globrcr;
1103:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1104:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1105:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1106:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1107:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1108:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1109:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 2;
1110:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1111:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 28;
1112:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1113:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t clc;
1114:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1115:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1116:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1117:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1118:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1119:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1120:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1121:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1122:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1123:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1124:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1125:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1126:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1127:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1128:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1129:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1130:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1131:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1132:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1133:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1134:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1135:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1136:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1137:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1138:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1139:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1140:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1141:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_iclass0;
1142:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1143:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1144:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1145:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1146:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1147:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1148:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1149:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1150:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1151:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1152:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1153:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1154:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1155:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1156:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1157:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1158:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 13;
1159:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1160:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1161:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1162:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1163:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 5;
1164:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1165:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1166:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1167:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1168:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1169:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1170:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1171:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1172:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 1;
1173:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1174:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 2;
1175:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1176:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1177:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1178:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1179:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1180:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1181:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1182:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1183:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1184:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1185:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1186:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1187:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1188:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1189:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1190:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1191:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1192:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1193:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1194:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1195:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1196:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1197:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1198:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1199:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1200:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_bound;
1201:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1202:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1203:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1204:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1205:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1206:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 4;
1207:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1208:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 1;
1209:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1210:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1211:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 24;
1212:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1213:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1214:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1215:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1216:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1217:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1218:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1219:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1220:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1221:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1222:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1223:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1224:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1225:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1226:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1227:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1228:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1229:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1230:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1231:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1232:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1233:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 2;
1234:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1235:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1236:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1237:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1238:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1239:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_rcr;
1240:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1241:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1242:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1243:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1244:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1245:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1246:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1247:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1248:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1249:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1250:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1251:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1252:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1253:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1254:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1255:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1256:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1257:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1258:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1259:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1260:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1261:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1262:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1263:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1264:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1265:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1266:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1267:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1268:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1269:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1270:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1271:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1272:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1273:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1274:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1275:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1276:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1277:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1278:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1279:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1280:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1281:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1282:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1283:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1284:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1285:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1286:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1287:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1288:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1289:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1290:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1291:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1292:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1293:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1294:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1295:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :6;
1296:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1297:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :10;
1298:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif      
1299:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1300:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :20;
1301:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1302:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1303:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1304:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1305:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1306:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1307:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1308:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1309:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1310:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1311:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1312:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed global result structure
1313:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1314:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_DETAILED_RESULT
1315:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1316:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1317:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1318:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1319:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1320:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1321:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t group_number             :4;   /**< Indicates the group to which the channel_number 
1322:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1323:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1324:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1325:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1326:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1327:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1328:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1329:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1330:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1331:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_DETAILED_RESULT_t;
1332:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1333:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1334:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed channel result structure
1335:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1336:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_DETAILED_RESULT
1337:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1338:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1339:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1340:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1341:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1342:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1343:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1344:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1345:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1346:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1347:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1348:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1349:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1350:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1351:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1352:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1353:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DETAILED_RESULT_t;
1354:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
1355:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1356:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1357:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1358:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma pop
1359:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1360:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning restore
1361:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1362:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1363:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1364:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1365:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1366:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1367:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1368:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1369:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1370:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1371:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1372:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1373:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1374:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1375:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1376:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1377:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1378:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1379:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1380:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1381:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1382:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1383:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1384:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1385:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1386:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1387:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1388:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1389:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1390:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1391:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1392:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1393:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1394:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1395:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1396:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1397:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1398:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1399:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1400:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1401:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1402:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1403:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1404:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1405:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1406:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1407:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1408:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1409:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1410:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1411:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1412:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1413:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1414:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1415:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1416:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1417:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1418:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1419:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1420:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1421:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1422:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1423:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1424:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1425:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1426:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1427:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1428:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1429:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1430:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1431:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1432:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1433:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1434:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1435:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1436:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1437:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1438:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1439:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1440:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1441:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1442:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1443:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1444:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1445:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1446:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1447:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1448:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1449:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1450:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1451:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1452:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1453:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1454:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1455:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1456:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1457:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1458:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1459:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1460:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1461:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1462:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1463:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1464:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1465:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1466:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1467:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1468:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1469:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1470:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1471:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1472:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1473:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1474:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1475:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1476:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1477:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1478:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1479:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1480:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1481:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1482:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1483:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1484:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1485:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1486:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1487:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1488:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1489:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1490:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1491:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1492:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1493:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1494:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1495:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1496:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1497:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1498:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1499:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1500:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1501:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1502:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1503:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1504:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1505:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1506:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1507:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1508:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1509:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1510:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1511:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1512:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1513:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1514:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1515:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1516:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1517:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1518:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1519:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1520:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1521:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1522:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1523:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1524:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1525:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1526:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1527:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1528:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1529:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1530:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1531:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1532:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1533:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1534:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1535:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1536:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1537:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1538:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1539:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1540:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1541:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1542:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1543:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1544:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1545:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1546:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1547:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1548:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1549:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1550:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1551:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1552:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1553:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1554:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1555:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1556:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1557:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1558:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1559:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1560:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1561:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1562:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1563:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1564:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1565:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1566:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1567:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1568:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1569:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1570:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1571:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1572:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1573:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1574:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1575:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1576:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1577:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1578:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1579:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1580:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1581:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1582:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1583:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1584:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1585:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1586:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1587:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1588:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1589:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1590:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  
1591:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1592:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1593:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1594:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1595:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1596:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1597:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1598:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1599:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1600:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1601:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1602:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1603:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1604:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1605:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1606:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1607:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1608:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1609:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1610:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1611:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1612:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1613:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1614:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1615:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1616:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1617:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1618:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1619:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1620:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1621:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1622:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1623:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1624:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1625:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1626:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1627:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1628:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1629:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1630:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1631:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1632:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1633:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1634:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1635:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1636:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1637:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1638:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1639:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1640:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1641:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1642:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1643:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1644:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1645:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1646:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1647:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1648:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1649:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1650:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1651:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1652:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1653:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1654:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1655:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
  25              	 .loc 1 1655 0
  26              	 .cfi_startproc
  27 0000 80B5     	 push {r7,lr}
  28              	.LCFI0:
  29              	 .cfi_def_cfa_offset 8
  30              	 .cfi_offset 7,-8
  31              	 .cfi_offset 14,-4
  32 0002 82B0     	 sub sp,sp,#8
  33              	.LCFI1:
  34              	 .cfi_def_cfa_offset 16
  35 0004 00AF     	 add r7,sp,#0
  36              	.LCFI2:
  37              	 .cfi_def_cfa_register 7
  38 0006 7860     	 str r0,[r7,#4]
  39 0008 3960     	 str r1,[r7]
1656:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1657:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1658:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
  40              	 .loc 1 1658 0
  41 000a 7B68     	 ldr r3,[r7,#4]
  42 000c 8022     	 mov r2,#128
  43 000e 9A58     	 ldr r2,[r3,r2]
  44 0010 3B68     	 ldr r3,[r7]
  45 0012 1033     	 add r3,r3,#16
  46 0014 191C     	 mov r1,r3
  47 0016 0123     	 mov r3,#1
  48 0018 8B40     	 lsl r3,r3,r1
  49 001a 1A43     	 orr r2,r3
  50 001c 7B68     	 ldr r3,[r7,#4]
  51 001e 8021     	 mov r1,#128
  52 0020 5A50     	 str r2,[r3,r1]
1659:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
  53              	 .loc 1 1659 0
  54 0022 BD46     	 mov sp,r7
  55 0024 02B0     	 add sp,sp,#8
  56              	 
  57 0026 80BD     	 pop {r7,pc}
  58              	 .cfi_endproc
  59              	.LFE73:
  61              	 .section .text.XMC_VADC_GLOBAL_SHS_SetAnalogReference,"ax",%progbits
  62              	 .align 2
  63              	 .code 16
  64              	 .thumb_func
  66              	XMC_VADC_GLOBAL_SHS_SetAnalogReference:
  67              	.LFB79:
1660:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1661:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1662:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1663:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1664:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1665:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1666:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1667:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1668:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1669:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1670:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1671:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1672:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1673:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1674:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1675:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1676:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1677:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1678:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1679:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1680:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1681:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1682:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1683:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1684:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1685:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1686:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1687:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1688:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1689:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1690:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1691:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1692:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1693:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1694:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1695:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1696:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1697:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1698:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1699:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1700:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1701:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1702:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1703:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1704:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1705:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1706:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1707:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1708:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1709:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1710:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1711:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1712:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1713:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1714:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1715:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1716:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1717:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1718:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1719:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
1720:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1721:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1722:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1723:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1724:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1725:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1726:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1727:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const uint16_t boundary_value); 
1728:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1729:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1730:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1731:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1732:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1733:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1734:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1735:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1736:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1737:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1738:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1739:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1740:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1741:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1742:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1743:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b emuxif.
1744:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1745:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1746:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1747:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1748:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1749:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1750:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1751:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1752:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1753:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1754:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1755:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1756:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1757:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1758:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1759:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1760:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1761:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1762:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @note You can cast the return to a varible of type XMC_VADC_GLOBAL_DETAILED_RESULT_t to easily a
1763:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1764:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1765:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1766:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1767:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1768:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1769:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1770:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1771:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  return(global_ptr->GLOBRES);
1772:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1773:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1774:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1775:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1776:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1777:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1778:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1779:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1780:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1781:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1782:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1783:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1784:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1785:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1786:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1787:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1788:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1789:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1790:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1791:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1792:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1793:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1794:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1795:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1796:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1797:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1798:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1799:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1800:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1801:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1802:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1803:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1804:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1805:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1806:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1807:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1808:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1809:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1810:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1811:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1812:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1813:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1814:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1815:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1816:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1817:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1818:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1819:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1820:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1821:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1822:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1823:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1824:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1825:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1826:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1827:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1828:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1829:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1830:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1831:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1832:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1833:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1834:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1835:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1836:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1837:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1838:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1839:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1840:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1841:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \a event_type.
1842:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1843:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1844:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1845:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1846:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1847:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1848:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1849:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1850:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1851:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1852:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1853:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1854:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1855:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1856:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1857:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1858:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1859:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1860:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1861:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1862:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1863:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1864:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1865:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1866:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1867:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1868:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1869:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1870:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1871:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1872:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
1873:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1874:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1875:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1876:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1877:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1878:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
1879:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1880:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1881:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1882:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1883:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1884:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1885:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1886:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1887:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1888:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1889:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1890:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1891:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1892:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1893:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1894:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1895:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1896:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1897:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1898:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1899:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1900:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1901:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1902:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1903:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1904:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1905:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1906:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * corresponding \a sr line.
1907:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1908:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1909:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1910:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1911:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1912:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1913:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1914:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1915:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1916:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1917:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1918:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1919:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1920:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1921:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1922:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1923:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1924:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1925:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1926:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1927:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1928:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1929:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1930:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1931:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1932:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param aref    Analog reference used for conversions. Refer @ref XMC_VADC_GLOBAL_SHS_AREF_t enum
1933:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1934:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1935:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1936:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1937:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selection of the reference voltage that is required for conversions (VREF).
1938:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1939:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1940:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1941:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1942:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetAnalogReference(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1943:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             const XMC_VADC_GLOBAL_SHS_AREF_t aref)
1944:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  {
  68              	 .loc 1 1944 0
  69              	 .cfi_startproc
  70 0000 80B5     	 push {r7,lr}
  71              	.LCFI3:
  72              	 .cfi_def_cfa_offset 8
  73              	 .cfi_offset 7,-8
  74              	 .cfi_offset 14,-4
  75 0002 82B0     	 sub sp,sp,#8
  76              	.LCFI4:
  77              	 .cfi_def_cfa_offset 16
  78 0004 00AF     	 add r7,sp,#0
  79              	.LCFI5:
  80              	 .cfi_def_cfa_register 7
  81 0006 7860     	 str r0,[r7,#4]
  82 0008 0A1C     	 mov r2,r1
  83 000a BB1C     	 add r3,r7,#2
  84 000c 1A80     	 strh r2,[r3]
1945:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1946:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1947:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1948:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref | SHS_SHS
  85              	 .loc 1 1948 0
  86 000e 7B68     	 ldr r3,[r7,#4]
  87 0010 1B6C     	 ldr r3,[r3,#64]
  88 0012 084A     	 ldr r2,.L3
  89 0014 1A40     	 and r2,r3
  90 0016 BB1C     	 add r3,r7,#2
  91 0018 1B88     	 ldrh r3,[r3]
  92 001a 1343     	 orr r3,r2
  93 001c 8022     	 mov r2,#128
  94 001e 1202     	 lsl r2,r2,#8
  95 0020 1A43     	 orr r2,r3
  96 0022 7B68     	 ldr r3,[r7,#4]
  97 0024 1B6C     	 ldr r3,[r3,#64]
  98 0026 1A43     	 orr r2,r3
  99 0028 7B68     	 ldr r3,[r7,#4]
 100 002a 1A64     	 str r2,[r3,#64]
1949:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  }
 101              	 .loc 1 1949 0
 102 002c BD46     	 mov sp,r7
 103 002e 02B0     	 add sp,sp,#8
 104              	 
 105 0030 80BD     	 pop {r7,pc}
 106              	.L4:
 107 0032 C046     	 .align 2
 108              	.L3:
 109 0034 FFF3FFFF 	 .word -3073
 110              	 .cfi_endproc
 111              	.LFE79:
 113              	 .section .text.XMC_VADC_GLOBAL_SHS_SetClockDivider,"ax",%progbits
 114              	 .align 2
 115              	 .code 16
 116              	 .thumb_func
 118              	XMC_VADC_GLOBAL_SHS_SetClockDivider:
 119              	.LFB82:
1950:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1951:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1952:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1953:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1954:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1955:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1956:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return None
1957:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1958:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1959:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1960:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1961:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * The stepper sequence is configured using this API.
1962:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1963:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1964:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1965:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1966:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1967:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1968:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1969:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1970:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1971:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1972:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1973:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1974:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1975:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1976:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1977:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1978:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1979:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1980:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1981:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1982:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *              returns false if the analog converter is powered down
1983:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1984:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1985:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the converter status.<BR>\n
1986:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1987:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1988:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1989:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1990:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1991:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1992:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1993:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1994:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1995:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
1996:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1997:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
1998:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1999:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2000:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2001:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2002:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2003:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2004:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2005:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2006:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2007:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2008:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
2009:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2010:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2011:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2012:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2013:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2014:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
2015:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2016:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2017:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2018:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
2019:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2020:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2021:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2022:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2023:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
2024:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
2025:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
2026:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2027:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2028:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2029:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2030:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
2031:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2032:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2033:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2034:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
2035:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
2036:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
2037:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2038:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2039:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2040:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2041:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
2042:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
2043:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
2044:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
2045:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2046:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2047:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2048:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2049:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2050:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
2051:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint8_t sst_value);
2052:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2053:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2054:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2055:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2056:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
2057:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
2058:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2059:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2060:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2061:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
2062:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
2063:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the Sample and hold converter.
2064:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2065:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2066:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2067:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2068:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
2069:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** {
 120              	 .loc 1 2069 0
 121              	 .cfi_startproc
 122 0000 80B5     	 push {r7,lr}
 123              	.LCFI6:
 124              	 .cfi_def_cfa_offset 8
 125              	 .cfi_offset 7,-8
 126              	 .cfi_offset 14,-4
 127 0002 82B0     	 sub sp,sp,#8
 128              	.LCFI7:
 129              	 .cfi_def_cfa_offset 16
 130 0004 00AF     	 add r7,sp,#0
 131              	.LCFI8:
 132              	 .cfi_def_cfa_register 7
 133 0006 7860     	 str r0,[r7,#4]
 134 0008 0A1C     	 mov r2,r1
 135 000a FB1C     	 add r3,r7,#3
 136 000c 1A70     	 strb r2,[r3]
2070:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
2071:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2072:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
2073:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
2074:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** 
2075:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
 137              	 .loc 1 2075 0
 138 000e 7B68     	 ldr r3,[r7,#4]
 139 0010 1B6C     	 ldr r3,[r3,#64]
 140 0012 0A4A     	 ldr r2,.L6
 141 0014 1340     	 and r3,r2
 142 0016 8022     	 mov r2,#128
 143 0018 1202     	 lsl r2,r2,#8
 144 001a 1A43     	 orr r2,r3
 145 001c 7B68     	 ldr r3,[r7,#4]
 146 001e 1A64     	 str r2,[r3,#64]
2076:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
 147              	 .loc 1 2076 0
 148 0020 7B68     	 ldr r3,[r7,#4]
 149 0022 1A6C     	 ldr r2,[r3,#64]
 150 0024 FB1C     	 add r3,r7,#3
 151 0026 1B78     	 ldrb r3,[r3]
 152 0028 1343     	 orr r3,r2
 153 002a 8022     	 mov r2,#128
 154 002c 1202     	 lsl r2,r2,#8
 155 002e 1A43     	 orr r2,r3
 156 0030 7B68     	 ldr r3,[r7,#4]
 157 0032 1A64     	 str r2,[r3,#64]
2077:N:/EECS 473/Myoelectric/myoelectric/Libraries/XMCLib/inc\xmc_vadc.h **** }
 158              	 .loc 1 2077 0
 159 0034 BD46     	 mov sp,r7
 160 0036 02B0     	 add sp,sp,#8
 161              	 
 162 0038 80BD     	 pop {r7,pc}
 163              	.L7:
 164 003a C046     	 .align 2
 165              	.L6:
 166 003c F07FFFFF 	 .word -32784
 167              	 .cfi_endproc
 168              	.LFE82:
 170              	 .section .text.GLOBAL_ADC_GetAppVersion,"ax",%progbits
 171              	 .align 2
 172              	 .global GLOBAL_ADC_GetAppVersion
 173              	 .code 16
 174              	 .thumb_func
 176              	GLOBAL_ADC_GetAppVersion:
 177              	.LFB153:
 178              	 .file 2 "../Dave/Generated/GLOBAL_ADC/global_adc.c"
   1:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**
   2:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * @file global_adc.c
   3:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * @date 2017-06-24
   4:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
   5:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * NOTE:
   6:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
   8:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * @cond
   9:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  10:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * GLOBAL_ADC v4.0.18 - Initializes VADC GLOBAL and GROUP resources.
  11:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  12:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  13:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * All rights reserved.
  14:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  15:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * following conditions are met:
  17:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  18:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   disclaimer.
  20:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  21:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  24:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  27:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  35:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  38:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  39:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * Change History
  40:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * --------------
  41:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  42:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-02-16:
  43:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Initial version for DAVEv4.<BR>
  44:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  45:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-04-27:
  46:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Configuration structure modified.<BR>
  47:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - GLOBAL_ADC_group_t changed to GLOBAL_ADC_GROUP_t.<BR>
  48:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  49:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-06-20:
  50:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Updated the copyright section.<BR>
  51:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  52:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-09-01:
  53:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Added support for XMC14 and XMC48/47.<BR>
  54:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  55:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-10-01:
  56:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Analog clock default value changed to 26Mhz in XMC42.<BR>
  57:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  58:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-10-08:
  59:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Added support for XMC4700/XMC4800 devices.<BR>
  60:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  61:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2015-12-03:
  62:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Added support for XMC4300 devices.<BR>
  63:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Optimized the manifest.<BR>
  64:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  65:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2016-03-18:
  66:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     -Modified the minimum configurable value for Desired analog clock in XMC1x to 1MHz.<BR>
  67:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  68:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2016-07-08:
  69:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Fixed incorrect case for an included header.<br>
  70:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  71:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * 2016-08-18:
  72:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *     - Added support for low frequency operations by configuring DIVS.<BR>
  73:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  74:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * @endcond
  75:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  *
  76:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  */
  77:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  78:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**************************************************************************************************
  79:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * HEADER FILES
  80:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  81:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  82:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /** Inclusion of header file */
  83:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #include "global_adc.h"
  84:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  85:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**************************************************************************************************
  86:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * MACROS
  87:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  88:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  89:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**************************************************************************************************
  90:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * LOCAL DATA
  91:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  92:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  93:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**************************************************************************************************
  94:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * LOCAL ROUTINES
  95:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
  96:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
  97:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  /*************************************************************************************************
  98:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * API IMPLEMENTATION
  99:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  **************************************************************************************************
 100:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 101:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /*This function returns the version of the GLOBAL_ADC APP*/
 102:../Dave/Generated/GLOBAL_ADC/global_adc.c **** DAVE_APP_VERSION_t GLOBAL_ADC_GetAppVersion(void)
 103:../Dave/Generated/GLOBAL_ADC/global_adc.c **** {
 179              	 .loc 2 103 0
 180              	 .cfi_startproc
 181 0000 80B5     	 push {r7,lr}
 182              	.LCFI9:
 183              	 .cfi_def_cfa_offset 8
 184              	 .cfi_offset 7,-8
 185              	 .cfi_offset 14,-4
 186 0002 82B0     	 sub sp,sp,#8
 187              	.LCFI10:
 188              	 .cfi_def_cfa_offset 16
 189 0004 00AF     	 add r7,sp,#0
 190              	.LCFI11:
 191              	 .cfi_def_cfa_register 7
 104:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   DAVE_APP_VERSION_t version;
 105:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 106:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   version.major = (uint8_t) GLOBAL_ADC_MAJOR_VERSION;
 192              	 .loc 2 106 0
 193 0006 3B1C     	 mov r3,r7
 194 0008 0422     	 mov r2,#4
 195 000a 1A70     	 strb r2,[r3]
 107:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   version.minor = (uint8_t) GLOBAL_ADC_MINOR_VERSION;
 196              	 .loc 2 107 0
 197 000c 3B1C     	 mov r3,r7
 198 000e 0022     	 mov r2,#0
 199 0010 5A70     	 strb r2,[r3,#1]
 108:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   version.patch = (uint8_t) GLOBAL_ADC_PATCH_VERSION;
 200              	 .loc 2 108 0
 201 0012 3B1C     	 mov r3,r7
 202 0014 1222     	 mov r2,#18
 203 0016 9A70     	 strb r2,[r3,#2]
 109:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 110:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   return version;
 204              	 .loc 2 110 0
 205 0018 3B1D     	 add r3,r7,#4
 206 001a 3A1C     	 mov r2,r7
 207 001c 1188     	 ldrh r1,[r2]
 208 001e 1980     	 strh r1,[r3]
 209 0020 9278     	 ldrb r2,[r2,#2]
 210 0022 9A70     	 strb r2,[r3,#2]
 211 0024 3A1D     	 add r2,r7,#4
 212 0026 0023     	 mov r3,#0
 213 0028 1178     	 ldrb r1,[r2]
 214 002a FF20     	 mov r0,#255
 215 002c 0140     	 and r1,r0
 216 002e FF20     	 mov r0,#255
 217 0030 8343     	 bic r3,r0
 218 0032 0B43     	 orr r3,r1
 219 0034 5178     	 ldrb r1,[r2,#1]
 220 0036 FF20     	 mov r0,#255
 221 0038 0140     	 and r1,r0
 222 003a 0902     	 lsl r1,r1,#8
 223 003c 0648     	 ldr r0,.L10
 224 003e 0340     	 and r3,r0
 225 0040 0B43     	 orr r3,r1
 226 0042 9278     	 ldrb r2,[r2,#2]
 227 0044 FF21     	 mov r1,#255
 228 0046 0A40     	 and r2,r1
 229 0048 1204     	 lsl r2,r2,#16
 230 004a 0449     	 ldr r1,.L10+4
 231 004c 0B40     	 and r3,r1
 232 004e 1343     	 orr r3,r2
 111:../Dave/Generated/GLOBAL_ADC/global_adc.c **** }
 233              	 .loc 2 111 0
 234 0050 181C     	 mov r0,r3
 235 0052 BD46     	 mov sp,r7
 236 0054 02B0     	 add sp,sp,#8
 237              	 
 238 0056 80BD     	 pop {r7,pc}
 239              	.L11:
 240              	 .align 2
 241              	.L10:
 242 0058 FF00FFFF 	 .word -65281
 243 005c FFFF00FF 	 .word -16711681
 244              	 .cfi_endproc
 245              	.LFE153:
 247              	 .section .text.GLOBAL_ADC_Init,"ax",%progbits
 248              	 .align 2
 249              	 .global GLOBAL_ADC_Init
 250              	 .code 16
 251              	 .thumb_func
 253              	GLOBAL_ADC_Init:
 254              	.LFB154:
 112:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 113:../Dave/Generated/GLOBAL_ADC/global_adc.c **** /**
 114:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  * This function initializes all instances of the ADC Global APP and low level app.
 115:../Dave/Generated/GLOBAL_ADC/global_adc.c ****  */
 116:../Dave/Generated/GLOBAL_ADC/global_adc.c **** GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
 117:../Dave/Generated/GLOBAL_ADC/global_adc.c **** {
 255              	 .loc 2 117 0
 256              	 .cfi_startproc
 257 0000 80B5     	 push {r7,lr}
 258              	.LCFI12:
 259              	 .cfi_def_cfa_offset 8
 260              	 .cfi_offset 7,-8
 261              	 .cfi_offset 14,-4
 262 0002 84B0     	 sub sp,sp,#16
 263              	.LCFI13:
 264              	 .cfi_def_cfa_offset 24
 265 0004 00AF     	 add r7,sp,#0
 266              	.LCFI14:
 267              	 .cfi_def_cfa_register 7
 268 0006 7860     	 str r0,[r7,#4]
 118:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
 119:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 120:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   uint32_t group_index;
 121:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif
 122:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 123:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 269              	 .loc 2 123 0
 270 0008 7B68     	 ldr r3,[r7,#4]
 271 000a 1B7E     	 ldrb r3,[r3,#24]
 272 000c 022B     	 cmp r3,#2
 273 000e 5ED1     	 bne .L13
 124:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   {  
 125:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     /* Initialize an instance of Global hardware */
 126:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 274              	 .loc 2 126 0
 275 0010 7B68     	 ldr r3,[r7,#4]
 276 0012 DA68     	 ldr r2,[r3,#12]
 277 0014 7B68     	 ldr r3,[r7,#4]
 278 0016 9B68     	 ldr r3,[r3,#8]
 279 0018 101C     	 mov r0,r2
 280 001a 191C     	 mov r1,r3
 281 001c FFF7FEFF 	 bl XMC_VADC_GLOBAL_Init
 127:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 128:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     /* Initialize all the Groups */
 129:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 130:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 282              	 .loc 2 130 0
 283 0020 0023     	 mov r3,#0
 284 0022 FB60     	 str r3,[r7,#12]
 285 0024 38E0     	 b .L14
 286              	.L16:
 131:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     {
 132:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       /*Initialize Group*/
 133:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 287              	 .loc 2 133 0
 288 0026 7B68     	 ldr r3,[r7,#4]
 289 0028 FA68     	 ldr r2,[r7,#12]
 290 002a 9200     	 lsl r2,r2,#2
 291 002c D358     	 ldr r3,[r2,r3]
 292 002e 1968     	 ldr r1,[r3]
 134:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 293              	 .loc 2 134 0
 294 0030 7B68     	 ldr r3,[r7,#4]
 295 0032 FA68     	 ldr r2,[r7,#12]
 296 0034 9200     	 lsl r2,r2,#2
 297 0036 D358     	 ldr r3,[r2,r3]
 133:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 298              	 .loc 2 133 0
 299 0038 5B68     	 ldr r3,[r3,#4]
 300 003a 081C     	 mov r0,r1
 301 003c 191C     	 mov r1,r3
 302 003e FFF7FEFF 	 bl XMC_VADC_GROUP_Init
 135:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 136:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       /* Switch on the converter of the Group[group_index]*/
 137:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 303              	 .loc 2 137 0
 304 0042 7B68     	 ldr r3,[r7,#4]
 305 0044 FA68     	 ldr r2,[r7,#12]
 306 0046 9200     	 lsl r2,r2,#2
 307 0048 D358     	 ldr r3,[r2,r3]
 308 004a 1B68     	 ldr r3,[r3]
 309 004c 181C     	 mov r0,r3
 310 004e 0321     	 mov r1,#3
 311 0050 FFF7FEFF 	 bl XMC_VADC_GROUP_SetPowerMode
 138:../Dave/Generated/GLOBAL_ADC/global_adc.c ****                                   XMC_VADC_GROUP_POWERMODE_NORMAL);
 139:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 140:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       /* Disable the post calibration option for the respective group*/
 141:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 312              	 .loc 2 141 0
 313 0054 7B68     	 ldr r3,[r7,#4]
 314 0056 FA68     	 ldr r2,[r7,#12]
 315 0058 9200     	 lsl r2,r2,#2
 316 005a D358     	 ldr r3,[r2,r3]
 317 005c 1B7A     	 ldrb r3,[r3,#8]
 318 005e 0122     	 mov r2,#1
 319 0060 5340     	 eor r3,r2
 320 0062 DBB2     	 uxtb r3,r3
 321 0064 002B     	 cmp r3,#0
 322 0066 06D0     	 beq .L15
 142:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       {
 143:../Dave/Generated/GLOBAL_ADC/global_adc.c ****         XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 323              	 .loc 2 143 0
 324 0068 7B68     	 ldr r3,[r7,#4]
 325 006a DA68     	 ldr r2,[r3,#12]
 326 006c FB68     	 ldr r3,[r7,#12]
 327 006e 101C     	 mov r0,r2
 328 0070 191C     	 mov r1,r3
 329 0072 FFF7FEFF 	 bl XMC_VADC_GLOBAL_DisablePostCalibration
 330              	.L15:
 144:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       }
 145:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 146:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 147:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t
 331              	 .loc 2 147 0 discriminator 2
 332 0076 7B68     	 ldr r3,[r7,#4]
 333 0078 1A69     	 ldr r2,[r3,#16]
 334 007a FB68     	 ldr r3,[r7,#12]
 335 007c DBB2     	 uxtb r3,r3
 336 007e 101C     	 mov r0,r2
 337 0080 191C     	 mov r1,r3
 338 0082 FFF7FEFF 	 bl XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
 148:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif
 149:../Dave/Generated/GLOBAL_ADC/global_adc.c **** 
 150:../Dave/Generated/GLOBAL_ADC/global_adc.c ****       handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 339              	 .loc 2 150 0 discriminator 2
 340 0086 7B68     	 ldr r3,[r7,#4]
 341 0088 FA68     	 ldr r2,[r7,#12]
 342 008a 9200     	 lsl r2,r2,#2
 343 008c D358     	 ldr r3,[r2,r3]
 344 008e 0022     	 mov r2,#0
 345 0090 5A72     	 strb r2,[r3,#9]
 130:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     {
 346              	 .loc 2 130 0 discriminator 2
 347 0092 FB68     	 ldr r3,[r7,#12]
 348 0094 0133     	 add r3,r3,#1
 349 0096 FB60     	 str r3,[r7,#12]
 350              	.L14:
 130:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     {
 351              	 .loc 2 130 0 is_stmt 0 discriminator 1
 352 0098 FB68     	 ldr r3,[r7,#12]
 353 009a 012B     	 cmp r3,#1
 354 009c C3D9     	 bls .L16
 151:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     }
 152:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 153:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     XMC_VADC_GLOBAL_SHS_SetClockDivider(handle_ptr->global_shs_ptr, (uint8_t) GLOBAL_ADC_DIVS_VALUE
 355              	 .loc 2 153 0 is_stmt 1
 356 009e 7B68     	 ldr r3,[r7,#4]
 357 00a0 1B69     	 ldr r3,[r3,#16]
 358 00a2 181C     	 mov r0,r3
 359 00a4 0021     	 mov r1,#0
 360 00a6 FFF7FEFF 	 bl XMC_VADC_GLOBAL_SHS_SetClockDivider
 154:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif
 155:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif /* _XMC_VADC_GROUP_AVAILABLE_ */
 156:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 157:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
 361              	 .loc 2 157 0
 362 00aa 7B68     	 ldr r3,[r7,#4]
 363 00ac 1B69     	 ldr r3,[r3,#16]
 364 00ae 181C     	 mov r0,r3
 365 00b0 0021     	 mov r1,#0
 366 00b2 FFF7FEFF 	 bl XMC_VADC_GLOBAL_SHS_SetAnalogReference
 158:../Dave/Generated/GLOBAL_ADC/global_adc.c **** #endif
 159:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     if((bool)true == handle_ptr->enable_startup_calibration)
 367              	 .loc 2 159 0
 368 00b6 7B68     	 ldr r3,[r7,#4]
 369 00b8 5B7E     	 ldrb r3,[r3,#25]
 370 00ba 002B     	 cmp r3,#0
 371 00bc 04D0     	 beq .L17
 160:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     {
 161:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 372              	 .loc 2 161 0
 373 00be 7B68     	 ldr r3,[r7,#4]
 374 00c0 DB68     	 ldr r3,[r3,#12]
 375 00c2 181C     	 mov r0,r3
 376 00c4 FFF7FEFF 	 bl XMC_VADC_GLOBAL_StartupCalibration
 377              	.L17:
 162:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     }
 163:../Dave/Generated/GLOBAL_ADC/global_adc.c ****     handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 378              	 .loc 2 163 0
 379 00c8 7B68     	 ldr r3,[r7,#4]
 380 00ca 0022     	 mov r2,#0
 381 00cc 1A76     	 strb r2,[r3,#24]
 382              	.L13:
 164:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   }
 165:../Dave/Generated/GLOBAL_ADC/global_adc.c ****   return (handle_ptr->init_state);
 383              	 .loc 2 165 0
 384 00ce 7B68     	 ldr r3,[r7,#4]
 385 00d0 1B7E     	 ldrb r3,[r3,#24]
 166:../Dave/Generated/GLOBAL_ADC/global_adc.c **** }
 386              	 .loc 2 166 0
 387 00d2 181C     	 mov r0,r3
 388 00d4 BD46     	 mov sp,r7
 389 00d6 04B0     	 add sp,sp,#16
 390              	 
 391 00d8 80BD     	 pop {r7,pc}
 392              	 .cfi_endproc
 393              	.LFE154:
 395 00da C046     	 .text
 396              	.Letext0:
 397              	 .file 3 "n:\\eecs 473\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 398              	 .file 4 "n:\\eecs 473\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 399              	 .file 5 "N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Infineon/XMC1400_series/Include/XMC1400.h"
 400              	 .file 6 "N:/EECS 473/Myoelectric/myoelectric/Dave/Generated/DAVE_Common.h"
 401              	 .file 7 "../Dave/Generated/GLOBAL_ADC/global_adc.h"
 402              	 .file 8 "N:/EECS 473/Myoelectric/myoelectric/Libraries/CMSIS/Infineon/XMC1400_series/Include/system_XMC1400.h"
DEFINED SYMBOLS
                            *ABS*:00000000 global_adc.c
    {standard input}:18     .text.XMC_VADC_GLOBAL_DisablePostCalibration:00000000 $t
    {standard input}:22     .text.XMC_VADC_GLOBAL_DisablePostCalibration:00000000 XMC_VADC_GLOBAL_DisablePostCalibration
    {standard input}:62     .text.XMC_VADC_GLOBAL_SHS_SetAnalogReference:00000000 $t
    {standard input}:66     .text.XMC_VADC_GLOBAL_SHS_SetAnalogReference:00000000 XMC_VADC_GLOBAL_SHS_SetAnalogReference
    {standard input}:109    .text.XMC_VADC_GLOBAL_SHS_SetAnalogReference:00000034 $d
    {standard input}:114    .text.XMC_VADC_GLOBAL_SHS_SetClockDivider:00000000 $t
    {standard input}:118    .text.XMC_VADC_GLOBAL_SHS_SetClockDivider:00000000 XMC_VADC_GLOBAL_SHS_SetClockDivider
    {standard input}:166    .text.XMC_VADC_GLOBAL_SHS_SetClockDivider:0000003c $d
    {standard input}:171    .text.GLOBAL_ADC_GetAppVersion:00000000 $t
    {standard input}:176    .text.GLOBAL_ADC_GetAppVersion:00000000 GLOBAL_ADC_GetAppVersion
    {standard input}:242    .text.GLOBAL_ADC_GetAppVersion:00000058 $d
    {standard input}:248    .text.GLOBAL_ADC_Init:00000000 $t
    {standard input}:253    .text.GLOBAL_ADC_Init:00000000 GLOBAL_ADC_Init
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_VADC_GLOBAL_Init
XMC_VADC_GROUP_Init
XMC_VADC_GROUP_SetPowerMode
XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode
XMC_VADC_GLOBAL_StartupCalibration
