
myoelectric.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f3c  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000144  2000000c  10002f3c  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000400  20000150  00000000  00000150  2**0
                  ALLOC
  3 .data         00000120  20000550  10003080  00008550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000006b8  20000670  00000520  00008670  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  00003eac  00000150  2**2
                  ALLOC
  6 .debug_aranges 00000b08  00000000  00000000  00008670  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00015b6a  00000000  00000000  00009178  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000025fe  00000000  00000000  0001ece2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005474  00000000  00000000  000212e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002344  00000000  00000000  00026754  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00008ba5  00000000  00000000  00028a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003978  00000000  00000000  0003163d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000920  00000000  00000000  00034fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000578  00000000  00000000  000358d8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	50 05 00 20 1d 10 00 10 00 00 00 00 9d 10 00 10     P.. ............
10001010:	00 18 04 00 00 01 00 00 00 00 00 80                 ............

1000101c <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
1000101c:	4911      	ldr	r1, [pc, #68]	; (10001064 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101e:	4a12      	ldr	r2, [pc, #72]	; (10001068 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
10001020:	4b12      	ldr	r3, [pc, #72]	; (1000106c <__copy_data+0x16>)
	bl  __copy_data
10001022:	f000 f818 	bl	10001056 <__copy_data>

    ldr  r0, =SystemInit
10001026:	4812      	ldr	r0, [pc, #72]	; (10001070 <__copy_data+0x1a>)
    blx  r0
10001028:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
1000102a:	4912      	ldr	r1, [pc, #72]	; (10001074 <__copy_data+0x1e>)
	ldr	r2, =__data_start
1000102c:	4a12      	ldr	r2, [pc, #72]	; (10001078 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102e:	4b13      	ldr	r3, [pc, #76]	; (1000107c <__copy_data+0x26>)
	bl  __copy_data
10001030:	f000 f811 	bl	10001056 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001034:	4912      	ldr	r1, [pc, #72]	; (10001080 <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001036:	4a13      	ldr	r2, [pc, #76]	; (10001084 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001038:	4b13      	ldr	r3, [pc, #76]	; (10001088 <__copy_data+0x32>)
	bl  __copy_data
1000103a:	f000 f80c 	bl	10001056 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103e:	4913      	ldr	r1, [pc, #76]	; (1000108c <__copy_data+0x36>)
	ldr	r2, =__bss_end
10001040:	4a13      	ldr	r2, [pc, #76]	; (10001090 <__copy_data+0x3a>)

	movs	r0, 0
10001042:	2000      	movs	r0, #0

	subs	r2, r1
10001044:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001046:	dd02      	ble.n	1000104e <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001048:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
1000104a:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
1000104c:	dcfc      	bgt.n	10001048 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x3e>)
    blx  r0
10001050:	4780      	blx	r0
#endif

    ldr  r0, =main
10001052:	4811      	ldr	r0, [pc, #68]	; (10001098 <__copy_data+0x42>)
    blx  r0
10001054:	4780      	blx	r0

10001056 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001056:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001058:	dd03      	ble.n	10001062 <__copy_data+0xc>

.L_loop:
	subs	r3, #4
1000105a:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
1000105c:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105e:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
10001060:	dcfb      	bgt.n	1000105a <__copy_data+0x4>

.L_loop_done:
	bx  lr
10001062:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001064:	10002f3c 	.word	0x10002f3c
	ldr	r2, =VeneerStart
10001068:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
1000106c:	20000150 	.word	0x20000150
	bl  __copy_data

    ldr  r0, =SystemInit
10001070:	100010a1 	.word	0x100010a1
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001074:	10003080 	.word	0x10003080
	ldr	r2, =__data_start
10001078:	20000550 	.word	0x20000550
	ldr	r3, =__data_end
1000107c:	20000670 	.word	0x20000670
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
10001080:	100031a0 	.word	0x100031a0
	ldr	r2, =__ram_code_start
10001084:	20000670 	.word	0x20000670
	ldr	r3, =__ram_code_end
10001088:	20000670 	.word	0x20000670
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000108c:	20000670 	.word	0x20000670
	ldr	r2, =__bss_end
10001090:	20000d28 	.word	0x20000d28
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001094:	10002e49 	.word	0x10002e49
    blx  r0
#endif

    ldr  r0, =main
10001098:	10002e15 	.word	0x10002e15

1000109c <HardFault_Handler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_Handler:
    b  .
1000109c:	e7fe      	b.n	1000109c <HardFault_Handler>
	...

100010a0 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
100010a0:	b580      	push	{r7, lr}
100010a2:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a4:	f001 fbe6 	bl	10002874 <SystemCoreSetup>
  SystemCoreClockSetup();
100010a8:	f001 fc32 	bl	10002910 <SystemCoreClockSetup>
}
100010ac:	46bd      	mov	sp, r7
100010ae:	bd80      	pop	{r7, pc}

100010b0 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010b0:	b580      	push	{r7, lr}
100010b2:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010b4:	4b2a      	ldr	r3, [pc, #168]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010b6:	681a      	ldr	r2, [r3, #0]
100010b8:	23ff      	movs	r3, #255	; 0xff
100010ba:	021b      	lsls	r3, r3, #8
100010bc:	4013      	ands	r3, r2
100010be:	0a1a      	lsrs	r2, r3, #8
100010c0:	4b28      	ldr	r3, [pc, #160]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c2:	601a      	str	r2, [r3, #0]

  if (IDIV != 0)
100010c4:	4b27      	ldr	r3, [pc, #156]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010c6:	681b      	ldr	r3, [r3, #0]
100010c8:	2b00      	cmp	r3, #0
100010ca:	d037      	beq.n	1000113c <SystemCoreClockUpdate+0x8c>
  {
    FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010cc:	4b24      	ldr	r3, [pc, #144]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ce:	681b      	ldr	r3, [r3, #0]
100010d0:	22ff      	movs	r2, #255	; 0xff
100010d2:	401a      	ands	r2, r3
100010d4:	4b24      	ldr	r3, [pc, #144]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010d6:	601a      	str	r2, [r3, #0]
    FDIV |= ((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_FDIV_Msk) << 8;
100010d8:	4b21      	ldr	r3, [pc, #132]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010da:	69db      	ldr	r3, [r3, #28]
100010dc:	2203      	movs	r2, #3
100010de:	4013      	ands	r3, r2
100010e0:	021a      	lsls	r2, r3, #8
100010e2:	4b21      	ldr	r3, [pc, #132]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010e4:	681b      	ldr	r3, [r3, #0]
100010e6:	431a      	orrs	r2, r3
100010e8:	4b1f      	ldr	r3, [pc, #124]	; (10001168 <SystemCoreClockUpdate+0xb8>)
100010ea:	601a      	str	r2, [r3, #0]
    
    /* Fractional divider is enabled and used */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
100010ec:	4b1c      	ldr	r3, [pc, #112]	; (10001160 <SystemCoreClockUpdate+0xb0>)
100010ee:	69da      	ldr	r2, [r3, #28]
100010f0:	2380      	movs	r3, #128	; 0x80
100010f2:	009b      	lsls	r3, r3, #2
100010f4:	4013      	ands	r3, r2
100010f6:	d10e      	bne.n	10001116 <SystemCoreClockUpdate+0x66>
    {
       SystemCoreClock = ((uint32_t)((DCO1_FREQUENCY << 6U) / ((IDIV << 10) + FDIV))) << 4U;
100010f8:	4b1a      	ldr	r3, [pc, #104]	; (10001164 <SystemCoreClockUpdate+0xb4>)
100010fa:	681b      	ldr	r3, [r3, #0]
100010fc:	029a      	lsls	r2, r3, #10
100010fe:	4b1a      	ldr	r3, [pc, #104]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001100:	681b      	ldr	r3, [r3, #0]
10001102:	18d3      	adds	r3, r2, r3
10001104:	4819      	ldr	r0, [pc, #100]	; (1000116c <SystemCoreClockUpdate+0xbc>)
10001106:	1c19      	adds	r1, r3, #0
10001108:	f000 fbd6 	bl	100018b8 <__aeabi_uidiv>
1000110c:	1c03      	adds	r3, r0, #0
1000110e:	011a      	lsls	r2, r3, #4
10001110:	4b17      	ldr	r3, [pc, #92]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001112:	601a      	str	r2, [r3, #0]
10001114:	e021      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
       SystemCoreClock = ((uint32_t)((OSCHP_GetFrequency() << 6U) / ((IDIV << 10) + FDIV))) << 4U;
10001116:	f000 f82f 	bl	10001178 <OSCHP_GetFrequency>
1000111a:	1c03      	adds	r3, r0, #0
1000111c:	0199      	lsls	r1, r3, #6
1000111e:	4b11      	ldr	r3, [pc, #68]	; (10001164 <SystemCoreClockUpdate+0xb4>)
10001120:	681b      	ldr	r3, [r3, #0]
10001122:	029a      	lsls	r2, r3, #10
10001124:	4b10      	ldr	r3, [pc, #64]	; (10001168 <SystemCoreClockUpdate+0xb8>)
10001126:	681b      	ldr	r3, [r3, #0]
10001128:	18d3      	adds	r3, r2, r3
1000112a:	1c08      	adds	r0, r1, #0
1000112c:	1c19      	adds	r1, r3, #0
1000112e:	f000 fbc3 	bl	100018b8 <__aeabi_uidiv>
10001132:	1c03      	adds	r3, r0, #0
10001134:	011a      	lsls	r2, r3, #4
10001136:	4b0e      	ldr	r3, [pc, #56]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001138:	601a      	str	r2, [r3, #0]
1000113a:	e00e      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
  }
  else
  {
    /* Fractional divider bypassed. */
    if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
1000113c:	4b08      	ldr	r3, [pc, #32]	; (10001160 <SystemCoreClockUpdate+0xb0>)
1000113e:	69da      	ldr	r2, [r3, #28]
10001140:	2380      	movs	r3, #128	; 0x80
10001142:	009b      	lsls	r3, r3, #2
10001144:	4013      	ands	r3, r2
10001146:	d103      	bne.n	10001150 <SystemCoreClockUpdate+0xa0>
    {
        SystemCoreClock = DCO1_FREQUENCY;
10001148:	4b09      	ldr	r3, [pc, #36]	; (10001170 <SystemCoreClockUpdate+0xc0>)
1000114a:	4a0a      	ldr	r2, [pc, #40]	; (10001174 <SystemCoreClockUpdate+0xc4>)
1000114c:	601a      	str	r2, [r3, #0]
1000114e:	e004      	b.n	1000115a <SystemCoreClockUpdate+0xaa>
    }
    else
    {
        SystemCoreClock = OSCHP_GetFrequency();
10001150:	f000 f812 	bl	10001178 <OSCHP_GetFrequency>
10001154:	1c02      	adds	r2, r0, #0
10001156:	4b06      	ldr	r3, [pc, #24]	; (10001170 <SystemCoreClockUpdate+0xc0>)
10001158:	601a      	str	r2, [r3, #0]
    }
  }
}
1000115a:	46bd      	mov	sp, r7
1000115c:	bd80      	pop	{r7, pc}
1000115e:	46c0      	nop			; (mov r8, r8)
10001160:	40010300 	.word	0x40010300
10001164:	20000670 	.word	0x20000670
10001168:	20000674 	.word	0x20000674
1000116c:	b71b0000 	.word	0xb71b0000
10001170:	20003ffc 	.word	0x20003ffc
10001174:	02dc6c00 	.word	0x02dc6c00

10001178 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
10001178:	b580      	push	{r7, lr}
1000117a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
1000117c:	4b01      	ldr	r3, [pc, #4]	; (10001184 <OSCHP_GetFrequency+0xc>)
}
1000117e:	1c18      	adds	r0, r3, #0
10001180:	46bd      	mov	sp, r7
10001182:	bd80      	pop	{r7, pc}
10001184:	01312d00 	.word	0x01312d00

10001188 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001188:	b590      	push	{r4, r7, lr}
1000118a:	b085      	sub	sp, #20
1000118c:	af00      	add	r7, sp, #0
1000118e:	60f8      	str	r0, [r7, #12]
10001190:	607a      	str	r2, [r7, #4]
10001192:	230b      	movs	r3, #11
10001194:	18fb      	adds	r3, r7, r3
10001196:	1c0a      	adds	r2, r1, #0
10001198:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
1000119a:	230b      	movs	r3, #11
1000119c:	18fb      	adds	r3, r7, r3
1000119e:	781b      	ldrb	r3, [r3, #0]
100011a0:	089b      	lsrs	r3, r3, #2
100011a2:	b2db      	uxtb	r3, r3
100011a4:	1c18      	adds	r0, r3, #0
100011a6:	230b      	movs	r3, #11
100011a8:	18fb      	adds	r3, r7, r3
100011aa:	781b      	ldrb	r3, [r3, #0]
100011ac:	089b      	lsrs	r3, r3, #2
100011ae:	b2db      	uxtb	r3, r3
100011b0:	1c1a      	adds	r2, r3, #0
100011b2:	68fb      	ldr	r3, [r7, #12]
100011b4:	3204      	adds	r2, #4
100011b6:	0092      	lsls	r2, r2, #2
100011b8:	58d3      	ldr	r3, [r2, r3]
100011ba:	220b      	movs	r2, #11
100011bc:	18ba      	adds	r2, r7, r2
100011be:	7812      	ldrb	r2, [r2, #0]
100011c0:	2103      	movs	r1, #3
100011c2:	400a      	ands	r2, r1
100011c4:	00d2      	lsls	r2, r2, #3
100011c6:	1c11      	adds	r1, r2, #0
100011c8:	22fc      	movs	r2, #252	; 0xfc
100011ca:	408a      	lsls	r2, r1
100011cc:	43d2      	mvns	r2, r2
100011ce:	401a      	ands	r2, r3
100011d0:	1c11      	adds	r1, r2, #0
100011d2:	68fb      	ldr	r3, [r7, #12]
100011d4:	1d02      	adds	r2, r0, #4
100011d6:	0092      	lsls	r2, r2, #2
100011d8:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100011da:	68fb      	ldr	r3, [r7, #12]
100011dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
100011de:	220b      	movs	r2, #11
100011e0:	18ba      	adds	r2, r7, r2
100011e2:	7812      	ldrb	r2, [r2, #0]
100011e4:	0052      	lsls	r2, r2, #1
100011e6:	1c11      	adds	r1, r2, #0
100011e8:	2203      	movs	r2, #3
100011ea:	408a      	lsls	r2, r1
100011ec:	43d2      	mvns	r2, r2
100011ee:	401a      	ands	r2, r3
100011f0:	68fb      	ldr	r3, [r7, #12]
100011f2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
100011f4:	230b      	movs	r3, #11
100011f6:	18fb      	adds	r3, r7, r3
100011f8:	781b      	ldrb	r3, [r3, #0]
100011fa:	08db      	lsrs	r3, r3, #3
100011fc:	b2db      	uxtb	r3, r3
100011fe:	1c18      	adds	r0, r3, #0
10001200:	230b      	movs	r3, #11
10001202:	18fb      	adds	r3, r7, r3
10001204:	781b      	ldrb	r3, [r3, #0]
10001206:	08db      	lsrs	r3, r3, #3
10001208:	b2db      	uxtb	r3, r3
1000120a:	1c1a      	adds	r2, r3, #0
1000120c:	68fb      	ldr	r3, [r7, #12]
1000120e:	3210      	adds	r2, #16
10001210:	0092      	lsls	r2, r2, #2
10001212:	58d3      	ldr	r3, [r2, r3]
10001214:	220b      	movs	r2, #11
10001216:	18ba      	adds	r2, r7, r2
10001218:	7812      	ldrb	r2, [r2, #0]
1000121a:	2107      	movs	r1, #7
1000121c:	400a      	ands	r2, r1
1000121e:	0092      	lsls	r2, r2, #2
10001220:	1c11      	adds	r1, r2, #0
10001222:	2204      	movs	r2, #4
10001224:	408a      	lsls	r2, r1
10001226:	43d2      	mvns	r2, r2
10001228:	401a      	ands	r2, r3
1000122a:	1c11      	adds	r1, r2, #0
1000122c:	68fb      	ldr	r3, [r7, #12]
1000122e:	1c02      	adds	r2, r0, #0
10001230:	3210      	adds	r2, #16
10001232:	0092      	lsls	r2, r2, #2
10001234:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10001236:	230b      	movs	r3, #11
10001238:	18fb      	adds	r3, r7, r3
1000123a:	781b      	ldrb	r3, [r3, #0]
1000123c:	08db      	lsrs	r3, r3, #3
1000123e:	b2db      	uxtb	r3, r3
10001240:	1c18      	adds	r0, r3, #0
10001242:	230b      	movs	r3, #11
10001244:	18fb      	adds	r3, r7, r3
10001246:	781b      	ldrb	r3, [r3, #0]
10001248:	08db      	lsrs	r3, r3, #3
1000124a:	b2db      	uxtb	r3, r3
1000124c:	1c1a      	adds	r2, r3, #0
1000124e:	68fb      	ldr	r3, [r7, #12]
10001250:	3210      	adds	r2, #16
10001252:	0092      	lsls	r2, r2, #2
10001254:	58d2      	ldr	r2, [r2, r3]
10001256:	687b      	ldr	r3, [r7, #4]
10001258:	785b      	ldrb	r3, [r3, #1]
1000125a:	1c1c      	adds	r4, r3, #0
1000125c:	230b      	movs	r3, #11
1000125e:	18fb      	adds	r3, r7, r3
10001260:	781b      	ldrb	r3, [r3, #0]
10001262:	2107      	movs	r1, #7
10001264:	400b      	ands	r3, r1
10001266:	009b      	lsls	r3, r3, #2
10001268:	409c      	lsls	r4, r3
1000126a:	1c23      	adds	r3, r4, #0
1000126c:	431a      	orrs	r2, r3
1000126e:	1c11      	adds	r1, r2, #0
10001270:	68fb      	ldr	r3, [r7, #12]
10001272:	1c02      	adds	r2, r0, #0
10001274:	3210      	adds	r2, #16
10001276:	0092      	lsls	r2, r2, #2
10001278:	50d1      	str	r1, [r2, r3]
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
1000127a:	68fb      	ldr	r3, [r7, #12]
1000127c:	4a20      	ldr	r2, [pc, #128]	; (10001300 <XMC_GPIO_Init+0x178>)
1000127e:	4293      	cmp	r3, r2
10001280:	d10c      	bne.n	1000129c <XMC_GPIO_Init+0x114>
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001282:	68fb      	ldr	r3, [r7, #12]
10001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001286:	220b      	movs	r2, #11
10001288:	18ba      	adds	r2, r7, r2
1000128a:	7812      	ldrb	r2, [r2, #0]
1000128c:	2101      	movs	r1, #1
1000128e:	4091      	lsls	r1, r2
10001290:	1c0a      	adds	r2, r1, #0
10001292:	43d2      	mvns	r2, r2
10001294:	401a      	ands	r2, r3
10001296:	68fb      	ldr	r3, [r7, #12]
10001298:	661a      	str	r2, [r3, #96]	; 0x60
1000129a:	e00d      	b.n	100012b8 <XMC_GPIO_Init+0x130>
  }
  else 
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
1000129c:	687b      	ldr	r3, [r7, #4]
1000129e:	781b      	ldrb	r3, [r3, #0]
100012a0:	b2db      	uxtb	r3, r3
100012a2:	b25b      	sxtb	r3, r3
100012a4:	2b00      	cmp	r3, #0
100012a6:	da07      	bge.n	100012b8 <XMC_GPIO_Init+0x130>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
100012a8:	687b      	ldr	r3, [r7, #4]
100012aa:	685a      	ldr	r2, [r3, #4]
100012ac:	230b      	movs	r3, #11
100012ae:	18fb      	adds	r3, r7, r3
100012b0:	781b      	ldrb	r3, [r3, #0]
100012b2:	409a      	lsls	r2, r3
100012b4:	68fb      	ldr	r3, [r7, #12]
100012b6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
100012b8:	230b      	movs	r3, #11
100012ba:	18fb      	adds	r3, r7, r3
100012bc:	781b      	ldrb	r3, [r3, #0]
100012be:	089b      	lsrs	r3, r3, #2
100012c0:	b2db      	uxtb	r3, r3
100012c2:	1c18      	adds	r0, r3, #0
100012c4:	230b      	movs	r3, #11
100012c6:	18fb      	adds	r3, r7, r3
100012c8:	781b      	ldrb	r3, [r3, #0]
100012ca:	089b      	lsrs	r3, r3, #2
100012cc:	b2db      	uxtb	r3, r3
100012ce:	1c1a      	adds	r2, r3, #0
100012d0:	68fb      	ldr	r3, [r7, #12]
100012d2:	3204      	adds	r2, #4
100012d4:	0092      	lsls	r2, r2, #2
100012d6:	58d2      	ldr	r2, [r2, r3]
100012d8:	687b      	ldr	r3, [r7, #4]
100012da:	781b      	ldrb	r3, [r3, #0]
100012dc:	1c1c      	adds	r4, r3, #0
100012de:	230b      	movs	r3, #11
100012e0:	18fb      	adds	r3, r7, r3
100012e2:	781b      	ldrb	r3, [r3, #0]
100012e4:	2103      	movs	r1, #3
100012e6:	400b      	ands	r3, r1
100012e8:	00db      	lsls	r3, r3, #3
100012ea:	409c      	lsls	r4, r3
100012ec:	1c23      	adds	r3, r4, #0
100012ee:	431a      	orrs	r2, r3
100012f0:	1c11      	adds	r1, r2, #0
100012f2:	68fb      	ldr	r3, [r7, #12]
100012f4:	1d02      	adds	r2, r0, #4
100012f6:	0092      	lsls	r2, r2, #2
100012f8:	50d1      	str	r1, [r2, r3]
}
100012fa:	46bd      	mov	sp, r7
100012fc:	b005      	add	sp, #20
100012fe:	bd90      	pop	{r4, r7, pc}
10001300:	40040200 	.word	0x40040200

10001304 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
10001304:	b580      	push	{r7, lr}
10001306:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001308:	4b02      	ldr	r3, [pc, #8]	; (10001314 <XMC_SCU_LockProtectedBits+0x10>)
1000130a:	22c3      	movs	r2, #195	; 0xc3
1000130c:	625a      	str	r2, [r3, #36]	; 0x24
}
1000130e:	46bd      	mov	sp, r7
10001310:	bd80      	pop	{r7, pc}
10001312:	46c0      	nop			; (mov r8, r8)
10001314:	40010000 	.word	0x40010000

10001318 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
10001318:	b580      	push	{r7, lr}
1000131a:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
1000131c:	4b05      	ldr	r3, [pc, #20]	; (10001334 <XMC_SCU_UnlockProtectedBits+0x1c>)
1000131e:	22c0      	movs	r2, #192	; 0xc0
10001320:	625a      	str	r2, [r3, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001322:	46c0      	nop			; (mov r8, r8)
10001324:	4b03      	ldr	r3, [pc, #12]	; (10001334 <XMC_SCU_UnlockProtectedBits+0x1c>)
10001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001328:	2204      	movs	r2, #4
1000132a:	4013      	ands	r3, r2
1000132c:	d1fa      	bne.n	10001324 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
1000132e:	46bd      	mov	sp, r7
10001330:	bd80      	pop	{r7, pc}
10001332:	46c0      	nop			; (mov r8, r8)
10001334:	40010000 	.word	0x40010000

10001338 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
10001338:	b580      	push	{r7, lr}
1000133a:	b086      	sub	sp, #24
1000133c:	af00      	add	r7, sp, #0
1000133e:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
10001340:	f7ff ffea 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

#if (UC_SERIES == XMC14)
  /* OSCHP source selection - OSC mode */

  if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
10001344:	687b      	ldr	r3, [r7, #4]
10001346:	799b      	ldrb	r3, [r3, #6]
10001348:	2b30      	cmp	r3, #48	; 0x30
1000134a:	d04c      	beq.n	100013e6 <XMC_SCU_CLOCK_Init+0xae>
  {
    if (OSCHP_GetFrequency() > 20000000U)
1000134c:	f7ff ff14 	bl	10001178 <OSCHP_GetFrequency>
10001350:	1e02      	subs	r2, r0, #0
10001352:	4b45      	ldr	r3, [pc, #276]	; (10001468 <XMC_SCU_CLOCK_Init+0x130>)
10001354:	429a      	cmp	r2, r3
10001356:	d909      	bls.n	1000136c <XMC_SCU_CLOCK_Init+0x34>
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
10001358:	4a44      	ldr	r2, [pc, #272]	; (1000146c <XMC_SCU_CLOCK_Init+0x134>)
1000135a:	4944      	ldr	r1, [pc, #272]	; (1000146c <XMC_SCU_CLOCK_Init+0x134>)
1000135c:	2390      	movs	r3, #144	; 0x90
1000135e:	5acb      	ldrh	r3, [r1, r3]
10001360:	b29b      	uxth	r3, r3
10001362:	2140      	movs	r1, #64	; 0x40
10001364:	430b      	orrs	r3, r1
10001366:	b299      	uxth	r1, r3
10001368:	2390      	movs	r3, #144	; 0x90
1000136a:	52d1      	strh	r1, [r2, r3]
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
1000136c:	4a3f      	ldr	r2, [pc, #252]	; (1000146c <XMC_SCU_CLOCK_Init+0x134>)
1000136e:	493f      	ldr	r1, [pc, #252]	; (1000146c <XMC_SCU_CLOCK_Init+0x134>)
10001370:	2390      	movs	r3, #144	; 0x90
10001372:	5acb      	ldrh	r3, [r1, r3]
10001374:	b29b      	uxth	r3, r3
10001376:	b29b      	uxth	r3, r3
10001378:	1c19      	adds	r1, r3, #0
1000137a:	2332      	movs	r3, #50	; 0x32
1000137c:	4399      	bics	r1, r3
1000137e:	1c0b      	adds	r3, r1, #0
10001380:	b299      	uxth	r1, r3
                               config->oschp_mode;
10001382:	687b      	ldr	r3, [r7, #4]
10001384:	799b      	ldrb	r3, [r3, #6]
    if (OSCHP_GetFrequency() > 20000000U)
    {
      SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
    }

    SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY_Msk | SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk)) |
10001386:	b29b      	uxth	r3, r3
10001388:	430b      	orrs	r3, r1
1000138a:	b29b      	uxth	r3, r3
1000138c:	b299      	uxth	r1, r3
1000138e:	2390      	movs	r3, #144	; 0x90
10001390:	52d1      	strh	r1, [r2, r3]
                               config->oschp_mode;

    do
    {
      /* Restart OSC_HP oscillator watchdog */
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
10001392:	4b37      	ldr	r3, [pc, #220]	; (10001470 <XMC_SCU_CLOCK_Init+0x138>)
10001394:	2202      	movs	r2, #2
10001396:	629a      	str	r2, [r3, #40]	; 0x28

      /* Enable OSC_HP oscillator watchdog*/
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
10001398:	4b36      	ldr	r3, [pc, #216]	; (10001474 <XMC_SCU_CLOCK_Init+0x13c>)
1000139a:	4a36      	ldr	r2, [pc, #216]	; (10001474 <XMC_SCU_CLOCK_Init+0x13c>)
1000139c:	6952      	ldr	r2, [r2, #20]
1000139e:	4936      	ldr	r1, [pc, #216]	; (10001478 <XMC_SCU_CLOCK_Init+0x140>)
100013a0:	400a      	ands	r2, r1
100013a2:	615a      	str	r2, [r3, #20]
100013a4:	2314      	movs	r3, #20
100013a6:	617b      	str	r3, [r7, #20]
100013a8:	e000      	b.n	100013ac <XMC_SCU_CLOCK_Init+0x74>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while(--cycles > 0U)
  {
    __NOP();
100013aa:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while(--cycles > 0U)
100013ac:	697b      	ldr	r3, [r7, #20]
100013ae:	3b01      	subs	r3, #1
100013b0:	617b      	str	r3, [r7, #20]
100013b2:	697b      	ldr	r3, [r7, #20]
100013b4:	2b00      	cmp	r3, #0
100013b6:	d1f8      	bne.n	100013aa <XMC_SCU_CLOCK_Init+0x72>
      SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;

      /* Enable OSC_HP oscillator watchdog*/
      SCU_CLK->OSCCSR &= ~SCU_CLK_OSCCSR_XOWDEN_Msk;
      delay(20);
      SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk;
100013b8:	4b2e      	ldr	r3, [pc, #184]	; (10001474 <XMC_SCU_CLOCK_Init+0x13c>)
100013ba:	4a2e      	ldr	r2, [pc, #184]	; (10001474 <XMC_SCU_CLOCK_Init+0x13c>)
100013bc:	6952      	ldr	r2, [r2, #20]
100013be:	2180      	movs	r1, #128	; 0x80
100013c0:	0489      	lsls	r1, r1, #18
100013c2:	430a      	orrs	r2, r1
100013c4:	615a      	str	r2, [r3, #20]
100013c6:	4b2d      	ldr	r3, [pc, #180]	; (1000147c <XMC_SCU_CLOCK_Init+0x144>)
100013c8:	613b      	str	r3, [r7, #16]
100013ca:	e000      	b.n	100013ce <XMC_SCU_CLOCK_Init+0x96>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while(--cycles > 0U)
  {
    __NOP();
100013cc:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while(--cycles > 0U)
100013ce:	693b      	ldr	r3, [r7, #16]
100013d0:	3b01      	subs	r3, #1
100013d2:	613b      	str	r3, [r7, #16]
100013d4:	693b      	ldr	r3, [r7, #16]
100013d6:	2b00      	cmp	r3, #0
100013d8:	d1f8      	bne.n	100013cc <XMC_SCU_CLOCK_Init+0x94>
      /* Wait a few DCO2 cycles for the update of the clock detection result */
      delay(2500);

      /* check clock is ok */
    }
    while(SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
100013da:	4b25      	ldr	r3, [pc, #148]	; (10001470 <XMC_SCU_CLOCK_Init+0x138>)
100013dc:	6a1b      	ldr	r3, [r3, #32]
100013de:	2202      	movs	r2, #2
100013e0:	4013      	ands	r3, r2
100013e2:	d1d6      	bne.n	10001392 <XMC_SCU_CLOCK_Init+0x5a>
100013e4:	e009      	b.n	100013fa <XMC_SCU_CLOCK_Init+0xc2>
  }
  else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
  {
    SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
100013e6:	4a21      	ldr	r2, [pc, #132]	; (1000146c <XMC_SCU_CLOCK_Init+0x134>)
100013e8:	4920      	ldr	r1, [pc, #128]	; (1000146c <XMC_SCU_CLOCK_Init+0x134>)
100013ea:	2390      	movs	r3, #144	; 0x90
100013ec:	5acb      	ldrh	r3, [r1, r3]
100013ee:	b29b      	uxth	r3, r3
100013f0:	2130      	movs	r1, #48	; 0x30
100013f2:	430b      	orrs	r3, r1
100013f4:	b299      	uxth	r1, r3
100013f6:	2390      	movs	r3, #144	; 0x90
100013f8:	52d1      	strh	r1, [r2, r3]
  }

  SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
100013fa:	4a1c      	ldr	r2, [pc, #112]	; (1000146c <XMC_SCU_CLOCK_Init+0x134>)
100013fc:	687b      	ldr	r3, [r7, #4]
100013fe:	79db      	ldrb	r3, [r3, #7]
10001400:	b299      	uxth	r1, r3
10001402:	238c      	movs	r3, #140	; 0x8c
10001404:	52d1      	strh	r1, [r2, r3]
  if (config->osclp_mode == XMC_SCU_CLOCK_OSCLP_MODE_OSC)
10001406:	687b      	ldr	r3, [r7, #4]
10001408:	79db      	ldrb	r3, [r3, #7]
1000140a:	2b00      	cmp	r3, #0
1000140c:	d109      	bne.n	10001422 <XMC_SCU_CLOCK_Init+0xea>
1000140e:	4b1c      	ldr	r3, [pc, #112]	; (10001480 <XMC_SCU_CLOCK_Init+0x148>)
10001410:	60fb      	str	r3, [r7, #12]
10001412:	e000      	b.n	10001416 <XMC_SCU_CLOCK_Init+0xde>
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while(--cycles > 0U)
  {
    __NOP();
10001414:	46c0      	nop			; (mov r8, r8)

#if UC_SERIES == XMC14
/* This is a local function used to generate the delay until register get updated with new configured value.  */
__STATIC_FORCEINLINE void delay(uint32_t cycles)
{
  while(--cycles > 0U)
10001416:	68fb      	ldr	r3, [r7, #12]
10001418:	3b01      	subs	r3, #1
1000141a:	60fb      	str	r3, [r7, #12]
1000141c:	68fb      	ldr	r3, [r7, #12]
1000141e:	2b00      	cmp	r3, #0
10001420:	d1f8      	bne.n	10001414 <XMC_SCU_CLOCK_Init+0xdc>
  {
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
10001422:	4b14      	ldr	r3, [pc, #80]	; (10001474 <XMC_SCU_CLOCK_Init+0x13c>)
10001424:	4a13      	ldr	r2, [pc, #76]	; (10001474 <XMC_SCU_CLOCK_Init+0x13c>)
10001426:	69d2      	ldr	r2, [r2, #28]
10001428:	4916      	ldr	r1, [pc, #88]	; (10001484 <XMC_SCU_CLOCK_Init+0x14c>)
1000142a:	400a      	ands	r2, r1
                    config->dclk_src;
1000142c:	6879      	ldr	r1, [r7, #4]
1000142e:	8889      	ldrh	r1, [r1, #4]
  {
    /* Wait oscillator startup time ~5s */
    delay(6500000);
  }

  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
10001430:	430a      	orrs	r2, r1
10001432:	61da      	str	r2, [r3, #28]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001434:	4a0f      	ldr	r2, [pc, #60]	; (10001474 <XMC_SCU_CLOCK_Init+0x13c>)
10001436:	4b0f      	ldr	r3, [pc, #60]	; (10001474 <XMC_SCU_CLOCK_Init+0x13c>)
10001438:	681b      	ldr	r3, [r3, #0]
1000143a:	4913      	ldr	r1, [pc, #76]	; (10001488 <XMC_SCU_CLOCK_Init+0x150>)
1000143c:	4019      	ands	r1, r3
                   config->rtc_src |
1000143e:	687b      	ldr	r3, [r7, #4]
10001440:	68db      	ldr	r3, [r3, #12]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001442:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
10001444:	687b      	ldr	r3, [r7, #4]
10001446:	689b      	ldr	r3, [r3, #8]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10001448:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
1000144a:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
1000144c:	f7ff ff5a 	bl	10001304 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
10001450:	687b      	ldr	r3, [r7, #4]
10001452:	789b      	ldrb	r3, [r3, #2]
10001454:	1c1a      	adds	r2, r3, #0
10001456:	687b      	ldr	r3, [r7, #4]
10001458:	881b      	ldrh	r3, [r3, #0]
1000145a:	1c10      	adds	r0, r2, #0
1000145c:	1c19      	adds	r1, r3, #0
1000145e:	f000 f82f 	bl	100014c0 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
10001462:	46bd      	mov	sp, r7
10001464:	b006      	add	sp, #24
10001466:	bd80      	pop	{r7, pc}
10001468:	01312d00 	.word	0x01312d00
1000146c:	40011000 	.word	0x40011000
10001470:	40010038 	.word	0x40010038
10001474:	40010300 	.word	0x40010300
10001478:	fdffffff 	.word	0xfdffffff
1000147c:	000009c4 	.word	0x000009c4
10001480:	00632ea0 	.word	0x00632ea0
10001484:	fffffdff 	.word	0xfffffdff
10001488:	fff0ffff 	.word	0xfff0ffff

1000148c <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
1000148c:	b580      	push	{r7, lr}
1000148e:	b082      	sub	sp, #8
10001490:	af00      	add	r7, sp, #0
10001492:	6078      	str	r0, [r7, #4]
  XMC_SCU_UnlockProtectedBits();
10001494:	f7ff ff40 	bl	10001318 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10001498:	4b08      	ldr	r3, [pc, #32]	; (100014bc <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
1000149a:	4a08      	ldr	r2, [pc, #32]	; (100014bc <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
1000149c:	6911      	ldr	r1, [r2, #16]
1000149e:	687a      	ldr	r2, [r7, #4]
100014a0:	430a      	orrs	r2, r1
100014a2:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100014a4:	46c0      	nop			; (mov r8, r8)
100014a6:	4b05      	ldr	r3, [pc, #20]	; (100014bc <XMC_SCU_CLOCK_UngatePeripheralClock+0x30>)
100014a8:	681a      	ldr	r2, [r3, #0]
100014aa:	2380      	movs	r3, #128	; 0x80
100014ac:	05db      	lsls	r3, r3, #23
100014ae:	4013      	ands	r3, r2
100014b0:	d1f9      	bne.n	100014a6 <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
100014b2:	f7ff ff27 	bl	10001304 <XMC_SCU_LockProtectedBits>
}
100014b6:	46bd      	mov	sp, r7
100014b8:	b002      	add	sp, #8
100014ba:	bd80      	pop	{r7, pc}
100014bc:	40010300 	.word	0x40010300

100014c0 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
100014c0:	b580      	push	{r7, lr}
100014c2:	b084      	sub	sp, #16
100014c4:	af00      	add	r7, sp, #0
100014c6:	6078      	str	r0, [r7, #4]
100014c8:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
100014ca:	f7ff ff25 	bl	10001318 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100014ce:	4b27      	ldr	r3, [pc, #156]	; (1000156c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100014d0:	681a      	ldr	r2, [r3, #0]
100014d2:	23ff      	movs	r3, #255	; 0xff
100014d4:	021b      	lsls	r3, r3, #8
100014d6:	4013      	ands	r3, r2
100014d8:	0a1b      	lsrs	r3, r3, #8
100014da:	60fb      	str	r3, [r7, #12]

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
100014dc:	4b23      	ldr	r3, [pc, #140]	; (1000156c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100014de:	4a23      	ldr	r2, [pc, #140]	; (1000156c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100014e0:	69d2      	ldr	r2, [r2, #28]
100014e2:	2103      	movs	r1, #3
100014e4:	438a      	bics	r2, r1
100014e6:	1c11      	adds	r1, r2, #0
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
100014e8:	683a      	ldr	r2, [r7, #0]
100014ea:	0a12      	lsrs	r2, r2, #8

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
100014ec:	430a      	orrs	r2, r1
100014ee:	61da      	str	r2, [r3, #28]
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100014f0:	4b1e      	ldr	r3, [pc, #120]	; (1000156c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100014f2:	4a1e      	ldr	r2, [pc, #120]	; (1000156c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
100014f4:	6812      	ldr	r2, [r2, #0]
100014f6:	491e      	ldr	r1, [pc, #120]	; (10001570 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb0>)
100014f8:	4011      	ands	r1, r2
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
100014fa:	683a      	ldr	r2, [r7, #0]
100014fc:	20ff      	movs	r0, #255	; 0xff
100014fe:	4002      	ands	r2, r0

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001500:	430a      	orrs	r2, r1
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
10001502:	491c      	ldr	r1, [pc, #112]	; (10001574 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
10001504:	430a      	orrs	r2, r1

#if (UC_SERIES == XMC14)
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
                   (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001506:	601a      	str	r2, [r3, #0]
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001508:	46c0      	nop			; (mov r8, r8)
1000150a:	4b18      	ldr	r3, [pc, #96]	; (1000156c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000150c:	681a      	ldr	r2, [r3, #0]
1000150e:	2380      	movs	r3, #128	; 0x80
10001510:	05db      	lsls	r3, r3, #23
10001512:	4013      	ands	r3, r2
10001514:	d1f9      	bne.n	1000150a <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x4a>
  {
    /* Spin until the core supply stabilizes */
  }

  if(curr_idiv <= idiv)
10001516:	68fa      	ldr	r2, [r7, #12]
10001518:	687b      	ldr	r3, [r7, #4]
1000151a:	429a      	cmp	r2, r3
1000151c:	d806      	bhi.n	1000152c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x6c>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
1000151e:	68fa      	ldr	r2, [r7, #12]
10001520:	687b      	ldr	r3, [r7, #4]
10001522:	1c10      	adds	r0, r2, #0
10001524:	1c19      	adds	r1, r3, #0
10001526:	f000 f853 	bl	100015d0 <XMC_SCU_CLOCK_lFrequencyDownScaling>
1000152a:	e005      	b.n	10001538 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
1000152c:	68fa      	ldr	r2, [r7, #12]
1000152e:	687b      	ldr	r3, [r7, #4]
10001530:	1c10      	adds	r0, r2, #0
10001532:	1c19      	adds	r1, r3, #0
10001534:	f000 f822 	bl	1000157c <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001538:	4b0c      	ldr	r3, [pc, #48]	; (1000156c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000153a:	4a0c      	ldr	r2, [pc, #48]	; (1000156c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
1000153c:	6812      	ldr	r2, [r2, #0]
1000153e:	490e      	ldr	r1, [pc, #56]	; (10001578 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb8>)
10001540:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10001542:	687a      	ldr	r2, [r7, #4]
10001544:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001546:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
10001548:	490a      	ldr	r1, [pc, #40]	; (10001574 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb4>)
1000154a:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000154c:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000154e:	46c0      	nop			; (mov r8, r8)
10001550:	4b06      	ldr	r3, [pc, #24]	; (1000156c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xac>)
10001552:	681a      	ldr	r2, [r3, #0]
10001554:	2380      	movs	r3, #128	; 0x80
10001556:	05db      	lsls	r3, r3, #23
10001558:	4013      	ands	r3, r2
1000155a:	d1f9      	bne.n	10001550 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x90>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
1000155c:	f7ff fed2 	bl	10001304 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
10001560:	f7ff fda6 	bl	100010b0 <SystemCoreClockUpdate>

}
10001564:	46bd      	mov	sp, r7
10001566:	b004      	add	sp, #16
10001568:	bd80      	pop	{r7, pc}
1000156a:	46c0      	nop			; (mov r8, r8)
1000156c:	40010300 	.word	0x40010300
10001570:	c00fff00 	.word	0xc00fff00
10001574:	3ff00000 	.word	0x3ff00000
10001578:	c00f00ff 	.word	0xc00f00ff

1000157c <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
1000157c:	b580      	push	{r7, lr}
1000157e:	b082      	sub	sp, #8
10001580:	af00      	add	r7, sp, #0
10001582:	6078      	str	r0, [r7, #4]
10001584:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
10001586:	e014      	b.n	100015b2 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
10001588:	687b      	ldr	r3, [r7, #4]
1000158a:	089b      	lsrs	r3, r3, #2
1000158c:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000158e:	4b0d      	ldr	r3, [pc, #52]	; (100015c4 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001590:	4a0c      	ldr	r2, [pc, #48]	; (100015c4 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001592:	6812      	ldr	r2, [r2, #0]
10001594:	490c      	ldr	r1, [pc, #48]	; (100015c8 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
10001596:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
10001598:	687a      	ldr	r2, [r7, #4]
1000159a:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000159c:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
1000159e:	490b      	ldr	r1, [pc, #44]	; (100015cc <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
100015a0:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015a2:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100015a4:	46c0      	nop			; (mov r8, r8)
100015a6:	4b07      	ldr	r3, [pc, #28]	; (100015c4 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
100015a8:	681a      	ldr	r2, [r3, #0]
100015aa:	2380      	movs	r3, #128	; 0x80
100015ac:	05db      	lsls	r3, r3, #23
100015ae:	4013      	ands	r3, r2
100015b0:	d1f9      	bne.n	100015a6 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
100015b2:	683b      	ldr	r3, [r7, #0]
100015b4:	009a      	lsls	r2, r3, #2
100015b6:	687b      	ldr	r3, [r7, #4]
100015b8:	429a      	cmp	r2, r3
100015ba:	d3e5      	bcc.n	10001588 <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
    /* Wait voltage suply stabilization */
    }
  }
}
100015bc:	46bd      	mov	sp, r7
100015be:	b002      	add	sp, #8
100015c0:	bd80      	pop	{r7, pc}
100015c2:	46c0      	nop			; (mov r8, r8)
100015c4:	40010300 	.word	0x40010300
100015c8:	c00f00ff 	.word	0xc00f00ff
100015cc:	3ff00000 	.word	0x3ff00000

100015d0 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
100015d0:	b580      	push	{r7, lr}
100015d2:	b082      	sub	sp, #8
100015d4:	af00      	add	r7, sp, #0
100015d6:	6078      	str	r0, [r7, #4]
100015d8:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
100015da:	e019      	b.n	10001610 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if(0U == curr_idiv)
100015dc:	687b      	ldr	r3, [r7, #4]
100015de:	2b00      	cmp	r3, #0
100015e0:	d101      	bne.n	100015e6 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
100015e2:	2301      	movs	r3, #1
100015e4:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
100015e6:	687b      	ldr	r3, [r7, #4]
100015e8:	009b      	lsls	r3, r3, #2
100015ea:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015ec:	4b0c      	ldr	r3, [pc, #48]	; (10001620 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
100015ee:	4a0c      	ldr	r2, [pc, #48]	; (10001620 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
100015f0:	6812      	ldr	r2, [r2, #0]
100015f2:	490c      	ldr	r1, [pc, #48]	; (10001624 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
100015f4:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015f6:	687a      	ldr	r2, [r7, #4]
100015f8:	0212      	lsls	r2, r2, #8
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100015fa:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100015fc:	490a      	ldr	r1, [pc, #40]	; (10001628 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
100015fe:	430a      	orrs	r2, r1
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001600:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001602:	46c0      	nop			; (mov r8, r8)
10001604:	4b06      	ldr	r3, [pc, #24]	; (10001620 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001606:	681a      	ldr	r2, [r3, #0]
10001608:	2380      	movs	r3, #128	; 0x80
1000160a:	05db      	lsls	r3, r3, #23
1000160c:	4013      	ands	r3, r2
1000160e:	d1f9      	bne.n	10001604 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
10001610:	687b      	ldr	r3, [r7, #4]
10001612:	009a      	lsls	r2, r3, #2
10001614:	683b      	ldr	r3, [r7, #0]
10001616:	429a      	cmp	r2, r3
10001618:	d3e0      	bcc.n	100015dc <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
    /* Wait voltage suply stabilization */
    }
  }
}
1000161a:	46bd      	mov	sp, r7
1000161c:	b002      	add	sp, #8
1000161e:	bd80      	pop	{r7, pc}
10001620:	40010300 	.word	0x40010300
10001624:	c00f00ff 	.word	0xc00f00ff
10001628:	3ff00000 	.word	0x3ff00000

1000162c <XMC_SCU_SetInterruptControl>:
  return (bool)((SCU_ANALOG->ANASYNC2 & SCU_ANALOG_ANASYNC2_SYNC_READY_Msk) != 0U);
}

/* This function selects service request source for a NVIC interrupt node */
void XMC_SCU_SetInterruptControl(uint8_t irq_number, XMC_SCU_IRQCTRL_t source)
{
1000162c:	b580      	push	{r7, lr}
1000162e:	b082      	sub	sp, #8
10001630:	af00      	add	r7, sp, #0
10001632:	1c02      	adds	r2, r0, #0
10001634:	1dfb      	adds	r3, r7, #7
10001636:	701a      	strb	r2, [r3, #0]
10001638:	1d3b      	adds	r3, r7, #4
1000163a:	1c0a      	adds	r2, r1, #0
1000163c:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid irq_number", irq_number < 32);
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
1000163e:	1d3b      	adds	r3, r7, #4
10001640:	1d3a      	adds	r2, r7, #4
10001642:	8812      	ldrh	r2, [r2, #0]
10001644:	2103      	movs	r1, #3
10001646:	400a      	ands	r2, r1
10001648:	801a      	strh	r2, [r3, #0]
  if (irq_number < 16U)
1000164a:	1dfb      	adds	r3, r7, #7
1000164c:	781b      	ldrb	r3, [r3, #0]
1000164e:	2b0f      	cmp	r3, #15
10001650:	d813      	bhi.n	1000167a <XMC_SCU_SetInterruptControl+0x4e>
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
10001652:	4b18      	ldr	r3, [pc, #96]	; (100016b4 <XMC_SCU_SetInterruptControl+0x88>)
10001654:	4a17      	ldr	r2, [pc, #92]	; (100016b4 <XMC_SCU_SetInterruptControl+0x88>)
10001656:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
10001658:	1df9      	adds	r1, r7, #7
1000165a:	7809      	ldrb	r1, [r1, #0]
1000165c:	0049      	lsls	r1, r1, #1
1000165e:	1c08      	adds	r0, r1, #0
10001660:	2103      	movs	r1, #3
10001662:	4081      	lsls	r1, r0
10001664:	43c9      	mvns	r1, r1
10001666:	400a      	ands	r2, r1
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
10001668:	1d39      	adds	r1, r7, #4
1000166a:	8809      	ldrh	r1, [r1, #0]
1000166c:	1df8      	adds	r0, r7, #7
1000166e:	7800      	ldrb	r0, [r0, #0]
10001670:	0040      	lsls	r0, r0, #1
10001672:	4081      	lsls	r1, r0
  XMC_ASSERT("XMC_SCU_SetInterruptControl: Invalid source", (source >> 8) == irq_number);

  source &= 0x3U;
  if (irq_number < 16U)
  {
    SCU_GENERAL->INTCR0 = (SCU_GENERAL->INTCR0 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size))) |
10001674:	430a      	orrs	r2, r1
10001676:	66da      	str	r2, [r3, #108]	; 0x6c
10001678:	e018      	b.n	100016ac <XMC_SCU_SetInterruptControl+0x80>
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
1000167a:	1dfb      	adds	r3, r7, #7
1000167c:	1dfa      	adds	r2, r7, #7
1000167e:	7812      	ldrb	r2, [r2, #0]
10001680:	210f      	movs	r1, #15
10001682:	400a      	ands	r2, r1
10001684:	701a      	strb	r2, [r3, #0]
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
10001686:	4b0b      	ldr	r3, [pc, #44]	; (100016b4 <XMC_SCU_SetInterruptControl+0x88>)
10001688:	4a0a      	ldr	r2, [pc, #40]	; (100016b4 <XMC_SCU_SetInterruptControl+0x88>)
1000168a:	6f12      	ldr	r2, [r2, #112]	; 0x70
1000168c:	1df9      	adds	r1, r7, #7
1000168e:	7809      	ldrb	r1, [r1, #0]
10001690:	0049      	lsls	r1, r1, #1
10001692:	1c08      	adds	r0, r1, #0
10001694:	2103      	movs	r1, #3
10001696:	4081      	lsls	r1, r0
10001698:	43c9      	mvns	r1, r1
1000169a:	400a      	ands	r2, r1
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
1000169c:	1d39      	adds	r1, r7, #4
1000169e:	8809      	ldrh	r1, [r1, #0]
100016a0:	1df8      	adds	r0, r7, #7
100016a2:	7800      	ldrb	r0, [r0, #0]
100016a4:	0040      	lsls	r0, r0, #1
100016a6:	4081      	lsls	r1, r0
                          (source << (irq_number * SCU_GENERAL_INTCR_INTSEL_Size));
  }
  else
  {
    irq_number &= 0x0fU;
    SCU_GENERAL->INTCR1 = (SCU_GENERAL->INTCR1 & ~(SCU_GENERAL_INTCR_INTSEL_Msk << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size))) |
100016a8:	430a      	orrs	r2, r1
100016aa:	671a      	str	r2, [r3, #112]	; 0x70
                          (source << (irq_number  * SCU_GENERAL_INTCR_INTSEL_Size));
  }
}
100016ac:	46bd      	mov	sp, r7
100016ae:	b002      	add	sp, #8
100016b0:	bd80      	pop	{r7, pc}
100016b2:	46c0      	nop			; (mov r8, r8)
100016b4:	40010000 	.word	0x40010000

100016b8 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
100016b8:	b580      	push	{r7, lr}
100016ba:	b082      	sub	sp, #8
100016bc:	af00      	add	r7, sp, #0
100016be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
100016c0:	687b      	ldr	r3, [r7, #4]
100016c2:	68db      	ldr	r3, [r3, #12]
100016c4:	2280      	movs	r2, #128	; 0x80
100016c6:	0052      	lsls	r2, r2, #1
100016c8:	431a      	orrs	r2, r3
100016ca:	687b      	ldr	r3, [r7, #4]
100016cc:	60da      	str	r2, [r3, #12]
}
100016ce:	46bd      	mov	sp, r7
100016d0:	b002      	add	sp, #8
100016d2:	bd80      	pop	{r7, pc}

100016d4 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
100016d4:	b580      	push	{r7, lr}
100016d6:	b082      	sub	sp, #8
100016d8:	af00      	add	r7, sp, #0
100016da:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
100016dc:	687b      	ldr	r3, [r7, #4]
100016de:	4a09      	ldr	r2, [pc, #36]	; (10001704 <XMC_CCU4_lUngateClock+0x30>)
100016e0:	4293      	cmp	r3, r2
100016e2:	d103      	bne.n	100016ec <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
100016e4:	2004      	movs	r0, #4
100016e6:	f7ff fed1 	bl	1000148c <XMC_SCU_CLOCK_UngatePeripheralClock>
100016ea:	e008      	b.n	100016fe <XMC_CCU4_lUngateClock+0x2a>
  }
#if defined(CCU41)
  else if (module == CCU41)
100016ec:	687b      	ldr	r3, [r7, #4]
100016ee:	4a06      	ldr	r2, [pc, #24]	; (10001708 <XMC_CCU4_lUngateClock+0x34>)
100016f0:	4293      	cmp	r3, r2
100016f2:	d104      	bne.n	100016fe <XMC_CCU4_lUngateClock+0x2a>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
100016f4:	2380      	movs	r3, #128	; 0x80
100016f6:	029b      	lsls	r3, r3, #10
100016f8:	1c18      	adds	r0, r3, #0
100016fa:	f7ff fec7 	bl	1000148c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
100016fe:	46bd      	mov	sp, r7
10001700:	b002      	add	sp, #8
10001702:	bd80      	pop	{r7, pc}
10001704:	48040000 	.word	0x48040000
10001708:	48044000 	.word	0x48044000

1000170c <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
1000170c:	b580      	push	{r7, lr}
1000170e:	b082      	sub	sp, #8
10001710:	af00      	add	r7, sp, #0
10001712:	6078      	str	r0, [r7, #4]
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
10001714:	687b      	ldr	r3, [r7, #4]
10001716:	1c18      	adds	r0, r3, #0
10001718:	f7ff ffdc 	bl	100016d4 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
1000171c:	46bd      	mov	sp, r7
1000171e:	b002      	add	sp, #8
10001720:	bd80      	pop	{r7, pc}
10001722:	46c0      	nop			; (mov r8, r8)

10001724 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
10001724:	b580      	push	{r7, lr}
10001726:	b084      	sub	sp, #16
10001728:	af00      	add	r7, sp, #0
1000172a:	6078      	str	r0, [r7, #4]
1000172c:	1c0a      	adds	r2, r1, #0
1000172e:	1cfb      	adds	r3, r7, #3
10001730:	701a      	strb	r2, [r3, #0]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
10001732:	687b      	ldr	r3, [r7, #4]
10001734:	1c18      	adds	r0, r3, #0
10001736:	f7ff ffe9 	bl	1000170c <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
1000173a:	687b      	ldr	r3, [r7, #4]
1000173c:	1c18      	adds	r0, r3, #0
1000173e:	f7ff ffbb 	bl	100016b8 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
10001742:	687b      	ldr	r3, [r7, #4]
10001744:	681b      	ldr	r3, [r3, #0]
10001746:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
10001748:	68fb      	ldr	r3, [r7, #12]
1000174a:	4a07      	ldr	r2, [pc, #28]	; (10001768 <XMC_CCU4_Init+0x44>)
1000174c:	4013      	ands	r3, r2
1000174e:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
10001750:	1cfb      	adds	r3, r7, #3
10001752:	781b      	ldrb	r3, [r3, #0]
10001754:	039b      	lsls	r3, r3, #14
10001756:	68fa      	ldr	r2, [r7, #12]
10001758:	4313      	orrs	r3, r2
1000175a:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
1000175c:	687b      	ldr	r3, [r7, #4]
1000175e:	68fa      	ldr	r2, [r7, #12]
10001760:	601a      	str	r2, [r3, #0]
}
10001762:	46bd      	mov	sp, r7
10001764:	b004      	add	sp, #16
10001766:	bd80      	pop	{r7, pc}
10001768:	ffff3fff 	.word	0xffff3fff

1000176c <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
1000176c:	b580      	push	{r7, lr}
1000176e:	b082      	sub	sp, #8
10001770:	af00      	add	r7, sp, #0
10001772:	6078      	str	r0, [r7, #4]
10001774:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
10001776:	683b      	ldr	r3, [r7, #0]
10001778:	681a      	ldr	r2, [r3, #0]
1000177a:	687b      	ldr	r3, [r7, #4]
1000177c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
1000177e:	683b      	ldr	r3, [r7, #0]
10001780:	795b      	ldrb	r3, [r3, #5]
10001782:	069b      	lsls	r3, r3, #26
10001784:	0fdb      	lsrs	r3, r3, #31
10001786:	b2db      	uxtb	r3, r3
10001788:	051a      	lsls	r2, r3, #20
1000178a:	687b      	ldr	r3, [r7, #4]
1000178c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
1000178e:	683b      	ldr	r3, [r7, #0]
10001790:	791b      	ldrb	r3, [r3, #4]
10001792:	071b      	lsls	r3, r3, #28
10001794:	0f1b      	lsrs	r3, r3, #28
10001796:	b2db      	uxtb	r3, r3
10001798:	1c1a      	adds	r2, r3, #0
1000179a:	687b      	ldr	r3, [r7, #4]
1000179c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
1000179e:	683b      	ldr	r3, [r7, #0]
100017a0:	795b      	ldrb	r3, [r3, #5]
100017a2:	071b      	lsls	r3, r3, #28
100017a4:	0f1b      	lsrs	r3, r3, #28
100017a6:	b2db      	uxtb	r3, r3
100017a8:	1c1a      	adds	r2, r3, #0
100017aa:	687b      	ldr	r3, [r7, #4]
100017ac:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
100017ae:	683b      	ldr	r3, [r7, #0]
100017b0:	795b      	ldrb	r3, [r3, #5]
100017b2:	06db      	lsls	r3, r3, #27
100017b4:	0fdb      	lsrs	r3, r3, #31
100017b6:	b2db      	uxtb	r3, r3
100017b8:	1c1a      	adds	r2, r3, #0
100017ba:	687b      	ldr	r3, [r7, #4]
100017bc:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
100017be:	683b      	ldr	r3, [r7, #0]
100017c0:	791b      	ldrb	r3, [r3, #4]
100017c2:	061b      	lsls	r3, r3, #24
100017c4:	0f1b      	lsrs	r3, r3, #28
100017c6:	b2db      	uxtb	r3, r3
100017c8:	1c1a      	adds	r2, r3, #0
100017ca:	687b      	ldr	r3, [r7, #4]
100017cc:	62da      	str	r2, [r3, #44]	; 0x2c
}
100017ce:	46bd      	mov	sp, r7
100017d0:	b002      	add	sp, #8
100017d2:	bd80      	pop	{r7, pc}

100017d4 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
100017d4:	b580      	push	{r7, lr}
100017d6:	b086      	sub	sp, #24
100017d8:	af00      	add	r7, sp, #0
100017da:	6078      	str	r0, [r7, #4]
100017dc:	1c08      	adds	r0, r1, #0
100017de:	1c11      	adds	r1, r2, #0
100017e0:	1cfb      	adds	r3, r7, #3
100017e2:	1c02      	adds	r2, r0, #0
100017e4:	701a      	strb	r2, [r3, #0]
100017e6:	1cbb      	adds	r3, r7, #2
100017e8:	1c0a      	adds	r2, r1, #0
100017ea:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
100017ec:	687b      	ldr	r3, [r7, #4]
100017ee:	22a8      	movs	r2, #168	; 0xa8
100017f0:	589b      	ldr	r3, [r3, r2]
100017f2:	60fb      	str	r3, [r7, #12]
  
  switch(event)
100017f4:	1cfb      	adds	r3, r7, #3
100017f6:	781b      	ldrb	r3, [r3, #0]
100017f8:	2b09      	cmp	r3, #9
100017fa:	d81a      	bhi.n	10001832 <XMC_CCU4_SLICE_SetInterruptNode+0x5e>
100017fc:	009a      	lsls	r2, r3, #2
100017fe:	4b1a      	ldr	r3, [pc, #104]	; (10001868 <XMC_CCU4_SLICE_SetInterruptNode+0x94>)
10001800:	18d3      	adds	r3, r2, r3
10001802:	681b      	ldr	r3, [r3, #0]
10001804:	469f      	mov	pc, r3
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
10001806:	2303      	movs	r3, #3
10001808:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
1000180a:	2300      	movs	r3, #0
1000180c:	617b      	str	r3, [r7, #20]
      break;
1000180e:	e016      	b.n	1000183e <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
10001810:	230c      	movs	r3, #12
10001812:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
10001814:	2302      	movs	r3, #2
10001816:	617b      	str	r3, [r7, #20]
      break;
10001818:	e011      	b.n	1000183e <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
1000181a:	23c0      	movs	r3, #192	; 0xc0
1000181c:	009b      	lsls	r3, r3, #2
1000181e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
10001820:	2308      	movs	r3, #8
10001822:	617b      	str	r3, [r7, #20]
      break;
10001824:	e00b      	b.n	1000183e <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
10001826:	23c0      	movs	r3, #192	; 0xc0
10001828:	011b      	lsls	r3, r3, #4
1000182a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
1000182c:	230a      	movs	r3, #10
1000182e:	617b      	str	r3, [r7, #20]
      break;
10001830:	e005      	b.n	1000183e <XMC_CCU4_SLICE_SetInterruptNode+0x6a>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
10001832:	23c0      	movs	r3, #192	; 0xc0
10001834:	019b      	lsls	r3, r3, #6
10001836:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
10001838:	230c      	movs	r3, #12
1000183a:	617b      	str	r3, [r7, #20]
      break;
1000183c:	46c0      	nop			; (mov r8, r8)
  }
  
  srs &= ~mask; 
1000183e:	693b      	ldr	r3, [r7, #16]
10001840:	43da      	mvns	r2, r3
10001842:	68fb      	ldr	r3, [r7, #12]
10001844:	4013      	ands	r3, r2
10001846:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
10001848:	1cbb      	adds	r3, r7, #2
1000184a:	781a      	ldrb	r2, [r3, #0]
1000184c:	697b      	ldr	r3, [r7, #20]
1000184e:	409a      	lsls	r2, r3
10001850:	1c13      	adds	r3, r2, #0
10001852:	68fa      	ldr	r2, [r7, #12]
10001854:	4313      	orrs	r3, r2
10001856:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
10001858:	687b      	ldr	r3, [r7, #4]
1000185a:	21a8      	movs	r1, #168	; 0xa8
1000185c:	68fa      	ldr	r2, [r7, #12]
1000185e:	505a      	str	r2, [r3, r1]
}
10001860:	46bd      	mov	sp, r7
10001862:	b006      	add	sp, #24
10001864:	bd80      	pop	{r7, pc}
10001866:	46c0      	nop			; (mov r8, r8)
10001868:	10002e94 	.word	0x10002e94

1000186c <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
1000186c:	b580      	push	{r7, lr}
1000186e:	b082      	sub	sp, #8
10001870:	af00      	add	r7, sp, #0
10001872:	6078      	str	r0, [r7, #4]
10001874:	1c08      	adds	r0, r1, #0
10001876:	1c11      	adds	r1, r2, #0
10001878:	1cfb      	adds	r3, r7, #3
1000187a:	1c02      	adds	r2, r0, #0
1000187c:	701a      	strb	r2, [r3, #0]
1000187e:	1cbb      	adds	r3, r7, #2
10001880:	1c0a      	adds	r2, r1, #0
10001882:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001884:	687b      	ldr	r3, [r7, #4]
10001886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
10001888:	1cfa      	adds	r2, r7, #3
1000188a:	7812      	ldrb	r2, [r2, #0]
1000188c:	0052      	lsls	r2, r2, #1
1000188e:	1c11      	adds	r1, r2, #0
10001890:	2203      	movs	r2, #3
10001892:	408a      	lsls	r2, r1
10001894:	43d2      	mvns	r2, r2
10001896:	401a      	ands	r2, r3
10001898:	687b      	ldr	r3, [r7, #4]
1000189a:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
1000189c:	687b      	ldr	r3, [r7, #4]
1000189e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
100018a0:	1cbb      	adds	r3, r7, #2
100018a2:	781b      	ldrb	r3, [r3, #0]
100018a4:	1cf9      	adds	r1, r7, #3
100018a6:	7809      	ldrb	r1, [r1, #0]
100018a8:	0049      	lsls	r1, r1, #1
100018aa:	408b      	lsls	r3, r1
100018ac:	431a      	orrs	r2, r3
100018ae:	687b      	ldr	r3, [r7, #4]
100018b0:	675a      	str	r2, [r3, #116]	; 0x74
}
100018b2:	46bd      	mov	sp, r7
100018b4:	b002      	add	sp, #8
100018b6:	bd80      	pop	{r7, pc}

100018b8 <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
100018b8:	b580      	push	{r7, lr}
100018ba:	b088      	sub	sp, #32
100018bc:	af00      	add	r7, sp, #0
100018be:	6078      	str	r0, [r7, #4]
100018c0:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
100018c2:	f3ef 8310 	mrs	r3, PRIMASK
100018c6:	617b      	str	r3, [r7, #20]
  return(result);
100018c8:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
100018ca:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
100018cc:	b672      	cpsid	i
  __disable_irq ();
  return status;
100018ce:	693b      	ldr	r3, [r7, #16]
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
100018d0:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
100018d2:	4b0c      	ldr	r3, [pc, #48]	; (10001904 <__aeabi_uidiv+0x4c>)
100018d4:	2204      	movs	r2, #4
100018d6:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
100018d8:	4b0a      	ldr	r3, [pc, #40]	; (10001904 <__aeabi_uidiv+0x4c>)
100018da:	687a      	ldr	r2, [r7, #4]
100018dc:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
100018de:	4b09      	ldr	r3, [pc, #36]	; (10001904 <__aeabi_uidiv+0x4c>)
100018e0:	683a      	ldr	r2, [r7, #0]
100018e2:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
100018e4:	4b07      	ldr	r3, [pc, #28]	; (10001904 <__aeabi_uidiv+0x4c>)
100018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100018e8:	61bb      	str	r3, [r7, #24]
100018ea:	69fb      	ldr	r3, [r7, #28]
100018ec:	60fb      	str	r3, [r7, #12]
100018ee:	68fb      	ldr	r3, [r7, #12]
100018f0:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100018f2:	68bb      	ldr	r3, [r7, #8]
100018f4:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
100018f8:	69bb      	ldr	r3, [r7, #24]
}
100018fa:	1c18      	adds	r0, r3, #0
100018fc:	46bd      	mov	sp, r7
100018fe:	b008      	add	sp, #32
10001900:	bd80      	pop	{r7, pc}
10001902:	46c0      	nop			; (mov r8, r8)
10001904:	40030000 	.word	0x40030000

10001908 <__aeabi_idiv>:

/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
10001908:	b580      	push	{r7, lr}
1000190a:	b088      	sub	sp, #32
1000190c:	af00      	add	r7, sp, #0
1000190e:	6078      	str	r0, [r7, #4]
10001910:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10001912:	f3ef 8310 	mrs	r3, PRIMASK
10001916:	617b      	str	r3, [r7, #20]
  return(result);
10001918:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
1000191a:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1000191c:	b672      	cpsid	i
  __disable_irq ();
  return status;
1000191e:	693b      	ldr	r3, [r7, #16]
/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10001920:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
10001922:	4b0c      	ldr	r3, [pc, #48]	; (10001954 <__aeabi_idiv+0x4c>)
10001924:	2200      	movs	r2, #0
10001926:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10001928:	4b0a      	ldr	r3, [pc, #40]	; (10001954 <__aeabi_idiv+0x4c>)
1000192a:	687a      	ldr	r2, [r7, #4]
1000192c:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
1000192e:	4b09      	ldr	r3, [pc, #36]	; (10001954 <__aeabi_idiv+0x4c>)
10001930:	683a      	ldr	r2, [r7, #0]
10001932:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
10001934:	4b07      	ldr	r3, [pc, #28]	; (10001954 <__aeabi_idiv+0x4c>)
10001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001938:	61bb      	str	r3, [r7, #24]
1000193a:	69fb      	ldr	r3, [r7, #28]
1000193c:	60fb      	str	r3, [r7, #12]
1000193e:	68fb      	ldr	r3, [r7, #12]
10001940:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10001942:	68bb      	ldr	r3, [r7, #8]
10001944:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);
  
  return result;
10001948:	69bb      	ldr	r3, [r7, #24]
}
1000194a:	1c18      	adds	r0, r3, #0
1000194c:	46bd      	mov	sp, r7
1000194e:	b008      	add	sp, #32
10001950:	bd80      	pop	{r7, pc}
10001952:	46c0      	nop			; (mov r8, r8)
10001954:	40030000 	.word	0x40030000

10001958 <__aeabi_idivmod>:
  return ((remainder << 32) | quot);
}

/* This function performs signed integer division modulo */
int64_t __aeabi_idivmod(int32_t dividend, int32_t divisor)
{
10001958:	b5f0      	push	{r4, r5, r6, r7, lr}
1000195a:	b08d      	sub	sp, #52	; 0x34
1000195c:	af00      	add	r7, sp, #0
1000195e:	6078      	str	r0, [r7, #4]
10001960:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10001962:	f3ef 8210 	mrs	r2, PRIMASK
10001966:	617a      	str	r2, [r7, #20]
  return(result);
10001968:	697a      	ldr	r2, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
1000196a:	613a      	str	r2, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1000196c:	b672      	cpsid	i
  __disable_irq ();
  return status;
1000196e:	693a      	ldr	r2, [r7, #16]
int64_t __aeabi_idivmod(int32_t dividend, int32_t divisor)
{
  uint64_t remainder;
  uint64_t quot;
  uint32_t ics;
  ics = critical_section_enter();
10001970:	62fa      	str	r2, [r7, #44]	; 0x2c
  
  MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
10001972:	4a15      	ldr	r2, [pc, #84]	; (100019c8 <__aeabi_idivmod+0x70>)
10001974:	2100      	movs	r1, #0
10001976:	6351      	str	r1, [r2, #52]	; 0x34
  MATH->DVD     = dividend;
10001978:	4a13      	ldr	r2, [pc, #76]	; (100019c8 <__aeabi_idivmod+0x70>)
1000197a:	6879      	ldr	r1, [r7, #4]
1000197c:	6211      	str	r1, [r2, #32]
  MATH->DVS     = divisor;
1000197e:	4a12      	ldr	r2, [pc, #72]	; (100019c8 <__aeabi_idivmod+0x70>)
10001980:	6839      	ldr	r1, [r7, #0]
10001982:	6251      	str	r1, [r2, #36]	; 0x24

  remainder = (uint64_t)MATH->RMD;;
10001984:	4a10      	ldr	r2, [pc, #64]	; (100019c8 <__aeabi_idivmod+0x70>)
10001986:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
10001988:	623a      	str	r2, [r7, #32]
1000198a:	2200      	movs	r2, #0
1000198c:	627a      	str	r2, [r7, #36]	; 0x24
  quot    = (uint64_t)MATH->QUOT;
1000198e:	4a0e      	ldr	r2, [pc, #56]	; (100019c8 <__aeabi_idivmod+0x70>)
10001990:	6a92      	ldr	r2, [r2, #40]	; 0x28
10001992:	61ba      	str	r2, [r7, #24]
10001994:	2200      	movs	r2, #0
10001996:	61fa      	str	r2, [r7, #28]
10001998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000199a:	60fa      	str	r2, [r7, #12]
1000199c:	68fa      	ldr	r2, [r7, #12]
1000199e:	60ba      	str	r2, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100019a0:	68ba      	ldr	r2, [r7, #8]
100019a2:	f382 8810 	msr	PRIMASK, r2

  critical_section_exit(ics);

  return ((int64_t)((remainder << 32) | quot));
100019a6:	6a3a      	ldr	r2, [r7, #32]
100019a8:	0014      	movs	r4, r2
100019aa:	2200      	movs	r2, #0
100019ac:	1c13      	adds	r3, r2, #0
100019ae:	69ba      	ldr	r2, [r7, #24]
100019b0:	431a      	orrs	r2, r3
100019b2:	1c15      	adds	r5, r2, #0
100019b4:	69fa      	ldr	r2, [r7, #28]
100019b6:	4322      	orrs	r2, r4
100019b8:	1c16      	adds	r6, r2, #0
100019ba:	1c2b      	adds	r3, r5, #0
100019bc:	1c34      	adds	r4, r6, #0
}
100019be:	1c18      	adds	r0, r3, #0
100019c0:	1c21      	adds	r1, r4, #0
100019c2:	46bd      	mov	sp, r7
100019c4:	b00d      	add	sp, #52	; 0x34
100019c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100019c8:	40030000 	.word	0x40030000

100019cc <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
100019cc:	b580      	push	{r7, lr}
100019ce:	b084      	sub	sp, #16
100019d0:	af00      	add	r7, sp, #0
100019d2:	6078      	str	r0, [r7, #4]
100019d4:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
100019d6:	1c3b      	adds	r3, r7, #0
100019d8:	781b      	ldrb	r3, [r3, #0]
100019da:	075b      	lsls	r3, r3, #29
100019dc:	0f5b      	lsrs	r3, r3, #29
100019de:	b2db      	uxtb	r3, r3
100019e0:	1c1a      	adds	r2, r3, #0
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
100019e2:	1cbb      	adds	r3, r7, #2
100019e4:	881b      	ldrh	r3, [r3, #0]
100019e6:	059b      	lsls	r3, r3, #22
100019e8:	0d9b      	lsrs	r3, r3, #22
100019ea:	b29b      	uxth	r3, r3
100019ec:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
100019ee:	4313      	orrs	r3, r2
100019f0:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
100019f2:	687a      	ldr	r2, [r7, #4]
100019f4:	23f8      	movs	r3, #248	; 0xf8
100019f6:	005b      	lsls	r3, r3, #1
100019f8:	68f9      	ldr	r1, [r7, #12]
100019fa:	50d1      	str	r1, [r2, r3]
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
100019fc:	1cfb      	adds	r3, r7, #3
100019fe:	781b      	ldrb	r3, [r3, #0]
10001a00:	06db      	lsls	r3, r3, #27
10001a02:	0fdb      	lsrs	r3, r3, #31
10001a04:	b2db      	uxtb	r3, r3
10001a06:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
10001a08:	1cfb      	adds	r3, r7, #3
10001a0a:	781b      	ldrb	r3, [r3, #0]
10001a0c:	071b      	lsls	r3, r3, #28
10001a0e:	0f9b      	lsrs	r3, r3, #30
10001a10:	b2db      	uxtb	r3, r3
10001a12:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
10001a14:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
10001a16:	1cfb      	adds	r3, r7, #3
10001a18:	781b      	ldrb	r3, [r3, #0]
10001a1a:	069b      	lsls	r3, r3, #26
10001a1c:	0fdb      	lsrs	r3, r3, #31
10001a1e:	b2db      	uxtb	r3, r3
10001a20:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
10001a22:	4313      	orrs	r3, r2
10001a24:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
10001a26:	1cfb      	adds	r3, r7, #3
10001a28:	781b      	ldrb	r3, [r3, #0]
10001a2a:	065b      	lsls	r3, r3, #25
10001a2c:	0fdb      	lsrs	r3, r3, #31
10001a2e:	b2db      	uxtb	r3, r3
10001a30:	079b      	lsls	r3, r3, #30
10001a32:	68fa      	ldr	r2, [r7, #12]
10001a34:	4313      	orrs	r3, r2
10001a36:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
10001a38:	687a      	ldr	r2, [r7, #4]
10001a3a:	23f8      	movs	r3, #248	; 0xf8
10001a3c:	005b      	lsls	r3, r3, #1
10001a3e:	58d2      	ldr	r2, [r2, r3]
10001a40:	68fb      	ldr	r3, [r7, #12]
10001a42:	4313      	orrs	r3, r2
10001a44:	2280      	movs	r2, #128	; 0x80
10001a46:	0612      	lsls	r2, r2, #24
10001a48:	431a      	orrs	r2, r3
10001a4a:	1c11      	adds	r1, r2, #0
10001a4c:	687a      	ldr	r2, [r7, #4]
10001a4e:	23f8      	movs	r3, #248	; 0xf8
10001a50:	005b      	lsls	r3, r3, #1
10001a52:	50d1      	str	r1, [r2, r3]
}
10001a54:	46bd      	mov	sp, r7
10001a56:	b004      	add	sp, #16
10001a58:	bd80      	pop	{r7, pc}
10001a5a:	46c0      	nop			; (mov r8, r8)

10001a5c <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10001a5c:	b580      	push	{r7, lr}
10001a5e:	b082      	sub	sp, #8
10001a60:	af00      	add	r7, sp, #0
10001a62:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
10001a64:	687b      	ldr	r3, [r7, #4]
10001a66:	2284      	movs	r2, #132	; 0x84
10001a68:	589b      	ldr	r3, [r3, r2]
10001a6a:	2280      	movs	r2, #128	; 0x80
10001a6c:	04d2      	lsls	r2, r2, #19
10001a6e:	431a      	orrs	r2, r3
10001a70:	687b      	ldr	r3, [r7, #4]
10001a72:	2184      	movs	r1, #132	; 0x84
10001a74:	505a      	str	r2, [r3, r1]
}
10001a76:	46bd      	mov	sp, r7
10001a78:	b002      	add	sp, #8
10001a7a:	bd80      	pop	{r7, pc}

10001a7c <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
10001a7c:	b580      	push	{r7, lr}
10001a7e:	b082      	sub	sp, #8
10001a80:	af00      	add	r7, sp, #0
10001a82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
10001a84:	687b      	ldr	r3, [r7, #4]
10001a86:	2284      	movs	r2, #132	; 0x84
10001a88:	589b      	ldr	r3, [r3, r2]
10001a8a:	4a04      	ldr	r2, [pc, #16]	; (10001a9c <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot+0x20>)
10001a8c:	401a      	ands	r2, r3
10001a8e:	687b      	ldr	r3, [r7, #4]
10001a90:	2184      	movs	r1, #132	; 0x84
10001a92:	505a      	str	r2, [r3, r1]
}
10001a94:	46bd      	mov	sp, r7
10001a96:	b002      	add	sp, #8
10001a98:	bd80      	pop	{r7, pc}
10001a9a:	46c0      	nop			; (mov r8, r8)
10001a9c:	fbffffff 	.word	0xfbffffff

10001aa0 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
10001aa0:	b580      	push	{r7, lr}
10001aa2:	af00      	add	r7, sp, #0
   * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additonal bit to enable ADC
   * function
   */

#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
10001aa4:	4b03      	ldr	r3, [pc, #12]	; (10001ab4 <XMC_VADC_GLOBAL_EnableModule+0x14>)
10001aa6:	22ff      	movs	r2, #255	; 0xff
10001aa8:	601a      	str	r2, [r3, #0]
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
10001aaa:	2001      	movs	r0, #1
10001aac:	f7ff fcee 	bl	1000148c <XMC_SCU_CLOCK_UngatePeripheralClock>

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
#endif
}
10001ab0:	46bd      	mov	sp, r7
10001ab2:	bd80      	pop	{r7, pc}
10001ab4:	40010500 	.word	0x40010500

10001ab8 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
10001ab8:	b580      	push	{r7, lr}
10001aba:	b082      	sub	sp, #8
10001abc:	af00      	add	r7, sp, #0
10001abe:	6078      	str	r0, [r7, #4]
10001ac0:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
10001ac2:	f7ff ffed 	bl	10001aa0 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
10001ac6:	683b      	ldr	r3, [r7, #0]
10001ac8:	695a      	ldr	r2, [r3, #20]
10001aca:	687b      	ldr	r3, [r7, #4]
10001acc:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
10001ace:	683b      	ldr	r3, [r7, #0]
10001ad0:	685b      	ldr	r3, [r3, #4]
10001ad2:	2280      	movs	r2, #128	; 0x80
10001ad4:	0212      	lsls	r2, r2, #8
10001ad6:	431a      	orrs	r2, r3
10001ad8:	687b      	ldr	r3, [r7, #4]
10001ada:	2180      	movs	r1, #128	; 0x80
10001adc:	505a      	str	r2, [r3, r1]
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
10001ade:	683b      	ldr	r3, [r7, #0]
10001ae0:	689a      	ldr	r2, [r3, #8]
10001ae2:	687b      	ldr	r3, [r7, #4]
10001ae4:	21a0      	movs	r1, #160	; 0xa0
10001ae6:	505a      	str	r2, [r3, r1]

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
10001ae8:	683b      	ldr	r3, [r7, #0]
10001aea:	68da      	ldr	r2, [r3, #12]
10001aec:	687b      	ldr	r3, [r7, #4]
10001aee:	21a4      	movs	r1, #164	; 0xa4
10001af0:	505a      	str	r2, [r3, r1]


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
10001af2:	683b      	ldr	r3, [r7, #0]
10001af4:	6919      	ldr	r1, [r3, #16]
10001af6:	687a      	ldr	r2, [r7, #4]
10001af8:	23a0      	movs	r3, #160	; 0xa0
10001afa:	009b      	lsls	r3, r3, #2
10001afc:	50d1      	str	r1, [r2, r3]

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
10001afe:	683b      	ldr	r3, [r7, #0]
10001b00:	681a      	ldr	r2, [r3, #0]
10001b02:	687b      	ldr	r3, [r7, #4]
10001b04:	21b8      	movs	r1, #184	; 0xb8
10001b06:	505a      	str	r2, [r3, r1]

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
10001b08:	46bd      	mov	sp, r7
10001b0a:	b002      	add	sp, #8
10001b0c:	bd80      	pop	{r7, pc}
10001b0e:	46c0      	nop			; (mov r8, r8)

10001b10 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
10001b10:	b580      	push	{r7, lr}
10001b12:	b084      	sub	sp, #16
10001b14:	af00      	add	r7, sp, #0
10001b16:	60f8      	str	r0, [r7, #12]
10001b18:	60b9      	str	r1, [r7, #8]
10001b1a:	603b      	str	r3, [r7, #0]
10001b1c:	1dfb      	adds	r3, r7, #7
10001b1e:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
10001b20:	1dfb      	adds	r3, r7, #7
10001b22:	781b      	ldrb	r3, [r3, #0]
10001b24:	2b00      	cmp	r3, #0
10001b26:	d109      	bne.n	10001b3c <XMC_VADC_GLOBAL_InputClassInit+0x2c>
  {
#endif
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
10001b28:	68bb      	ldr	r3, [r7, #8]
10001b2a:	4a0a      	ldr	r2, [pc, #40]	; (10001b54 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
10001b2c:	4013      	ands	r3, r2
10001b2e:	1c19      	adds	r1, r3, #0
10001b30:	68fb      	ldr	r3, [r7, #12]
10001b32:	683a      	ldr	r2, [r7, #0]
10001b34:	3228      	adds	r2, #40	; 0x28
10001b36:	0092      	lsls	r2, r2, #2
10001b38:	50d1      	str	r1, [r2, r3]
10001b3a:	e008      	b.n	10001b4e <XMC_VADC_GLOBAL_InputClassInit+0x3e>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
10001b3c:	68bb      	ldr	r3, [r7, #8]
10001b3e:	4a06      	ldr	r2, [pc, #24]	; (10001b58 <XMC_VADC_GLOBAL_InputClassInit+0x48>)
10001b40:	4013      	ands	r3, r2
10001b42:	1c19      	adds	r1, r3, #0
10001b44:	68fb      	ldr	r3, [r7, #12]
10001b46:	683a      	ldr	r2, [r7, #0]
10001b48:	3228      	adds	r2, #40	; 0x28
10001b4a:	0092      	lsls	r2, r2, #2
10001b4c:	50d1      	str	r1, [r2, r3]
  }
#endif
}
10001b4e:	46bd      	mov	sp, r7
10001b50:	b004      	add	sp, #16
10001b52:	bd80      	pop	{r7, pc}
10001b54:	0000071f 	.word	0x0000071f
10001b58:	071f0000 	.word	0x071f0000

10001b5c <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
10001b5c:	b580      	push	{r7, lr}
10001b5e:	b084      	sub	sp, #16
10001b60:	af00      	add	r7, sp, #0
10001b62:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
10001b64:	687b      	ldr	r3, [r7, #4]
10001b66:	2280      	movs	r2, #128	; 0x80
10001b68:	589b      	ldr	r3, [r3, r2]
10001b6a:	2280      	movs	r2, #128	; 0x80
10001b6c:	0612      	lsls	r2, r2, #24
10001b6e:	431a      	orrs	r2, r3
10001b70:	687b      	ldr	r3, [r7, #4]
10001b72:	2180      	movs	r1, #128	; 0x80
10001b74:	505a      	str	r2, [r3, r1]

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10001b76:	230f      	movs	r3, #15
10001b78:	18fb      	adds	r3, r7, r3
10001b7a:	2200      	movs	r2, #0
10001b7c:	701a      	strb	r2, [r3, #0]
10001b7e:	e01d      	b.n	10001bbc <XMC_VADC_GLOBAL_StartupCalibration+0x60>
  {
    group_ptr = g_xmc_vadc_group_array[i];
10001b80:	230f      	movs	r3, #15
10001b82:	18fb      	adds	r3, r7, r3
10001b84:	781a      	ldrb	r2, [r3, #0]
10001b86:	4b11      	ldr	r3, [pc, #68]	; (10001bcc <XMC_VADC_GLOBAL_StartupCalibration+0x70>)
10001b88:	0092      	lsls	r2, r2, #2
10001b8a:	58d3      	ldr	r3, [r2, r3]
10001b8c:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
10001b8e:	68bb      	ldr	r3, [r7, #8]
10001b90:	2280      	movs	r2, #128	; 0x80
10001b92:	589a      	ldr	r2, [r3, r2]
10001b94:	23c0      	movs	r3, #192	; 0xc0
10001b96:	029b      	lsls	r3, r3, #10
10001b98:	4013      	ands	r3, r2
10001b9a:	d008      	beq.n	10001bae <XMC_VADC_GLOBAL_StartupCalibration+0x52>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
10001b9c:	e000      	b.n	10001ba0 <XMC_VADC_GLOBAL_StartupCalibration+0x44>
      {
        __NOP();
10001b9e:	46c0      	nop			; (mov r8, r8)
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
10001ba0:	68bb      	ldr	r3, [r7, #8]
10001ba2:	2280      	movs	r2, #128	; 0x80
10001ba4:	589a      	ldr	r2, [r3, r2]
10001ba6:	2380      	movs	r3, #128	; 0x80
10001ba8:	055b      	lsls	r3, r3, #21
10001baa:	4013      	ands	r3, r2
10001bac:	d1f7      	bne.n	10001b9e <XMC_VADC_GLOBAL_StartupCalibration+0x42>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10001bae:	230f      	movs	r3, #15
10001bb0:	18fb      	adds	r3, r7, r3
10001bb2:	781a      	ldrb	r2, [r3, #0]
10001bb4:	230f      	movs	r3, #15
10001bb6:	18fb      	adds	r3, r7, r3
10001bb8:	3201      	adds	r2, #1
10001bba:	701a      	strb	r2, [r3, #0]
10001bbc:	230f      	movs	r3, #15
10001bbe:	18fb      	adds	r3, r7, r3
10001bc0:	781b      	ldrb	r3, [r3, #0]
10001bc2:	2b01      	cmp	r3, #1
10001bc4:	d9dc      	bls.n	10001b80 <XMC_VADC_GLOBAL_StartupCalibration+0x24>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    __NOP();
  }
#endif
}
10001bc6:	46bd      	mov	sp, r7
10001bc8:	b004      	add	sp, #16
10001bca:	bd80      	pop	{r7, pc}
10001bcc:	10002ebc 	.word	0x10002ebc

10001bd0 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
10001bd0:	b580      	push	{r7, lr}
10001bd2:	b084      	sub	sp, #16
10001bd4:	af00      	add	r7, sp, #0
10001bd6:	6078      	str	r0, [r7, #4]
10001bd8:	1c0a      	adds	r2, r1, #0
10001bda:	1cfb      	adds	r3, r7, #3
10001bdc:	701a      	strb	r2, [r3, #0]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
10001bde:	1cfb      	adds	r3, r7, #3
10001be0:	781b      	ldrb	r3, [r3, #0]
10001be2:	2b03      	cmp	r3, #3
10001be4:	d904      	bls.n	10001bf0 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x20>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
10001be6:	1cfb      	adds	r3, r7, #3
10001be8:	781b      	ldrb	r3, [r3, #0]
10001bea:	3b04      	subs	r3, #4
10001bec:	60fb      	str	r3, [r7, #12]
10001bee:	e002      	b.n	10001bf6 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x26>
  }
  else
  {
    node = (uint32_t)sr;
10001bf0:	1cfb      	adds	r3, r7, #3
10001bf2:	781b      	ldrb	r3, [r3, #0]
10001bf4:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
10001bf6:	687a      	ldr	r2, [r7, #4]
10001bf8:	23a0      	movs	r3, #160	; 0xa0
10001bfa:	005b      	lsls	r3, r3, #1
10001bfc:	58d3      	ldr	r3, [r2, r3]
10001bfe:	220f      	movs	r2, #15
10001c00:	4393      	bics	r3, r2
10001c02:	1c19      	adds	r1, r3, #0
10001c04:	687a      	ldr	r2, [r7, #4]
10001c06:	23a0      	movs	r3, #160	; 0xa0
10001c08:	005b      	lsls	r3, r3, #1
10001c0a:	50d1      	str	r1, [r2, r3]
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
10001c0c:	687a      	ldr	r2, [r7, #4]
10001c0e:	23a0      	movs	r3, #160	; 0xa0
10001c10:	005b      	lsls	r3, r3, #1
10001c12:	58d2      	ldr	r2, [r2, r3]
10001c14:	68fb      	ldr	r3, [r7, #12]
10001c16:	431a      	orrs	r2, r3
10001c18:	1c11      	adds	r1, r2, #0
10001c1a:	687a      	ldr	r2, [r7, #4]
10001c1c:	23a0      	movs	r3, #160	; 0xa0
10001c1e:	005b      	lsls	r3, r3, #1
10001c20:	50d1      	str	r1, [r2, r3]
}
10001c22:	46bd      	mov	sp, r7
10001c24:	b004      	add	sp, #16
10001c26:	bd80      	pop	{r7, pc}

10001c28 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
10001c28:	b580      	push	{r7, lr}
10001c2a:	b082      	sub	sp, #8
10001c2c:	af00      	add	r7, sp, #0
10001c2e:	6078      	str	r0, [r7, #4]
10001c30:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
10001c32:	687a      	ldr	r2, [r7, #4]
10001c34:	683b      	ldr	r3, [r7, #0]
10001c36:	685b      	ldr	r3, [r3, #4]
10001c38:	1c10      	adds	r0, r2, #0
10001c3a:	1c19      	adds	r1, r3, #0
10001c3c:	2200      	movs	r2, #0
10001c3e:	2300      	movs	r3, #0
10001c40:	f000 f830 	bl	10001ca4 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
10001c44:	687a      	ldr	r2, [r7, #4]
10001c46:	683b      	ldr	r3, [r7, #0]
10001c48:	685b      	ldr	r3, [r3, #4]
10001c4a:	1c10      	adds	r0, r2, #0
10001c4c:	1c19      	adds	r1, r3, #0
10001c4e:	2201      	movs	r2, #1
10001c50:	2300      	movs	r3, #0
10001c52:	f000 f827 	bl	10001ca4 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
10001c56:	687a      	ldr	r2, [r7, #4]
10001c58:	683b      	ldr	r3, [r7, #0]
10001c5a:	689b      	ldr	r3, [r3, #8]
10001c5c:	1c10      	adds	r0, r2, #0
10001c5e:	1c19      	adds	r1, r3, #0
10001c60:	2200      	movs	r2, #0
10001c62:	2301      	movs	r3, #1
10001c64:	f000 f81e 	bl	10001ca4 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
10001c68:	687a      	ldr	r2, [r7, #4]
10001c6a:	683b      	ldr	r3, [r7, #0]
10001c6c:	689b      	ldr	r3, [r3, #8]
10001c6e:	1c10      	adds	r0, r2, #0
10001c70:	1c19      	adds	r1, r3, #0
10001c72:	2201      	movs	r2, #1
10001c74:	2301      	movs	r3, #1
10001c76:	f000 f815 	bl	10001ca4 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
10001c7a:	683b      	ldr	r3, [r7, #0]
10001c7c:	691a      	ldr	r2, [r3, #16]
10001c7e:	687b      	ldr	r3, [r7, #4]
10001c80:	2180      	movs	r1, #128	; 0x80
10001c82:	505a      	str	r2, [r3, r1]

  group_ptr->BOUND = config->g_bound;
10001c84:	683b      	ldr	r3, [r7, #0]
10001c86:	68da      	ldr	r2, [r3, #12]
10001c88:	687b      	ldr	r3, [r7, #4]
10001c8a:	21b8      	movs	r1, #184	; 0xb8
10001c8c:	505a      	str	r2, [r3, r1]

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
10001c8e:	687a      	ldr	r2, [r7, #4]
10001c90:	683b      	ldr	r3, [r7, #0]
10001c92:	681b      	ldr	r3, [r3, #0]
10001c94:	1c10      	adds	r0, r2, #0
10001c96:	1c19      	adds	r1, r3, #0
10001c98:	f7ff fe98 	bl	100019cc <XMC_VADC_GROUP_ExternalMuxControlInit>

}
10001c9c:	46bd      	mov	sp, r7
10001c9e:	b002      	add	sp, #8
10001ca0:	bd80      	pop	{r7, pc}
10001ca2:	46c0      	nop			; (mov r8, r8)

10001ca4 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
10001ca4:	b580      	push	{r7, lr}
10001ca6:	b08c      	sub	sp, #48	; 0x30
10001ca8:	af00      	add	r7, sp, #0
10001caa:	60f8      	str	r0, [r7, #12]
10001cac:	60b9      	str	r1, [r7, #8]
10001cae:	603b      	str	r3, [r7, #0]
10001cb0:	1dfb      	adds	r3, r7, #7
10001cb2:	701a      	strb	r2, [r3, #0]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
10001cb4:	1dfb      	adds	r3, r7, #7
10001cb6:	781b      	ldrb	r3, [r3, #0]
10001cb8:	2b00      	cmp	r3, #0
10001cba:	d119      	bne.n	10001cf0 <XMC_VADC_GROUP_InputClassInit+0x4c>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
10001cbc:	2308      	movs	r3, #8
10001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
10001cc0:	23e0      	movs	r3, #224	; 0xe0
10001cc2:	00db      	lsls	r3, r3, #3
10001cc4:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
10001cc6:	2300      	movs	r3, #0
10001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
10001cca:	231f      	movs	r3, #31
10001ccc:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
10001cce:	2308      	movs	r3, #8
10001cd0:	18fb      	adds	r3, r7, r3
10001cd2:	781b      	ldrb	r3, [r3, #0]
10001cd4:	06db      	lsls	r3, r3, #27
10001cd6:	0edb      	lsrs	r3, r3, #27
10001cd8:	b2db      	uxtb	r3, r3
10001cda:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
10001cdc:	2309      	movs	r3, #9
10001cde:	18fb      	adds	r3, r7, r3
10001ce0:	781b      	ldrb	r3, [r3, #0]
10001ce2:	075b      	lsls	r3, r3, #29
10001ce4:	0f5b      	lsrs	r3, r3, #29
10001ce6:	b2da      	uxtb	r2, r3
10001ce8:	231b      	movs	r3, #27
10001cea:	18fb      	adds	r3, r7, r3
10001cec:	701a      	strb	r2, [r3, #0]
10001cee:	e019      	b.n	10001d24 <XMC_VADC_GROUP_InputClassInit+0x80>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
10001cf0:	2318      	movs	r3, #24
10001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
10001cf4:	23e0      	movs	r3, #224	; 0xe0
10001cf6:	04db      	lsls	r3, r3, #19
10001cf8:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
10001cfa:	2310      	movs	r3, #16
10001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
10001cfe:	23f8      	movs	r3, #248	; 0xf8
10001d00:	035b      	lsls	r3, r3, #13
10001d02:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
10001d04:	230a      	movs	r3, #10
10001d06:	18fb      	adds	r3, r7, r3
10001d08:	781b      	ldrb	r3, [r3, #0]
10001d0a:	06db      	lsls	r3, r3, #27
10001d0c:	0edb      	lsrs	r3, r3, #27
10001d0e:	b2db      	uxtb	r3, r3
10001d10:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
10001d12:	230b      	movs	r3, #11
10001d14:	18fb      	adds	r3, r7, r3
10001d16:	781b      	ldrb	r3, [r3, #0]
10001d18:	075b      	lsls	r3, r3, #29
10001d1a:	0f5b      	lsrs	r3, r3, #29
10001d1c:	b2da      	uxtb	r2, r3
10001d1e:	231b      	movs	r3, #27
10001d20:	18fb      	adds	r3, r7, r3
10001d22:	701a      	strb	r2, [r3, #0]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
10001d24:	68fb      	ldr	r3, [r7, #12]
10001d26:	683a      	ldr	r2, [r7, #0]
10001d28:	3228      	adds	r2, #40	; 0x28
10001d2a:	0092      	lsls	r2, r2, #2
10001d2c:	58d3      	ldr	r3, [r2, r3]
10001d2e:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
10001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10001d32:	43da      	mvns	r2, r3
10001d34:	697b      	ldr	r3, [r7, #20]
10001d36:	4013      	ands	r3, r2
10001d38:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
10001d3a:	231b      	movs	r3, #27
10001d3c:	18fb      	adds	r3, r7, r3
10001d3e:	781a      	ldrb	r2, [r3, #0]
10001d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10001d42:	409a      	lsls	r2, r3
10001d44:	1c13      	adds	r3, r2, #0
10001d46:	697a      	ldr	r2, [r7, #20]
10001d48:	4313      	orrs	r3, r2
10001d4a:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
10001d4c:	6a3b      	ldr	r3, [r7, #32]
10001d4e:	43da      	mvns	r2, r3
10001d50:	697b      	ldr	r3, [r7, #20]
10001d52:	4013      	ands	r3, r2
10001d54:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
10001d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
10001d58:	69fa      	ldr	r2, [r7, #28]
10001d5a:	409a      	lsls	r2, r3
10001d5c:	1c13      	adds	r3, r2, #0
10001d5e:	697a      	ldr	r2, [r7, #20]
10001d60:	4313      	orrs	r3, r2
10001d62:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
10001d64:	68fb      	ldr	r3, [r7, #12]
10001d66:	683a      	ldr	r2, [r7, #0]
10001d68:	3228      	adds	r2, #40	; 0x28
10001d6a:	0092      	lsls	r2, r2, #2
10001d6c:	6979      	ldr	r1, [r7, #20]
10001d6e:	50d1      	str	r1, [r2, r3]
}
10001d70:	46bd      	mov	sp, r7
10001d72:	b00c      	add	sp, #48	; 0x30
10001d74:	bd80      	pop	{r7, pc}
10001d76:	46c0      	nop			; (mov r8, r8)

10001d78 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
10001d78:	b580      	push	{r7, lr}
10001d7a:	b084      	sub	sp, #16
10001d7c:	af00      	add	r7, sp, #0
10001d7e:	6078      	str	r0, [r7, #4]
10001d80:	1c0a      	adds	r2, r1, #0
10001d82:	1cfb      	adds	r3, r7, #3
10001d84:	701a      	strb	r2, [r3, #0]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
10001d86:	687b      	ldr	r3, [r7, #4]
10001d88:	2280      	movs	r2, #128	; 0x80
10001d8a:	589b      	ldr	r3, [r3, r2]
10001d8c:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
10001d8e:	68fb      	ldr	r3, [r7, #12]
10001d90:	2203      	movs	r2, #3
10001d92:	4393      	bics	r3, r2
10001d94:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
10001d96:	1cfb      	adds	r3, r7, #3
10001d98:	781b      	ldrb	r3, [r3, #0]
10001d9a:	68fa      	ldr	r2, [r7, #12]
10001d9c:	4313      	orrs	r3, r2
10001d9e:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
10001da0:	687b      	ldr	r3, [r7, #4]
10001da2:	2180      	movs	r1, #128	; 0x80
10001da4:	68fa      	ldr	r2, [r7, #12]
10001da6:	505a      	str	r2, [r3, r1]
}
10001da8:	46bd      	mov	sp, r7
10001daa:	b004      	add	sp, #16
10001dac:	bd80      	pop	{r7, pc}
10001dae:	46c0      	nop			; (mov r8, r8)

10001db0 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode>:
}

#if(XMC_VADC_SHS_FULL_SET_REG == 1U)
/* API to enable the accelerated mode of conversion */
void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP_INDEX_t group_num)
{
10001db0:	b580      	push	{r7, lr}
10001db2:	b082      	sub	sp, #8
10001db4:	af00      	add	r7, sp, #0
10001db6:	6078      	str	r0, [r7, #4]
10001db8:	1c0a      	adds	r2, r1, #0
10001dba:	1cfb      	adds	r3, r7, #3
10001dbc:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_GROUP_INDEX_1))

  /* Set the converted to Accelerated mode from compatible mode*/
  if (group_num == XMC_VADC_GROUP_INDEX_0 )
10001dbe:	1cfb      	adds	r3, r7, #3
10001dc0:	781b      	ldrb	r3, [r3, #0]
10001dc2:	2b00      	cmp	r3, #0
10001dc4:	d108      	bne.n	10001dd8 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x28>
  {
    shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
10001dc6:	687b      	ldr	r3, [r7, #4]
10001dc8:	2280      	movs	r2, #128	; 0x80
10001dca:	589b      	ldr	r3, [r3, r2]
10001dcc:	2201      	movs	r2, #1
10001dce:	431a      	orrs	r2, r3
10001dd0:	687b      	ldr	r3, [r7, #4]
10001dd2:	2180      	movs	r1, #128	; 0x80
10001dd4:	505a      	str	r2, [r3, r1]
10001dd6:	e00b      	b.n	10001df0 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x40>
  }
  else if (group_num == XMC_VADC_GROUP_INDEX_1 )
10001dd8:	1cfb      	adds	r3, r7, #3
10001dda:	781b      	ldrb	r3, [r3, #0]
10001ddc:	2b01      	cmp	r3, #1
10001dde:	d107      	bne.n	10001df0 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x40>
  {
    shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
10001de0:	687b      	ldr	r3, [r7, #4]
10001de2:	2284      	movs	r2, #132	; 0x84
10001de4:	589b      	ldr	r3, [r3, r2]
10001de6:	2201      	movs	r2, #1
10001de8:	431a      	orrs	r2, r3
10001dea:	687b      	ldr	r3, [r7, #4]
10001dec:	2184      	movs	r1, #132	; 0x84
10001dee:	505a      	str	r2, [r3, r1]
  }
  else
  {
    /* for MISRA*/
  }
}
10001df0:	46bd      	mov	sp, r7
10001df2:	b002      	add	sp, #8
10001df4:	bd80      	pop	{r7, pc}
10001df6:	46c0      	nop			; (mov r8, r8)

10001df8 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
10001df8:	b580      	push	{r7, lr}
10001dfa:	b086      	sub	sp, #24
10001dfc:	af00      	add	r7, sp, #0
10001dfe:	6078      	str	r0, [r7, #4]
10001e00:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10001e02:	2317      	movs	r3, #23
10001e04:	18fb      	adds	r3, r7, r3
10001e06:	2200      	movs	r2, #0
10001e08:	701a      	strb	r2, [r3, #0]
10001e0a:	e00f      	b.n	10001e2c <XMC_VADC_GLOBAL_BackgroundInit+0x34>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
10001e0c:	2317      	movs	r3, #23
10001e0e:	18fb      	adds	r3, r7, r3
10001e10:	781a      	ldrb	r2, [r3, #0]
10001e12:	4b4a      	ldr	r3, [pc, #296]	; (10001f3c <XMC_VADC_GLOBAL_BackgroundInit+0x144>)
10001e14:	0092      	lsls	r2, r2, #2
10001e16:	58d3      	ldr	r3, [r2, r3]
10001e18:	1c18      	adds	r0, r3, #0
10001e1a:	f7ff fe2f 	bl	10001a7c <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10001e1e:	2317      	movs	r3, #23
10001e20:	18fb      	adds	r3, r7, r3
10001e22:	781a      	ldrb	r2, [r3, #0]
10001e24:	2317      	movs	r3, #23
10001e26:	18fb      	adds	r3, r7, r3
10001e28:	3201      	adds	r2, #1
10001e2a:	701a      	strb	r2, [r3, #0]
10001e2c:	2317      	movs	r3, #23
10001e2e:	18fb      	adds	r3, r7, r3
10001e30:	781b      	ldrb	r3, [r3, #0]
10001e32:	2b01      	cmp	r3, #1
10001e34:	d9ea      	bls.n	10001e0c <XMC_VADC_GLOBAL_BackgroundInit+0x14>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
10001e36:	2300      	movs	r3, #0
10001e38:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
10001e3a:	683b      	ldr	r3, [r7, #0]
10001e3c:	781b      	ldrb	r3, [r3, #0]
10001e3e:	2203      	movs	r2, #3
10001e40:	4013      	ands	r3, r2
10001e42:	b2db      	uxtb	r3, r3
10001e44:	2b00      	cmp	r3, #0
10001e46:	d002      	beq.n	10001e4e <XMC_VADC_GLOBAL_BackgroundInit+0x56>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
10001e48:	2380      	movs	r3, #128	; 0x80
10001e4a:	011b      	lsls	r3, r3, #4
10001e4c:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10001e4e:	2317      	movs	r3, #23
10001e50:	18fb      	adds	r3, r7, r3
10001e52:	2200      	movs	r2, #0
10001e54:	701a      	strb	r2, [r3, #0]
10001e56:	e029      	b.n	10001eac <XMC_VADC_GLOBAL_BackgroundInit+0xb4>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
10001e58:	2317      	movs	r3, #23
10001e5a:	18fb      	adds	r3, r7, r3
10001e5c:	781a      	ldrb	r2, [r3, #0]
10001e5e:	4b37      	ldr	r3, [pc, #220]	; (10001f3c <XMC_VADC_GLOBAL_BackgroundInit+0x144>)
10001e60:	0092      	lsls	r2, r2, #2
10001e62:	58d3      	ldr	r3, [r2, r3]
10001e64:	2284      	movs	r2, #132	; 0x84
10001e66:	589b      	ldr	r3, [r3, r2]
10001e68:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
10001e6a:	68fb      	ldr	r3, [r7, #12]
10001e6c:	4a34      	ldr	r2, [pc, #208]	; (10001f40 <XMC_VADC_GLOBAL_BackgroundInit+0x148>)
10001e6e:	4013      	ands	r3, r2
10001e70:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
10001e72:	683b      	ldr	r3, [r7, #0]
10001e74:	781b      	ldrb	r3, [r3, #0]
10001e76:	071b      	lsls	r3, r3, #28
10001e78:	0f9b      	lsrs	r3, r3, #30
10001e7a:	b2db      	uxtb	r3, r3
10001e7c:	021b      	lsls	r3, r3, #8
10001e7e:	68fa      	ldr	r2, [r7, #12]
10001e80:	4313      	orrs	r3, r2
10001e82:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
10001e84:	68fa      	ldr	r2, [r7, #12]
10001e86:	693b      	ldr	r3, [r7, #16]
10001e88:	4313      	orrs	r3, r2
10001e8a:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
10001e8c:	2317      	movs	r3, #23
10001e8e:	18fb      	adds	r3, r7, r3
10001e90:	781a      	ldrb	r2, [r3, #0]
10001e92:	4b2a      	ldr	r3, [pc, #168]	; (10001f3c <XMC_VADC_GLOBAL_BackgroundInit+0x144>)
10001e94:	0092      	lsls	r2, r2, #2
10001e96:	58d3      	ldr	r3, [r2, r3]
10001e98:	2184      	movs	r1, #132	; 0x84
10001e9a:	68fa      	ldr	r2, [r7, #12]
10001e9c:	505a      	str	r2, [r3, r1]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10001e9e:	2317      	movs	r3, #23
10001ea0:	18fb      	adds	r3, r7, r3
10001ea2:	781a      	ldrb	r2, [r3, #0]
10001ea4:	2317      	movs	r3, #23
10001ea6:	18fb      	adds	r3, r7, r3
10001ea8:	3201      	adds	r2, #1
10001eaa:	701a      	strb	r2, [r3, #0]
10001eac:	2317      	movs	r3, #23
10001eae:	18fb      	adds	r3, r7, r3
10001eb0:	781b      	ldrb	r3, [r3, #0]
10001eb2:	2b01      	cmp	r3, #1
10001eb4:	d9d0      	bls.n	10001e58 <XMC_VADC_GLOBAL_BackgroundInit+0x60>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
10001eb6:	683b      	ldr	r3, [r7, #0]
10001eb8:	685b      	ldr	r3, [r3, #4]
10001eba:	4a22      	ldr	r2, [pc, #136]	; (10001f44 <XMC_VADC_GLOBAL_BackgroundInit+0x14c>)
10001ebc:	431a      	orrs	r2, r3
10001ebe:	1c11      	adds	r1, r2, #0
10001ec0:	687a      	ldr	r2, [r7, #4]
10001ec2:	2380      	movs	r3, #128	; 0x80
10001ec4:	009b      	lsls	r3, r3, #2
10001ec6:	50d1      	str	r1, [r2, r3]

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
10001ec8:	683b      	ldr	r3, [r7, #0]
10001eca:	689b      	ldr	r3, [r3, #8]
10001ecc:	2201      	movs	r2, #1
10001ece:	431a      	orrs	r2, r3
10001ed0:	1c11      	adds	r1, r2, #0
10001ed2:	687a      	ldr	r2, [r7, #4]
10001ed4:	2381      	movs	r3, #129	; 0x81
10001ed6:	009b      	lsls	r3, r3, #2
10001ed8:	50d1      	str	r1, [r2, r3]
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
10001eda:	683b      	ldr	r3, [r7, #0]
10001edc:	781b      	ldrb	r3, [r3, #0]
10001ede:	2203      	movs	r2, #3
10001ee0:	4013      	ands	r3, r2
10001ee2:	b2db      	uxtb	r3, r3
10001ee4:	2b02      	cmp	r3, #2
10001ee6:	d10b      	bne.n	10001f00 <XMC_VADC_GLOBAL_BackgroundInit+0x108>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
10001ee8:	687a      	ldr	r2, [r7, #4]
10001eea:	2381      	movs	r3, #129	; 0x81
10001eec:	009b      	lsls	r3, r3, #2
10001eee:	58d3      	ldr	r3, [r2, r3]
10001ef0:	2280      	movs	r2, #128	; 0x80
10001ef2:	0252      	lsls	r2, r2, #9
10001ef4:	431a      	orrs	r2, r3
10001ef6:	1c11      	adds	r1, r2, #0
10001ef8:	687a      	ldr	r2, [r7, #4]
10001efa:	2381      	movs	r3, #129	; 0x81
10001efc:	009b      	lsls	r3, r3, #2
10001efe:	50d1      	str	r1, [r2, r3]
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10001f00:	2317      	movs	r3, #23
10001f02:	18fb      	adds	r3, r7, r3
10001f04:	2200      	movs	r2, #0
10001f06:	701a      	strb	r2, [r3, #0]
10001f08:	e00f      	b.n	10001f2a <XMC_VADC_GLOBAL_BackgroundInit+0x132>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
10001f0a:	2317      	movs	r3, #23
10001f0c:	18fb      	adds	r3, r7, r3
10001f0e:	781a      	ldrb	r2, [r3, #0]
10001f10:	4b0a      	ldr	r3, [pc, #40]	; (10001f3c <XMC_VADC_GLOBAL_BackgroundInit+0x144>)
10001f12:	0092      	lsls	r2, r2, #2
10001f14:	58d3      	ldr	r3, [r2, r3]
10001f16:	1c18      	adds	r0, r3, #0
10001f18:	f7ff fda0 	bl	10001a5c <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
10001f1c:	2317      	movs	r3, #23
10001f1e:	18fb      	adds	r3, r7, r3
10001f20:	781a      	ldrb	r2, [r3, #0]
10001f22:	2317      	movs	r3, #23
10001f24:	18fb      	adds	r3, r7, r3
10001f26:	3201      	adds	r2, #1
10001f28:	701a      	strb	r2, [r3, #0]
10001f2a:	2317      	movs	r3, #23
10001f2c:	18fb      	adds	r3, r7, r3
10001f2e:	781b      	ldrb	r3, [r3, #0]
10001f30:	2b01      	cmp	r3, #1
10001f32:	d9ea      	bls.n	10001f0a <XMC_VADC_GLOBAL_BackgroundInit+0x112>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
10001f34:	46bd      	mov	sp, r7
10001f36:	b006      	add	sp, #24
10001f38:	bd80      	pop	{r7, pc}
10001f3a:	46c0      	nop			; (mov r8, r8)
10001f3c:	10002ebc 	.word	0x10002ebc
10001f40:	fffffcff 	.word	0xfffffcff
10001f44:	00808000 	.word	0x00808000

10001f48 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
10001f48:	b580      	push	{r7, lr}
10001f4a:	b088      	sub	sp, #32
10001f4c:	af00      	add	r7, sp, #0
10001f4e:	60f8      	str	r0, [r7, #12]
10001f50:	60b9      	str	r1, [r7, #8]
10001f52:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
10001f54:	687b      	ldr	r3, [r7, #4]
10001f56:	7b1b      	ldrb	r3, [r3, #12]
10001f58:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
10001f5a:	68fb      	ldr	r3, [r7, #12]
10001f5c:	2288      	movs	r2, #136	; 0x88
10001f5e:	589b      	ldr	r3, [r3, r2]
10001f60:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
10001f62:	68bb      	ldr	r3, [r7, #8]
10001f64:	2201      	movs	r2, #1
10001f66:	409a      	lsls	r2, r3
10001f68:	1c13      	adds	r3, r2, #0
10001f6a:	43da      	mvns	r2, r3
10001f6c:	697b      	ldr	r3, [r7, #20]
10001f6e:	4013      	ands	r3, r2
10001f70:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
10001f72:	68bb      	ldr	r3, [r7, #8]
10001f74:	69ba      	ldr	r2, [r7, #24]
10001f76:	409a      	lsls	r2, r3
10001f78:	1c13      	adds	r3, r2, #0
10001f7a:	697a      	ldr	r2, [r7, #20]
10001f7c:	4313      	orrs	r3, r2
10001f7e:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
10001f80:	68fb      	ldr	r3, [r7, #12]
10001f82:	2188      	movs	r1, #136	; 0x88
10001f84:	697a      	ldr	r2, [r7, #20]
10001f86:	505a      	str	r2, [r3, r1]

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
10001f88:	687b      	ldr	r3, [r7, #4]
10001f8a:	7b5b      	ldrb	r3, [r3, #13]
10001f8c:	b25b      	sxtb	r3, r3
10001f8e:	2b00      	cmp	r3, #0
10001f90:	db2a      	blt.n	10001fe8 <XMC_VADC_GROUP_ChannelInit+0xa0>
  {
    mask = (uint32_t)0;
10001f92:	2300      	movs	r3, #0
10001f94:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
10001f96:	68bb      	ldr	r3, [r7, #8]
10001f98:	2b01      	cmp	r3, #1
10001f9a:	d10a      	bne.n	10001fb2 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
10001f9c:	2308      	movs	r3, #8
10001f9e:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
10001fa0:	68fb      	ldr	r3, [r7, #12]
10001fa2:	22b0      	movs	r2, #176	; 0xb0
10001fa4:	589b      	ldr	r3, [r3, r2]
10001fa6:	4a1e      	ldr	r2, [pc, #120]	; (10002020 <XMC_VADC_GROUP_ChannelInit+0xd8>)
10001fa8:	401a      	ands	r2, r3
10001faa:	68fb      	ldr	r3, [r7, #12]
10001fac:	21b0      	movs	r1, #176	; 0xb0
10001fae:	505a      	str	r2, [r3, r1]
10001fb0:	e00d      	b.n	10001fce <XMC_VADC_GROUP_ChannelInit+0x86>
    }
    else if ((uint32_t)0 == ch_num)
10001fb2:	68bb      	ldr	r3, [r7, #8]
10001fb4:	2b00      	cmp	r3, #0
10001fb6:	d10a      	bne.n	10001fce <XMC_VADC_GROUP_ChannelInit+0x86>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
10001fb8:	2300      	movs	r3, #0
10001fba:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
10001fbc:	68fb      	ldr	r3, [r7, #12]
10001fbe:	22b0      	movs	r2, #176	; 0xb0
10001fc0:	589b      	ldr	r3, [r3, r2]
10001fc2:	221f      	movs	r2, #31
10001fc4:	4393      	bics	r3, r2
10001fc6:	1c1a      	adds	r2, r3, #0
10001fc8:	68fb      	ldr	r3, [r7, #12]
10001fca:	21b0      	movs	r1, #176	; 0xb0
10001fcc:	505a      	str	r2, [r3, r1]
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
10001fce:	68fb      	ldr	r3, [r7, #12]
10001fd0:	22b0      	movs	r2, #176	; 0xb0
10001fd2:	589b      	ldr	r3, [r3, r2]
10001fd4:	687a      	ldr	r2, [r7, #4]
10001fd6:	7b52      	ldrb	r2, [r2, #13]
10001fd8:	b251      	sxtb	r1, r2
10001fda:	69fa      	ldr	r2, [r7, #28]
10001fdc:	4091      	lsls	r1, r2
10001fde:	1c0a      	adds	r2, r1, #0
10001fe0:	431a      	orrs	r2, r3
10001fe2:	68fb      	ldr	r3, [r7, #12]
10001fe4:	21b0      	movs	r1, #176	; 0xb0
10001fe6:	505a      	str	r2, [r3, r1]
  }

  group_ptr->BFL |= config->bfl;
10001fe8:	68fb      	ldr	r3, [r7, #12]
10001fea:	22c8      	movs	r2, #200	; 0xc8
10001fec:	589a      	ldr	r2, [r3, r2]
10001fee:	687b      	ldr	r3, [r7, #4]
10001ff0:	685b      	ldr	r3, [r3, #4]
10001ff2:	431a      	orrs	r2, r3
10001ff4:	68fb      	ldr	r3, [r7, #12]
10001ff6:	21c8      	movs	r1, #200	; 0xc8
10001ff8:	505a      	str	r2, [r3, r1]

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
10001ffa:	68fb      	ldr	r3, [r7, #12]
10001ffc:	22d0      	movs	r2, #208	; 0xd0
10001ffe:	589a      	ldr	r2, [r3, r2]
10002000:	687b      	ldr	r3, [r7, #4]
10002002:	689b      	ldr	r3, [r3, #8]
10002004:	431a      	orrs	r2, r3
10002006:	68fb      	ldr	r3, [r7, #12]
10002008:	21d0      	movs	r1, #208	; 0xd0
1000200a:	505a      	str	r2, [r3, r1]
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
1000200c:	687b      	ldr	r3, [r7, #4]
1000200e:	6819      	ldr	r1, [r3, #0]
10002010:	68fb      	ldr	r3, [r7, #12]
10002012:	68ba      	ldr	r2, [r7, #8]
10002014:	3280      	adds	r2, #128	; 0x80
10002016:	0092      	lsls	r2, r2, #2
10002018:	50d1      	str	r1, [r2, r3]

}
1000201a:	46bd      	mov	sp, r7
1000201c:	b008      	add	sp, #32
1000201e:	bd80      	pop	{r7, pc}
10002020:	ffffe0ff 	.word	0xffffe0ff

10002024 <_init>:
  }
}

/* Init */
void _init(void)
{}
10002024:	b580      	push	{r7, lr}
10002026:	af00      	add	r7, sp, #0
10002028:	46bd      	mov	sp, r7
1000202a:	bd80      	pop	{r7, pc}

1000202c <MyoDataCollectorINIT>:

#include "MyoDataCollector.h"


void MyoDataCollectorINIT(struct MyoDataCollector * myoDataPtr)
{
1000202c:	b590      	push	{r4, r7, lr}
1000202e:	b089      	sub	sp, #36	; 0x24
10002030:	af00      	add	r7, sp, #0
10002032:	6078      	str	r0, [r7, #4]
    struct FourTuple zeroVals;
    zeroVals.index = 0;
10002034:	230c      	movs	r3, #12
10002036:	18fb      	adds	r3, r7, r3
10002038:	2200      	movs	r2, #0
1000203a:	605a      	str	r2, [r3, #4]
    zeroVals.middle = 0;
1000203c:	230c      	movs	r3, #12
1000203e:	18fb      	adds	r3, r7, r3
10002040:	2200      	movs	r2, #0
10002042:	609a      	str	r2, [r3, #8]
    zeroVals.thumb = 0;
10002044:	230c      	movs	r3, #12
10002046:	18fb      	adds	r3, r7, r3
10002048:	2200      	movs	r2, #0
1000204a:	601a      	str	r2, [r3, #0]
    zeroVals.rp = 0;
1000204c:	230c      	movs	r3, #12
1000204e:	18fb      	adds	r3, r7, r3
10002050:	2200      	movs	r2, #0
10002052:	60da      	str	r2, [r3, #12]
    
    for(int i = 0; i < DataWindow; i++)
10002054:	2300      	movs	r3, #0
10002056:	61fb      	str	r3, [r7, #28]
10002058:	e00e      	b.n	10002078 <MyoDataCollectorINIT+0x4c>
    {
        myoDataPtr->arrayPtr[i] = zeroVals;
1000205a:	687a      	ldr	r2, [r7, #4]
1000205c:	69fb      	ldr	r3, [r7, #28]
1000205e:	011b      	lsls	r3, r3, #4
10002060:	2104      	movs	r1, #4
10002062:	18d3      	adds	r3, r2, r3
10002064:	185b      	adds	r3, r3, r1
10002066:	220c      	movs	r2, #12
10002068:	18ba      	adds	r2, r7, r2
1000206a:	ca13      	ldmia	r2!, {r0, r1, r4}
1000206c:	c313      	stmia	r3!, {r0, r1, r4}
1000206e:	6812      	ldr	r2, [r2, #0]
10002070:	601a      	str	r2, [r3, #0]
    zeroVals.index = 0;
    zeroVals.middle = 0;
    zeroVals.thumb = 0;
    zeroVals.rp = 0;
    
    for(int i = 0; i < DataWindow; i++)
10002072:	69fb      	ldr	r3, [r7, #28]
10002074:	3301      	adds	r3, #1
10002076:	61fb      	str	r3, [r7, #28]
10002078:	69fb      	ldr	r3, [r7, #28]
1000207a:	2b63      	cmp	r3, #99	; 0x63
1000207c:	dded      	ble.n	1000205a <MyoDataCollectorINIT+0x2e>
    {
        myoDataPtr->arrayPtr[i] = zeroVals;
    }
    myoDataPtr->oldestIdx = 0;
1000207e:	687a      	ldr	r2, [r7, #4]
10002080:	23c9      	movs	r3, #201	; 0xc9
10002082:	00db      	lsls	r3, r3, #3
10002084:	2100      	movs	r1, #0
10002086:	50d1      	str	r1, [r2, r3]
    myoDataPtr->recentIdx = DataWindow - 1;
10002088:	687b      	ldr	r3, [r7, #4]
1000208a:	4a09      	ldr	r2, [pc, #36]	; (100020b0 <MyoDataCollectorINIT+0x84>)
1000208c:	2163      	movs	r1, #99	; 0x63
1000208e:	5099      	str	r1, [r3, r2]
    myoDataPtr->SIZE = DataWindow;
10002090:	687b      	ldr	r3, [r7, #4]
10002092:	2264      	movs	r2, #100	; 0x64
10002094:	601a      	str	r2, [r3, #0]
    myoDataPtr->averages = zeroVals;
10002096:	687b      	ldr	r3, [r7, #4]
10002098:	4a06      	ldr	r2, [pc, #24]	; (100020b4 <MyoDataCollectorINIT+0x88>)
1000209a:	210c      	movs	r1, #12
1000209c:	1879      	adds	r1, r7, r1
1000209e:	189b      	adds	r3, r3, r2
100020a0:	1c0a      	adds	r2, r1, #0
100020a2:	ca13      	ldmia	r2!, {r0, r1, r4}
100020a4:	c313      	stmia	r3!, {r0, r1, r4}
100020a6:	6812      	ldr	r2, [r2, #0]
100020a8:	601a      	str	r2, [r3, #0]
 
};
100020aa:	46bd      	mov	sp, r7
100020ac:	b009      	add	sp, #36	; 0x24
100020ae:	bd90      	pop	{r4, r7, pc}
100020b0:	00000644 	.word	0x00000644
100020b4:	0000064c 	.word	0x0000064c

100020b8 <MyoDataPush>:


//inserts sensor read values into the buffer of SIZE readings
void MyoDataPush(struct MyoDataCollector * myoDataPtr, struct FourTuple * readingsPtr)
{
100020b8:	b590      	push	{r4, r7, lr}
100020ba:	b08d      	sub	sp, #52	; 0x34
100020bc:	af00      	add	r7, sp, #0
100020be:	6078      	str	r0, [r7, #4]
100020c0:	6039      	str	r1, [r7, #0]
    //update the average of the data
    struct FourTuple oldestData = myoDataPtr->arrayPtr[myoDataPtr->oldestIdx];
100020c2:	687a      	ldr	r2, [r7, #4]
100020c4:	23c9      	movs	r3, #201	; 0xc9
100020c6:	00db      	lsls	r3, r3, #3
100020c8:	58d3      	ldr	r3, [r2, r3]
100020ca:	221c      	movs	r2, #28
100020cc:	18b8      	adds	r0, r7, r2
100020ce:	687a      	ldr	r2, [r7, #4]
100020d0:	011b      	lsls	r3, r3, #4
100020d2:	2104      	movs	r1, #4
100020d4:	18d3      	adds	r3, r2, r3
100020d6:	185a      	adds	r2, r3, r1
100020d8:	1c03      	adds	r3, r0, #0
100020da:	ca13      	ldmia	r2!, {r0, r1, r4}
100020dc:	c313      	stmia	r3!, {r0, r1, r4}
100020de:	6812      	ldr	r2, [r2, #0]
100020e0:	601a      	str	r2, [r3, #0]
    
    struct FourTuple averages = myoDataPtr->averages;
100020e2:	230c      	movs	r3, #12
100020e4:	18fa      	adds	r2, r7, r3
100020e6:	687b      	ldr	r3, [r7, #4]
100020e8:	494a      	ldr	r1, [pc, #296]	; (10002214 <MyoDataPush+0x15c>)
100020ea:	185b      	adds	r3, r3, r1
100020ec:	cb13      	ldmia	r3!, {r0, r1, r4}
100020ee:	c213      	stmia	r2!, {r0, r1, r4}
100020f0:	681b      	ldr	r3, [r3, #0]
100020f2:	6013      	str	r3, [r2, #0]
    
    int SIZE = myoDataPtr->SIZE;
100020f4:	687b      	ldr	r3, [r7, #4]
100020f6:	681b      	ldr	r3, [r3, #0]
100020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    //thumb
    averages.thumb = averages.thumb - oldestData.thumb/SIZE + readingsPtr->thumb/SIZE;
100020fa:	230c      	movs	r3, #12
100020fc:	18fb      	adds	r3, r7, r3
100020fe:	681c      	ldr	r4, [r3, #0]
10002100:	231c      	movs	r3, #28
10002102:	18fb      	adds	r3, r7, r3
10002104:	681b      	ldr	r3, [r3, #0]
10002106:	1c18      	adds	r0, r3, #0
10002108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
1000210a:	f7ff fbfd 	bl	10001908 <__aeabi_idiv>
1000210e:	1c03      	adds	r3, r0, #0
10002110:	1ae4      	subs	r4, r4, r3
10002112:	683b      	ldr	r3, [r7, #0]
10002114:	681b      	ldr	r3, [r3, #0]
10002116:	1c18      	adds	r0, r3, #0
10002118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
1000211a:	f7ff fbf5 	bl	10001908 <__aeabi_idiv>
1000211e:	1c03      	adds	r3, r0, #0
10002120:	18e2      	adds	r2, r4, r3
10002122:	230c      	movs	r3, #12
10002124:	18fb      	adds	r3, r7, r3
10002126:	601a      	str	r2, [r3, #0]
    //index
    averages.index = averages.index - oldestData.index/SIZE + readingsPtr->index/SIZE;
10002128:	230c      	movs	r3, #12
1000212a:	18fb      	adds	r3, r7, r3
1000212c:	685c      	ldr	r4, [r3, #4]
1000212e:	231c      	movs	r3, #28
10002130:	18fb      	adds	r3, r7, r3
10002132:	685b      	ldr	r3, [r3, #4]
10002134:	1c18      	adds	r0, r3, #0
10002136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
10002138:	f7ff fbe6 	bl	10001908 <__aeabi_idiv>
1000213c:	1c03      	adds	r3, r0, #0
1000213e:	1ae4      	subs	r4, r4, r3
10002140:	683b      	ldr	r3, [r7, #0]
10002142:	685b      	ldr	r3, [r3, #4]
10002144:	1c18      	adds	r0, r3, #0
10002146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
10002148:	f7ff fbde 	bl	10001908 <__aeabi_idiv>
1000214c:	1c03      	adds	r3, r0, #0
1000214e:	18e2      	adds	r2, r4, r3
10002150:	230c      	movs	r3, #12
10002152:	18fb      	adds	r3, r7, r3
10002154:	605a      	str	r2, [r3, #4]
    //middle
    averages.middle = averages.middle - oldestData.middle/SIZE + readingsPtr->middle/SIZE;
10002156:	230c      	movs	r3, #12
10002158:	18fb      	adds	r3, r7, r3
1000215a:	689c      	ldr	r4, [r3, #8]
1000215c:	231c      	movs	r3, #28
1000215e:	18fb      	adds	r3, r7, r3
10002160:	689b      	ldr	r3, [r3, #8]
10002162:	1c18      	adds	r0, r3, #0
10002164:	6af9      	ldr	r1, [r7, #44]	; 0x2c
10002166:	f7ff fbcf 	bl	10001908 <__aeabi_idiv>
1000216a:	1c03      	adds	r3, r0, #0
1000216c:	1ae4      	subs	r4, r4, r3
1000216e:	683b      	ldr	r3, [r7, #0]
10002170:	689b      	ldr	r3, [r3, #8]
10002172:	1c18      	adds	r0, r3, #0
10002174:	6af9      	ldr	r1, [r7, #44]	; 0x2c
10002176:	f7ff fbc7 	bl	10001908 <__aeabi_idiv>
1000217a:	1c03      	adds	r3, r0, #0
1000217c:	18e2      	adds	r2, r4, r3
1000217e:	230c      	movs	r3, #12
10002180:	18fb      	adds	r3, r7, r3
10002182:	609a      	str	r2, [r3, #8]
    //rp
    averages.rp = averages.rp - oldestData.rp/SIZE + readingsPtr->rp/SIZE;
10002184:	230c      	movs	r3, #12
10002186:	18fb      	adds	r3, r7, r3
10002188:	68dc      	ldr	r4, [r3, #12]
1000218a:	231c      	movs	r3, #28
1000218c:	18fb      	adds	r3, r7, r3
1000218e:	68db      	ldr	r3, [r3, #12]
10002190:	1c18      	adds	r0, r3, #0
10002192:	6af9      	ldr	r1, [r7, #44]	; 0x2c
10002194:	f7ff fbb8 	bl	10001908 <__aeabi_idiv>
10002198:	1c03      	adds	r3, r0, #0
1000219a:	1ae4      	subs	r4, r4, r3
1000219c:	683b      	ldr	r3, [r7, #0]
1000219e:	68db      	ldr	r3, [r3, #12]
100021a0:	1c18      	adds	r0, r3, #0
100021a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
100021a4:	f7ff fbb0 	bl	10001908 <__aeabi_idiv>
100021a8:	1c03      	adds	r3, r0, #0
100021aa:	18e2      	adds	r2, r4, r3
100021ac:	230c      	movs	r3, #12
100021ae:	18fb      	adds	r3, r7, r3
100021b0:	60da      	str	r2, [r3, #12]
    
    //update the averages in the MyoDataCollector
    myoDataPtr->averages = averages;
100021b2:	687b      	ldr	r3, [r7, #4]
100021b4:	4a17      	ldr	r2, [pc, #92]	; (10002214 <MyoDataPush+0x15c>)
100021b6:	210c      	movs	r1, #12
100021b8:	1879      	adds	r1, r7, r1
100021ba:	189b      	adds	r3, r3, r2
100021bc:	1c0a      	adds	r2, r1, #0
100021be:	ca13      	ldmia	r2!, {r0, r1, r4}
100021c0:	c313      	stmia	r3!, {r0, r1, r4}
100021c2:	6812      	ldr	r2, [r2, #0]
100021c4:	601a      	str	r2, [r3, #0]
    
    //update the data point collection
    myoDataPtr->arrayPtr[myoDataPtr->oldestIdx] = *readingsPtr;
100021c6:	687a      	ldr	r2, [r7, #4]
100021c8:	23c9      	movs	r3, #201	; 0xc9
100021ca:	00db      	lsls	r3, r3, #3
100021cc:	58d3      	ldr	r3, [r2, r3]
100021ce:	687a      	ldr	r2, [r7, #4]
100021d0:	011b      	lsls	r3, r3, #4
100021d2:	2104      	movs	r1, #4
100021d4:	18d3      	adds	r3, r2, r3
100021d6:	185b      	adds	r3, r3, r1
100021d8:	683a      	ldr	r2, [r7, #0]
100021da:	ca13      	ldmia	r2!, {r0, r1, r4}
100021dc:	c313      	stmia	r3!, {r0, r1, r4}
100021de:	6812      	ldr	r2, [r2, #0]
100021e0:	601a      	str	r2, [r3, #0]
    myoDataPtr->recentIdx = myoDataPtr->oldestIdx;
100021e2:	687a      	ldr	r2, [r7, #4]
100021e4:	23c9      	movs	r3, #201	; 0xc9
100021e6:	00db      	lsls	r3, r3, #3
100021e8:	58d2      	ldr	r2, [r2, r3]
100021ea:	687b      	ldr	r3, [r7, #4]
100021ec:	490a      	ldr	r1, [pc, #40]	; (10002218 <MyoDataPush+0x160>)
100021ee:	505a      	str	r2, [r3, r1]
    myoDataPtr->oldestIdx = (myoDataPtr->oldestIdx + 1) % SIZE;
100021f0:	687a      	ldr	r2, [r7, #4]
100021f2:	23c9      	movs	r3, #201	; 0xc9
100021f4:	00db      	lsls	r3, r3, #3
100021f6:	58d3      	ldr	r3, [r2, r3]
100021f8:	3301      	adds	r3, #1
100021fa:	1c18      	adds	r0, r3, #0
100021fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
100021fe:	f7ff fbab 	bl	10001958 <__aeabi_idivmod>
10002202:	1c0b      	adds	r3, r1, #0
10002204:	1c19      	adds	r1, r3, #0
10002206:	687a      	ldr	r2, [r7, #4]
10002208:	23c9      	movs	r3, #201	; 0xc9
1000220a:	00db      	lsls	r3, r3, #3
1000220c:	50d1      	str	r1, [r2, r3]
}
1000220e:	46bd      	mov	sp, r7
10002210:	b00d      	add	sp, #52	; 0x34
10002212:	bd90      	pop	{r4, r7, pc}
10002214:	0000064c 	.word	0x0000064c
10002218:	00000644 	.word	0x00000644

1000221c <MyoHandINIT>:



//Initializer
void MyoHandINIT(struct MyoHand * myohandPtr)
{
1000221c:	b590      	push	{r4, r7, lr}
1000221e:	b087      	sub	sp, #28
10002220:	af00      	add	r7, sp, #0
10002222:	6078      	str	r0, [r7, #4]
	MyoDataCollectorINIT(&myohandPtr->sensorBuffer);
10002224:	687b      	ldr	r3, [r7, #4]
10002226:	1c18      	adds	r0, r3, #0
10002228:	f7ff ff00 	bl	1000202c <MyoDataCollectorINIT>
    struct FourTuple zeroVals;
    zeroVals.index = 0;
1000222c:	2308      	movs	r3, #8
1000222e:	18fb      	adds	r3, r7, r3
10002230:	2200      	movs	r2, #0
10002232:	605a      	str	r2, [r3, #4]
    zeroVals.middle = 0;
10002234:	2308      	movs	r3, #8
10002236:	18fb      	adds	r3, r7, r3
10002238:	2200      	movs	r2, #0
1000223a:	609a      	str	r2, [r3, #8]
    zeroVals.thumb = 0;
1000223c:	2308      	movs	r3, #8
1000223e:	18fb      	adds	r3, r7, r3
10002240:	2200      	movs	r2, #0
10002242:	601a      	str	r2, [r3, #0]
    zeroVals.rp = 0;
10002244:	2308      	movs	r3, #8
10002246:	18fb      	adds	r3, r7, r3
10002248:	2200      	movs	r2, #0
1000224a:	60da      	str	r2, [r3, #12]

    myohandPtr->yvalI = zeroVals;
1000224c:	687b      	ldr	r3, [r7, #4]
1000224e:	4a10      	ldr	r2, [pc, #64]	; (10002290 <MyoHandINIT+0x74>)
10002250:	2108      	movs	r1, #8
10002252:	1879      	adds	r1, r7, r1
10002254:	189b      	adds	r3, r3, r2
10002256:	1c0a      	adds	r2, r1, #0
10002258:	ca13      	ldmia	r2!, {r0, r1, r4}
1000225a:	c313      	stmia	r3!, {r0, r1, r4}
1000225c:	6812      	ldr	r2, [r2, #0]
1000225e:	601a      	str	r2, [r3, #0]
    myohandPtr->yR = zeroVals;
10002260:	687b      	ldr	r3, [r7, #4]
10002262:	4a0c      	ldr	r2, [pc, #48]	; (10002294 <MyoHandINIT+0x78>)
10002264:	2108      	movs	r1, #8
10002266:	1879      	adds	r1, r7, r1
10002268:	189b      	adds	r3, r3, r2
1000226a:	1c0a      	adds	r2, r1, #0
1000226c:	ca13      	ldmia	r2!, {r0, r1, r4}
1000226e:	c313      	stmia	r3!, {r0, r1, r4}
10002270:	6812      	ldr	r2, [r2, #0]
10002272:	601a      	str	r2, [r3, #0]
    myohandPtr->yC = zeroVals;
10002274:	687b      	ldr	r3, [r7, #4]
10002276:	4a08      	ldr	r2, [pc, #32]	; (10002298 <MyoHandINIT+0x7c>)
10002278:	2108      	movs	r1, #8
1000227a:	1879      	adds	r1, r7, r1
1000227c:	189b      	adds	r3, r3, r2
1000227e:	1c0a      	adds	r2, r1, #0
10002280:	ca13      	ldmia	r2!, {r0, r1, r4}
10002282:	c313      	stmia	r3!, {r0, r1, r4}
10002284:	6812      	ldr	r2, [r2, #0]
10002286:	601a      	str	r2, [r3, #0]
}
10002288:	46bd      	mov	sp, r7
1000228a:	b007      	add	sp, #28
1000228c:	bd90      	pop	{r4, r7, pc}
1000228e:	46c0      	nop			; (mov r8, r8)
10002290:	0000065c 	.word	0x0000065c
10002294:	0000066c 	.word	0x0000066c
10002298:	0000067c 	.word	0x0000067c

1000229c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
1000229c:	b580      	push	{r7, lr}
1000229e:	b082      	sub	sp, #8
100022a0:	af00      	add	r7, sp, #0
100022a2:	6078      	str	r0, [r7, #4]
100022a4:	1c0a      	adds	r2, r1, #0
100022a6:	1cfb      	adds	r3, r7, #3
100022a8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
100022aa:	687b      	ldr	r3, [r7, #4]
100022ac:	68da      	ldr	r2, [r3, #12]
100022ae:	1cfb      	adds	r3, r7, #3
100022b0:	781b      	ldrb	r3, [r3, #0]
100022b2:	2101      	movs	r1, #1
100022b4:	4099      	lsls	r1, r3
100022b6:	1c0b      	adds	r3, r1, #0
100022b8:	431a      	orrs	r2, r3
100022ba:	687b      	ldr	r3, [r7, #4]
100022bc:	60da      	str	r2, [r3, #12]
}
100022be:	46bd      	mov	sp, r7
100022c0:	b002      	add	sp, #8
100022c2:	bd80      	pop	{r7, pc}

100022c4 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
100022c4:	b580      	push	{r7, lr}
100022c6:	b082      	sub	sp, #8
100022c8:	af00      	add	r7, sp, #0
100022ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
100022cc:	687b      	ldr	r3, [r7, #4]
100022ce:	2201      	movs	r2, #1
100022d0:	60da      	str	r2, [r3, #12]
}
100022d2:	46bd      	mov	sp, r7
100022d4:	b002      	add	sp, #8
100022d6:	bd80      	pop	{r7, pc}

100022d8 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
100022d8:	b580      	push	{r7, lr}
100022da:	b082      	sub	sp, #8
100022dc:	af00      	add	r7, sp, #0
100022de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
100022e0:	687b      	ldr	r3, [r7, #4]
100022e2:	2202      	movs	r2, #2
100022e4:	611a      	str	r2, [r3, #16]
}
100022e6:	46bd      	mov	sp, r7
100022e8:	b002      	add	sp, #8
100022ea:	bd80      	pop	{r7, pc}

100022ec <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
100022ec:	b580      	push	{r7, lr}
100022ee:	b082      	sub	sp, #8
100022f0:	af00      	add	r7, sp, #0
100022f2:	6078      	str	r0, [r7, #4]
100022f4:	1c0a      	adds	r2, r1, #0
100022f6:	1cbb      	adds	r3, r7, #2
100022f8:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
100022fa:	1cbb      	adds	r3, r7, #2
100022fc:	881a      	ldrh	r2, [r3, #0]
100022fe:	687b      	ldr	r3, [r7, #4]
10002300:	635a      	str	r2, [r3, #52]	; 0x34
}
10002302:	46bd      	mov	sp, r7
10002304:	b002      	add	sp, #8
10002306:	bd80      	pop	{r7, pc}

10002308 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
10002308:	b580      	push	{r7, lr}
1000230a:	b082      	sub	sp, #8
1000230c:	af00      	add	r7, sp, #0
1000230e:	6078      	str	r0, [r7, #4]
10002310:	1c0a      	adds	r2, r1, #0
10002312:	1cbb      	adds	r3, r7, #2
10002314:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
10002316:	1cbb      	adds	r3, r7, #2
10002318:	881a      	ldrh	r2, [r3, #0]
1000231a:	687b      	ldr	r3, [r7, #4]
1000231c:	63da      	str	r2, [r3, #60]	; 0x3c
}
1000231e:	46bd      	mov	sp, r7
10002320:	b002      	add	sp, #8
10002322:	bd80      	pop	{r7, pc}

10002324 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10002324:	b580      	push	{r7, lr}
10002326:	b082      	sub	sp, #8
10002328:	af00      	add	r7, sp, #0
1000232a:	6078      	str	r0, [r7, #4]
1000232c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
1000232e:	687b      	ldr	r3, [r7, #4]
10002330:	683a      	ldr	r2, [r7, #0]
10002332:	611a      	str	r2, [r3, #16]
}
10002334:	46bd      	mov	sp, r7
10002336:	b002      	add	sp, #8
10002338:	bd80      	pop	{r7, pc}
1000233a:	46c0      	nop			; (mov r8, r8)

1000233c <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
1000233c:	b580      	push	{r7, lr}
1000233e:	b082      	sub	sp, #8
10002340:	af00      	add	r7, sp, #0
10002342:	6078      	str	r0, [r7, #4]
10002344:	1c0a      	adds	r2, r1, #0
10002346:	1cfb      	adds	r3, r7, #3
10002348:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
1000234a:	687b      	ldr	r3, [r7, #4]
1000234c:	22a4      	movs	r2, #164	; 0xa4
1000234e:	589a      	ldr	r2, [r3, r2]
10002350:	1cfb      	adds	r3, r7, #3
10002352:	781b      	ldrb	r3, [r3, #0]
10002354:	2101      	movs	r1, #1
10002356:	4099      	lsls	r1, r3
10002358:	1c0b      	adds	r3, r1, #0
1000235a:	431a      	orrs	r2, r3
1000235c:	687b      	ldr	r3, [r7, #4]
1000235e:	21a4      	movs	r1, #164	; 0xa4
10002360:	505a      	str	r2, [r3, r1]
}
10002362:	46bd      	mov	sp, r7
10002364:	b002      	add	sp, #8
10002366:	bd80      	pop	{r7, pc}

10002368 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
10002368:	b580      	push	{r7, lr}
1000236a:	b082      	sub	sp, #8
1000236c:	af00      	add	r7, sp, #0
1000236e:	6078      	str	r0, [r7, #4]
10002370:	1c0a      	adds	r2, r1, #0
10002372:	1cfb      	adds	r3, r7, #3
10002374:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
10002376:	687b      	ldr	r3, [r7, #4]
10002378:	22b0      	movs	r2, #176	; 0xb0
1000237a:	589a      	ldr	r2, [r3, r2]
1000237c:	1cfb      	adds	r3, r7, #3
1000237e:	781b      	ldrb	r3, [r3, #0]
10002380:	2101      	movs	r1, #1
10002382:	4099      	lsls	r1, r3
10002384:	1c0b      	adds	r3, r1, #0
10002386:	431a      	orrs	r2, r3
10002388:	687b      	ldr	r3, [r7, #4]
1000238a:	21b0      	movs	r1, #176	; 0xb0
1000238c:	505a      	str	r2, [r3, r1]
}
1000238e:	46bd      	mov	sp, r7
10002390:	b002      	add	sp, #8
10002392:	bd80      	pop	{r7, pc}

10002394 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
10002394:	b590      	push	{r4, r7, lr}
10002396:	b085      	sub	sp, #20
10002398:	af00      	add	r7, sp, #0
1000239a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
1000239c:	230f      	movs	r3, #15
1000239e:	18fb      	adds	r3, r7, r3
100023a0:	2200      	movs	r2, #0
100023a2:	701a      	strb	r2, [r3, #0]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
100023a4:	687b      	ldr	r3, [r7, #4]
100023a6:	2226      	movs	r2, #38	; 0x26
100023a8:	5c9b      	ldrb	r3, [r3, r2]
100023aa:	2201      	movs	r2, #1
100023ac:	4053      	eors	r3, r2
100023ae:	b2db      	uxtb	r3, r3
100023b0:	2b00      	cmp	r3, #0
100023b2:	d00c      	beq.n	100023ce <TIMER_Init+0x3a>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
100023b4:	687b      	ldr	r3, [r7, #4]
100023b6:	2221      	movs	r2, #33	; 0x21
100023b8:	5c9b      	ldrb	r3, [r3, r2]
100023ba:	2b00      	cmp	r3, #0
100023bc:	d107      	bne.n	100023ce <TIMER_Init+0x3a>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
100023be:	230f      	movs	r3, #15
100023c0:	18fc      	adds	r4, r7, r3
100023c2:	687b      	ldr	r3, [r7, #4]
100023c4:	1c18      	adds	r0, r3, #0
100023c6:	f000 f81b 	bl	10002400 <TIMER_CCU4_lInit>
100023ca:	1c03      	adds	r3, r0, #0
100023cc:	7023      	strb	r3, [r4, #0]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
100023ce:	230f      	movs	r3, #15
100023d0:	18fb      	adds	r3, r7, r3
100023d2:	781b      	ldrb	r3, [r3, #0]
}
100023d4:	1c18      	adds	r0, r3, #0
100023d6:	46bd      	mov	sp, r7
100023d8:	b005      	add	sp, #20
100023da:	bd90      	pop	{r4, r7, pc}

100023dc <TIMER_ClearEvent>:

/*
 * This function clears the period match interrupt status of the given timer.
 */
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
100023dc:	b580      	push	{r7, lr}
100023de:	b082      	sub	sp, #8
100023e0:	af00      	add	r7, sp, #0
100023e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
100023e4:	687b      	ldr	r3, [r7, #4]
100023e6:	2221      	movs	r2, #33	; 0x21
100023e8:	5c9b      	ldrb	r3, [r3, r2]
100023ea:	2b00      	cmp	r3, #0
100023ec:	d105      	bne.n	100023fa <TIMER_ClearEvent+0x1e>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
100023ee:	687b      	ldr	r3, [r7, #4]
100023f0:	695b      	ldr	r3, [r3, #20]
100023f2:	1c18      	adds	r0, r3, #0
100023f4:	2100      	movs	r1, #0
100023f6:	f7ff ffb7 	bl	10002368 <XMC_CCU4_SLICE_ClearEvent>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
}
100023fa:	46bd      	mov	sp, r7
100023fc:	b002      	add	sp, #8
100023fe:	bd80      	pop	{r7, pc}

10002400 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
10002400:	b590      	push	{r4, r7, lr}
10002402:	b085      	sub	sp, #20
10002404:	af00      	add	r7, sp, #0
10002406:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
10002408:	687b      	ldr	r3, [r7, #4]
1000240a:	691b      	ldr	r3, [r3, #16]
1000240c:	220f      	movs	r2, #15
1000240e:	18bc      	adds	r4, r7, r2
10002410:	1c18      	adds	r0, r3, #0
10002412:	f000 f931 	bl	10002678 <GLOBAL_CCU4_Init>
10002416:	1c03      	adds	r3, r0, #0
10002418:	7023      	strb	r3, [r4, #0]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
1000241a:	687b      	ldr	r3, [r7, #4]
1000241c:	691b      	ldr	r3, [r3, #16]
1000241e:	689a      	ldr	r2, [r3, #8]
10002420:	687b      	ldr	r3, [r7, #4]
10002422:	7e1b      	ldrb	r3, [r3, #24]
10002424:	1c10      	adds	r0, r2, #0
10002426:	1c19      	adds	r1, r3, #0
10002428:	f7ff ff38 	bl	1000229c <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
1000242c:	687b      	ldr	r3, [r7, #4]
1000242e:	695a      	ldr	r2, [r3, #20]
10002430:	687b      	ldr	r3, [r7, #4]
10002432:	69db      	ldr	r3, [r3, #28]
10002434:	1c10      	adds	r0, r2, #0
10002436:	1c19      	adds	r1, r3, #0
10002438:	f7ff f998 	bl	1000176c <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
1000243c:	687b      	ldr	r3, [r7, #4]
1000243e:	1c18      	adds	r0, r3, #0
10002440:	f000 f830 	bl	100024a4 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
10002444:	687b      	ldr	r3, [r7, #4]
10002446:	2225      	movs	r2, #37	; 0x25
10002448:	5c9b      	ldrb	r3, [r3, r2]
1000244a:	2b00      	cmp	r3, #0
1000244c:	d00f      	beq.n	1000246e <TIMER_CCU4_lInit+0x6e>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
1000244e:	687b      	ldr	r3, [r7, #4]
10002450:	6959      	ldr	r1, [r3, #20]
10002452:	687b      	ldr	r3, [r7, #4]
10002454:	2220      	movs	r2, #32
10002456:	5c9b      	ldrb	r3, [r3, r2]
10002458:	1c08      	adds	r0, r1, #0
1000245a:	2100      	movs	r1, #0
1000245c:	1c1a      	adds	r2, r3, #0
1000245e:	f7ff f9b9 	bl	100017d4 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
10002462:	687b      	ldr	r3, [r7, #4]
10002464:	695b      	ldr	r3, [r3, #20]
10002466:	1c18      	adds	r0, r3, #0
10002468:	2100      	movs	r1, #0
1000246a:	f7ff ff67 	bl	1000233c <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
1000246e:	687b      	ldr	r3, [r7, #4]
10002470:	695b      	ldr	r3, [r3, #20]
10002472:	1c18      	adds	r0, r3, #0
10002474:	f7ff ff30 	bl	100022d8 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
10002478:	687b      	ldr	r3, [r7, #4]
1000247a:	2226      	movs	r2, #38	; 0x26
1000247c:	2101      	movs	r1, #1
1000247e:	5499      	strb	r1, [r3, r2]

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
10002480:	687b      	ldr	r3, [r7, #4]
10002482:	2224      	movs	r2, #36	; 0x24
10002484:	5c9b      	ldrb	r3, [r3, r2]
10002486:	2b00      	cmp	r3, #0
10002488:	d004      	beq.n	10002494 <TIMER_CCU4_lInit+0x94>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
1000248a:	687b      	ldr	r3, [r7, #4]
1000248c:	695b      	ldr	r3, [r3, #20]
1000248e:	1c18      	adds	r0, r3, #0
10002490:	f7ff ff18 	bl	100022c4 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
10002494:	230f      	movs	r3, #15
10002496:	18fb      	adds	r3, r7, r3
10002498:	781b      	ldrb	r3, [r3, #0]
}
1000249a:	1c18      	adds	r0, r3, #0
1000249c:	46bd      	mov	sp, r7
1000249e:	b005      	add	sp, #20
100024a0:	bd90      	pop	{r4, r7, pc}
100024a2:	46c0      	nop			; (mov r8, r8)

100024a4 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
100024a4:	b580      	push	{r7, lr}
100024a6:	b082      	sub	sp, #8
100024a8:	af00      	add	r7, sp, #0
100024aa:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
100024ac:	687b      	ldr	r3, [r7, #4]
100024ae:	695a      	ldr	r2, [r3, #20]
100024b0:	687b      	ldr	r3, [r7, #4]
100024b2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
100024b4:	1c10      	adds	r0, r2, #0
100024b6:	1c19      	adds	r1, r3, #0
100024b8:	f7ff ff18 	bl	100022ec <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
100024bc:	687b      	ldr	r3, [r7, #4]
100024be:	695b      	ldr	r3, [r3, #20]
100024c0:	1c18      	adds	r0, r3, #0
100024c2:	2100      	movs	r1, #0
100024c4:	f7ff ff20 	bl	10002308 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
100024c8:	687b      	ldr	r3, [r7, #4]
100024ca:	691b      	ldr	r3, [r3, #16]
100024cc:	689a      	ldr	r2, [r3, #8]
100024ce:	687b      	ldr	r3, [r7, #4]
100024d0:	68db      	ldr	r3, [r3, #12]
100024d2:	1c10      	adds	r0, r2, #0
100024d4:	1c19      	adds	r1, r3, #0
100024d6:	f7ff ff25 	bl	10002324 <XMC_CCU4_EnableShadowTransfer>
}
100024da:	46bd      	mov	sp, r7
100024dc:	b002      	add	sp, #8
100024de:	bd80      	pop	{r7, pc}

100024e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100024e0:	b580      	push	{r7, lr}
100024e2:	b082      	sub	sp, #8
100024e4:	af00      	add	r7, sp, #0
100024e6:	1c02      	adds	r2, r0, #0
100024e8:	1dfb      	adds	r3, r7, #7
100024ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100024ec:	1dfb      	adds	r3, r7, #7
100024ee:	781b      	ldrb	r3, [r3, #0]
100024f0:	2b7f      	cmp	r3, #127	; 0x7f
100024f2:	d809      	bhi.n	10002508 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100024f4:	4b06      	ldr	r3, [pc, #24]	; (10002510 <__NVIC_EnableIRQ+0x30>)
100024f6:	1dfa      	adds	r2, r7, #7
100024f8:	7812      	ldrb	r2, [r2, #0]
100024fa:	1c11      	adds	r1, r2, #0
100024fc:	221f      	movs	r2, #31
100024fe:	400a      	ands	r2, r1
10002500:	2101      	movs	r1, #1
10002502:	4091      	lsls	r1, r2
10002504:	1c0a      	adds	r2, r1, #0
10002506:	601a      	str	r2, [r3, #0]
  }
}
10002508:	46bd      	mov	sp, r7
1000250a:	b002      	add	sp, #8
1000250c:	bd80      	pop	{r7, pc}
1000250e:	46c0      	nop			; (mov r8, r8)
10002510:	e000e100 	.word	0xe000e100

10002514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002514:	b5b0      	push	{r4, r5, r7, lr}
10002516:	b082      	sub	sp, #8
10002518:	af00      	add	r7, sp, #0
1000251a:	1c02      	adds	r2, r0, #0
1000251c:	6039      	str	r1, [r7, #0]
1000251e:	1dfb      	adds	r3, r7, #7
10002520:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002522:	1dfb      	adds	r3, r7, #7
10002524:	781b      	ldrb	r3, [r3, #0]
10002526:	2b7f      	cmp	r3, #127	; 0x7f
10002528:	d827      	bhi.n	1000257a <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000252a:	4c2d      	ldr	r4, [pc, #180]	; (100025e0 <__NVIC_SetPriority+0xcc>)
1000252c:	1dfb      	adds	r3, r7, #7
1000252e:	781b      	ldrb	r3, [r3, #0]
10002530:	b25b      	sxtb	r3, r3
10002532:	089b      	lsrs	r3, r3, #2
10002534:	492a      	ldr	r1, [pc, #168]	; (100025e0 <__NVIC_SetPriority+0xcc>)
10002536:	1dfa      	adds	r2, r7, #7
10002538:	7812      	ldrb	r2, [r2, #0]
1000253a:	b252      	sxtb	r2, r2
1000253c:	0892      	lsrs	r2, r2, #2
1000253e:	32c0      	adds	r2, #192	; 0xc0
10002540:	0092      	lsls	r2, r2, #2
10002542:	5852      	ldr	r2, [r2, r1]
10002544:	1df9      	adds	r1, r7, #7
10002546:	7809      	ldrb	r1, [r1, #0]
10002548:	1c08      	adds	r0, r1, #0
1000254a:	2103      	movs	r1, #3
1000254c:	4001      	ands	r1, r0
1000254e:	00c9      	lsls	r1, r1, #3
10002550:	1c08      	adds	r0, r1, #0
10002552:	21ff      	movs	r1, #255	; 0xff
10002554:	4081      	lsls	r1, r0
10002556:	43c9      	mvns	r1, r1
10002558:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1000255a:	683a      	ldr	r2, [r7, #0]
1000255c:	0192      	lsls	r2, r2, #6
1000255e:	20ff      	movs	r0, #255	; 0xff
10002560:	4002      	ands	r2, r0
10002562:	1df8      	adds	r0, r7, #7
10002564:	7800      	ldrb	r0, [r0, #0]
10002566:	1c05      	adds	r5, r0, #0
10002568:	2003      	movs	r0, #3
1000256a:	4028      	ands	r0, r5
1000256c:	00c0      	lsls	r0, r0, #3
1000256e:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002570:	430a      	orrs	r2, r1
10002572:	33c0      	adds	r3, #192	; 0xc0
10002574:	009b      	lsls	r3, r3, #2
10002576:	511a      	str	r2, [r3, r4]
10002578:	e02e      	b.n	100025d8 <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000257a:	4c1a      	ldr	r4, [pc, #104]	; (100025e4 <__NVIC_SetPriority+0xd0>)
1000257c:	1dfb      	adds	r3, r7, #7
1000257e:	781b      	ldrb	r3, [r3, #0]
10002580:	1c1a      	adds	r2, r3, #0
10002582:	230f      	movs	r3, #15
10002584:	4013      	ands	r3, r2
10002586:	3b08      	subs	r3, #8
10002588:	0899      	lsrs	r1, r3, #2
1000258a:	4a16      	ldr	r2, [pc, #88]	; (100025e4 <__NVIC_SetPriority+0xd0>)
1000258c:	1dfb      	adds	r3, r7, #7
1000258e:	781b      	ldrb	r3, [r3, #0]
10002590:	1c18      	adds	r0, r3, #0
10002592:	230f      	movs	r3, #15
10002594:	4003      	ands	r3, r0
10002596:	3b08      	subs	r3, #8
10002598:	089b      	lsrs	r3, r3, #2
1000259a:	3306      	adds	r3, #6
1000259c:	009b      	lsls	r3, r3, #2
1000259e:	18d3      	adds	r3, r2, r3
100025a0:	685b      	ldr	r3, [r3, #4]
100025a2:	1dfa      	adds	r2, r7, #7
100025a4:	7812      	ldrb	r2, [r2, #0]
100025a6:	1c10      	adds	r0, r2, #0
100025a8:	2203      	movs	r2, #3
100025aa:	4002      	ands	r2, r0
100025ac:	00d2      	lsls	r2, r2, #3
100025ae:	1c10      	adds	r0, r2, #0
100025b0:	22ff      	movs	r2, #255	; 0xff
100025b2:	4082      	lsls	r2, r0
100025b4:	43d2      	mvns	r2, r2
100025b6:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100025b8:	683b      	ldr	r3, [r7, #0]
100025ba:	019b      	lsls	r3, r3, #6
100025bc:	20ff      	movs	r0, #255	; 0xff
100025be:	4003      	ands	r3, r0
100025c0:	1df8      	adds	r0, r7, #7
100025c2:	7800      	ldrb	r0, [r0, #0]
100025c4:	1c05      	adds	r5, r0, #0
100025c6:	2003      	movs	r0, #3
100025c8:	4028      	ands	r0, r5
100025ca:	00c0      	lsls	r0, r0, #3
100025cc:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100025ce:	431a      	orrs	r2, r3
100025d0:	1d8b      	adds	r3, r1, #6
100025d2:	009b      	lsls	r3, r3, #2
100025d4:	18e3      	adds	r3, r4, r3
100025d6:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100025d8:	46bd      	mov	sp, r7
100025da:	b002      	add	sp, #8
100025dc:	bdb0      	pop	{r4, r5, r7, pc}
100025de:	46c0      	nop			; (mov r8, r8)
100025e0:	e000e100 	.word	0xe000e100
100025e4:	e000ed00 	.word	0xe000ed00

100025e8 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
100025e8:	b580      	push	{r7, lr}
100025ea:	b082      	sub	sp, #8
100025ec:	af00      	add	r7, sp, #0
100025ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
100025f0:	687b      	ldr	r3, [r7, #4]
100025f2:	789b      	ldrb	r3, [r3, #2]
100025f4:	b25b      	sxtb	r3, r3
100025f6:	1c18      	adds	r0, r3, #0
100025f8:	f7ff ff72 	bl	100024e0 <__NVIC_EnableIRQ>
}
100025fc:	46bd      	mov	sp, r7
100025fe:	b002      	add	sp, #8
10002600:	bd80      	pop	{r7, pc}
10002602:	46c0      	nop			; (mov r8, r8)

10002604 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
10002604:	b580      	push	{r7, lr}
10002606:	b082      	sub	sp, #8
10002608:	af00      	add	r7, sp, #0
1000260a:	6078      	str	r0, [r7, #4]
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
1000260c:	687b      	ldr	r3, [r7, #4]
1000260e:	789a      	ldrb	r2, [r3, #2]
10002610:	687b      	ldr	r3, [r7, #4]
10002612:	78db      	ldrb	r3, [r3, #3]
10002614:	1c19      	adds	r1, r3, #0
10002616:	b253      	sxtb	r3, r2
10002618:	1c18      	adds	r0, r3, #0
1000261a:	f7ff ff7b 	bl	10002514 <__NVIC_SetPriority>
  
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
1000261e:	687b      	ldr	r3, [r7, #4]
10002620:	789b      	ldrb	r3, [r3, #2]
10002622:	b2da      	uxtb	r2, r3
10002624:	687b      	ldr	r3, [r7, #4]
10002626:	789b      	ldrb	r3, [r3, #2]
10002628:	b25b      	sxtb	r3, r3
1000262a:	021b      	lsls	r3, r3, #8
1000262c:	b299      	uxth	r1, r3
1000262e:	687b      	ldr	r3, [r7, #4]
10002630:	881b      	ldrh	r3, [r3, #0]
10002632:	b29b      	uxth	r3, r3
10002634:	430b      	orrs	r3, r1
10002636:	b29b      	uxth	r3, r3
10002638:	b29b      	uxth	r3, r3
1000263a:	1c10      	adds	r0, r2, #0
1000263c:	1c19      	adds	r1, r3, #0
1000263e:	f7fe fff5 	bl	1000162c <XMC_SCU_SetInterruptControl>
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
10002642:	687b      	ldr	r3, [r7, #4]
10002644:	791b      	ldrb	r3, [r3, #4]
10002646:	2b00      	cmp	r3, #0
10002648:	d003      	beq.n	10002652 <INTERRUPT_Init+0x4e>
  {
    INTERRUPT_Enable(handler);
1000264a:	687b      	ldr	r3, [r7, #4]
1000264c:	1c18      	adds	r0, r3, #0
1000264e:	f7ff ffcb 	bl	100025e8 <INTERRUPT_Enable>
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
10002652:	2300      	movs	r3, #0
}
10002654:	1c18      	adds	r0, r3, #0
10002656:	46bd      	mov	sp, r7
10002658:	b002      	add	sp, #8
1000265a:	bd80      	pop	{r7, pc}

1000265c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
1000265c:	b580      	push	{r7, lr}
1000265e:	b082      	sub	sp, #8
10002660:	af00      	add	r7, sp, #0
10002662:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
10002664:	687b      	ldr	r3, [r7, #4]
10002666:	68db      	ldr	r3, [r3, #12]
10002668:	2280      	movs	r2, #128	; 0x80
1000266a:	0052      	lsls	r2, r2, #1
1000266c:	431a      	orrs	r2, r3
1000266e:	687b      	ldr	r3, [r7, #4]
10002670:	60da      	str	r2, [r3, #12]
}
10002672:	46bd      	mov	sp, r7
10002674:	b002      	add	sp, #8
10002676:	bd80      	pop	{r7, pc}

10002678 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
10002678:	b580      	push	{r7, lr}
1000267a:	b082      	sub	sp, #8
1000267c:	af00      	add	r7, sp, #0
1000267e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
10002680:	687b      	ldr	r3, [r7, #4]
10002682:	7b5b      	ldrb	r3, [r3, #13]
10002684:	2201      	movs	r2, #1
10002686:	4053      	eors	r3, r2
10002688:	b2db      	uxtb	r3, r3
1000268a:	2b00      	cmp	r3, #0
1000268c:	d00f      	beq.n	100026ae <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
1000268e:	687b      	ldr	r3, [r7, #4]
10002690:	689a      	ldr	r2, [r3, #8]
10002692:	687b      	ldr	r3, [r7, #4]
10002694:	7b1b      	ldrb	r3, [r3, #12]
10002696:	1c10      	adds	r0, r2, #0
10002698:	1c19      	adds	r1, r3, #0
1000269a:	f7ff f843 	bl	10001724 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
1000269e:	687b      	ldr	r3, [r7, #4]
100026a0:	689b      	ldr	r3, [r3, #8]
100026a2:	1c18      	adds	r0, r3, #0
100026a4:	f7ff ffda 	bl	1000265c <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
100026a8:	687b      	ldr	r3, [r7, #4]
100026aa:	2201      	movs	r2, #1
100026ac:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
100026ae:	2300      	movs	r3, #0
}
100026b0:	1c18      	adds	r0, r3, #0
100026b2:	46bd      	mov	sp, r7
100026b4:	b002      	add	sp, #8
100026b6:	bd80      	pop	{r7, pc}

100026b8 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
100026b8:	b580      	push	{r7, lr}
100026ba:	b082      	sub	sp, #8
100026bc:	af00      	add	r7, sp, #0
100026be:	6078      	str	r0, [r7, #4]
100026c0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
100026c2:	687b      	ldr	r3, [r7, #4]
100026c4:	2280      	movs	r2, #128	; 0x80
100026c6:	589a      	ldr	r2, [r3, r2]
100026c8:	683b      	ldr	r3, [r7, #0]
100026ca:	3310      	adds	r3, #16
100026cc:	1c19      	adds	r1, r3, #0
100026ce:	2301      	movs	r3, #1
100026d0:	408b      	lsls	r3, r1
100026d2:	431a      	orrs	r2, r3
100026d4:	687b      	ldr	r3, [r7, #4]
100026d6:	2180      	movs	r1, #128	; 0x80
100026d8:	505a      	str	r2, [r3, r1]
}
100026da:	46bd      	mov	sp, r7
100026dc:	b002      	add	sp, #8
100026de:	bd80      	pop	{r7, pc}

100026e0 <XMC_VADC_GLOBAL_SHS_SetAnalogReference>:
 * \par<b>Related APIs:</b><BR>
 * None.
 */
 __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetAnalogReference(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
                                                            const XMC_VADC_GLOBAL_SHS_AREF_t aref)
 {
100026e0:	b580      	push	{r7, lr}
100026e2:	b082      	sub	sp, #8
100026e4:	af00      	add	r7, sp, #0
100026e6:	6078      	str	r0, [r7, #4]
100026e8:	1c0a      	adds	r2, r1, #0
100026ea:	1cbb      	adds	r3, r7, #2
100026ec:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))

  shs_ptr->SHSCFG |=  (shs_ptr->SHSCFG & (uint32_t)~SHS_SHSCFG_AREF_Msk) | (uint32_t)aref | SHS_SHSCFG_SCWC_Msk;  
100026ee:	687b      	ldr	r3, [r7, #4]
100026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100026f2:	4a08      	ldr	r2, [pc, #32]	; (10002714 <XMC_VADC_GLOBAL_SHS_SetAnalogReference+0x34>)
100026f4:	401a      	ands	r2, r3
100026f6:	1cbb      	adds	r3, r7, #2
100026f8:	881b      	ldrh	r3, [r3, #0]
100026fa:	4313      	orrs	r3, r2
100026fc:	2280      	movs	r2, #128	; 0x80
100026fe:	0212      	lsls	r2, r2, #8
10002700:	431a      	orrs	r2, r3
10002702:	687b      	ldr	r3, [r7, #4]
10002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002706:	431a      	orrs	r2, r3
10002708:	687b      	ldr	r3, [r7, #4]
1000270a:	641a      	str	r2, [r3, #64]	; 0x40
 }
1000270c:	46bd      	mov	sp, r7
1000270e:	b002      	add	sp, #8
10002710:	bd80      	pop	{r7, pc}
10002712:	46c0      	nop			; (mov r8, r8)
10002714:	fffff3ff 	.word	0xfffff3ff

10002718 <XMC_VADC_GLOBAL_SHS_SetClockDivider>:
 *
 * \par<b>Related APIs:</b><BR>
 * None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint8_t divs_value)
{
10002718:	b580      	push	{r7, lr}
1000271a:	b082      	sub	sp, #8
1000271c:	af00      	add	r7, sp, #0
1000271e:	6078      	str	r0, [r7, #4]
10002720:	1c0a      	adds	r2, r1, #0
10002722:	1cfb      	adds	r3, r7, #3
10002724:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
             (divs_value < (uint32_t)0x10))

  shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SCWC_Msk;
10002726:	687b      	ldr	r3, [r7, #4]
10002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000272a:	4a0a      	ldr	r2, [pc, #40]	; (10002754 <XMC_VADC_GLOBAL_SHS_SetClockDivider+0x3c>)
1000272c:	4013      	ands	r3, r2
1000272e:	2280      	movs	r2, #128	; 0x80
10002730:	0212      	lsls	r2, r2, #8
10002732:	431a      	orrs	r2, r3
10002734:	687b      	ldr	r3, [r7, #4]
10002736:	641a      	str	r2, [r3, #64]	; 0x40
  shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk;
10002738:	687b      	ldr	r3, [r7, #4]
1000273a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
1000273c:	1cfb      	adds	r3, r7, #3
1000273e:	781b      	ldrb	r3, [r3, #0]
10002740:	4313      	orrs	r3, r2
10002742:	2280      	movs	r2, #128	; 0x80
10002744:	0212      	lsls	r2, r2, #8
10002746:	431a      	orrs	r2, r3
10002748:	687b      	ldr	r3, [r7, #4]
1000274a:	641a      	str	r2, [r3, #64]	; 0x40
}
1000274c:	46bd      	mov	sp, r7
1000274e:	b002      	add	sp, #8
10002750:	bd80      	pop	{r7, pc}
10002752:	46c0      	nop			; (mov r8, r8)
10002754:	ffff7ff0 	.word	0xffff7ff0

10002758 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
10002758:	b580      	push	{r7, lr}
1000275a:	b084      	sub	sp, #16
1000275c:	af00      	add	r7, sp, #0
1000275e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
10002760:	687b      	ldr	r3, [r7, #4]
10002762:	7e1b      	ldrb	r3, [r3, #24]
10002764:	2b02      	cmp	r3, #2
10002766:	d15e      	bne.n	10002826 <GLOBAL_ADC_Init+0xce>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
10002768:	687b      	ldr	r3, [r7, #4]
1000276a:	68da      	ldr	r2, [r3, #12]
1000276c:	687b      	ldr	r3, [r7, #4]
1000276e:	689b      	ldr	r3, [r3, #8]
10002770:	1c10      	adds	r0, r2, #0
10002772:	1c19      	adds	r1, r3, #0
10002774:	f7ff f9a0 	bl	10001ab8 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
10002778:	2300      	movs	r3, #0
1000277a:	60fb      	str	r3, [r7, #12]
1000277c:	e038      	b.n	100027f0 <GLOBAL_ADC_Init+0x98>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
1000277e:	687b      	ldr	r3, [r7, #4]
10002780:	68fa      	ldr	r2, [r7, #12]
10002782:	0092      	lsls	r2, r2, #2
10002784:	58d3      	ldr	r3, [r2, r3]
10002786:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
10002788:	687b      	ldr	r3, [r7, #4]
1000278a:	68fa      	ldr	r2, [r7, #12]
1000278c:	0092      	lsls	r2, r2, #2
1000278e:	58d3      	ldr	r3, [r2, r3]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
10002790:	685b      	ldr	r3, [r3, #4]
10002792:	1c08      	adds	r0, r1, #0
10002794:	1c19      	adds	r1, r3, #0
10002796:	f7ff fa47 	bl	10001c28 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
1000279a:	687b      	ldr	r3, [r7, #4]
1000279c:	68fa      	ldr	r2, [r7, #12]
1000279e:	0092      	lsls	r2, r2, #2
100027a0:	58d3      	ldr	r3, [r2, r3]
100027a2:	681b      	ldr	r3, [r3, #0]
100027a4:	1c18      	adds	r0, r3, #0
100027a6:	2103      	movs	r1, #3
100027a8:	f7ff fae6 	bl	10001d78 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
100027ac:	687b      	ldr	r3, [r7, #4]
100027ae:	68fa      	ldr	r2, [r7, #12]
100027b0:	0092      	lsls	r2, r2, #2
100027b2:	58d3      	ldr	r3, [r2, r3]
100027b4:	7a1b      	ldrb	r3, [r3, #8]
100027b6:	2201      	movs	r2, #1
100027b8:	4053      	eors	r3, r2
100027ba:	b2db      	uxtb	r3, r3
100027bc:	2b00      	cmp	r3, #0
100027be:	d006      	beq.n	100027ce <GLOBAL_ADC_Init+0x76>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
100027c0:	687b      	ldr	r3, [r7, #4]
100027c2:	68da      	ldr	r2, [r3, #12]
100027c4:	68fb      	ldr	r3, [r7, #12]
100027c6:	1c10      	adds	r0, r2, #0
100027c8:	1c19      	adds	r1, r3, #0
100027ca:	f7ff ff75 	bl	100026b8 <XMC_VADC_GLOBAL_DisablePostCalibration>
      }

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
100027ce:	687b      	ldr	r3, [r7, #4]
100027d0:	691a      	ldr	r2, [r3, #16]
100027d2:	68fb      	ldr	r3, [r7, #12]
100027d4:	b2db      	uxtb	r3, r3
100027d6:	1c10      	adds	r0, r2, #0
100027d8:	1c19      	adds	r1, r3, #0
100027da:	f7ff fae9 	bl	10001db0 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
100027de:	687b      	ldr	r3, [r7, #4]
100027e0:	68fa      	ldr	r2, [r7, #12]
100027e2:	0092      	lsls	r2, r2, #2
100027e4:	58d3      	ldr	r3, [r2, r3]
100027e6:	2200      	movs	r2, #0
100027e8:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
100027ea:	68fb      	ldr	r3, [r7, #12]
100027ec:	3301      	adds	r3, #1
100027ee:	60fb      	str	r3, [r7, #12]
100027f0:	68fb      	ldr	r3, [r7, #12]
100027f2:	2b01      	cmp	r3, #1
100027f4:	d9c3      	bls.n	1000277e <GLOBAL_ADC_Init+0x26>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
    }
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetClockDivider(handle_ptr->global_shs_ptr, (uint8_t) GLOBAL_ADC_DIVS_VALUE);
100027f6:	687b      	ldr	r3, [r7, #4]
100027f8:	691b      	ldr	r3, [r3, #16]
100027fa:	1c18      	adds	r0, r3, #0
100027fc:	2100      	movs	r1, #0
100027fe:	f7ff ff8b 	bl	10002718 <XMC_VADC_GLOBAL_SHS_SetClockDivider>
#endif
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
#if(XMC_VADC_SHS_AVAILABLE == 1U)
    XMC_VADC_GLOBAL_SHS_SetAnalogReference(handle_ptr->global_shs_ptr, GLOBAL_ADC_AREF_VALUE);
10002802:	687b      	ldr	r3, [r7, #4]
10002804:	691b      	ldr	r3, [r3, #16]
10002806:	1c18      	adds	r0, r3, #0
10002808:	2100      	movs	r1, #0
1000280a:	f7ff ff69 	bl	100026e0 <XMC_VADC_GLOBAL_SHS_SetAnalogReference>
#endif
    if((bool)true == handle_ptr->enable_startup_calibration)
1000280e:	687b      	ldr	r3, [r7, #4]
10002810:	7e5b      	ldrb	r3, [r3, #25]
10002812:	2b00      	cmp	r3, #0
10002814:	d004      	beq.n	10002820 <GLOBAL_ADC_Init+0xc8>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
10002816:	687b      	ldr	r3, [r7, #4]
10002818:	68db      	ldr	r3, [r3, #12]
1000281a:	1c18      	adds	r0, r3, #0
1000281c:	f7ff f99e 	bl	10001b5c <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
10002820:	687b      	ldr	r3, [r7, #4]
10002822:	2200      	movs	r2, #0
10002824:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
10002826:	687b      	ldr	r3, [r7, #4]
10002828:	7e1b      	ldrb	r3, [r3, #24]
}
1000282a:	1c18      	adds	r0, r3, #0
1000282c:	46bd      	mov	sp, r7
1000282e:	b004      	add	sp, #16
10002830:	bd80      	pop	{r7, pc}
10002832:	46c0      	nop			; (mov r8, r8)

10002834 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
10002834:	b580      	push	{r7, lr}
10002836:	b082      	sub	sp, #8
10002838:	af00      	add	r7, sp, #0
1000283a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
1000283c:	687b      	ldr	r3, [r7, #4]
1000283e:	6819      	ldr	r1, [r3, #0]
10002840:	687b      	ldr	r3, [r7, #4]
10002842:	7b1a      	ldrb	r2, [r3, #12]
10002844:	687b      	ldr	r3, [r7, #4]
10002846:	3304      	adds	r3, #4
10002848:	1c08      	adds	r0, r1, #0
1000284a:	1c11      	adds	r1, r2, #0
1000284c:	1c1a      	adds	r2, r3, #0
1000284e:	f7fe fc9b 	bl	10001188 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
10002852:	687b      	ldr	r3, [r7, #4]
10002854:	6819      	ldr	r1, [r3, #0]
10002856:	687b      	ldr	r3, [r7, #4]
10002858:	7b1a      	ldrb	r2, [r3, #12]
1000285a:	687b      	ldr	r3, [r7, #4]
1000285c:	7b5b      	ldrb	r3, [r3, #13]
1000285e:	1c08      	adds	r0, r1, #0
10002860:	1c11      	adds	r1, r2, #0
10002862:	1c1a      	adds	r2, r3, #0
10002864:	f7ff f802 	bl	1000186c <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
10002868:	2300      	movs	r3, #0
}
1000286a:	1c18      	adds	r0, r3, #0
1000286c:	46bd      	mov	sp, r7
1000286e:	b002      	add	sp, #8
10002870:	bd80      	pop	{r7, pc}
10002872:	46c0      	nop			; (mov r8, r8)

10002874 <SystemCoreSetup>:
{
  .initialized = false
};
 
void SystemCoreSetup(void)
{
10002874:	b580      	push	{r7, lr}
10002876:	af00      	add	r7, sp, #0
#if UC_SERIES == XMC14
  /* Enable Prefetch unit */
  SCU_GENERAL->PFUCR &= ~SCU_GENERAL_PFUCR_PFUBYP_Msk;
10002878:	4b03      	ldr	r3, [pc, #12]	; (10002888 <SystemCoreSetup+0x14>)
1000287a:	4a03      	ldr	r2, [pc, #12]	; (10002888 <SystemCoreSetup+0x14>)
1000287c:	6e92      	ldr	r2, [r2, #104]	; 0x68
1000287e:	2101      	movs	r1, #1
10002880:	438a      	bics	r2, r1
10002882:	669a      	str	r2, [r3, #104]	; 0x68
#endif
}
10002884:	46bd      	mov	sp, r7
10002886:	bd80      	pop	{r7, pc}
10002888:	40010000 	.word	0x40010000

1000288c <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
1000288c:	b580      	push	{r7, lr}
1000288e:	b084      	sub	sp, #16
10002890:	af00      	add	r7, sp, #0
10002892:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
10002894:	230f      	movs	r3, #15
10002896:	18fb      	adds	r3, r7, r3
10002898:	2200      	movs	r2, #0
1000289a:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
1000289c:	230e      	movs	r3, #14
1000289e:	18fb      	adds	r3, r7, r3
100028a0:	2200      	movs	r2, #0
100028a2:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
100028a4:	230d      	movs	r3, #13
100028a6:	18fb      	adds	r3, r7, r3
100028a8:	2200      	movs	r2, #0
100028aa:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
100028ac:	230c      	movs	r3, #12
100028ae:	18fb      	adds	r3, r7, r3
100028b0:	2200      	movs	r2, #0
100028b2:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
100028b4:	230b      	movs	r3, #11
100028b6:	18fb      	adds	r3, r7, r3
100028b8:	2200      	movs	r2, #0
100028ba:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
100028bc:	687b      	ldr	r3, [r7, #4]
100028be:	781b      	ldrb	r3, [r3, #0]
100028c0:	2201      	movs	r2, #1
100028c2:	4053      	eors	r3, r2
100028c4:	b2db      	uxtb	r3, r3
100028c6:	2b00      	cmp	r3, #0
100028c8:	d01b      	beq.n	10002902 <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
100028ca:	230e      	movs	r3, #14
100028cc:	18fa      	adds	r2, r7, r3
100028ce:	230d      	movs	r3, #13
100028d0:	18fb      	adds	r3, r7, r3
100028d2:	7812      	ldrb	r2, [r2, #0]
100028d4:	781b      	ldrb	r3, [r3, #0]
100028d6:	4313      	orrs	r3, r2
100028d8:	b2da      	uxtb	r2, r3
100028da:	230c      	movs	r3, #12
100028dc:	18fb      	adds	r3, r7, r3
100028de:	781b      	ldrb	r3, [r3, #0]
100028e0:	4313      	orrs	r3, r2
100028e2:	b2d9      	uxtb	r1, r3
100028e4:	230f      	movs	r3, #15
100028e6:	18fb      	adds	r3, r7, r3
100028e8:	220b      	movs	r2, #11
100028ea:	18ba      	adds	r2, r7, r2
100028ec:	7812      	ldrb	r2, [r2, #0]
100028ee:	430a      	orrs	r2, r1
100028f0:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
100028f2:	230f      	movs	r3, #15
100028f4:	18fb      	adds	r3, r7, r3
100028f6:	781b      	ldrb	r3, [r3, #0]
100028f8:	2b00      	cmp	r3, #0
100028fa:	d102      	bne.n	10002902 <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
100028fc:	687b      	ldr	r3, [r7, #4]
100028fe:	2201      	movs	r2, #1
10002900:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
10002902:	230f      	movs	r3, #15
10002904:	18fb      	adds	r3, r7, r3
10002906:	781b      	ldrb	r3, [r3, #0]
}
10002908:	1c18      	adds	r0, r3, #0
1000290a:	46bd      	mov	sp, r7
1000290c:	b004      	add	sp, #16
1000290e:	bd80      	pop	{r7, pc}

10002910 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10002910:	b590      	push	{r4, r7, lr}
10002912:	b085      	sub	sp, #20
10002914:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
10002916:	1c3b      	adds	r3, r7, #0
10002918:	4a05      	ldr	r2, [pc, #20]	; (10002930 <SystemCoreClockSetup+0x20>)
1000291a:	ca13      	ldmia	r2!, {r0, r1, r4}
1000291c:	c313      	stmia	r3!, {r0, r1, r4}
1000291e:	6812      	ldr	r2, [r2, #0]
10002920:	601a      	str	r2, [r3, #0]
  .osclp_mode = XMC_SCU_CLOCK_OSCLP_MODE_DISABLED

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
10002922:	1c3b      	adds	r3, r7, #0
10002924:	1c18      	adds	r0, r3, #0
10002926:	f7fe fd07 	bl	10001338 <XMC_SCU_CLOCK_Init>
}
1000292a:	46bd      	mov	sp, r7
1000292c:	b005      	add	sp, #20
1000292e:	bd90      	pop	{r4, r7, pc}
10002930:	10002f1c 	.word	0x10002f1c

10002934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002934:	b580      	push	{r7, lr}
10002936:	b082      	sub	sp, #8
10002938:	af00      	add	r7, sp, #0
1000293a:	1c02      	adds	r2, r0, #0
1000293c:	1dfb      	adds	r3, r7, #7
1000293e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002940:	1dfb      	adds	r3, r7, #7
10002942:	781b      	ldrb	r3, [r3, #0]
10002944:	2b7f      	cmp	r3, #127	; 0x7f
10002946:	d809      	bhi.n	1000295c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002948:	4b06      	ldr	r3, [pc, #24]	; (10002964 <__NVIC_EnableIRQ+0x30>)
1000294a:	1dfa      	adds	r2, r7, #7
1000294c:	7812      	ldrb	r2, [r2, #0]
1000294e:	1c11      	adds	r1, r2, #0
10002950:	221f      	movs	r2, #31
10002952:	400a      	ands	r2, r1
10002954:	2101      	movs	r1, #1
10002956:	4091      	lsls	r1, r2
10002958:	1c0a      	adds	r2, r1, #0
1000295a:	601a      	str	r2, [r3, #0]
  }
}
1000295c:	46bd      	mov	sp, r7
1000295e:	b002      	add	sp, #8
10002960:	bd80      	pop	{r7, pc}
10002962:	46c0      	nop			; (mov r8, r8)
10002964:	e000e100 	.word	0xe000e100

10002968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10002968:	b5b0      	push	{r4, r5, r7, lr}
1000296a:	b082      	sub	sp, #8
1000296c:	af00      	add	r7, sp, #0
1000296e:	1c02      	adds	r2, r0, #0
10002970:	6039      	str	r1, [r7, #0]
10002972:	1dfb      	adds	r3, r7, #7
10002974:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002976:	1dfb      	adds	r3, r7, #7
10002978:	781b      	ldrb	r3, [r3, #0]
1000297a:	2b7f      	cmp	r3, #127	; 0x7f
1000297c:	d827      	bhi.n	100029ce <__NVIC_SetPriority+0x66>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000297e:	4c2d      	ldr	r4, [pc, #180]	; (10002a34 <__NVIC_SetPriority+0xcc>)
10002980:	1dfb      	adds	r3, r7, #7
10002982:	781b      	ldrb	r3, [r3, #0]
10002984:	b25b      	sxtb	r3, r3
10002986:	089b      	lsrs	r3, r3, #2
10002988:	492a      	ldr	r1, [pc, #168]	; (10002a34 <__NVIC_SetPriority+0xcc>)
1000298a:	1dfa      	adds	r2, r7, #7
1000298c:	7812      	ldrb	r2, [r2, #0]
1000298e:	b252      	sxtb	r2, r2
10002990:	0892      	lsrs	r2, r2, #2
10002992:	32c0      	adds	r2, #192	; 0xc0
10002994:	0092      	lsls	r2, r2, #2
10002996:	5852      	ldr	r2, [r2, r1]
10002998:	1df9      	adds	r1, r7, #7
1000299a:	7809      	ldrb	r1, [r1, #0]
1000299c:	1c08      	adds	r0, r1, #0
1000299e:	2103      	movs	r1, #3
100029a0:	4001      	ands	r1, r0
100029a2:	00c9      	lsls	r1, r1, #3
100029a4:	1c08      	adds	r0, r1, #0
100029a6:	21ff      	movs	r1, #255	; 0xff
100029a8:	4081      	lsls	r1, r0
100029aa:	43c9      	mvns	r1, r1
100029ac:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100029ae:	683a      	ldr	r2, [r7, #0]
100029b0:	0192      	lsls	r2, r2, #6
100029b2:	20ff      	movs	r0, #255	; 0xff
100029b4:	4002      	ands	r2, r0
100029b6:	1df8      	adds	r0, r7, #7
100029b8:	7800      	ldrb	r0, [r0, #0]
100029ba:	1c05      	adds	r5, r0, #0
100029bc:	2003      	movs	r0, #3
100029be:	4028      	ands	r0, r5
100029c0:	00c0      	lsls	r0, r0, #3
100029c2:	4082      	lsls	r2, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100029c4:	430a      	orrs	r2, r1
100029c6:	33c0      	adds	r3, #192	; 0xc0
100029c8:	009b      	lsls	r3, r3, #2
100029ca:	511a      	str	r2, [r3, r4]
100029cc:	e02e      	b.n	10002a2c <__NVIC_SetPriority+0xc4>
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100029ce:	4c1a      	ldr	r4, [pc, #104]	; (10002a38 <__NVIC_SetPriority+0xd0>)
100029d0:	1dfb      	adds	r3, r7, #7
100029d2:	781b      	ldrb	r3, [r3, #0]
100029d4:	1c1a      	adds	r2, r3, #0
100029d6:	230f      	movs	r3, #15
100029d8:	4013      	ands	r3, r2
100029da:	3b08      	subs	r3, #8
100029dc:	0899      	lsrs	r1, r3, #2
100029de:	4a16      	ldr	r2, [pc, #88]	; (10002a38 <__NVIC_SetPriority+0xd0>)
100029e0:	1dfb      	adds	r3, r7, #7
100029e2:	781b      	ldrb	r3, [r3, #0]
100029e4:	1c18      	adds	r0, r3, #0
100029e6:	230f      	movs	r3, #15
100029e8:	4003      	ands	r3, r0
100029ea:	3b08      	subs	r3, #8
100029ec:	089b      	lsrs	r3, r3, #2
100029ee:	3306      	adds	r3, #6
100029f0:	009b      	lsls	r3, r3, #2
100029f2:	18d3      	adds	r3, r2, r3
100029f4:	685b      	ldr	r3, [r3, #4]
100029f6:	1dfa      	adds	r2, r7, #7
100029f8:	7812      	ldrb	r2, [r2, #0]
100029fa:	1c10      	adds	r0, r2, #0
100029fc:	2203      	movs	r2, #3
100029fe:	4002      	ands	r2, r0
10002a00:	00d2      	lsls	r2, r2, #3
10002a02:	1c10      	adds	r0, r2, #0
10002a04:	22ff      	movs	r2, #255	; 0xff
10002a06:	4082      	lsls	r2, r0
10002a08:	43d2      	mvns	r2, r2
10002a0a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10002a0c:	683b      	ldr	r3, [r7, #0]
10002a0e:	019b      	lsls	r3, r3, #6
10002a10:	20ff      	movs	r0, #255	; 0xff
10002a12:	4003      	ands	r3, r0
10002a14:	1df8      	adds	r0, r7, #7
10002a16:	7800      	ldrb	r0, [r0, #0]
10002a18:	1c05      	adds	r5, r0, #0
10002a1a:	2003      	movs	r0, #3
10002a1c:	4028      	ands	r0, r5
10002a1e:	00c0      	lsls	r0, r0, #3
10002a20:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002a22:	431a      	orrs	r2, r3
10002a24:	1d8b      	adds	r3, r1, #6
10002a26:	009b      	lsls	r3, r3, #2
10002a28:	18e3      	adds	r3, r4, r3
10002a2a:	605a      	str	r2, [r3, #4]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10002a2c:	46bd      	mov	sp, r7
10002a2e:	b002      	add	sp, #8
10002a30:	bdb0      	pop	{r4, r5, r7, pc}
10002a32:	46c0      	nop			; (mov r8, r8)
10002a34:	e000e100 	.word	0xe000e100
10002a38:	e000ed00 	.word	0xe000ed00

10002a3c <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
10002a3c:	b580      	push	{r7, lr}
10002a3e:	b082      	sub	sp, #8
10002a40:	af00      	add	r7, sp, #0
10002a42:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
10002a44:	687a      	ldr	r2, [r7, #4]
10002a46:	2381      	movs	r3, #129	; 0x81
10002a48:	009b      	lsls	r3, r3, #2
10002a4a:	58d3      	ldr	r3, [r2, r3]
10002a4c:	2280      	movs	r2, #128	; 0x80
10002a4e:	0092      	lsls	r2, r2, #2
10002a50:	431a      	orrs	r2, r3
10002a52:	1c11      	adds	r1, r2, #0
10002a54:	687a      	ldr	r2, [r7, #4]
10002a56:	2381      	movs	r3, #129	; 0x81
10002a58:	009b      	lsls	r3, r3, #2
10002a5a:	50d1      	str	r1, [r2, r3]
}
10002a5c:	46bd      	mov	sp, r7
10002a5e:	b002      	add	sp, #8
10002a60:	bd80      	pop	{r7, pc}
10002a62:	46c0      	nop			; (mov r8, r8)

10002a64 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
10002a64:	b580      	push	{r7, lr}
10002a66:	b084      	sub	sp, #16
10002a68:	af00      	add	r7, sp, #0
10002a6a:	60f8      	str	r0, [r7, #12]
10002a6c:	60b9      	str	r1, [r7, #8]
10002a6e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
10002a70:	68fb      	ldr	r3, [r7, #12]
10002a72:	68ba      	ldr	r2, [r7, #8]
10002a74:	3260      	adds	r2, #96	; 0x60
10002a76:	0092      	lsls	r2, r2, #2
10002a78:	58d2      	ldr	r2, [r2, r3]
10002a7a:	687b      	ldr	r3, [r7, #4]
10002a7c:	2101      	movs	r1, #1
10002a7e:	4099      	lsls	r1, r3
10002a80:	1c0b      	adds	r3, r1, #0
10002a82:	431a      	orrs	r2, r3
10002a84:	1c11      	adds	r1, r2, #0
10002a86:	68fb      	ldr	r3, [r7, #12]
10002a88:	68ba      	ldr	r2, [r7, #8]
10002a8a:	3260      	adds	r2, #96	; 0x60
10002a8c:	0092      	lsls	r2, r2, #2
10002a8e:	50d1      	str	r1, [r2, r3]
}
10002a90:	46bd      	mov	sp, r7
10002a92:	b004      	add	sp, #16
10002a94:	bd80      	pop	{r7, pc}
10002a96:	46c0      	nop			; (mov r8, r8)

10002a98 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
10002a98:	b580      	push	{r7, lr}
10002a9a:	b084      	sub	sp, #16
10002a9c:	af00      	add	r7, sp, #0
10002a9e:	60f8      	str	r0, [r7, #12]
10002aa0:	60b9      	str	r1, [r7, #8]
10002aa2:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
10002aa4:	687b      	ldr	r3, [r7, #4]
10002aa6:	6819      	ldr	r1, [r3, #0]
10002aa8:	68fb      	ldr	r3, [r7, #12]
10002aaa:	68ba      	ldr	r2, [r7, #8]
10002aac:	32a0      	adds	r2, #160	; 0xa0
10002aae:	0092      	lsls	r2, r2, #2
10002ab0:	50d1      	str	r1, [r2, r3]

}
10002ab2:	46bd      	mov	sp, r7
10002ab4:	b004      	add	sp, #16
10002ab6:	bd80      	pop	{r7, pc}

10002ab8 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
10002ab8:	b580      	push	{r7, lr}
10002aba:	b082      	sub	sp, #8
10002abc:	af00      	add	r7, sp, #0
10002abe:	6078      	str	r0, [r7, #4]
10002ac0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
10002ac2:	687b      	ldr	r3, [r7, #4]
10002ac4:	683a      	ldr	r2, [r7, #0]
10002ac6:	32c0      	adds	r2, #192	; 0xc0
10002ac8:	0092      	lsls	r2, r2, #2
10002aca:	58d3      	ldr	r3, [r2, r3]
10002acc:	b29b      	uxth	r3, r3
}
10002ace:	1c18      	adds	r0, r3, #0
10002ad0:	46bd      	mov	sp, r7
10002ad2:	b002      	add	sp, #8
10002ad4:	bd80      	pop	{r7, pc}
10002ad6:	46c0      	nop			; (mov r8, r8)

10002ad8 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
10002ad8:	b590      	push	{r4, r7, lr}
10002ada:	b085      	sub	sp, #20
10002adc:	af00      	add	r7, sp, #0
10002ade:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
10002ae0:	687b      	ldr	r3, [r7, #4]
10002ae2:	7e1b      	ldrb	r3, [r3, #24]
10002ae4:	2b02      	cmp	r3, #2
10002ae6:	d000      	beq.n	10002aea <ADC_MEASUREMENT_Init+0x12>
10002ae8:	e09b      	b.n	10002c22 <ADC_MEASUREMENT_Init+0x14a>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
10002aea:	687b      	ldr	r3, [r7, #4]
10002aec:	68db      	ldr	r3, [r3, #12]
10002aee:	220e      	movs	r2, #14
10002af0:	18bc      	adds	r4, r7, r2
10002af2:	1c18      	adds	r0, r3, #0
10002af4:	f7ff fe30 	bl	10002758 <GLOBAL_ADC_Init>
10002af8:	1c03      	adds	r3, r0, #0
10002afa:	7023      	strb	r3, [r4, #0]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
10002afc:	687b      	ldr	r3, [r7, #4]
10002afe:	68db      	ldr	r3, [r3, #12]
10002b00:	68da      	ldr	r2, [r3, #12]
10002b02:	687b      	ldr	r3, [r7, #4]
10002b04:	689b      	ldr	r3, [r3, #8]
10002b06:	681b      	ldr	r3, [r3, #0]
10002b08:	1c10      	adds	r0, r2, #0
10002b0a:	1c19      	adds	r1, r3, #0
10002b0c:	2200      	movs	r2, #0
10002b0e:	2300      	movs	r3, #0
10002b10:	f7fe fffe 	bl	10001b10 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
10002b14:	687b      	ldr	r3, [r7, #4]
10002b16:	68db      	ldr	r3, [r3, #12]
10002b18:	68da      	ldr	r2, [r3, #12]
10002b1a:	687b      	ldr	r3, [r7, #4]
10002b1c:	685b      	ldr	r3, [r3, #4]
10002b1e:	1c10      	adds	r0, r2, #0
10002b20:	1c19      	adds	r1, r3, #0
10002b22:	f7ff f969 	bl	10001df8 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
10002b26:	230f      	movs	r3, #15
10002b28:	18fb      	adds	r3, r7, r3
10002b2a:	2200      	movs	r2, #0
10002b2c:	701a      	strb	r2, [r3, #0]
10002b2e:	e034      	b.n	10002b9a <ADC_MEASUREMENT_Init+0xc2>
    {
      indexed = handle_ptr->array->channel_array[j];
10002b30:	687b      	ldr	r3, [r7, #4]
10002b32:	681b      	ldr	r3, [r3, #0]
10002b34:	220f      	movs	r2, #15
10002b36:	18ba      	adds	r2, r7, r2
10002b38:	7812      	ldrb	r2, [r2, #0]
10002b3a:	0092      	lsls	r2, r2, #2
10002b3c:	58d3      	ldr	r3, [r2, r3]
10002b3e:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
10002b40:	68bb      	ldr	r3, [r7, #8]
10002b42:	689a      	ldr	r2, [r3, #8]
10002b44:	68bb      	ldr	r3, [r7, #8]
10002b46:	7b5b      	ldrb	r3, [r3, #13]
10002b48:	1c19      	adds	r1, r3, #0
10002b4a:	68bb      	ldr	r3, [r7, #8]
10002b4c:	681b      	ldr	r3, [r3, #0]
10002b4e:	1c10      	adds	r0, r2, #0
10002b50:	1c1a      	adds	r2, r3, #0
10002b52:	f7ff f9f9 	bl	10001f48 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
10002b56:	68bb      	ldr	r3, [r7, #8]
10002b58:	689a      	ldr	r2, [r3, #8]
10002b5a:	68bb      	ldr	r3, [r7, #8]
10002b5c:	681b      	ldr	r3, [r3, #0]
10002b5e:	789b      	ldrb	r3, [r3, #2]
10002b60:	071b      	lsls	r3, r3, #28
10002b62:	0f1b      	lsrs	r3, r3, #28
10002b64:	b2db      	uxtb	r3, r3
10002b66:	1c19      	adds	r1, r3, #0
                                indexed->res_handle);
10002b68:	68bb      	ldr	r3, [r7, #8]
10002b6a:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
10002b6c:	1c10      	adds	r0, r2, #0
10002b6e:	1c1a      	adds	r2, r3, #0
10002b70:	f7ff ff92 	bl	10002a98 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
10002b74:	687b      	ldr	r3, [r7, #4]
10002b76:	68db      	ldr	r3, [r3, #12]
10002b78:	68da      	ldr	r2, [r3, #12]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
10002b7a:	68bb      	ldr	r3, [r7, #8]
10002b7c:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
10002b7e:	1c19      	adds	r1, r3, #0
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
10002b80:	68bb      	ldr	r3, [r7, #8]
10002b82:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
10002b84:	1c10      	adds	r0, r2, #0
10002b86:	1c1a      	adds	r2, r3, #0
10002b88:	f7ff ff6c 	bl	10002a64 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
10002b8c:	230f      	movs	r3, #15
10002b8e:	18fb      	adds	r3, r7, r3
10002b90:	781a      	ldrb	r2, [r3, #0]
10002b92:	230f      	movs	r3, #15
10002b94:	18fb      	adds	r3, r7, r3
10002b96:	3201      	adds	r2, #1
10002b98:	701a      	strb	r2, [r3, #0]
10002b9a:	230f      	movs	r3, #15
10002b9c:	18fb      	adds	r3, r7, r3
10002b9e:	781b      	ldrb	r3, [r3, #0]
10002ba0:	2b03      	cmp	r3, #3
10002ba2:	d9c5      	bls.n	10002b30 <ADC_MEASUREMENT_Init+0x58>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
10002ba4:	687b      	ldr	r3, [r7, #4]
10002ba6:	685b      	ldr	r3, [r3, #4]
10002ba8:	7a1b      	ldrb	r3, [r3, #8]
10002baa:	2208      	movs	r2, #8
10002bac:	4013      	ands	r3, r2
10002bae:	b2db      	uxtb	r3, r3
10002bb0:	2b00      	cmp	r3, #0
10002bb2:	d020      	beq.n	10002bf6 <ADC_MEASUREMENT_Init+0x11e>
10002bb4:	687b      	ldr	r3, [r7, #4]
10002bb6:	691b      	ldr	r3, [r3, #16]
10002bb8:	2b00      	cmp	r3, #0
10002bba:	d01c      	beq.n	10002bf6 <ADC_MEASUREMENT_Init+0x11e>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
10002bbc:	687b      	ldr	r3, [r7, #4]
10002bbe:	691b      	ldr	r3, [r3, #16]
10002bc0:	681b      	ldr	r3, [r3, #0]
10002bc2:	b2da      	uxtb	r2, r3
                        handle_ptr->req_src_intr_handle->priority);
10002bc4:	687b      	ldr	r3, [r7, #4]
10002bc6:	691b      	ldr	r3, [r3, #16]
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
10002bc8:	685b      	ldr	r3, [r3, #4]
10002bca:	b252      	sxtb	r2, r2
10002bcc:	1c10      	adds	r0, r2, #0
10002bce:	1c19      	adds	r1, r3, #0
10002bd0:	f7ff feca 	bl	10002968 <__NVIC_SetPriority>
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
10002bd4:	687b      	ldr	r3, [r7, #4]
10002bd6:	68db      	ldr	r3, [r3, #12]
10002bd8:	68da      	ldr	r2, [r3, #12]
10002bda:	687b      	ldr	r3, [r7, #4]
10002bdc:	7e5b      	ldrb	r3, [r3, #25]
10002bde:	1c10      	adds	r0, r2, #0
10002be0:	1c19      	adds	r1, r3, #0
10002be2:	f7fe fff5 	bl	10001bd0 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
10002be6:	687b      	ldr	r3, [r7, #4]
10002be8:	691b      	ldr	r3, [r3, #16]
10002bea:	681b      	ldr	r3, [r3, #0]
10002bec:	b2db      	uxtb	r3, r3
10002bee:	b25b      	sxtb	r3, r3
10002bf0:	1c18      	adds	r0, r3, #0
10002bf2:	f7ff fe9f 	bl	10002934 <__NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
10002bf6:	687b      	ldr	r3, [r7, #4]
10002bf8:	695b      	ldr	r3, [r3, #20]
10002bfa:	2b00      	cmp	r3, #0
10002bfc:	d002      	beq.n	10002c04 <ADC_MEASUREMENT_Init+0x12c>
    {
    	(handle_ptr->mux_config)();
10002bfe:	687b      	ldr	r3, [r7, #4]
10002c00:	695b      	ldr	r3, [r3, #20]
10002c02:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
10002c04:	687b      	ldr	r3, [r7, #4]
10002c06:	7e9b      	ldrb	r3, [r3, #26]
10002c08:	2b00      	cmp	r3, #0
10002c0a:	d005      	beq.n	10002c18 <ADC_MEASUREMENT_Init+0x140>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
10002c0c:	687b      	ldr	r3, [r7, #4]
10002c0e:	68db      	ldr	r3, [r3, #12]
10002c10:	68db      	ldr	r3, [r3, #12]
10002c12:	1c18      	adds	r0, r3, #0
10002c14:	f7ff ff12 	bl	10002a3c <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
10002c18:	687b      	ldr	r3, [r7, #4]
10002c1a:	220e      	movs	r2, #14
10002c1c:	18ba      	adds	r2, r7, r2
10002c1e:	7812      	ldrb	r2, [r2, #0]
10002c20:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
10002c22:	687b      	ldr	r3, [r7, #4]
10002c24:	7e1b      	ldrb	r3, [r3, #24]
}
10002c26:	1c18      	adds	r0, r3, #0
10002c28:	46bd      	mov	sp, r7
10002c2a:	b005      	add	sp, #20
10002c2c:	bd90      	pop	{r4, r7, pc}
10002c2e:	46c0      	nop			; (mov r8, r8)

10002c30 <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
10002c30:	b590      	push	{r4, r7, lr}
10002c32:	b085      	sub	sp, #20
10002c34:	af00      	add	r7, sp, #0
10002c36:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
10002c38:	687b      	ldr	r3, [r7, #4]
10002c3a:	689a      	ldr	r2, [r3, #8]
10002c3c:	687b      	ldr	r3, [r7, #4]
10002c3e:	681b      	ldr	r3, [r3, #0]
10002c40:	789b      	ldrb	r3, [r3, #2]
10002c42:	071b      	lsls	r3, r3, #28
10002c44:	0f1b      	lsrs	r3, r3, #28
10002c46:	b2db      	uxtb	r3, r3
10002c48:	210e      	movs	r1, #14
10002c4a:	187c      	adds	r4, r7, r1
10002c4c:	1c10      	adds	r0, r2, #0
10002c4e:	1c19      	adds	r1, r3, #0
10002c50:	f7ff ff32 	bl	10002ab8 <XMC_VADC_GROUP_GetResult>
10002c54:	1c03      	adds	r3, r0, #0
10002c56:	8023      	strh	r3, [r4, #0]

  return (result);
10002c58:	230e      	movs	r3, #14
10002c5a:	18fb      	adds	r3, r7, r3
10002c5c:	881b      	ldrh	r3, [r3, #0]
}
10002c5e:	1c18      	adds	r0, r3, #0
10002c60:	46bd      	mov	sp, r7
10002c62:	b005      	add	sp, #20
10002c64:	bd90      	pop	{r4, r7, pc}
10002c66:	46c0      	nop			; (mov r8, r8)

10002c68 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
10002c68:	b590      	push	{r4, r7, lr}
10002c6a:	b083      	sub	sp, #12
10002c6c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
10002c6e:	1dfb      	adds	r3, r7, #7
10002c70:	2200      	movs	r2, #0
10002c72:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
10002c74:	1dfc      	adds	r4, r7, #7
10002c76:	4b1c      	ldr	r3, [pc, #112]	; (10002ce8 <DAVE_Init+0x80>)
10002c78:	1c18      	adds	r0, r3, #0
10002c7a:	f7ff fe07 	bl	1000288c <CLOCK_XMC1_Init>
10002c7e:	1c03      	adds	r3, r0, #0
10002c80:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
10002c82:	1dfb      	adds	r3, r7, #7
10002c84:	781b      	ldrb	r3, [r3, #0]
10002c86:	2b00      	cmp	r3, #0
10002c88:	d106      	bne.n	10002c98 <DAVE_Init+0x30>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
10002c8a:	1dfc      	adds	r4, r7, #7
10002c8c:	4b17      	ldr	r3, [pc, #92]	; (10002cec <DAVE_Init+0x84>)
10002c8e:	1c18      	adds	r0, r3, #0
10002c90:	f7ff ff22 	bl	10002ad8 <ADC_MEASUREMENT_Init>
10002c94:	1c03      	adds	r3, r0, #0
10002c96:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002c98:	1dfb      	adds	r3, r7, #7
10002c9a:	781b      	ldrb	r3, [r3, #0]
10002c9c:	2b00      	cmp	r3, #0
10002c9e:	d106      	bne.n	10002cae <DAVE_Init+0x46>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
10002ca0:	1dfc      	adds	r4, r7, #7
10002ca2:	4b13      	ldr	r3, [pc, #76]	; (10002cf0 <DAVE_Init+0x88>)
10002ca4:	1c18      	adds	r0, r3, #0
10002ca6:	f7ff fb75 	bl	10002394 <TIMER_Init>
10002caa:	1c03      	adds	r3, r0, #0
10002cac:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002cae:	1dfb      	adds	r3, r7, #7
10002cb0:	781b      	ldrb	r3, [r3, #0]
10002cb2:	2b00      	cmp	r3, #0
10002cb4:	d106      	bne.n	10002cc4 <DAVE_Init+0x5c>
  {
	 /**  Initialization of INTERRUPT APP instance samplingInterrupt */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&samplingInterrupt); 
10002cb6:	1dfc      	adds	r4, r7, #7
10002cb8:	4b0e      	ldr	r3, [pc, #56]	; (10002cf4 <DAVE_Init+0x8c>)
10002cba:	1c18      	adds	r0, r3, #0
10002cbc:	f7ff fca2 	bl	10002604 <INTERRUPT_Init>
10002cc0:	1c03      	adds	r3, r0, #0
10002cc2:	7023      	strb	r3, [r4, #0]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10002cc4:	1dfb      	adds	r3, r7, #7
10002cc6:	781b      	ldrb	r3, [r3, #0]
10002cc8:	2b00      	cmp	r3, #0
10002cca:	d106      	bne.n	10002cda <DAVE_Init+0x72>
  {
	 /**  Initialization of DIGITAL_IO APP instance LEDpin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LEDpin); 
10002ccc:	1dfc      	adds	r4, r7, #7
10002cce:	4b0a      	ldr	r3, [pc, #40]	; (10002cf8 <DAVE_Init+0x90>)
10002cd0:	1c18      	adds	r0, r3, #0
10002cd2:	f7ff fdaf 	bl	10002834 <DIGITAL_IO_Init>
10002cd6:	1c03      	adds	r3, r0, #0
10002cd8:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
10002cda:	1dfb      	adds	r3, r7, #7
10002cdc:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
10002cde:	1c18      	adds	r0, r3, #0
10002ce0:	46bd      	mov	sp, r7
10002ce2:	b003      	add	sp, #12
10002ce4:	bd90      	pop	{r4, r7, pc}
10002ce6:	46c0      	nop			; (mov r8, r8)
10002ce8:	20000678 	.word	0x20000678
10002cec:	20000654 	.word	0x20000654
10002cf0:	20000558 	.word	0x20000558
10002cf4:	10002ec4 	.word	0x10002ec4
10002cf8:	10002f0c 	.word	0x10002f0c

10002cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10002cfc:	b580      	push	{r7, lr}
10002cfe:	b082      	sub	sp, #8
10002d00:	af00      	add	r7, sp, #0
10002d02:	1c02      	adds	r2, r0, #0
10002d04:	1dfb      	adds	r3, r7, #7
10002d06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10002d08:	1dfb      	adds	r3, r7, #7
10002d0a:	781b      	ldrb	r3, [r3, #0]
10002d0c:	2b7f      	cmp	r3, #127	; 0x7f
10002d0e:	d809      	bhi.n	10002d24 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002d10:	4b06      	ldr	r3, [pc, #24]	; (10002d2c <__NVIC_EnableIRQ+0x30>)
10002d12:	1dfa      	adds	r2, r7, #7
10002d14:	7812      	ldrb	r2, [r2, #0]
10002d16:	1c11      	adds	r1, r2, #0
10002d18:	221f      	movs	r2, #31
10002d1a:	400a      	ands	r2, r1
10002d1c:	2101      	movs	r1, #1
10002d1e:	4091      	lsls	r1, r2
10002d20:	1c0a      	adds	r2, r1, #0
10002d22:	601a      	str	r2, [r3, #0]
  }
}
10002d24:	46bd      	mov	sp, r7
10002d26:	b002      	add	sp, #8
10002d28:	bd80      	pop	{r7, pc}
10002d2a:	46c0      	nop			; (mov r8, r8)
10002d2c:	e000e100 	.word	0xe000e100

10002d30 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
10002d30:	b580      	push	{r7, lr}
10002d32:	b082      	sub	sp, #8
10002d34:	af00      	add	r7, sp, #0
10002d36:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
10002d38:	687b      	ldr	r3, [r7, #4]
10002d3a:	789b      	ldrb	r3, [r3, #2]
10002d3c:	b25b      	sxtb	r3, r3
10002d3e:	1c18      	adds	r0, r3, #0
10002d40:	f7ff ffdc 	bl	10002cfc <__NVIC_EnableIRQ>
}
10002d44:	46bd      	mov	sp, r7
10002d46:	b002      	add	sp, #8
10002d48:	bd80      	pop	{r7, pc}
10002d4a:	46c0      	nop			; (mov r8, r8)

10002d4c <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
10002d4c:	b580      	push	{r7, lr}
10002d4e:	b082      	sub	sp, #8
10002d50:	af00      	add	r7, sp, #0
10002d52:	6078      	str	r0, [r7, #4]
10002d54:	1c0a      	adds	r2, r1, #0
10002d56:	1cfb      	adds	r3, r7, #3
10002d58:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
10002d5a:	1cfb      	adds	r3, r7, #3
10002d5c:	781b      	ldrb	r3, [r3, #0]
10002d5e:	4a03      	ldr	r2, [pc, #12]	; (10002d6c <XMC_GPIO_ToggleOutput+0x20>)
10002d60:	409a      	lsls	r2, r3
10002d62:	687b      	ldr	r3, [r7, #4]
10002d64:	605a      	str	r2, [r3, #4]
}
10002d66:	46bd      	mov	sp, r7
10002d68:	b002      	add	sp, #8
10002d6a:	bd80      	pop	{r7, pc}
10002d6c:	00010001 	.word	0x00010001

10002d70 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
10002d70:	b580      	push	{r7, lr}
10002d72:	b082      	sub	sp, #8
10002d74:	af00      	add	r7, sp, #0
10002d76:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
10002d78:	687b      	ldr	r3, [r7, #4]
10002d7a:	681a      	ldr	r2, [r3, #0]
10002d7c:	687b      	ldr	r3, [r7, #4]
10002d7e:	7b1b      	ldrb	r3, [r3, #12]
10002d80:	1c10      	adds	r0, r2, #0
10002d82:	1c19      	adds	r1, r3, #0
10002d84:	f7ff ffe2 	bl	10002d4c <XMC_GPIO_ToggleOutput>
}
10002d88:	46bd      	mov	sp, r7
10002d8a:	b002      	add	sp, #8
10002d8c:	bd80      	pop	{r7, pc}
10002d8e:	46c0      	nop			; (mov r8, r8)

10002d90 <IRQ0_Handler>:
struct MyoHand handSignals;
struct FourTuple sensorReadings;

//This samples the ADCs connected for the EMG sensors
void SampleEMGs(void)
{
10002d90:	b580      	push	{r7, lr}
10002d92:	af00      	add	r7, sp, #0
	//Acknowledge interrupt and clear it
	TIMER_ClearEvent(&TIMER_0);
10002d94:	4b17      	ldr	r3, [pc, #92]	; (10002df4 <IRQ0_Handler+0x64>)
10002d96:	1c18      	adds	r0, r3, #0
10002d98:	f7ff fb20 	bl	100023dc <TIMER_ClearEvent>
	DIGITAL_IO_ToggleOutput(&LEDpin);
10002d9c:	4b16      	ldr	r3, [pc, #88]	; (10002df8 <IRQ0_Handler+0x68>)
10002d9e:	1c18      	adds	r0, r3, #0
10002da0:	f7ff ffe6 	bl	10002d70 <DIGITAL_IO_ToggleOutput>
	sensorReadings.thumb = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_thumbChannel);
10002da4:	4b15      	ldr	r3, [pc, #84]	; (10002dfc <IRQ0_Handler+0x6c>)
10002da6:	1c18      	adds	r0, r3, #0
10002da8:	f7ff ff42 	bl	10002c30 <ADC_MEASUREMENT_GetResult>
10002dac:	1c03      	adds	r3, r0, #0
10002dae:	1c1a      	adds	r2, r3, #0
10002db0:	4b13      	ldr	r3, [pc, #76]	; (10002e00 <IRQ0_Handler+0x70>)
10002db2:	601a      	str	r2, [r3, #0]
	sensorReadings.index = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_indexChannel);
10002db4:	4b13      	ldr	r3, [pc, #76]	; (10002e04 <IRQ0_Handler+0x74>)
10002db6:	1c18      	adds	r0, r3, #0
10002db8:	f7ff ff3a 	bl	10002c30 <ADC_MEASUREMENT_GetResult>
10002dbc:	1c03      	adds	r3, r0, #0
10002dbe:	1c1a      	adds	r2, r3, #0
10002dc0:	4b0f      	ldr	r3, [pc, #60]	; (10002e00 <IRQ0_Handler+0x70>)
10002dc2:	605a      	str	r2, [r3, #4]
	sensorReadings.middle = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_middleChannel);
10002dc4:	4b10      	ldr	r3, [pc, #64]	; (10002e08 <IRQ0_Handler+0x78>)
10002dc6:	1c18      	adds	r0, r3, #0
10002dc8:	f7ff ff32 	bl	10002c30 <ADC_MEASUREMENT_GetResult>
10002dcc:	1c03      	adds	r3, r0, #0
10002dce:	1c1a      	adds	r2, r3, #0
10002dd0:	4b0b      	ldr	r3, [pc, #44]	; (10002e00 <IRQ0_Handler+0x70>)
10002dd2:	609a      	str	r2, [r3, #8]
	sensorReadings.rp = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_rpChannel);
10002dd4:	4b0d      	ldr	r3, [pc, #52]	; (10002e0c <IRQ0_Handler+0x7c>)
10002dd6:	1c18      	adds	r0, r3, #0
10002dd8:	f7ff ff2a 	bl	10002c30 <ADC_MEASUREMENT_GetResult>
10002ddc:	1c03      	adds	r3, r0, #0
10002dde:	1c1a      	adds	r2, r3, #0
10002de0:	4b07      	ldr	r3, [pc, #28]	; (10002e00 <IRQ0_Handler+0x70>)
10002de2:	60da      	str	r2, [r3, #12]
	MyoDataPush(&handSignals.sensorBuffer,&sensorReadings);
10002de4:	4a0a      	ldr	r2, [pc, #40]	; (10002e10 <IRQ0_Handler+0x80>)
10002de6:	4b06      	ldr	r3, [pc, #24]	; (10002e00 <IRQ0_Handler+0x70>)
10002de8:	1c10      	adds	r0, r2, #0
10002dea:	1c19      	adds	r1, r3, #0
10002dec:	f7ff f964 	bl	100020b8 <MyoDataPush>
}
10002df0:	46bd      	mov	sp, r7
10002df2:	bd80      	pop	{r7, pc}
10002df4:	20000558 	.word	0x20000558
10002df8:	10002f0c 	.word	0x10002f0c
10002dfc:	200005d4 	.word	0x200005d4
10002e00:	20000d18 	.word	0x20000d18
10002e04:	200005f4 	.word	0x200005f4
10002e08:	20000614 	.word	0x20000614
10002e0c:	20000634 	.word	0x20000634
10002e10:	2000068c 	.word	0x2000068c

10002e14 <main>:


int main(void)
{
10002e14:	b590      	push	{r4, r7, lr}
10002e16:	b083      	sub	sp, #12
10002e18:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
10002e1a:	1dfc      	adds	r4, r7, #7
10002e1c:	f7ff ff24 	bl	10002c68 <DAVE_Init>
10002e20:	1c03      	adds	r3, r0, #0
10002e22:	7023      	strb	r3, [r4, #0]

  if(status != DAVE_STATUS_SUCCESS)
10002e24:	1dfb      	adds	r3, r7, #7
10002e26:	781b      	ldrb	r3, [r3, #0]
10002e28:	2b00      	cmp	r3, #0
10002e2a:	d000      	beq.n	10002e2e <main+0x1a>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
10002e2c:	e7fe      	b.n	10002e2c <main+0x18>
  }


  /* 		INITIALIZATION OF VARIOUS COMPONENTS		*/
  MyoHandINIT(&handSignals);
10002e2e:	4b04      	ldr	r3, [pc, #16]	; (10002e40 <main+0x2c>)
10002e30:	1c18      	adds	r0, r3, #0
10002e32:	f7ff f9f3 	bl	1000221c <MyoHandINIT>

  //enable sampling
  INTERRUPT_Enable(&samplingInterrupt);
10002e36:	4b03      	ldr	r3, [pc, #12]	; (10002e44 <main+0x30>)
10002e38:	1c18      	adds	r0, r3, #0
10002e3a:	f7ff ff79 	bl	10002d30 <INTERRUPT_Enable>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {

  }
10002e3e:	e7fe      	b.n	10002e3e <main+0x2a>
10002e40:	2000068c 	.word	0x2000068c
10002e44:	10002ec4 	.word	0x10002ec4

10002e48 <__libc_init_array>:
10002e48:	4b0e      	ldr	r3, [pc, #56]	; (10002e84 <__libc_init_array+0x3c>)
10002e4a:	b570      	push	{r4, r5, r6, lr}
10002e4c:	2500      	movs	r5, #0
10002e4e:	1c1e      	adds	r6, r3, #0
10002e50:	4c0d      	ldr	r4, [pc, #52]	; (10002e88 <__libc_init_array+0x40>)
10002e52:	1ae4      	subs	r4, r4, r3
10002e54:	10a4      	asrs	r4, r4, #2
10002e56:	42a5      	cmp	r5, r4
10002e58:	d004      	beq.n	10002e64 <__libc_init_array+0x1c>
10002e5a:	00ab      	lsls	r3, r5, #2
10002e5c:	58f3      	ldr	r3, [r6, r3]
10002e5e:	4798      	blx	r3
10002e60:	3501      	adds	r5, #1
10002e62:	e7f8      	b.n	10002e56 <__libc_init_array+0xe>
10002e64:	f7ff f8de 	bl	10002024 <_init>
10002e68:	4b08      	ldr	r3, [pc, #32]	; (10002e8c <__libc_init_array+0x44>)
10002e6a:	2500      	movs	r5, #0
10002e6c:	1c1e      	adds	r6, r3, #0
10002e6e:	4c08      	ldr	r4, [pc, #32]	; (10002e90 <__libc_init_array+0x48>)
10002e70:	1ae4      	subs	r4, r4, r3
10002e72:	10a4      	asrs	r4, r4, #2
10002e74:	42a5      	cmp	r5, r4
10002e76:	d004      	beq.n	10002e82 <__libc_init_array+0x3a>
10002e78:	00ab      	lsls	r3, r5, #2
10002e7a:	58f3      	ldr	r3, [r6, r3]
10002e7c:	4798      	blx	r3
10002e7e:	3501      	adds	r5, #1
10002e80:	e7f8      	b.n	10002e74 <__libc_init_array+0x2c>
10002e82:	bd70      	pop	{r4, r5, r6, pc}
10002e84:	20000670 	.word	0x20000670
10002e88:	20000670 	.word	0x20000670
10002e8c:	20000670 	.word	0x20000670
10002e90:	20000670 	.word	0x20000670
10002e94:	10001806 	.word	0x10001806
10002e98:	10001806 	.word	0x10001806
10002e9c:	10001810 	.word	0x10001810
10002ea0:	10001810 	.word	0x10001810
10002ea4:	10001832 	.word	0x10001832
10002ea8:	10001832 	.word	0x10001832
10002eac:	10001832 	.word	0x10001832
10002eb0:	10001832 	.word	0x10001832
10002eb4:	1000181a 	.word	0x1000181a
10002eb8:	10001826 	.word	0x10001826

10002ebc <g_xmc_vadc_group_array>:
10002ebc:	48030400 48030800                       ...H...H

10002ec4 <samplingInterrupt>:
10002ec4:	03000002 00000000                       ........

10002ecc <group_init_handle0>:
	...

10002ee0 <group_init_handle1>:
	...

10002ef4 <global_config>:
10002ef4:	00000000 00000001 00000000 00000000     ................
	...

10002f0c <LEDpin>:
10002f0c:	40040400 00000080 00010000 00000003     ...@............
10002f1c:	00010000 03300000 00010000 00000000     ......0.........

10002f2c <global_iclass_config>:
10002f2c:	00000001                                ....

10002f30 <backgnd_config>:
10002f30:	00000005 00000000 00000010              ............

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veener>:
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <IRQ31_Veener+0x4>)
2000000e:	4700      	bx	r0
	...

2000002c <SVC_Veener>:
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <IRQ31_Veener+0x8>)
2000002e:	4700      	bx	r0
	...

20000038 <PendSV_Veener>:
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <IRQ31_Veener+0xc>)
2000003a:	4700      	bx	r0

2000003c <SysTick_Veener>:
	Insert_InterruptVeener SysTick
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <IRQ31_Veener+0x10>)
2000003e:	4700      	bx	r0

20000040 <IRQ0_Veener>:
	
	Insert_InterruptVeener IRQ0	
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <IRQ31_Veener+0x14>)
20000042:	4700      	bx	r0

20000044 <IRQ1_Veener>:
	Insert_InterruptVeener IRQ1	
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <IRQ31_Veener+0x18>)
20000046:	4700      	bx	r0

20000048 <IRQ2_Veener>:
	Insert_InterruptVeener IRQ2	
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <IRQ31_Veener+0x1c>)
2000004a:	4700      	bx	r0

2000004c <IRQ3_Veener>:
	Insert_InterruptVeener IRQ3	
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <IRQ31_Veener+0x20>)
2000004e:	4700      	bx	r0

20000050 <IRQ4_Veener>:
	Insert_InterruptVeener IRQ4	
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <IRQ31_Veener+0x24>)
20000052:	4700      	bx	r0

20000054 <IRQ5_Veener>:
	Insert_InterruptVeener IRQ5	
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <IRQ31_Veener+0x28>)
20000056:	4700      	bx	r0

20000058 <IRQ6_Veener>:
	Insert_InterruptVeener IRQ6	
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <IRQ31_Veener+0x2c>)
2000005a:	4700      	bx	r0

2000005c <IRQ7_Veener>:
	Insert_InterruptVeener IRQ7	
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <IRQ31_Veener+0x30>)
2000005e:	4700      	bx	r0

20000060 <IRQ8_Veener>:
	Insert_InterruptVeener IRQ8	
20000060:	4823      	ldr	r0, [pc, #140]	; (200000f0 <IRQ31_Veener+0x34>)
20000062:	4700      	bx	r0

20000064 <IRQ9_Veener>:
	Insert_InterruptVeener IRQ9	
20000064:	4823      	ldr	r0, [pc, #140]	; (200000f4 <IRQ31_Veener+0x38>)
20000066:	4700      	bx	r0

20000068 <IRQ10_Veener>:
	Insert_InterruptVeener IRQ10	
20000068:	4823      	ldr	r0, [pc, #140]	; (200000f8 <IRQ31_Veener+0x3c>)
2000006a:	4700      	bx	r0

2000006c <IRQ11_Veener>:
	Insert_InterruptVeener IRQ11	
2000006c:	4823      	ldr	r0, [pc, #140]	; (200000fc <IRQ31_Veener+0x40>)
2000006e:	4700      	bx	r0

20000070 <IRQ12_Veener>:
	Insert_InterruptVeener IRQ12	
20000070:	4823      	ldr	r0, [pc, #140]	; (20000100 <IRQ31_Veener+0x44>)
20000072:	4700      	bx	r0

20000074 <IRQ13_Veener>:
	Insert_InterruptVeener IRQ13	
20000074:	4823      	ldr	r0, [pc, #140]	; (20000104 <IRQ31_Veener+0x48>)
20000076:	4700      	bx	r0

20000078 <IRQ14_Veener>:
	Insert_InterruptVeener IRQ14	
20000078:	4823      	ldr	r0, [pc, #140]	; (20000108 <IRQ31_Veener+0x4c>)
2000007a:	4700      	bx	r0

2000007c <IRQ15_Veener>:
	Insert_InterruptVeener IRQ15	
2000007c:	4823      	ldr	r0, [pc, #140]	; (2000010c <IRQ31_Veener+0x50>)
2000007e:	4700      	bx	r0

20000080 <IRQ16_Veener>:
	Insert_InterruptVeener IRQ16	
20000080:	4823      	ldr	r0, [pc, #140]	; (20000110 <IRQ31_Veener+0x54>)
20000082:	4700      	bx	r0

20000084 <IRQ17_Veener>:
	Insert_InterruptVeener IRQ17	
20000084:	4823      	ldr	r0, [pc, #140]	; (20000114 <IRQ31_Veener+0x58>)
20000086:	4700      	bx	r0

20000088 <IRQ18_Veener>:
	Insert_InterruptVeener IRQ18	
20000088:	4823      	ldr	r0, [pc, #140]	; (20000118 <IRQ31_Veener+0x5c>)
2000008a:	4700      	bx	r0

2000008c <IRQ19_Veener>:
	Insert_InterruptVeener IRQ19	
2000008c:	4823      	ldr	r0, [pc, #140]	; (2000011c <IRQ31_Veener+0x60>)
2000008e:	4700      	bx	r0

20000090 <IRQ20_Veener>:
	Insert_InterruptVeener IRQ20
20000090:	4823      	ldr	r0, [pc, #140]	; (20000120 <IRQ31_Veener+0x64>)
20000092:	4700      	bx	r0

20000094 <IRQ21_Veener>:
	Insert_InterruptVeener IRQ21
20000094:	4823      	ldr	r0, [pc, #140]	; (20000124 <IRQ31_Veener+0x68>)
20000096:	4700      	bx	r0

20000098 <IRQ22_Veener>:
	Insert_InterruptVeener IRQ22	
20000098:	4823      	ldr	r0, [pc, #140]	; (20000128 <IRQ31_Veener+0x6c>)
2000009a:	4700      	bx	r0

2000009c <IRQ23_Veener>:
	Insert_InterruptVeener IRQ23	
2000009c:	4823      	ldr	r0, [pc, #140]	; (2000012c <IRQ31_Veener+0x70>)
2000009e:	4700      	bx	r0

200000a0 <IRQ24_Veener>:
	Insert_InterruptVeener IRQ24	
200000a0:	4823      	ldr	r0, [pc, #140]	; (20000130 <IRQ31_Veener+0x74>)
200000a2:	4700      	bx	r0

200000a4 <IRQ25_Veener>:
	Insert_InterruptVeener IRQ25	
200000a4:	4823      	ldr	r0, [pc, #140]	; (20000134 <IRQ31_Veener+0x78>)
200000a6:	4700      	bx	r0

200000a8 <IRQ26_Veener>:
	Insert_InterruptVeener IRQ26	
200000a8:	4823      	ldr	r0, [pc, #140]	; (20000138 <IRQ31_Veener+0x7c>)
200000aa:	4700      	bx	r0

200000ac <IRQ27_Veener>:
	Insert_InterruptVeener IRQ27	
200000ac:	4823      	ldr	r0, [pc, #140]	; (2000013c <IRQ31_Veener+0x80>)
200000ae:	4700      	bx	r0

200000b0 <IRQ28_Veener>:
	Insert_InterruptVeener IRQ28	
200000b0:	4823      	ldr	r0, [pc, #140]	; (20000140 <IRQ31_Veener+0x84>)
200000b2:	4700      	bx	r0

200000b4 <IRQ29_Veener>:
	Insert_InterruptVeener IRQ29	
200000b4:	4823      	ldr	r0, [pc, #140]	; (20000144 <IRQ31_Veener+0x88>)
200000b6:	4700      	bx	r0

200000b8 <IRQ30_Veener>:
	Insert_InterruptVeener IRQ30	
200000b8:	4823      	ldr	r0, [pc, #140]	; (20000148 <IRQ31_Veener+0x8c>)
200000ba:	4700      	bx	r0

200000bc <IRQ31_Veener>:
	Insert_InterruptVeener IRQ31	
200000bc:	4823      	ldr	r0, [pc, #140]	; (2000014c <IRQ31_Veener+0x90>)
200000be:	4700      	bx	r0
/* ==================VENEERS VENEERS VENEERS VENEERS VENEERS=============== */
    .section ".XmcVeneerCode","ax",%progbits
    
    .align 1
    
	Insert_InterruptVeener HardFault
200000c0:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
    .long 0
    .long 0
    .long 0
	Insert_InterruptVeener SVC
200000c4:	1000109d 	.word	0x1000109d
    .long 0
    .long 0
	Insert_InterruptVeener PendSV	
200000c8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener SysTick
200000cc:	1000109d 	.word	0x1000109d
	
	Insert_InterruptVeener IRQ0	
200000d0:	10002d91 	.word	0x10002d91
	Insert_InterruptVeener IRQ1	
200000d4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ2	
200000d8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ3	
200000dc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ4	
200000e0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ5	
200000e4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ6	
200000e8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ7	
200000ec:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ8	
200000f0:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ9	
200000f4:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ10	
200000f8:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ11	
200000fc:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ12	
20000100:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ13	
20000104:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ14	
20000108:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ15	
2000010c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ16	
20000110:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ17	
20000114:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ18	
20000118:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ19	
2000011c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ20
20000120:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ21
20000124:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ22	
20000128:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ23	
2000012c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ24	
20000130:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ25	
20000134:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ26	
20000138:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ27	
2000013c:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ28	
20000140:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ29	
20000144:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ30	
20000148:	1000109d 	.word	0x1000109d
	Insert_InterruptVeener IRQ31	
2000014c:	1000109d 	.word	0x1000109d
